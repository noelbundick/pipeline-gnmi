// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rsvp_mgmt_interface_detail.proto

package cisco_ios_xr_ip_rsvp_oper_rsvp_interface_detaileds_interface_detailed

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Detail Form of RSVP interface Info
type RsvpMgmtInterfaceDetail_KEYS struct {
	InterfaceName        string   `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName" json:"interface_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RsvpMgmtInterfaceDetail_KEYS) Reset()         { *m = RsvpMgmtInterfaceDetail_KEYS{} }
func (m *RsvpMgmtInterfaceDetail_KEYS) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtInterfaceDetail_KEYS) ProtoMessage()    {}
func (*RsvpMgmtInterfaceDetail_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_rsvp_mgmt_interface_detail_5de3130854ab59fa, []int{0}
}
func (m *RsvpMgmtInterfaceDetail_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtInterfaceDetail_KEYS.Unmarshal(m, b)
}
func (m *RsvpMgmtInterfaceDetail_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtInterfaceDetail_KEYS.Marshal(b, m, deterministic)
}
func (dst *RsvpMgmtInterfaceDetail_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtInterfaceDetail_KEYS.Merge(dst, src)
}
func (m *RsvpMgmtInterfaceDetail_KEYS) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtInterfaceDetail_KEYS.Size(m)
}
func (m *RsvpMgmtInterfaceDetail_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtInterfaceDetail_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtInterfaceDetail_KEYS proto.InternalMessageInfo

func (m *RsvpMgmtInterfaceDetail_KEYS) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

type RsvpMgmtInterfaceDetail struct {
	// Interface Name
	InterfaceName string `protobuf:"bytes,50,opt,name=interface_name,json=interfaceName" json:"interface_name,omitempty"`
	// Interface bandwidth information
	BandwidthInformation *RsvpMgmtDsteModeInterfaceBw `protobuf:"bytes,51,opt,name=bandwidth_information,json=bandwidthInformation" json:"bandwidth_information,omitempty"`
	// Interface flags
	Flags *RsvpMgmtInterfaceFlags `protobuf:"bytes,52,opt,name=flags" json:"flags,omitempty"`
	// IP TOS (precedence/DSCP) to use in signalling messages
	SignallingIpTos uint32 `protobuf:"varint,53,opt,name=signalling_ip_tos,json=signallingIpTos" json:"signalling_ip_tos,omitempty"`
	// Integrity send password
	IntegritySendPassword string `protobuf:"bytes,54,opt,name=integrity_send_password,json=integritySendPassword" json:"integrity_send_password,omitempty"`
	// Integrity receive password
	IntegrityReceivePassword string `protobuf:"bytes,55,opt,name=integrity_receive_password,json=integrityReceivePassword" json:"integrity_receive_password,omitempty"`
	// Integrity recv password optional
	IntegrityReceivePasswordOptional uint32 `protobuf:"varint,56,opt,name=integrity_receive_password_optional,json=integrityReceivePasswordOptional" json:"integrity_receive_password_optional,omitempty"`
	// Refresh timer state
	RefreshTimerState string `protobuf:"bytes,57,opt,name=refresh_timer_state,json=refreshTimerState" json:"refresh_timer_state,omitempty"`
	// Summary refresh timer state
	SummaryRefreshTimerState string `protobuf:"bytes,58,opt,name=summary_refresh_timer_state,json=summaryRefreshTimerState" json:"summary_refresh_timer_state,omitempty"`
	// Refresh interval in msecs
	RefreshInterval int32 `protobuf:"zigzag32,59,opt,name=refresh_interval,json=refreshInterval" json:"refresh_interval,omitempty"`
	// Out-of-band Refresh interval in msecs
	OutOfBandRefreshInterval uint32 `protobuf:"varint,60,opt,name=out_of_band_refresh_interval,json=outOfBandRefreshInterval" json:"out_of_band_refresh_interval,omitempty"`
	// Max size in bytes of a single SRefresh
	SummaryRefreshMaxSize uint32 `protobuf:"varint,61,opt,name=summary_refresh_max_size,json=summaryRefreshMaxSize" json:"summary_refresh_max_size,omitempty"`
	// Max size in bytes of a single Bundle message
	BundleMessageMaxSize uint32 `protobuf:"varint,62,opt,name=bundle_message_max_size,json=bundleMessageMaxSize" json:"bundle_message_max_size,omitempty"`
	// Expiry timer state
	ExpiryTimerState string `protobuf:"bytes,63,opt,name=expiry_timer_state,json=expiryTimerState" json:"expiry_timer_state,omitempty"`
	// Number of states for expiry check
	ExpiryStates int32 `protobuf:"zigzag32,64,opt,name=expiry_states,json=expiryStates" json:"expiry_states,omitempty"`
	// Expiry interval in msecs
	ExpiryInterval int32 `protobuf:"zigzag32,65,opt,name=expiry_interval,json=expiryInterval" json:"expiry_interval,omitempty"`
	// Number of missed messages tolerated
	ExpiryDropsTolerated int32 `protobuf:"zigzag32,66,opt,name=expiry_drops_tolerated,json=expiryDropsTolerated" json:"expiry_drops_tolerated,omitempty"`
	// Number of out-of-band missed messages tolerated
	OutOfBandExpiryDropsTolerated uint32 `protobuf:"varint,67,opt,name=out_of_band_expiry_drops_tolerated,json=outOfBandExpiryDropsTolerated" json:"out_of_band_expiry_drops_tolerated,omitempty"`
	// ACK hold time in msec
	AckHoldTime uint32 `protobuf:"varint,68,opt,name=ack_hold_time,json=ackHoldTime" json:"ack_hold_time,omitempty"`
	// Max size for ACK message
	AckMaxSize uint32 `protobuf:"varint,69,opt,name=ack_max_size,json=ackMaxSize" json:"ack_max_size,omitempty"`
	// Retransmit time in msec
	RetransmitTime uint32 `protobuf:"varint,70,opt,name=retransmit_time,json=retransmitTime" json:"retransmit_time,omitempty"`
	// Pacing interval in msecs
	PacingInterval uint32 `protobuf:"varint,71,opt,name=pacing_interval,json=pacingInterval" json:"pacing_interval,omitempty"`
	// No. of messages per interval
	PacingMessageRate uint32 `protobuf:"varint,72,opt,name=pacing_message_rate,json=pacingMessageRate" json:"pacing_message_rate,omitempty"`
	// State of pacing timer
	PacingTimerState string `protobuf:"bytes,73,opt,name=pacing_timer_state,json=pacingTimerState" json:"pacing_timer_state,omitempty"`
	// Number of messages deferred for pacing
	PacingMessages int32 `protobuf:"zigzag32,74,opt,name=pacing_messages,json=pacingMessages" json:"pacing_messages,omitempty"`
	// Neighbor array
	NeighborArray        []*RsvpMgmtNbor `protobuf:"bytes,75,rep,name=neighbor_array,json=neighborArray" json:"neighbor_array,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *RsvpMgmtInterfaceDetail) Reset()         { *m = RsvpMgmtInterfaceDetail{} }
func (m *RsvpMgmtInterfaceDetail) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtInterfaceDetail) ProtoMessage()    {}
func (*RsvpMgmtInterfaceDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_rsvp_mgmt_interface_detail_5de3130854ab59fa, []int{1}
}
func (m *RsvpMgmtInterfaceDetail) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtInterfaceDetail.Unmarshal(m, b)
}
func (m *RsvpMgmtInterfaceDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtInterfaceDetail.Marshal(b, m, deterministic)
}
func (dst *RsvpMgmtInterfaceDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtInterfaceDetail.Merge(dst, src)
}
func (m *RsvpMgmtInterfaceDetail) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtInterfaceDetail.Size(m)
}
func (m *RsvpMgmtInterfaceDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtInterfaceDetail.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtInterfaceDetail proto.InternalMessageInfo

func (m *RsvpMgmtInterfaceDetail) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

func (m *RsvpMgmtInterfaceDetail) GetBandwidthInformation() *RsvpMgmtDsteModeInterfaceBw {
	if m != nil {
		return m.BandwidthInformation
	}
	return nil
}

func (m *RsvpMgmtInterfaceDetail) GetFlags() *RsvpMgmtInterfaceFlags {
	if m != nil {
		return m.Flags
	}
	return nil
}

func (m *RsvpMgmtInterfaceDetail) GetSignallingIpTos() uint32 {
	if m != nil {
		return m.SignallingIpTos
	}
	return 0
}

func (m *RsvpMgmtInterfaceDetail) GetIntegritySendPassword() string {
	if m != nil {
		return m.IntegritySendPassword
	}
	return ""
}

func (m *RsvpMgmtInterfaceDetail) GetIntegrityReceivePassword() string {
	if m != nil {
		return m.IntegrityReceivePassword
	}
	return ""
}

func (m *RsvpMgmtInterfaceDetail) GetIntegrityReceivePasswordOptional() uint32 {
	if m != nil {
		return m.IntegrityReceivePasswordOptional
	}
	return 0
}

func (m *RsvpMgmtInterfaceDetail) GetRefreshTimerState() string {
	if m != nil {
		return m.RefreshTimerState
	}
	return ""
}

func (m *RsvpMgmtInterfaceDetail) GetSummaryRefreshTimerState() string {
	if m != nil {
		return m.SummaryRefreshTimerState
	}
	return ""
}

func (m *RsvpMgmtInterfaceDetail) GetRefreshInterval() int32 {
	if m != nil {
		return m.RefreshInterval
	}
	return 0
}

func (m *RsvpMgmtInterfaceDetail) GetOutOfBandRefreshInterval() uint32 {
	if m != nil {
		return m.OutOfBandRefreshInterval
	}
	return 0
}

func (m *RsvpMgmtInterfaceDetail) GetSummaryRefreshMaxSize() uint32 {
	if m != nil {
		return m.SummaryRefreshMaxSize
	}
	return 0
}

func (m *RsvpMgmtInterfaceDetail) GetBundleMessageMaxSize() uint32 {
	if m != nil {
		return m.BundleMessageMaxSize
	}
	return 0
}

func (m *RsvpMgmtInterfaceDetail) GetExpiryTimerState() string {
	if m != nil {
		return m.ExpiryTimerState
	}
	return ""
}

func (m *RsvpMgmtInterfaceDetail) GetExpiryStates() int32 {
	if m != nil {
		return m.ExpiryStates
	}
	return 0
}

func (m *RsvpMgmtInterfaceDetail) GetExpiryInterval() int32 {
	if m != nil {
		return m.ExpiryInterval
	}
	return 0
}

func (m *RsvpMgmtInterfaceDetail) GetExpiryDropsTolerated() int32 {
	if m != nil {
		return m.ExpiryDropsTolerated
	}
	return 0
}

func (m *RsvpMgmtInterfaceDetail) GetOutOfBandExpiryDropsTolerated() uint32 {
	if m != nil {
		return m.OutOfBandExpiryDropsTolerated
	}
	return 0
}

func (m *RsvpMgmtInterfaceDetail) GetAckHoldTime() uint32 {
	if m != nil {
		return m.AckHoldTime
	}
	return 0
}

func (m *RsvpMgmtInterfaceDetail) GetAckMaxSize() uint32 {
	if m != nil {
		return m.AckMaxSize
	}
	return 0
}

func (m *RsvpMgmtInterfaceDetail) GetRetransmitTime() uint32 {
	if m != nil {
		return m.RetransmitTime
	}
	return 0
}

func (m *RsvpMgmtInterfaceDetail) GetPacingInterval() uint32 {
	if m != nil {
		return m.PacingInterval
	}
	return 0
}

func (m *RsvpMgmtInterfaceDetail) GetPacingMessageRate() uint32 {
	if m != nil {
		return m.PacingMessageRate
	}
	return 0
}

func (m *RsvpMgmtInterfaceDetail) GetPacingTimerState() string {
	if m != nil {
		return m.PacingTimerState
	}
	return ""
}

func (m *RsvpMgmtInterfaceDetail) GetPacingMessages() int32 {
	if m != nil {
		return m.PacingMessages
	}
	return 0
}

func (m *RsvpMgmtInterfaceDetail) GetNeighborArray() []*RsvpMgmtNbor {
	if m != nil {
		return m.NeighborArray
	}
	return nil
}

// RSVP Time Spec
type RsvpMgmtTimespec struct {
	// Time Value in Seconds
	Seconds int32 `protobuf:"zigzag32,1,opt,name=seconds" json:"seconds,omitempty"`
	// Time Value in Nano-seconds
	Nanoseconds          int32    `protobuf:"zigzag32,2,opt,name=nanoseconds" json:"nanoseconds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RsvpMgmtTimespec) Reset()         { *m = RsvpMgmtTimespec{} }
func (m *RsvpMgmtTimespec) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtTimespec) ProtoMessage()    {}
func (*RsvpMgmtTimespec) Descriptor() ([]byte, []int) {
	return fileDescriptor_rsvp_mgmt_interface_detail_5de3130854ab59fa, []int{2}
}
func (m *RsvpMgmtTimespec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtTimespec.Unmarshal(m, b)
}
func (m *RsvpMgmtTimespec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtTimespec.Marshal(b, m, deterministic)
}
func (dst *RsvpMgmtTimespec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtTimespec.Merge(dst, src)
}
func (m *RsvpMgmtTimespec) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtTimespec.Size(m)
}
func (m *RsvpMgmtTimespec) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtTimespec.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtTimespec proto.InternalMessageInfo

func (m *RsvpMgmtTimespec) GetSeconds() int32 {
	if m != nil {
		return m.Seconds
	}
	return 0
}

func (m *RsvpMgmtTimespec) GetNanoseconds() int32 {
	if m != nil {
		return m.Nanoseconds
	}
	return 0
}

// RSVP Message ID
type RsvpMgmtMessageid struct {
	// Message ID
	MessageId            uint32   `protobuf:"varint,1,opt,name=message_id,json=messageId" json:"message_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RsvpMgmtMessageid) Reset()         { *m = RsvpMgmtMessageid{} }
func (m *RsvpMgmtMessageid) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtMessageid) ProtoMessage()    {}
func (*RsvpMgmtMessageid) Descriptor() ([]byte, []int) {
	return fileDescriptor_rsvp_mgmt_interface_detail_5de3130854ab59fa, []int{3}
}
func (m *RsvpMgmtMessageid) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtMessageid.Unmarshal(m, b)
}
func (m *RsvpMgmtMessageid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtMessageid.Marshal(b, m, deterministic)
}
func (dst *RsvpMgmtMessageid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtMessageid.Merge(dst, src)
}
func (m *RsvpMgmtMessageid) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtMessageid.Size(m)
}
func (m *RsvpMgmtMessageid) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtMessageid.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtMessageid proto.InternalMessageInfo

func (m *RsvpMgmtMessageid) GetMessageId() uint32 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

// Neighbor
type RsvpMgmtNbor struct {
	// Is neighbor capable of Refresh Reduction
	IsNeighborRefreshReductionCapable bool `protobuf:"varint,1,opt,name=is_neighbor_refresh_reduction_capable,json=isNeighborRefreshReductionCapable" json:"is_neighbor_refresh_reduction_capable,omitempty"`
	// IP address of the neighbor
	NeighborAddress string `protobuf:"bytes,2,opt,name=neighbor_address,json=neighborAddress" json:"neighbor_address,omitempty"`
	// Number of MessageIDs
	MessageIDs uint32 `protobuf:"varint,3,opt,name=message_i_ds,json=messageIDs" json:"message_i_ds,omitempty"`
	// List of Neighbor MessageIDs
	NeighborMessageIDs []*RsvpMgmtMessageid `protobuf:"bytes,4,rep,name=neighbor_message_i_ds,json=neighborMessageIDs" json:"neighbor_message_i_ds,omitempty"`
	// Number of outgoing states to the neighbour
	OutgoingStates int32 `protobuf:"zigzag32,5,opt,name=outgoing_states,json=outgoingStates" json:"outgoing_states,omitempty"`
	// Expiry time
	ExpiryTime           *RsvpMgmtTimespec `protobuf:"bytes,6,opt,name=expiry_time,json=expiryTime" json:"expiry_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RsvpMgmtNbor) Reset()         { *m = RsvpMgmtNbor{} }
func (m *RsvpMgmtNbor) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtNbor) ProtoMessage()    {}
func (*RsvpMgmtNbor) Descriptor() ([]byte, []int) {
	return fileDescriptor_rsvp_mgmt_interface_detail_5de3130854ab59fa, []int{4}
}
func (m *RsvpMgmtNbor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtNbor.Unmarshal(m, b)
}
func (m *RsvpMgmtNbor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtNbor.Marshal(b, m, deterministic)
}
func (dst *RsvpMgmtNbor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtNbor.Merge(dst, src)
}
func (m *RsvpMgmtNbor) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtNbor.Size(m)
}
func (m *RsvpMgmtNbor) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtNbor.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtNbor proto.InternalMessageInfo

func (m *RsvpMgmtNbor) GetIsNeighborRefreshReductionCapable() bool {
	if m != nil {
		return m.IsNeighborRefreshReductionCapable
	}
	return false
}

func (m *RsvpMgmtNbor) GetNeighborAddress() string {
	if m != nil {
		return m.NeighborAddress
	}
	return ""
}

func (m *RsvpMgmtNbor) GetMessageIDs() uint32 {
	if m != nil {
		return m.MessageIDs
	}
	return 0
}

func (m *RsvpMgmtNbor) GetNeighborMessageIDs() []*RsvpMgmtMessageid {
	if m != nil {
		return m.NeighborMessageIDs
	}
	return nil
}

func (m *RsvpMgmtNbor) GetOutgoingStates() int32 {
	if m != nil {
		return m.OutgoingStates
	}
	return 0
}

func (m *RsvpMgmtNbor) GetExpiryTime() *RsvpMgmtTimespec {
	if m != nil {
		return m.ExpiryTime
	}
	return nil
}

// Interface related flags
type RsvpMgmtInterfaceFlags struct {
	// MPLS enabled on interface
	IsMplsEnabled bool `protobuf:"varint,1,opt,name=is_mpls_enabled,json=isMplsEnabled" json:"is_mpls_enabled,omitempty"`
	// Refresh Reduction enabled
	IsRefreshReductionEnabled bool `protobuf:"varint,2,opt,name=is_refresh_reduction_enabled,json=isRefreshReductionEnabled" json:"is_refresh_reduction_enabled,omitempty"`
	// Message pacing enabled
	IsPacingEnabled bool `protobuf:"varint,3,opt,name=is_pacing_enabled,json=isPacingEnabled" json:"is_pacing_enabled,omitempty"`
	// Refresh enabled
	IsRefreshEnabled bool `protobuf:"varint,4,opt,name=is_refresh_enabled,json=isRefreshEnabled" json:"is_refresh_enabled,omitempty"`
	// Summary Refresh enabled
	IsSRefreshEnabled bool `protobuf:"varint,5,opt,name=is_s_refresh_enabled,json=isSRefreshEnabled" json:"is_s_refresh_enabled,omitempty"`
	// Interface is DOWN
	IsInterfaceDown bool `protobuf:"varint,6,opt,name=is_interface_down,json=isInterfaceDown" json:"is_interface_down,omitempty"`
	// Interface is created
	IsInterfaceCreated bool `protobuf:"varint,7,opt,name=is_interface_created,json=isInterfaceCreated" json:"is_interface_created,omitempty"`
	// Use reliable xmt for SRefresh
	IsRelSRefreshEnabled bool `protobuf:"varint,8,opt,name=is_rel_s_refresh_enabled,json=isRelSRefreshEnabled" json:"is_rel_s_refresh_enabled,omitempty"`
	// This is backup tunnel
	IsBackupTunnel bool `protobuf:"varint,9,opt,name=is_backup_tunnel,json=isBackupTunnel" json:"is_backup_tunnel,omitempty"`
	// RSVP explicitly configured
	IsRsvpConfigured bool `protobuf:"varint,10,opt,name=is_rsvp_configured,json=isRsvpConfigured" json:"is_rsvp_configured,omitempty"`
	// Interface is defined in non-Default VRF
	IsNonDefaultVrf bool `protobuf:"varint,11,opt,name=is_non_default_vrf,json=isNonDefaultVrf" json:"is_non_default_vrf,omitempty"`
	// Use bundling for outgoing RSVP messages.
	IsMessageBundlingEnabled bool     `protobuf:"varint,12,opt,name=is_message_bundling_enabled,json=isMessageBundlingEnabled" json:"is_message_bundling_enabled,omitempty"`
	XXX_NoUnkeyedLiteral     struct{} `json:"-"`
	XXX_unrecognized         []byte   `json:"-"`
	XXX_sizecache            int32    `json:"-"`
}

func (m *RsvpMgmtInterfaceFlags) Reset()         { *m = RsvpMgmtInterfaceFlags{} }
func (m *RsvpMgmtInterfaceFlags) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtInterfaceFlags) ProtoMessage()    {}
func (*RsvpMgmtInterfaceFlags) Descriptor() ([]byte, []int) {
	return fileDescriptor_rsvp_mgmt_interface_detail_5de3130854ab59fa, []int{5}
}
func (m *RsvpMgmtInterfaceFlags) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtInterfaceFlags.Unmarshal(m, b)
}
func (m *RsvpMgmtInterfaceFlags) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtInterfaceFlags.Marshal(b, m, deterministic)
}
func (dst *RsvpMgmtInterfaceFlags) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtInterfaceFlags.Merge(dst, src)
}
func (m *RsvpMgmtInterfaceFlags) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtInterfaceFlags.Size(m)
}
func (m *RsvpMgmtInterfaceFlags) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtInterfaceFlags.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtInterfaceFlags proto.InternalMessageInfo

func (m *RsvpMgmtInterfaceFlags) GetIsMplsEnabled() bool {
	if m != nil {
		return m.IsMplsEnabled
	}
	return false
}

func (m *RsvpMgmtInterfaceFlags) GetIsRefreshReductionEnabled() bool {
	if m != nil {
		return m.IsRefreshReductionEnabled
	}
	return false
}

func (m *RsvpMgmtInterfaceFlags) GetIsPacingEnabled() bool {
	if m != nil {
		return m.IsPacingEnabled
	}
	return false
}

func (m *RsvpMgmtInterfaceFlags) GetIsRefreshEnabled() bool {
	if m != nil {
		return m.IsRefreshEnabled
	}
	return false
}

func (m *RsvpMgmtInterfaceFlags) GetIsSRefreshEnabled() bool {
	if m != nil {
		return m.IsSRefreshEnabled
	}
	return false
}

func (m *RsvpMgmtInterfaceFlags) GetIsInterfaceDown() bool {
	if m != nil {
		return m.IsInterfaceDown
	}
	return false
}

func (m *RsvpMgmtInterfaceFlags) GetIsInterfaceCreated() bool {
	if m != nil {
		return m.IsInterfaceCreated
	}
	return false
}

func (m *RsvpMgmtInterfaceFlags) GetIsRelSRefreshEnabled() bool {
	if m != nil {
		return m.IsRelSRefreshEnabled
	}
	return false
}

func (m *RsvpMgmtInterfaceFlags) GetIsBackupTunnel() bool {
	if m != nil {
		return m.IsBackupTunnel
	}
	return false
}

func (m *RsvpMgmtInterfaceFlags) GetIsRsvpConfigured() bool {
	if m != nil {
		return m.IsRsvpConfigured
	}
	return false
}

func (m *RsvpMgmtInterfaceFlags) GetIsNonDefaultVrf() bool {
	if m != nil {
		return m.IsNonDefaultVrf
	}
	return false
}

func (m *RsvpMgmtInterfaceFlags) GetIsMessageBundlingEnabled() bool {
	if m != nil {
		return m.IsMessageBundlingEnabled
	}
	return false
}

// Prestandard DSTE interface bandwidth information
type RsvpMgmtInterfaceBwPrestdDste struct {
	// Bandwidth (bits per second) now allocated
	AllocatedBitRate uint64 `protobuf:"varint,1,opt,name=allocated_bit_rate,json=allocatedBitRate" json:"allocated_bit_rate,omitempty"`
	// Max bandwidth (bits per second) allowed per flow
	MaxFlowBandwidth uint64 `protobuf:"varint,2,opt,name=max_flow_bandwidth,json=maxFlowBandwidth" json:"max_flow_bandwidth,omitempty"`
	// Max bandwidth (bits per second) allowed
	MaxBandwidth uint64 `protobuf:"varint,3,opt,name=max_bandwidth,json=maxBandwidth" json:"max_bandwidth,omitempty"`
	// Max bandwidth (bits per second) allowed in subpool
	MaxSubpoolBandwidth uint64 `protobuf:"varint,4,opt,name=max_subpool_bandwidth,json=maxSubpoolBandwidth" json:"max_subpool_bandwidth,omitempty"`
	// True if the Max B/W is an absolute value and false if its a percentage
	IsMaxBandwidthAbsolute bool `protobuf:"varint,5,opt,name=is_max_bandwidth_absolute,json=isMaxBandwidthAbsolute" json:"is_max_bandwidth_absolute,omitempty"`
	// True if the Max sub-pool B/W is an absolute value and false if its a percentage
	IsMaxSubpoolBandwidthAbsolute bool     `protobuf:"varint,6,opt,name=is_max_subpool_bandwidth_absolute,json=isMaxSubpoolBandwidthAbsolute" json:"is_max_subpool_bandwidth_absolute,omitempty"`
	XXX_NoUnkeyedLiteral          struct{} `json:"-"`
	XXX_unrecognized              []byte   `json:"-"`
	XXX_sizecache                 int32    `json:"-"`
}

func (m *RsvpMgmtInterfaceBwPrestdDste) Reset()         { *m = RsvpMgmtInterfaceBwPrestdDste{} }
func (m *RsvpMgmtInterfaceBwPrestdDste) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtInterfaceBwPrestdDste) ProtoMessage()    {}
func (*RsvpMgmtInterfaceBwPrestdDste) Descriptor() ([]byte, []int) {
	return fileDescriptor_rsvp_mgmt_interface_detail_5de3130854ab59fa, []int{6}
}
func (m *RsvpMgmtInterfaceBwPrestdDste) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtInterfaceBwPrestdDste.Unmarshal(m, b)
}
func (m *RsvpMgmtInterfaceBwPrestdDste) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtInterfaceBwPrestdDste.Marshal(b, m, deterministic)
}
func (dst *RsvpMgmtInterfaceBwPrestdDste) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtInterfaceBwPrestdDste.Merge(dst, src)
}
func (m *RsvpMgmtInterfaceBwPrestdDste) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtInterfaceBwPrestdDste.Size(m)
}
func (m *RsvpMgmtInterfaceBwPrestdDste) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtInterfaceBwPrestdDste.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtInterfaceBwPrestdDste proto.InternalMessageInfo

func (m *RsvpMgmtInterfaceBwPrestdDste) GetAllocatedBitRate() uint64 {
	if m != nil {
		return m.AllocatedBitRate
	}
	return 0
}

func (m *RsvpMgmtInterfaceBwPrestdDste) GetMaxFlowBandwidth() uint64 {
	if m != nil {
		return m.MaxFlowBandwidth
	}
	return 0
}

func (m *RsvpMgmtInterfaceBwPrestdDste) GetMaxBandwidth() uint64 {
	if m != nil {
		return m.MaxBandwidth
	}
	return 0
}

func (m *RsvpMgmtInterfaceBwPrestdDste) GetMaxSubpoolBandwidth() uint64 {
	if m != nil {
		return m.MaxSubpoolBandwidth
	}
	return 0
}

func (m *RsvpMgmtInterfaceBwPrestdDste) GetIsMaxBandwidthAbsolute() bool {
	if m != nil {
		return m.IsMaxBandwidthAbsolute
	}
	return false
}

func (m *RsvpMgmtInterfaceBwPrestdDste) GetIsMaxSubpoolBandwidthAbsolute() bool {
	if m != nil {
		return m.IsMaxSubpoolBandwidthAbsolute
	}
	return false
}

// RSVP interface bandwidth info with standard based DSTE enabled
type RsvpMgmtInterfaceBwStdDste struct {
	// Bandwidth (bits per second) now allocated
	AllocatedBitRate uint64 `protobuf:"varint,1,opt,name=allocated_bit_rate,json=allocatedBitRate" json:"allocated_bit_rate,omitempty"`
	// Max bandwidth (bits per second) allowed per flow
	MaxFlowBandwidth uint64 `protobuf:"varint,2,opt,name=max_flow_bandwidth,json=maxFlowBandwidth" json:"max_flow_bandwidth,omitempty"`
	// Max bandwidth (bits per second) allowed
	MaxBandwidth uint64 `protobuf:"varint,3,opt,name=max_bandwidth,json=maxBandwidth" json:"max_bandwidth,omitempty"`
	// Max bandwidth (bits per second) allowed in BC0 pool
	MaxPool0Bandwidth uint64 `protobuf:"varint,4,opt,name=max_pool0_bandwidth,json=maxPool0Bandwidth" json:"max_pool0_bandwidth,omitempty"`
	// Max bandwidth (bits per second) allowed in BC1 pool
	MaxPool1Bandwidth uint64 `protobuf:"varint,5,opt,name=max_pool1_bandwidth,json=maxPool1Bandwidth" json:"max_pool1_bandwidth,omitempty"`
	// True if the Max B/W is an absolute value and false if its a percentage
	IsMaxBandwidthAbsolute bool `protobuf:"varint,6,opt,name=is_max_bandwidth_absolute,json=isMaxBandwidthAbsolute" json:"is_max_bandwidth_absolute,omitempty"`
	// True if the Max BC0 B/W is an absolute value and false if its a percentage
	IsMaxBc0BandwidthAbsolute bool `protobuf:"varint,7,opt,name=is_max_bc0_bandwidth_absolute,json=isMaxBc0BandwidthAbsolute" json:"is_max_bc0_bandwidth_absolute,omitempty"`
	// True if the Max BC1 sub-pool B/W is an absolute value and false if its a percentage
	IsMaxBc1BandwidthAbsolute bool     `protobuf:"varint,8,opt,name=is_max_bc1_bandwidth_absolute,json=isMaxBc1BandwidthAbsolute" json:"is_max_bc1_bandwidth_absolute,omitempty"`
	XXX_NoUnkeyedLiteral      struct{} `json:"-"`
	XXX_unrecognized          []byte   `json:"-"`
	XXX_sizecache             int32    `json:"-"`
}

func (m *RsvpMgmtInterfaceBwStdDste) Reset()         { *m = RsvpMgmtInterfaceBwStdDste{} }
func (m *RsvpMgmtInterfaceBwStdDste) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtInterfaceBwStdDste) ProtoMessage()    {}
func (*RsvpMgmtInterfaceBwStdDste) Descriptor() ([]byte, []int) {
	return fileDescriptor_rsvp_mgmt_interface_detail_5de3130854ab59fa, []int{7}
}
func (m *RsvpMgmtInterfaceBwStdDste) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtInterfaceBwStdDste.Unmarshal(m, b)
}
func (m *RsvpMgmtInterfaceBwStdDste) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtInterfaceBwStdDste.Marshal(b, m, deterministic)
}
func (dst *RsvpMgmtInterfaceBwStdDste) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtInterfaceBwStdDste.Merge(dst, src)
}
func (m *RsvpMgmtInterfaceBwStdDste) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtInterfaceBwStdDste.Size(m)
}
func (m *RsvpMgmtInterfaceBwStdDste) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtInterfaceBwStdDste.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtInterfaceBwStdDste proto.InternalMessageInfo

func (m *RsvpMgmtInterfaceBwStdDste) GetAllocatedBitRate() uint64 {
	if m != nil {
		return m.AllocatedBitRate
	}
	return 0
}

func (m *RsvpMgmtInterfaceBwStdDste) GetMaxFlowBandwidth() uint64 {
	if m != nil {
		return m.MaxFlowBandwidth
	}
	return 0
}

func (m *RsvpMgmtInterfaceBwStdDste) GetMaxBandwidth() uint64 {
	if m != nil {
		return m.MaxBandwidth
	}
	return 0
}

func (m *RsvpMgmtInterfaceBwStdDste) GetMaxPool0Bandwidth() uint64 {
	if m != nil {
		return m.MaxPool0Bandwidth
	}
	return 0
}

func (m *RsvpMgmtInterfaceBwStdDste) GetMaxPool1Bandwidth() uint64 {
	if m != nil {
		return m.MaxPool1Bandwidth
	}
	return 0
}

func (m *RsvpMgmtInterfaceBwStdDste) GetIsMaxBandwidthAbsolute() bool {
	if m != nil {
		return m.IsMaxBandwidthAbsolute
	}
	return false
}

func (m *RsvpMgmtInterfaceBwStdDste) GetIsMaxBc0BandwidthAbsolute() bool {
	if m != nil {
		return m.IsMaxBc0BandwidthAbsolute
	}
	return false
}

func (m *RsvpMgmtInterfaceBwStdDste) GetIsMaxBc1BandwidthAbsolute() bool {
	if m != nil {
		return m.IsMaxBc1BandwidthAbsolute
	}
	return false
}

// Union of the different RSVP interface bandwidth types
type RsvpMgmtDsteModeInterfaceBw struct {
	DsteMode string `protobuf:"bytes,1,opt,name=dste_mode,json=dsteMode" json:"dste_mode,omitempty"`
	// Prestandard DSTE interface information
	PreStandardDsteInterface *RsvpMgmtInterfaceBwPrestdDste `protobuf:"bytes,2,opt,name=pre_standard_dste_interface,json=preStandardDsteInterface" json:"pre_standard_dste_interface,omitempty"`
	// Standard DSTE interface information
	StandardDsteInterface *RsvpMgmtInterfaceBwStdDste `protobuf:"bytes,3,opt,name=standard_dste_interface,json=standardDsteInterface" json:"standard_dste_interface,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                    `json:"-"`
	XXX_unrecognized      []byte                      `json:"-"`
	XXX_sizecache         int32                       `json:"-"`
}

func (m *RsvpMgmtDsteModeInterfaceBw) Reset()         { *m = RsvpMgmtDsteModeInterfaceBw{} }
func (m *RsvpMgmtDsteModeInterfaceBw) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtDsteModeInterfaceBw) ProtoMessage()    {}
func (*RsvpMgmtDsteModeInterfaceBw) Descriptor() ([]byte, []int) {
	return fileDescriptor_rsvp_mgmt_interface_detail_5de3130854ab59fa, []int{8}
}
func (m *RsvpMgmtDsteModeInterfaceBw) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtDsteModeInterfaceBw.Unmarshal(m, b)
}
func (m *RsvpMgmtDsteModeInterfaceBw) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtDsteModeInterfaceBw.Marshal(b, m, deterministic)
}
func (dst *RsvpMgmtDsteModeInterfaceBw) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtDsteModeInterfaceBw.Merge(dst, src)
}
func (m *RsvpMgmtDsteModeInterfaceBw) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtDsteModeInterfaceBw.Size(m)
}
func (m *RsvpMgmtDsteModeInterfaceBw) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtDsteModeInterfaceBw.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtDsteModeInterfaceBw proto.InternalMessageInfo

func (m *RsvpMgmtDsteModeInterfaceBw) GetDsteMode() string {
	if m != nil {
		return m.DsteMode
	}
	return ""
}

func (m *RsvpMgmtDsteModeInterfaceBw) GetPreStandardDsteInterface() *RsvpMgmtInterfaceBwPrestdDste {
	if m != nil {
		return m.PreStandardDsteInterface
	}
	return nil
}

func (m *RsvpMgmtDsteModeInterfaceBw) GetStandardDsteInterface() *RsvpMgmtInterfaceBwStdDste {
	if m != nil {
		return m.StandardDsteInterface
	}
	return nil
}

func init() {
	proto.RegisterType((*RsvpMgmtInterfaceDetail_KEYS)(nil), "cisco_ios_xr_ip_rsvp_oper.rsvp.interface_detaileds.interface_detailed.rsvp_mgmt_interface_detail_KEYS")
	proto.RegisterType((*RsvpMgmtInterfaceDetail)(nil), "cisco_ios_xr_ip_rsvp_oper.rsvp.interface_detaileds.interface_detailed.rsvp_mgmt_interface_detail")
	proto.RegisterType((*RsvpMgmtTimespec)(nil), "cisco_ios_xr_ip_rsvp_oper.rsvp.interface_detaileds.interface_detailed.rsvp_mgmt_timespec")
	proto.RegisterType((*RsvpMgmtMessageid)(nil), "cisco_ios_xr_ip_rsvp_oper.rsvp.interface_detaileds.interface_detailed.rsvp_mgmt_messageid")
	proto.RegisterType((*RsvpMgmtNbor)(nil), "cisco_ios_xr_ip_rsvp_oper.rsvp.interface_detaileds.interface_detailed.rsvp_mgmt_nbor")
	proto.RegisterType((*RsvpMgmtInterfaceFlags)(nil), "cisco_ios_xr_ip_rsvp_oper.rsvp.interface_detaileds.interface_detailed.rsvp_mgmt_interface_flags")
	proto.RegisterType((*RsvpMgmtInterfaceBwPrestdDste)(nil), "cisco_ios_xr_ip_rsvp_oper.rsvp.interface_detaileds.interface_detailed.rsvp_mgmt_interface_bw_prestd_dste")
	proto.RegisterType((*RsvpMgmtInterfaceBwStdDste)(nil), "cisco_ios_xr_ip_rsvp_oper.rsvp.interface_detaileds.interface_detailed.rsvp_mgmt_interface_bw_std_dste")
	proto.RegisterType((*RsvpMgmtDsteModeInterfaceBw)(nil), "cisco_ios_xr_ip_rsvp_oper.rsvp.interface_detaileds.interface_detailed.rsvp_mgmt_dste_mode_interface_bw")
}

func init() {
	proto.RegisterFile("rsvp_mgmt_interface_detail.proto", fileDescriptor_rsvp_mgmt_interface_detail_5de3130854ab59fa)
}

var fileDescriptor_rsvp_mgmt_interface_detail_5de3130854ab59fa = []byte{
	// 1462 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0xcb, 0x6e, 0x1b, 0x47,
	0x16, 0x05, 0x4d, 0xc9, 0x96, 0xae, 0x1e, 0x14, 0x4b, 0x92, 0xdd, 0x7e, 0x08, 0x43, 0xd3, 0xf0,
	0x48, 0xe3, 0x31, 0x38, 0x92, 0xfc, 0x1a, 0xcf, 0xf8, 0xa9, 0x87, 0x47, 0x1a, 0x43, 0xb6, 0xd0,
	0xd2, 0x0c, 0xe0, 0x6c, 0x2a, 0xc5, 0xee, 0x22, 0x55, 0x50, 0x77, 0x57, 0xa3, 0xaa, 0x29, 0xd2,
	0x46, 0xfe, 0x20, 0xc8, 0x1f, 0x04, 0x59, 0x67, 0x97, 0x6f, 0xc8, 0x8f, 0x64, 0x95, 0x4d, 0xfe,
	0x22, 0xa8, 0x57, 0x77, 0x53, 0xa2, 0x8c, 0x2c, 0x64, 0x20, 0x3b, 0xfb, 0xde, 0x73, 0xee, 0x3d,
	0xf7, 0x51, 0x55, 0x6c, 0x41, 0x43, 0xc8, 0x93, 0x14, 0xc7, 0xdd, 0x38, 0xc3, 0x2c, 0xc9, 0xa8,
	0xe8, 0x90, 0x80, 0xe2, 0x90, 0x66, 0x84, 0x45, 0xad, 0x54, 0xf0, 0x8c, 0xa3, 0xed, 0x80, 0xc9,
	0x80, 0x63, 0xc6, 0x25, 0x1e, 0x08, 0xcc, 0x52, 0xac, 0x19, 0x3c, 0xa5, 0xa2, 0xa5, 0xfe, 0xd5,
	0x3a, 0x4d, 0xa3, 0xa1, 0x1c, 0x61, 0x6b, 0xee, 0xc0, 0x5f, 0xce, 0x4f, 0x85, 0xdf, 0x6e, 0x7f,
	0x38, 0x40, 0x77, 0x61, 0xb6, 0x70, 0x24, 0x24, 0xa6, 0x5e, 0xa5, 0x51, 0x59, 0x99, 0xf4, 0x67,
	0x72, 0xeb, 0x3b, 0x12, 0xd3, 0xe6, 0x4f, 0xd3, 0x70, 0xe3, 0xfc, 0x50, 0x23, 0xa2, 0xac, 0x8f,
	0x88, 0x82, 0xbe, 0xaf, 0xc0, 0x62, 0x9b, 0x24, 0x61, 0x9f, 0x85, 0xd9, 0x11, 0x66, 0x49, 0x87,
	0x8b, 0x98, 0x64, 0x8c, 0x27, 0xde, 0x83, 0x46, 0x65, 0x65, 0x6a, 0xbd, 0xdb, 0xba, 0x90, 0xba,
	0x5b, 0x85, 0xd2, 0x50, 0x66, 0x14, 0xc7, 0x3c, 0xa4, 0x25, 0xcd, 0xed, 0xbe, 0xbf, 0x90, 0xab,
	0xd8, 0x2d, 0x44, 0xa0, 0x13, 0x18, 0xef, 0x44, 0xa4, 0x2b, 0xbd, 0x87, 0x5a, 0xcd, 0xd7, 0x17,
	0xae, 0xa6, 0x70, 0xea, 0x3c, 0xbe, 0x49, 0x87, 0xee, 0x41, 0x5d, 0xb2, 0x6e, 0x42, 0xa2, 0x88,
	0x25, 0x5d, 0x95, 0x27, 0xe3, 0xd2, 0x7b, 0xd4, 0xa8, 0xac, 0xcc, 0xf8, 0xb5, 0xc2, 0xb1, 0x9b,
	0x1e, 0x72, 0x89, 0x1e, 0xc3, 0x35, 0x15, 0xa5, 0x2b, 0x58, 0xf6, 0x11, 0x4b, 0x9a, 0x84, 0x38,
	0x25, 0x52, 0xf6, 0xb9, 0x08, 0xbd, 0xc7, 0xba, 0xe5, 0x8b, 0xb9, 0xfb, 0x80, 0x26, 0xe1, 0xbe,
	0x75, 0xa2, 0x67, 0x70, 0xa3, 0xe0, 0x09, 0x1a, 0x50, 0x76, 0x42, 0x0b, 0xea, 0x13, 0x4d, 0xf5,
	0x72, 0x84, 0x6f, 0x00, 0x39, 0x7b, 0x0f, 0xee, 0x9c, 0xcf, 0xc6, 0x3c, 0x55, 0xed, 0x23, 0x91,
	0xf7, 0x4f, 0xad, 0xb9, 0x71, 0x5e, 0x98, 0xf7, 0x16, 0x87, 0x5a, 0x30, 0x2f, 0x68, 0x47, 0x50,
	0x79, 0x84, 0x33, 0x16, 0x53, 0x81, 0x65, 0x46, 0x32, 0xea, 0x3d, 0xd5, 0x2a, 0xea, 0xd6, 0x75,
	0xa8, 0x3c, 0x07, 0xca, 0x81, 0x9e, 0xc3, 0x4d, 0xd9, 0x8b, 0x63, 0x22, 0x54, 0xf2, 0xb3, 0xbc,
	0x7f, 0x19, 0xf5, 0x16, 0xe2, 0x9f, 0xa1, 0xff, 0x0d, 0xe6, 0x1c, 0x4d, 0x4f, 0xe0, 0x84, 0x44,
	0xde, 0xbf, 0x1b, 0x95, 0x95, 0xba, 0x5f, 0xb3, 0xf6, 0x5d, 0x6b, 0x46, 0x2f, 0xe0, 0x16, 0xef,
	0x65, 0x98, 0x77, 0xb0, 0xda, 0x10, 0x7c, 0x86, 0xf6, 0x4c, 0x57, 0xe8, 0xf1, 0x5e, 0xf6, 0xbe,
	0xb3, 0x41, 0x92, 0xd0, 0x3f, 0xc5, 0x7f, 0x02, 0xde, 0x69, 0xa5, 0x31, 0x19, 0x60, 0xc9, 0x3e,
	0x51, 0xef, 0xb9, 0xe6, 0x2e, 0x0e, 0xcb, 0xdc, 0x23, 0x83, 0x03, 0xf6, 0x89, 0xa2, 0x47, 0x70,
	0xad, 0xdd, 0x4b, 0xc2, 0x88, 0xe2, 0x98, 0x4a, 0x49, 0xba, 0xb4, 0xe0, 0xbd, 0xd0, 0xbc, 0x05,
	0xe3, 0xde, 0x33, 0x5e, 0x47, 0xbb, 0x0f, 0x88, 0x0e, 0x52, 0x26, 0x3e, 0x0e, 0x35, 0xe4, 0xa5,
	0x6e, 0xc8, 0x9c, 0xf1, 0x94, 0x1a, 0x71, 0x07, 0x66, 0x2c, 0x5a, 0xe3, 0xa4, 0xf7, 0x4a, 0x77,
	0x61, 0xda, 0x18, 0x35, 0x46, 0xa2, 0x65, 0xa8, 0x59, 0x50, 0x5e, 0xf5, 0x6b, 0x0d, 0x9b, 0x35,
	0xe6, 0xbc, 0xd6, 0x87, 0x70, 0xd5, 0x02, 0x43, 0xc1, 0x53, 0x89, 0x33, 0x1e, 0x51, 0x41, 0x32,
	0x1a, 0x7a, 0x1b, 0x1a, 0xbf, 0x60, 0xbc, 0x5b, 0xca, 0x79, 0xe8, 0x7c, 0x68, 0x17, 0x9a, 0xe5,
	0x0e, 0x9f, 0x13, 0x61, 0x53, 0xd7, 0xbc, 0x94, 0xf7, 0x79, 0x7b, 0x54, 0xa8, 0x26, 0xcc, 0x90,
	0xe0, 0x18, 0x1f, 0xf1, 0x28, 0xd4, 0xe5, 0x7b, 0x5b, 0x9a, 0x35, 0x45, 0x82, 0xe3, 0x1d, 0x1e,
	0x85, 0xaa, 0x70, 0xd4, 0x80, 0x69, 0x85, 0xc9, 0x9b, 0xb9, 0xad, 0x21, 0x40, 0x82, 0x63, 0xd7,
	0xc2, 0x65, 0xa8, 0x09, 0x9a, 0x09, 0x92, 0xc8, 0x98, 0x65, 0x26, 0xce, 0x1b, 0x0d, 0x9a, 0x2d,
	0xcc, 0x3a, 0xd4, 0x32, 0xd4, 0x52, 0x12, 0xe8, 0x23, 0xea, 0x1a, 0xf3, 0x1f, 0x03, 0x34, 0xe6,
	0xbc, 0x31, 0x2d, 0x98, 0xb7, 0x40, 0x37, 0x4b, 0xa5, 0xd7, 0xdb, 0xd1, 0xe0, 0xba, 0x71, 0xd9,
	0x39, 0xfa, 0x6a, 0x2c, 0xf7, 0x01, 0x59, 0x7c, 0x79, 0x88, 0xbb, 0x66, 0x88, 0xc6, 0x53, 0x1a,
	0x62, 0x21, 0xc3, 0x46, 0x97, 0xde, 0x7f, 0xcd, 0x7c, 0x86, 0x22, 0x4b, 0xf4, 0x0d, 0xcc, 0x26,
	0x94, 0x75, 0x8f, 0xda, 0x5c, 0x60, 0x22, 0x04, 0xf9, 0xe8, 0xbd, 0x6d, 0x54, 0x57, 0xa6, 0xd6,
	0xff, 0x77, 0xe1, 0xf7, 0x5a, 0xd2, 0xe6, 0xc2, 0x9f, 0x71, 0xc9, 0x5e, 0xab, 0x5c, 0xcd, 0x7d,
	0x40, 0x05, 0x40, 0xd5, 0x25, 0x53, 0x1a, 0x20, 0x0f, 0xae, 0x48, 0x1a, 0xf0, 0x24, 0x94, 0xfa,
	0x9d, 0xa9, 0xfb, 0xee, 0xbf, 0xa8, 0x01, 0x53, 0x09, 0x49, 0xb8, 0xf3, 0x5e, 0xd2, 0xde, 0xb2,
	0xa9, 0xf9, 0x10, 0xe6, 0x8b, 0x88, 0xb6, 0x76, 0x16, 0xa2, 0x25, 0x00, 0xd7, 0x66, 0x16, 0xea,
	0xa8, 0x33, 0xfe, 0xa4, 0xb5, 0xec, 0x86, 0xcd, 0x5f, 0xab, 0x30, 0x3b, 0xac, 0x14, 0xed, 0xc3,
	0x5d, 0x26, 0x71, 0xde, 0x1b, 0x77, 0x50, 0x05, 0x0d, 0x7b, 0x81, 0xba, 0xa1, 0x70, 0x40, 0x52,
	0xd2, 0x8e, 0xcc, 0x53, 0x38, 0xe1, 0xdf, 0x66, 0xf2, 0x9d, 0xc5, 0xda, 0x43, 0xeb, 0x3b, 0xe4,
	0xa6, 0x01, 0xaa, 0x1b, 0xa6, 0x68, 0x75, 0x18, 0x0a, 0x2a, 0x4d, 0x05, 0x93, 0x7e, 0x2d, 0xef,
	0x8a, 0x31, 0xab, 0x85, 0xcc, 0xe5, 0xe2, 0x50, 0x7a, 0x55, 0xb3, 0x90, 0x4e, 0xf0, 0x96, 0x44,
	0xdf, 0x55, 0x60, 0x31, 0x8f, 0x36, 0x84, 0x1d, 0xd3, 0xf3, 0xfb, 0xea, 0xc2, 0xe7, 0x97, 0x37,
	0xd3, 0x47, 0x2e, 0xf1, 0x5e, 0xa1, 0x67, 0x19, 0x6a, 0xbc, 0x97, 0x75, 0xb9, 0x5a, 0x39, 0x7b,
	0x6f, 0x8c, 0x9b, 0x85, 0x73, 0x66, 0x7b, 0x73, 0x7c, 0x82, 0xa9, 0xd2, 0x65, 0xe4, 0x5d, 0xd6,
	0xaf, 0xe8, 0x87, 0x0b, 0x57, 0xeb, 0x96, 0xc9, 0x87, 0xe2, 0x82, 0x6b, 0xfe, 0x36, 0x06, 0xd7,
	0xcf, 0x7d, 0x68, 0xd1, 0x5f, 0xa1, 0xc6, 0x24, 0x8e, 0xd3, 0x48, 0x62, 0x9a, 0xa8, 0x89, 0x85,
	0x76, 0xb6, 0x33, 0x4c, 0xee, 0xa5, 0x91, 0xdc, 0x36, 0x46, 0xf4, 0x12, 0x6e, 0x31, 0x39, 0x62,
	0x21, 0x1c, 0xe9, 0x92, 0x26, 0x5d, 0x67, 0xf2, 0xf4, 0x22, 0xb8, 0x00, 0xf7, 0xa0, 0xce, 0x24,
	0xb6, 0xe7, 0xd3, 0xb1, 0xaa, 0x9a, 0x55, 0x63, 0x72, 0x5f, 0xdb, 0x1d, 0xf6, 0x3e, 0xa0, 0x52,
	0x32, 0x07, 0x1e, 0xd3, 0xe0, 0xb9, 0x3c, 0x85, 0x43, 0xff, 0x03, 0x16, 0x98, 0xc4, 0x67, 0xf1,
	0xe3, 0x1a, 0x5f, 0x67, 0xf2, 0xe0, 0x14, 0xc1, 0x48, 0x29, 0x75, 0x92, 0xf7, 0x13, 0x3d, 0x13,
	0x2d, 0x65, 0xd7, 0xd9, 0xb7, 0x78, 0x3f, 0x41, 0xab, 0x3a, 0x78, 0x81, 0x0d, 0x04, 0xd5, 0xd7,
	0xf0, 0x15, 0x0d, 0x47, 0x25, 0xf8, 0xa6, 0xf1, 0xa0, 0xc7, 0xe0, 0x69, 0xf1, 0xd1, 0x08, 0x49,
	0x13, 0x9a, 0xb5, 0xa0, 0x4a, 0x88, 0x4e, 0xab, 0x5a, 0x81, 0x39, 0x26, 0x71, 0x9b, 0x04, 0xc7,
	0xbd, 0x14, 0x67, 0xbd, 0x24, 0xa1, 0x91, 0x37, 0xa9, 0xf1, 0xb3, 0x4c, 0x6e, 0x68, 0xf3, 0xa1,
	0xb6, 0xba, 0xf6, 0xa8, 0x99, 0x06, 0x3c, 0xe9, 0xb0, 0x6e, 0x4f, 0xd0, 0xd0, 0x83, 0xbc, 0x3d,
	0xf2, 0x24, 0xdd, 0xcc, 0xed, 0xe8, 0xef, 0x1a, 0x9d, 0xf0, 0x04, 0x87, 0xb4, 0x43, 0x7a, 0x51,
	0x86, 0x4f, 0x44, 0xc7, 0x9b, 0x72, 0xe5, 0xbe, 0xe3, 0xc9, 0x96, 0xb1, 0xff, 0x5f, 0x74, 0xd4,
	0xef, 0x09, 0xb5, 0x0e, 0xf6, 0x68, 0xe9, 0x87, 0xb5, 0x3c, 0xaf, 0x69, 0xcd, 0xf2, 0x98, 0xb4,
	0x87, 0x60, 0xc3, 0x02, 0x6c, 0x0d, 0xcd, 0x5f, 0x2e, 0x41, 0x73, 0xd4, 0xae, 0xb5, 0xfb, 0x38,
	0x15, 0x54, 0x66, 0xa1, 0xfe, 0xd9, 0xa9, 0x0a, 0x20, 0x51, 0xc4, 0x03, 0xd5, 0x2f, 0xdc, 0x66,
	0x99, 0x79, 0x05, 0xd4, 0xde, 0x8d, 0xf9, 0x73, 0xb9, 0x67, 0x83, 0x65, 0xee, 0x11, 0x50, 0x8f,
	0x54, 0x27, 0xe2, 0x7d, 0x9c, 0xff, 0x3a, 0xd5, 0x0b, 0x37, 0xe6, 0xcf, 0xc5, 0x64, 0xf0, 0x26,
	0xe2, 0xfd, 0x0d, 0x67, 0x57, 0x2f, 0xb9, 0x42, 0x17, 0xc0, 0xaa, 0x06, 0x4e, 0xc7, 0x64, 0x50,
	0x80, 0xd6, 0x61, 0x51, 0xbf, 0x7b, 0xbd, 0x76, 0xca, 0x79, 0x54, 0x02, 0x8f, 0x69, 0xf0, 0x7c,
	0x4c, 0x06, 0x07, 0xc6, 0x57, 0x70, 0x9e, 0xc2, 0x75, 0xd5, 0x9a, 0x72, 0x6c, 0x4c, 0xda, 0x92,
	0x47, 0xbd, 0x8c, 0xda, 0x5d, 0xbb, 0xca, 0xe4, 0x5e, 0x29, 0xcd, 0x6b, 0xeb, 0x45, 0x3b, 0x70,
	0xdb, 0x52, 0xcf, 0x64, 0x2c, 0x42, 0x98, 0x05, 0x5c, 0xd2, 0x21, 0x4e, 0x27, 0x77, 0x91, 0x9a,
	0x3f, 0x57, 0x47, 0x7f, 0xb8, 0xb4, 0xfb, 0xf8, 0xcf, 0xd3, 0xdd, 0x16, 0xa8, 0x06, 0x62, 0x55,
	0xc1, 0xea, 0x99, 0xde, 0xd6, 0x63, 0x32, 0xd8, 0x57, 0x9e, 0x91, 0xf8, 0xb5, 0x12, 0x7e, 0x7c,
	0x08, 0xbf, 0xf6, 0x07, 0x27, 0x71, 0xf9, 0xb3, 0x93, 0x78, 0x05, 0x4b, 0x8e, 0x1a, 0xac, 0x8e,
	0xa2, 0x5f, 0x71, 0xf7, 0x98, 0xa2, 0x07, 0xab, 0x9f, 0x8f, 0xb0, 0x36, 0x2a, 0xc2, 0xc4, 0x50,
	0x84, 0xb5, 0xb3, 0x33, 0xfc, 0xb6, 0x5a, 0xfe, 0xce, 0x1d, 0xfd, 0x1d, 0x86, 0x6e, 0xc2, 0x64,
	0xee, 0xb1, 0x1f, 0x9e, 0x13, 0xca, 0xb0, 0xc7, 0x43, 0x8a, 0x7e, 0xac, 0xc0, 0xcd, 0x54, 0x50,
	0xf5, 0xe6, 0x24, 0x21, 0x11, 0x66, 0xee, 0x05, 0x5f, 0x4f, 0x6f, 0x6a, 0x9d, 0x7d, 0xc1, 0xaf,
	0xb4, 0xe1, 0x03, 0xed, 0x7b, 0xa9, 0xa0, 0x07, 0x56, 0xcc, 0x96, 0xcc, 0x68, 0x7e, 0x29, 0xa2,
	0x1f, 0x2a, 0x70, 0xed, 0x3c, 0x99, 0x55, 0x2d, 0xb3, 0xf3, 0x65, 0x65, 0xe6, 0x1a, 0x17, 0xe5,
	0x28, 0x81, 0xed, 0xcb, 0xfa, 0xef, 0x0a, 0x0f, 0x7e, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x3f, 0xea,
	0x54, 0x84, 0x7b, 0x10, 0x00, 0x00,
}
