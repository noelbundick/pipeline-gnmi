// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rsvp_mgmt_request_detail.proto

package cisco_ios_xr_ip_rsvp_oper_rsvp_request_details_request_detail

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Detailed Form of RSVP Request Info
type RsvpMgmtRequestDetail_KEYS struct {
	DestinationAddress   string   `protobuf:"bytes,1,opt,name=destination_address,json=destinationAddress" json:"destination_address,omitempty"`
	DestinationPort      uint32   `protobuf:"varint,2,opt,name=destination_port,json=destinationPort" json:"destination_port,omitempty"`
	Protocol             uint32   `protobuf:"varint,3,opt,name=protocol" json:"protocol,omitempty"`
	ExtendedTunnelId     string   `protobuf:"bytes,4,opt,name=extended_tunnel_id,json=extendedTunnelId" json:"extended_tunnel_id,omitempty"`
	SessionType          string   `protobuf:"bytes,5,opt,name=session_type,json=sessionType" json:"session_type,omitempty"`
	P2MpId               uint32   `protobuf:"varint,6,opt,name=p2_mp_id,json=p2MpId" json:"p2_mp_id,omitempty"`
	SourceAddress        string   `protobuf:"bytes,7,opt,name=source_address,json=sourceAddress" json:"source_address,omitempty"`
	SourcePort           uint32   `protobuf:"varint,8,opt,name=source_port,json=sourcePort" json:"source_port,omitempty"`
	SubGroupOrigin       string   `protobuf:"bytes,9,opt,name=sub_group_origin,json=subGroupOrigin" json:"sub_group_origin,omitempty"`
	SubGroupId           uint32   `protobuf:"varint,10,opt,name=sub_group_id,json=subGroupId" json:"sub_group_id,omitempty"`
	VrfName              string   `protobuf:"bytes,11,opt,name=vrf_name,json=vrfName" json:"vrf_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RsvpMgmtRequestDetail_KEYS) Reset()         { *m = RsvpMgmtRequestDetail_KEYS{} }
func (m *RsvpMgmtRequestDetail_KEYS) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtRequestDetail_KEYS) ProtoMessage()    {}
func (*RsvpMgmtRequestDetail_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_rsvp_mgmt_request_detail_527ab3c8be72aad2, []int{0}
}
func (m *RsvpMgmtRequestDetail_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtRequestDetail_KEYS.Unmarshal(m, b)
}
func (m *RsvpMgmtRequestDetail_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtRequestDetail_KEYS.Marshal(b, m, deterministic)
}
func (dst *RsvpMgmtRequestDetail_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtRequestDetail_KEYS.Merge(dst, src)
}
func (m *RsvpMgmtRequestDetail_KEYS) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtRequestDetail_KEYS.Size(m)
}
func (m *RsvpMgmtRequestDetail_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtRequestDetail_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtRequestDetail_KEYS proto.InternalMessageInfo

func (m *RsvpMgmtRequestDetail_KEYS) GetDestinationAddress() string {
	if m != nil {
		return m.DestinationAddress
	}
	return ""
}

func (m *RsvpMgmtRequestDetail_KEYS) GetDestinationPort() uint32 {
	if m != nil {
		return m.DestinationPort
	}
	return 0
}

func (m *RsvpMgmtRequestDetail_KEYS) GetProtocol() uint32 {
	if m != nil {
		return m.Protocol
	}
	return 0
}

func (m *RsvpMgmtRequestDetail_KEYS) GetExtendedTunnelId() string {
	if m != nil {
		return m.ExtendedTunnelId
	}
	return ""
}

func (m *RsvpMgmtRequestDetail_KEYS) GetSessionType() string {
	if m != nil {
		return m.SessionType
	}
	return ""
}

func (m *RsvpMgmtRequestDetail_KEYS) GetP2MpId() uint32 {
	if m != nil {
		return m.P2MpId
	}
	return 0
}

func (m *RsvpMgmtRequestDetail_KEYS) GetSourceAddress() string {
	if m != nil {
		return m.SourceAddress
	}
	return ""
}

func (m *RsvpMgmtRequestDetail_KEYS) GetSourcePort() uint32 {
	if m != nil {
		return m.SourcePort
	}
	return 0
}

func (m *RsvpMgmtRequestDetail_KEYS) GetSubGroupOrigin() string {
	if m != nil {
		return m.SubGroupOrigin
	}
	return ""
}

func (m *RsvpMgmtRequestDetail_KEYS) GetSubGroupId() uint32 {
	if m != nil {
		return m.SubGroupId
	}
	return 0
}

func (m *RsvpMgmtRequestDetail_KEYS) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

type RsvpMgmtRequestDetail struct {
	// RSVP Session Information
	Session *RsvpMgmtSessionInfo `protobuf:"bytes,50,opt,name=session" json:"session,omitempty"`
	// RSVP S2L Sub-LSP information
	S2LSubLsp *RsvpMgmtS2LSubLspIpv4 `protobuf:"bytes,51,opt,name=s2_l_sub_lsp,json=s2LSubLsp" json:"s2_l_sub_lsp,omitempty"`
	// Flow Spec Information
	FlowSpec *RsvpMgmtFlowSpec `protobuf:"bytes,52,opt,name=flow_spec,json=flowSpec" json:"flow_spec,omitempty"`
	// Generic Flow Spec Information
	GenericFlowSpec *RsvpMgmtGenFlowSpec `protobuf:"bytes,53,opt,name=generic_flow_spec,json=genericFlowSpec" json:"generic_flow_spec,omitempty"`
	// RSVP Filter
	Filter *RsvpMgmtFilterInfo `protobuf:"bytes,54,opt,name=filter" json:"filter,omitempty"`
	// RSVP Style
	Style *RsvpMgmtStyle `protobuf:"bytes,55,opt,name=style" json:"style,omitempty"`
	// output Interface
	OutputInterface string `protobuf:"bytes,56,opt,name=output_interface,json=outputInterface" json:"output_interface,omitempty"`
	// Request flags
	ReqFlags *RsvpMgmtRequestFlags `protobuf:"bytes,57,opt,name=req_flags,json=reqFlags" json:"req_flags,omitempty"`
	// Hop Infomation
	Hop *RsvpMgmtHopInfo `protobuf:"bytes,58,opt,name=hop" json:"hop,omitempty"`
	// RSVP Header Information
	Header *RsvpMgmtHeaderInfo `protobuf:"bytes,59,opt,name=header" json:"header,omitempty"`
	// RSVP Policy Sources
	PolicySources *RsvpMgmtPolicySources `protobuf:"bytes,60,opt,name=policy_sources,json=policySources" json:"policy_sources,omitempty"`
	// RSVP Policy Flags
	PolicyFlags *RsvpMgmtPolicyFlags `protobuf:"bytes,61,opt,name=policy_flags,json=policyFlags" json:"policy_flags,omitempty"`
	// RSVP Query Flags
	PolicyQueryFlags *RsvpMgmtPolicyQueryFlags `protobuf:"bytes,62,opt,name=policy_query_flags,json=policyQueryFlags" json:"policy_query_flags,omitempty"`
	// List of RSB keys
	PsbKeys []*RsvpMgmtKey `protobuf:"bytes,63,rep,name=psb_keys,json=psbKeys" json:"psb_keys,omitempty"`
	// List of RSB keys
	RsbKeys              []*RsvpMgmtKey `protobuf:"bytes,64,rep,name=rsb_keys,json=rsbKeys" json:"rsb_keys,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *RsvpMgmtRequestDetail) Reset()         { *m = RsvpMgmtRequestDetail{} }
func (m *RsvpMgmtRequestDetail) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtRequestDetail) ProtoMessage()    {}
func (*RsvpMgmtRequestDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_rsvp_mgmt_request_detail_527ab3c8be72aad2, []int{1}
}
func (m *RsvpMgmtRequestDetail) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtRequestDetail.Unmarshal(m, b)
}
func (m *RsvpMgmtRequestDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtRequestDetail.Marshal(b, m, deterministic)
}
func (dst *RsvpMgmtRequestDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtRequestDetail.Merge(dst, src)
}
func (m *RsvpMgmtRequestDetail) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtRequestDetail.Size(m)
}
func (m *RsvpMgmtRequestDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtRequestDetail.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtRequestDetail proto.InternalMessageInfo

func (m *RsvpMgmtRequestDetail) GetSession() *RsvpMgmtSessionInfo {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *RsvpMgmtRequestDetail) GetS2LSubLsp() *RsvpMgmtS2LSubLspIpv4 {
	if m != nil {
		return m.S2LSubLsp
	}
	return nil
}

func (m *RsvpMgmtRequestDetail) GetFlowSpec() *RsvpMgmtFlowSpec {
	if m != nil {
		return m.FlowSpec
	}
	return nil
}

func (m *RsvpMgmtRequestDetail) GetGenericFlowSpec() *RsvpMgmtGenFlowSpec {
	if m != nil {
		return m.GenericFlowSpec
	}
	return nil
}

func (m *RsvpMgmtRequestDetail) GetFilter() *RsvpMgmtFilterInfo {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *RsvpMgmtRequestDetail) GetStyle() *RsvpMgmtStyle {
	if m != nil {
		return m.Style
	}
	return nil
}

func (m *RsvpMgmtRequestDetail) GetOutputInterface() string {
	if m != nil {
		return m.OutputInterface
	}
	return ""
}

func (m *RsvpMgmtRequestDetail) GetReqFlags() *RsvpMgmtRequestFlags {
	if m != nil {
		return m.ReqFlags
	}
	return nil
}

func (m *RsvpMgmtRequestDetail) GetHop() *RsvpMgmtHopInfo {
	if m != nil {
		return m.Hop
	}
	return nil
}

func (m *RsvpMgmtRequestDetail) GetHeader() *RsvpMgmtHeaderInfo {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *RsvpMgmtRequestDetail) GetPolicySources() *RsvpMgmtPolicySources {
	if m != nil {
		return m.PolicySources
	}
	return nil
}

func (m *RsvpMgmtRequestDetail) GetPolicyFlags() *RsvpMgmtPolicyFlags {
	if m != nil {
		return m.PolicyFlags
	}
	return nil
}

func (m *RsvpMgmtRequestDetail) GetPolicyQueryFlags() *RsvpMgmtPolicyQueryFlags {
	if m != nil {
		return m.PolicyQueryFlags
	}
	return nil
}

func (m *RsvpMgmtRequestDetail) GetPsbKeys() []*RsvpMgmtKey {
	if m != nil {
		return m.PsbKeys
	}
	return nil
}

func (m *RsvpMgmtRequestDetail) GetRsbKeys() []*RsvpMgmtKey {
	if m != nil {
		return m.RsbKeys
	}
	return nil
}

// RSVP S2L Sub-LSP
type RsvpMgmtS2LSubLspIpv4 struct {
	// S2L Sub-LSP Destination Address
	S2LDestinationAddress string   `protobuf:"bytes,1,opt,name=s2_l_destination_address,json=s2LDestinationAddress" json:"s2_l_destination_address,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *RsvpMgmtS2LSubLspIpv4) Reset()         { *m = RsvpMgmtS2LSubLspIpv4{} }
func (m *RsvpMgmtS2LSubLspIpv4) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtS2LSubLspIpv4) ProtoMessage()    {}
func (*RsvpMgmtS2LSubLspIpv4) Descriptor() ([]byte, []int) {
	return fileDescriptor_rsvp_mgmt_request_detail_527ab3c8be72aad2, []int{2}
}
func (m *RsvpMgmtS2LSubLspIpv4) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtS2LSubLspIpv4.Unmarshal(m, b)
}
func (m *RsvpMgmtS2LSubLspIpv4) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtS2LSubLspIpv4.Marshal(b, m, deterministic)
}
func (dst *RsvpMgmtS2LSubLspIpv4) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtS2LSubLspIpv4.Merge(dst, src)
}
func (m *RsvpMgmtS2LSubLspIpv4) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtS2LSubLspIpv4.Size(m)
}
func (m *RsvpMgmtS2LSubLspIpv4) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtS2LSubLspIpv4.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtS2LSubLspIpv4 proto.InternalMessageInfo

func (m *RsvpMgmtS2LSubLspIpv4) GetS2LDestinationAddress() string {
	if m != nil {
		return m.S2LDestinationAddress
	}
	return ""
}

// RSVP Filter
type RsvpMgmtFilterIpv4 struct {
	// Source Address
	SourceAddress string `protobuf:"bytes,1,opt,name=source_address,json=sourceAddress" json:"source_address,omitempty"`
	// Source Port
	SourcePort           uint32   `protobuf:"varint,2,opt,name=source_port,json=sourcePort" json:"source_port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RsvpMgmtFilterIpv4) Reset()         { *m = RsvpMgmtFilterIpv4{} }
func (m *RsvpMgmtFilterIpv4) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtFilterIpv4) ProtoMessage()    {}
func (*RsvpMgmtFilterIpv4) Descriptor() ([]byte, []int) {
	return fileDescriptor_rsvp_mgmt_request_detail_527ab3c8be72aad2, []int{3}
}
func (m *RsvpMgmtFilterIpv4) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtFilterIpv4.Unmarshal(m, b)
}
func (m *RsvpMgmtFilterIpv4) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtFilterIpv4.Marshal(b, m, deterministic)
}
func (dst *RsvpMgmtFilterIpv4) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtFilterIpv4.Merge(dst, src)
}
func (m *RsvpMgmtFilterIpv4) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtFilterIpv4.Size(m)
}
func (m *RsvpMgmtFilterIpv4) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtFilterIpv4.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtFilterIpv4 proto.InternalMessageInfo

func (m *RsvpMgmtFilterIpv4) GetSourceAddress() string {
	if m != nil {
		return m.SourceAddress
	}
	return ""
}

func (m *RsvpMgmtFilterIpv4) GetSourcePort() uint32 {
	if m != nil {
		return m.SourcePort
	}
	return 0
}

// RSVP P2MP IPv4 FilterSpec
type RsvpMgmtFilterP2MpIpv4 struct {
	// Source Address
	SourceAddress string `protobuf:"bytes,1,opt,name=source_address,json=sourceAddress" json:"source_address,omitempty"`
	// Source Port
	SourcePort uint32 `protobuf:"varint,2,opt,name=source_port,json=sourcePort" json:"source_port,omitempty"`
	// Point to Multipoint SubGroup Origin
	P2MpSubGroupOrigin string `protobuf:"bytes,3,opt,name=p2_mp_sub_group_origin,json=p2MpSubGroupOrigin" json:"p2_mp_sub_group_origin,omitempty"`
	// Point to Multipoint Subgroup ID
	SubGroupId           uint32   `protobuf:"varint,4,opt,name=sub_group_id,json=subGroupId" json:"sub_group_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RsvpMgmtFilterP2MpIpv4) Reset()         { *m = RsvpMgmtFilterP2MpIpv4{} }
func (m *RsvpMgmtFilterP2MpIpv4) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtFilterP2MpIpv4) ProtoMessage()    {}
func (*RsvpMgmtFilterP2MpIpv4) Descriptor() ([]byte, []int) {
	return fileDescriptor_rsvp_mgmt_request_detail_527ab3c8be72aad2, []int{4}
}
func (m *RsvpMgmtFilterP2MpIpv4) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtFilterP2MpIpv4.Unmarshal(m, b)
}
func (m *RsvpMgmtFilterP2MpIpv4) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtFilterP2MpIpv4.Marshal(b, m, deterministic)
}
func (dst *RsvpMgmtFilterP2MpIpv4) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtFilterP2MpIpv4.Merge(dst, src)
}
func (m *RsvpMgmtFilterP2MpIpv4) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtFilterP2MpIpv4.Size(m)
}
func (m *RsvpMgmtFilterP2MpIpv4) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtFilterP2MpIpv4.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtFilterP2MpIpv4 proto.InternalMessageInfo

func (m *RsvpMgmtFilterP2MpIpv4) GetSourceAddress() string {
	if m != nil {
		return m.SourceAddress
	}
	return ""
}

func (m *RsvpMgmtFilterP2MpIpv4) GetSourcePort() uint32 {
	if m != nil {
		return m.SourcePort
	}
	return 0
}

func (m *RsvpMgmtFilterP2MpIpv4) GetP2MpSubGroupOrigin() string {
	if m != nil {
		return m.P2MpSubGroupOrigin
	}
	return ""
}

func (m *RsvpMgmtFilterP2MpIpv4) GetSubGroupId() uint32 {
	if m != nil {
		return m.SubGroupId
	}
	return 0
}

// Union of the different RSVP filterspec types
type RsvpFilterUnion struct {
	FilterType string `protobuf:"bytes,1,opt,name=filter_type,json=filterType" json:"filter_type,omitempty"`
	// UDP IPV4 FilterSpec
	UdpIpv4Session *RsvpMgmtFilterIpv4 `protobuf:"bytes,2,opt,name=udp_ipv4_session,json=udpIpv4Session" json:"udp_ipv4_session,omitempty"`
	// IPv4 P2MP LSP FilterSpec
	P2MpIpv4Session      *RsvpMgmtFilterP2MpIpv4 `protobuf:"bytes,3,opt,name=p2_mp_ipv4_session,json=p2MpIpv4Session" json:"p2_mp_ipv4_session,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *RsvpFilterUnion) Reset()         { *m = RsvpFilterUnion{} }
func (m *RsvpFilterUnion) String() string { return proto.CompactTextString(m) }
func (*RsvpFilterUnion) ProtoMessage()    {}
func (*RsvpFilterUnion) Descriptor() ([]byte, []int) {
	return fileDescriptor_rsvp_mgmt_request_detail_527ab3c8be72aad2, []int{5}
}
func (m *RsvpFilterUnion) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpFilterUnion.Unmarshal(m, b)
}
func (m *RsvpFilterUnion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpFilterUnion.Marshal(b, m, deterministic)
}
func (dst *RsvpFilterUnion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpFilterUnion.Merge(dst, src)
}
func (m *RsvpFilterUnion) XXX_Size() int {
	return xxx_messageInfo_RsvpFilterUnion.Size(m)
}
func (m *RsvpFilterUnion) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpFilterUnion.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpFilterUnion proto.InternalMessageInfo

func (m *RsvpFilterUnion) GetFilterType() string {
	if m != nil {
		return m.FilterType
	}
	return ""
}

func (m *RsvpFilterUnion) GetUdpIpv4Session() *RsvpMgmtFilterIpv4 {
	if m != nil {
		return m.UdpIpv4Session
	}
	return nil
}

func (m *RsvpFilterUnion) GetP2MpIpv4Session() *RsvpMgmtFilterP2MpIpv4 {
	if m != nil {
		return m.P2MpIpv4Session
	}
	return nil
}

// RSVP FilterSpec Info
type RsvpMgmtFilterInfo struct {
	// RSVP Filter
	RsvpFilter           *RsvpFilterUnion `protobuf:"bytes,1,opt,name=rsvp_filter,json=rsvpFilter" json:"rsvp_filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *RsvpMgmtFilterInfo) Reset()         { *m = RsvpMgmtFilterInfo{} }
func (m *RsvpMgmtFilterInfo) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtFilterInfo) ProtoMessage()    {}
func (*RsvpMgmtFilterInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_rsvp_mgmt_request_detail_527ab3c8be72aad2, []int{6}
}
func (m *RsvpMgmtFilterInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtFilterInfo.Unmarshal(m, b)
}
func (m *RsvpMgmtFilterInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtFilterInfo.Marshal(b, m, deterministic)
}
func (dst *RsvpMgmtFilterInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtFilterInfo.Merge(dst, src)
}
func (m *RsvpMgmtFilterInfo) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtFilterInfo.Size(m)
}
func (m *RsvpMgmtFilterInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtFilterInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtFilterInfo proto.InternalMessageInfo

func (m *RsvpMgmtFilterInfo) GetRsvpFilter() *RsvpFilterUnion {
	if m != nil {
		return m.RsvpFilter
	}
	return nil
}

// RSVP UDP IPv4 Session
type RsvpMgmtSessionUdpIpv4 struct {
	// Destination address
	DestinationAddress string `protobuf:"bytes,1,opt,name=destination_address,json=destinationAddress" json:"destination_address,omitempty"`
	// Protocol type (originally defined in RFC 790, further values in subsequent RFCs)
	Protocol uint32 `protobuf:"varint,2,opt,name=protocol" json:"protocol,omitempty"`
	// The Session Destination Port
	DestinationPort      uint32   `protobuf:"varint,3,opt,name=destination_port,json=destinationPort" json:"destination_port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RsvpMgmtSessionUdpIpv4) Reset()         { *m = RsvpMgmtSessionUdpIpv4{} }
func (m *RsvpMgmtSessionUdpIpv4) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtSessionUdpIpv4) ProtoMessage()    {}
func (*RsvpMgmtSessionUdpIpv4) Descriptor() ([]byte, []int) {
	return fileDescriptor_rsvp_mgmt_request_detail_527ab3c8be72aad2, []int{7}
}
func (m *RsvpMgmtSessionUdpIpv4) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtSessionUdpIpv4.Unmarshal(m, b)
}
func (m *RsvpMgmtSessionUdpIpv4) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtSessionUdpIpv4.Marshal(b, m, deterministic)
}
func (dst *RsvpMgmtSessionUdpIpv4) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtSessionUdpIpv4.Merge(dst, src)
}
func (m *RsvpMgmtSessionUdpIpv4) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtSessionUdpIpv4.Size(m)
}
func (m *RsvpMgmtSessionUdpIpv4) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtSessionUdpIpv4.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtSessionUdpIpv4 proto.InternalMessageInfo

func (m *RsvpMgmtSessionUdpIpv4) GetDestinationAddress() string {
	if m != nil {
		return m.DestinationAddress
	}
	return ""
}

func (m *RsvpMgmtSessionUdpIpv4) GetProtocol() uint32 {
	if m != nil {
		return m.Protocol
	}
	return 0
}

func (m *RsvpMgmtSessionUdpIpv4) GetDestinationPort() uint32 {
	if m != nil {
		return m.DestinationPort
	}
	return 0
}

// RSVP LSP-Tunnel-IPv4 Session
type RsvpMgmtSessionLspTunnelIpv4 struct {
	// Destination address
	DestinationAddress string `protobuf:"bytes,1,opt,name=destination_address,json=destinationAddress" json:"destination_address,omitempty"`
	// The Session Tunnel ID
	TunnelId uint32 `protobuf:"varint,2,opt,name=tunnel_id,json=tunnelId" json:"tunnel_id,omitempty"`
	// The Session Extended Tunnel ID
	ExtendedTunnelId     string   `protobuf:"bytes,3,opt,name=extended_tunnel_id,json=extendedTunnelId" json:"extended_tunnel_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RsvpMgmtSessionLspTunnelIpv4) Reset()         { *m = RsvpMgmtSessionLspTunnelIpv4{} }
func (m *RsvpMgmtSessionLspTunnelIpv4) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtSessionLspTunnelIpv4) ProtoMessage()    {}
func (*RsvpMgmtSessionLspTunnelIpv4) Descriptor() ([]byte, []int) {
	return fileDescriptor_rsvp_mgmt_request_detail_527ab3c8be72aad2, []int{8}
}
func (m *RsvpMgmtSessionLspTunnelIpv4) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtSessionLspTunnelIpv4.Unmarshal(m, b)
}
func (m *RsvpMgmtSessionLspTunnelIpv4) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtSessionLspTunnelIpv4.Marshal(b, m, deterministic)
}
func (dst *RsvpMgmtSessionLspTunnelIpv4) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtSessionLspTunnelIpv4.Merge(dst, src)
}
func (m *RsvpMgmtSessionLspTunnelIpv4) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtSessionLspTunnelIpv4.Size(m)
}
func (m *RsvpMgmtSessionLspTunnelIpv4) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtSessionLspTunnelIpv4.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtSessionLspTunnelIpv4 proto.InternalMessageInfo

func (m *RsvpMgmtSessionLspTunnelIpv4) GetDestinationAddress() string {
	if m != nil {
		return m.DestinationAddress
	}
	return ""
}

func (m *RsvpMgmtSessionLspTunnelIpv4) GetTunnelId() uint32 {
	if m != nil {
		return m.TunnelId
	}
	return 0
}

func (m *RsvpMgmtSessionLspTunnelIpv4) GetExtendedTunnelId() string {
	if m != nil {
		return m.ExtendedTunnelId
	}
	return ""
}

// RSVP UNI IPv4 Session
type RsvpMgmtSessionUniIpv4 struct {
	// Destination address
	DestinationAddress string `protobuf:"bytes,1,opt,name=destination_address,json=destinationAddress" json:"destination_address,omitempty"`
	// The Session Tunnel ID
	TunnelId uint32 `protobuf:"varint,2,opt,name=tunnel_id,json=tunnelId" json:"tunnel_id,omitempty"`
	// The Session Extended Address
	ExtendedAddress      string   `protobuf:"bytes,3,opt,name=extended_address,json=extendedAddress" json:"extended_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RsvpMgmtSessionUniIpv4) Reset()         { *m = RsvpMgmtSessionUniIpv4{} }
func (m *RsvpMgmtSessionUniIpv4) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtSessionUniIpv4) ProtoMessage()    {}
func (*RsvpMgmtSessionUniIpv4) Descriptor() ([]byte, []int) {
	return fileDescriptor_rsvp_mgmt_request_detail_527ab3c8be72aad2, []int{9}
}
func (m *RsvpMgmtSessionUniIpv4) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtSessionUniIpv4.Unmarshal(m, b)
}
func (m *RsvpMgmtSessionUniIpv4) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtSessionUniIpv4.Marshal(b, m, deterministic)
}
func (dst *RsvpMgmtSessionUniIpv4) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtSessionUniIpv4.Merge(dst, src)
}
func (m *RsvpMgmtSessionUniIpv4) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtSessionUniIpv4.Size(m)
}
func (m *RsvpMgmtSessionUniIpv4) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtSessionUniIpv4.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtSessionUniIpv4 proto.InternalMessageInfo

func (m *RsvpMgmtSessionUniIpv4) GetDestinationAddress() string {
	if m != nil {
		return m.DestinationAddress
	}
	return ""
}

func (m *RsvpMgmtSessionUniIpv4) GetTunnelId() uint32 {
	if m != nil {
		return m.TunnelId
	}
	return 0
}

func (m *RsvpMgmtSessionUniIpv4) GetExtendedAddress() string {
	if m != nil {
		return m.ExtendedAddress
	}
	return ""
}

// RSVP P2MP-LSP-Tunnel-IPv4 Session
type RsvpMgmtSessionP2MpLspTunnelIpv4 struct {
	// The Point to Multipoint ID
	P2MpId uint32 `protobuf:"varint,1,opt,name=p2_mp_id,json=p2MpId" json:"p2_mp_id,omitempty"`
	// The Session Tunnel ID
	TunnelId uint32 `protobuf:"varint,2,opt,name=tunnel_id,json=tunnelId" json:"tunnel_id,omitempty"`
	// The Session Extended Tunnel ID
	ExtendedTunnelId     string   `protobuf:"bytes,3,opt,name=extended_tunnel_id,json=extendedTunnelId" json:"extended_tunnel_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RsvpMgmtSessionP2MpLspTunnelIpv4) Reset()         { *m = RsvpMgmtSessionP2MpLspTunnelIpv4{} }
func (m *RsvpMgmtSessionP2MpLspTunnelIpv4) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtSessionP2MpLspTunnelIpv4) ProtoMessage()    {}
func (*RsvpMgmtSessionP2MpLspTunnelIpv4) Descriptor() ([]byte, []int) {
	return fileDescriptor_rsvp_mgmt_request_detail_527ab3c8be72aad2, []int{10}
}
func (m *RsvpMgmtSessionP2MpLspTunnelIpv4) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtSessionP2MpLspTunnelIpv4.Unmarshal(m, b)
}
func (m *RsvpMgmtSessionP2MpLspTunnelIpv4) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtSessionP2MpLspTunnelIpv4.Marshal(b, m, deterministic)
}
func (dst *RsvpMgmtSessionP2MpLspTunnelIpv4) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtSessionP2MpLspTunnelIpv4.Merge(dst, src)
}
func (m *RsvpMgmtSessionP2MpLspTunnelIpv4) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtSessionP2MpLspTunnelIpv4.Size(m)
}
func (m *RsvpMgmtSessionP2MpLspTunnelIpv4) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtSessionP2MpLspTunnelIpv4.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtSessionP2MpLspTunnelIpv4 proto.InternalMessageInfo

func (m *RsvpMgmtSessionP2MpLspTunnelIpv4) GetP2MpId() uint32 {
	if m != nil {
		return m.P2MpId
	}
	return 0
}

func (m *RsvpMgmtSessionP2MpLspTunnelIpv4) GetTunnelId() uint32 {
	if m != nil {
		return m.TunnelId
	}
	return 0
}

func (m *RsvpMgmtSessionP2MpLspTunnelIpv4) GetExtendedTunnelId() string {
	if m != nil {
		return m.ExtendedTunnelId
	}
	return ""
}

// Union of the different RSVP session types
type RsvpSessionUnion struct {
	SessionType string `protobuf:"bytes,1,opt,name=session_type,json=sessionType" json:"session_type,omitempty"`
	// UDP IPv4 session
	Ipv4 *RsvpMgmtSessionUdpIpv4 `protobuf:"bytes,2,opt,name=ipv4" json:"ipv4,omitempty"`
	// IPv4 LSP session
	Ipv4LspSession *RsvpMgmtSessionLspTunnelIpv4 `protobuf:"bytes,3,opt,name=ipv4_lsp_session,json=ipv4LspSession" json:"ipv4_lsp_session,omitempty"`
	// IPv4 UNI session
	Ipv4UniSession *RsvpMgmtSessionUniIpv4 `protobuf:"bytes,4,opt,name=ipv4_uni_session,json=ipv4UniSession" json:"ipv4_uni_session,omitempty"`
	// IPv4 P2MP LSP session
	Ipv4P2MpLspSession   *RsvpMgmtSessionP2MpLspTunnelIpv4 `protobuf:"bytes,5,opt,name=ipv4_p2_mp_lsp_session,json=ipv4P2MpLspSession" json:"ipv4_p2_mp_lsp_session,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *RsvpSessionUnion) Reset()         { *m = RsvpSessionUnion{} }
func (m *RsvpSessionUnion) String() string { return proto.CompactTextString(m) }
func (*RsvpSessionUnion) ProtoMessage()    {}
func (*RsvpSessionUnion) Descriptor() ([]byte, []int) {
	return fileDescriptor_rsvp_mgmt_request_detail_527ab3c8be72aad2, []int{11}
}
func (m *RsvpSessionUnion) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpSessionUnion.Unmarshal(m, b)
}
func (m *RsvpSessionUnion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpSessionUnion.Marshal(b, m, deterministic)
}
func (dst *RsvpSessionUnion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpSessionUnion.Merge(dst, src)
}
func (m *RsvpSessionUnion) XXX_Size() int {
	return xxx_messageInfo_RsvpSessionUnion.Size(m)
}
func (m *RsvpSessionUnion) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpSessionUnion.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpSessionUnion proto.InternalMessageInfo

func (m *RsvpSessionUnion) GetSessionType() string {
	if m != nil {
		return m.SessionType
	}
	return ""
}

func (m *RsvpSessionUnion) GetIpv4() *RsvpMgmtSessionUdpIpv4 {
	if m != nil {
		return m.Ipv4
	}
	return nil
}

func (m *RsvpSessionUnion) GetIpv4LspSession() *RsvpMgmtSessionLspTunnelIpv4 {
	if m != nil {
		return m.Ipv4LspSession
	}
	return nil
}

func (m *RsvpSessionUnion) GetIpv4UniSession() *RsvpMgmtSessionUniIpv4 {
	if m != nil {
		return m.Ipv4UniSession
	}
	return nil
}

func (m *RsvpSessionUnion) GetIpv4P2MpLspSession() *RsvpMgmtSessionP2MpLspTunnelIpv4 {
	if m != nil {
		return m.Ipv4P2MpLspSession
	}
	return nil
}

// RSVP Session Info
type RsvpMgmtSessionInfo struct {
	// RSVP Session
	RsvpSession          *RsvpSessionUnion `protobuf:"bytes,1,opt,name=rsvp_session,json=rsvpSession" json:"rsvp_session,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RsvpMgmtSessionInfo) Reset()         { *m = RsvpMgmtSessionInfo{} }
func (m *RsvpMgmtSessionInfo) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtSessionInfo) ProtoMessage()    {}
func (*RsvpMgmtSessionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_rsvp_mgmt_request_detail_527ab3c8be72aad2, []int{12}
}
func (m *RsvpMgmtSessionInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtSessionInfo.Unmarshal(m, b)
}
func (m *RsvpMgmtSessionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtSessionInfo.Marshal(b, m, deterministic)
}
func (dst *RsvpMgmtSessionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtSessionInfo.Merge(dst, src)
}
func (m *RsvpMgmtSessionInfo) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtSessionInfo.Size(m)
}
func (m *RsvpMgmtSessionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtSessionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtSessionInfo proto.InternalMessageInfo

func (m *RsvpMgmtSessionInfo) GetRsvpSession() *RsvpSessionUnion {
	if m != nil {
		return m.RsvpSession
	}
	return nil
}

// RSVP Reservation Style
type RsvpMgmtStyle struct {
	// The Reservation Type: WF, SE or FF
	ReservationType      string   `protobuf:"bytes,1,opt,name=reservation_type,json=reservationType" json:"reservation_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RsvpMgmtStyle) Reset()         { *m = RsvpMgmtStyle{} }
func (m *RsvpMgmtStyle) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtStyle) ProtoMessage()    {}
func (*RsvpMgmtStyle) Descriptor() ([]byte, []int) {
	return fileDescriptor_rsvp_mgmt_request_detail_527ab3c8be72aad2, []int{13}
}
func (m *RsvpMgmtStyle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtStyle.Unmarshal(m, b)
}
func (m *RsvpMgmtStyle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtStyle.Marshal(b, m, deterministic)
}
func (dst *RsvpMgmtStyle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtStyle.Merge(dst, src)
}
func (m *RsvpMgmtStyle) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtStyle.Size(m)
}
func (m *RsvpMgmtStyle) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtStyle.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtStyle proto.InternalMessageInfo

func (m *RsvpMgmtStyle) GetReservationType() string {
	if m != nil {
		return m.ReservationType
	}
	return ""
}

// RSVP Policy Sources
type RsvpMgmtPolicySources struct {
	// Policy Source is TE Link
	IsTeLink bool `protobuf:"varint,1,opt,name=is_te_link,json=isTeLink" json:"is_te_link,omitempty"`
	// Policy Source is Local
	IsLocal bool `protobuf:"varint,2,opt,name=is_local,json=isLocal" json:"is_local,omitempty"`
	// Policy Source is COPS
	IsCops bool `protobuf:"varint,3,opt,name=is_cops,json=isCops" json:"is_cops,omitempty"`
	// Policy Source is Default
	IsDefault bool `protobuf:"varint,4,opt,name=is_default,json=isDefault" json:"is_default,omitempty"`
	// Policy Source is Cable
	IsCable              bool     `protobuf:"varint,5,opt,name=is_cable,json=isCable" json:"is_cable,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RsvpMgmtPolicySources) Reset()         { *m = RsvpMgmtPolicySources{} }
func (m *RsvpMgmtPolicySources) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtPolicySources) ProtoMessage()    {}
func (*RsvpMgmtPolicySources) Descriptor() ([]byte, []int) {
	return fileDescriptor_rsvp_mgmt_request_detail_527ab3c8be72aad2, []int{14}
}
func (m *RsvpMgmtPolicySources) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtPolicySources.Unmarshal(m, b)
}
func (m *RsvpMgmtPolicySources) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtPolicySources.Marshal(b, m, deterministic)
}
func (dst *RsvpMgmtPolicySources) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtPolicySources.Merge(dst, src)
}
func (m *RsvpMgmtPolicySources) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtPolicySources.Size(m)
}
func (m *RsvpMgmtPolicySources) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtPolicySources.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtPolicySources proto.InternalMessageInfo

func (m *RsvpMgmtPolicySources) GetIsTeLink() bool {
	if m != nil {
		return m.IsTeLink
	}
	return false
}

func (m *RsvpMgmtPolicySources) GetIsLocal() bool {
	if m != nil {
		return m.IsLocal
	}
	return false
}

func (m *RsvpMgmtPolicySources) GetIsCops() bool {
	if m != nil {
		return m.IsCops
	}
	return false
}

func (m *RsvpMgmtPolicySources) GetIsDefault() bool {
	if m != nil {
		return m.IsDefault
	}
	return false
}

func (m *RsvpMgmtPolicySources) GetIsCable() bool {
	if m != nil {
		return m.IsCable
	}
	return false
}

// RSVP Policy Flags
type RsvpMgmtPolicyFlags struct {
	// Accepted
	IsAccepted bool `protobuf:"varint,1,opt,name=is_accepted,json=isAccepted" json:"is_accepted,omitempty"`
	// Installed
	IsInstalled bool `protobuf:"varint,2,opt,name=is_installed,json=isInstalled" json:"is_installed,omitempty"`
	// Forwarding
	IsForwarding         bool     `protobuf:"varint,3,opt,name=is_forwarding,json=isForwarding" json:"is_forwarding,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RsvpMgmtPolicyFlags) Reset()         { *m = RsvpMgmtPolicyFlags{} }
func (m *RsvpMgmtPolicyFlags) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtPolicyFlags) ProtoMessage()    {}
func (*RsvpMgmtPolicyFlags) Descriptor() ([]byte, []int) {
	return fileDescriptor_rsvp_mgmt_request_detail_527ab3c8be72aad2, []int{15}
}
func (m *RsvpMgmtPolicyFlags) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtPolicyFlags.Unmarshal(m, b)
}
func (m *RsvpMgmtPolicyFlags) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtPolicyFlags.Marshal(b, m, deterministic)
}
func (dst *RsvpMgmtPolicyFlags) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtPolicyFlags.Merge(dst, src)
}
func (m *RsvpMgmtPolicyFlags) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtPolicyFlags.Size(m)
}
func (m *RsvpMgmtPolicyFlags) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtPolicyFlags.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtPolicyFlags proto.InternalMessageInfo

func (m *RsvpMgmtPolicyFlags) GetIsAccepted() bool {
	if m != nil {
		return m.IsAccepted
	}
	return false
}

func (m *RsvpMgmtPolicyFlags) GetIsInstalled() bool {
	if m != nil {
		return m.IsInstalled
	}
	return false
}

func (m *RsvpMgmtPolicyFlags) GetIsForwarding() bool {
	if m != nil {
		return m.IsForwarding
	}
	return false
}

// Key to uniquely identify some RSVP records
type RsvpMgmtKey struct {
	// Point-to-multipoint ID
	P2MpId uint32 `protobuf:"varint,1,opt,name=p2_mp_id,json=p2MpId" json:"p2_mp_id,omitempty"`
	// Destination address
	DestinationAddress string `protobuf:"bytes,2,opt,name=destination_address,json=destinationAddress" json:"destination_address,omitempty"`
	// Destination Port or Tunnel ID. For the LSP and OUNI session types this represents the Tunnel ID whereas for the UDP session type this represents the Destination Port
	DestinationPortOrTunnelId uint32 `protobuf:"varint,3,opt,name=destination_port_or_tunnel_id,json=destinationPortOrTunnelId" json:"destination_port_or_tunnel_id,omitempty"`
	// Protocol. UDP session type this represents the Protocol (UDP not supported at present)
	Protocol uint32 `protobuf:"varint,4,opt,name=protocol" json:"protocol,omitempty"`
	// Protocol or Extended Tunnel ID. For the LSP and OUNI sesion types this represents the Extended Tunnel ID
	ExtendedTunnelId string `protobuf:"bytes,5,opt,name=extended_tunnel_id,json=extendedTunnelId" json:"extended_tunnel_id,omitempty"`
	// Session Type (e.g. LSP, OUNI or UDP)
	SessionType string `protobuf:"bytes,6,opt,name=session_type,json=sessionType" json:"session_type,omitempty"`
	// Source Address
	SourceAddress string `protobuf:"bytes,7,opt,name=source_address,json=sourceAddress" json:"source_address,omitempty"`
	// Source Port or LSP_ID. For the LSP and OUNI session types this represents the LSP_ID whereas for the UDP session type this represents the SourcePort
	SourcePortOrLspId uint32 `protobuf:"varint,8,opt,name=source_port_or_lsp_id,json=sourcePortOrLspId" json:"source_port_or_lsp_id,omitempty"`
	// Point to Multipoint SubGroup Origin
	P2MpSubGroupOrigin string `protobuf:"bytes,9,opt,name=p2_mp_sub_group_origin,json=p2MpSubGroupOrigin" json:"p2_mp_sub_group_origin,omitempty"`
	// Point to Multipoint Subgroup ID
	SubGroupId uint32 `protobuf:"varint,10,opt,name=sub_group_id,json=subGroupId" json:"sub_group_id,omitempty"`
	// Signalling VRF ID
	Vrfid                uint32   `protobuf:"varint,11,opt,name=vrfid" json:"vrfid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RsvpMgmtKey) Reset()         { *m = RsvpMgmtKey{} }
func (m *RsvpMgmtKey) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtKey) ProtoMessage()    {}
func (*RsvpMgmtKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_rsvp_mgmt_request_detail_527ab3c8be72aad2, []int{16}
}
func (m *RsvpMgmtKey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtKey.Unmarshal(m, b)
}
func (m *RsvpMgmtKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtKey.Marshal(b, m, deterministic)
}
func (dst *RsvpMgmtKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtKey.Merge(dst, src)
}
func (m *RsvpMgmtKey) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtKey.Size(m)
}
func (m *RsvpMgmtKey) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtKey.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtKey proto.InternalMessageInfo

func (m *RsvpMgmtKey) GetP2MpId() uint32 {
	if m != nil {
		return m.P2MpId
	}
	return 0
}

func (m *RsvpMgmtKey) GetDestinationAddress() string {
	if m != nil {
		return m.DestinationAddress
	}
	return ""
}

func (m *RsvpMgmtKey) GetDestinationPortOrTunnelId() uint32 {
	if m != nil {
		return m.DestinationPortOrTunnelId
	}
	return 0
}

func (m *RsvpMgmtKey) GetProtocol() uint32 {
	if m != nil {
		return m.Protocol
	}
	return 0
}

func (m *RsvpMgmtKey) GetExtendedTunnelId() string {
	if m != nil {
		return m.ExtendedTunnelId
	}
	return ""
}

func (m *RsvpMgmtKey) GetSessionType() string {
	if m != nil {
		return m.SessionType
	}
	return ""
}

func (m *RsvpMgmtKey) GetSourceAddress() string {
	if m != nil {
		return m.SourceAddress
	}
	return ""
}

func (m *RsvpMgmtKey) GetSourcePortOrLspId() uint32 {
	if m != nil {
		return m.SourcePortOrLspId
	}
	return 0
}

func (m *RsvpMgmtKey) GetP2MpSubGroupOrigin() string {
	if m != nil {
		return m.P2MpSubGroupOrigin
	}
	return ""
}

func (m *RsvpMgmtKey) GetSubGroupId() uint32 {
	if m != nil {
		return m.SubGroupId
	}
	return 0
}

func (m *RsvpMgmtKey) GetVrfid() uint32 {
	if m != nil {
		return m.Vrfid
	}
	return 0
}

// RSVP Policy Query Flags
type RsvpMgmtPolicyQueryFlags struct {
	// Needed
	IsNeeded bool `protobuf:"varint,1,opt,name=is_needed,json=isNeeded" json:"is_needed,omitempty"`
	// Report Required
	IsReportRequired bool `protobuf:"varint,2,opt,name=is_report_required,json=isReportRequired" json:"is_report_required,omitempty"`
	// Resynchronization
	IsResync bool `protobuf:"varint,3,opt,name=is_resync,json=isResync" json:"is_resync,omitempty"`
	// Bypass
	IsBypass             bool     `protobuf:"varint,4,opt,name=is_bypass,json=isBypass" json:"is_bypass,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RsvpMgmtPolicyQueryFlags) Reset()         { *m = RsvpMgmtPolicyQueryFlags{} }
func (m *RsvpMgmtPolicyQueryFlags) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtPolicyQueryFlags) ProtoMessage()    {}
func (*RsvpMgmtPolicyQueryFlags) Descriptor() ([]byte, []int) {
	return fileDescriptor_rsvp_mgmt_request_detail_527ab3c8be72aad2, []int{17}
}
func (m *RsvpMgmtPolicyQueryFlags) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtPolicyQueryFlags.Unmarshal(m, b)
}
func (m *RsvpMgmtPolicyQueryFlags) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtPolicyQueryFlags.Marshal(b, m, deterministic)
}
func (dst *RsvpMgmtPolicyQueryFlags) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtPolicyQueryFlags.Merge(dst, src)
}
func (m *RsvpMgmtPolicyQueryFlags) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtPolicyQueryFlags.Size(m)
}
func (m *RsvpMgmtPolicyQueryFlags) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtPolicyQueryFlags.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtPolicyQueryFlags proto.InternalMessageInfo

func (m *RsvpMgmtPolicyQueryFlags) GetIsNeeded() bool {
	if m != nil {
		return m.IsNeeded
	}
	return false
}

func (m *RsvpMgmtPolicyQueryFlags) GetIsReportRequired() bool {
	if m != nil {
		return m.IsReportRequired
	}
	return false
}

func (m *RsvpMgmtPolicyQueryFlags) GetIsResync() bool {
	if m != nil {
		return m.IsResync
	}
	return false
}

func (m *RsvpMgmtPolicyQueryFlags) GetIsBypass() bool {
	if m != nil {
		return m.IsBypass
	}
	return false
}

// RSVP Flow Spec
type RsvpMgmtFlowSpec struct {
	// The Flow Average Rate in bytes per second
	FlowAverageRate uint64 `protobuf:"varint,1,opt,name=flow_average_rate,json=flowAverageRate" json:"flow_average_rate,omitempty"`
	// The Flow Maximum Burst
	FlowMaxBurst uint64 `protobuf:"varint,2,opt,name=flow_max_burst,json=flowMaxBurst" json:"flow_max_burst,omitempty"`
	// The Flow Peak Rate in bytes per second
	FlowPeakRate uint64 `protobuf:"varint,3,opt,name=flow_peak_rate,json=flowPeakRate" json:"flow_peak_rate,omitempty"`
	// The Flow Minimum Unit
	FlowMinUnit uint32 `protobuf:"varint,4,opt,name=flow_min_unit,json=flowMinUnit" json:"flow_min_unit,omitempty"`
	// The Flow Maximum Unit
	FlowMaxUnit uint32 `protobuf:"varint,5,opt,name=flow_max_unit,json=flowMaxUnit" json:"flow_max_unit,omitempty"`
	// The Flow Requested Rate in bytes per second
	FlowRequestedRate uint64 `protobuf:"varint,6,opt,name=flow_requested_rate,json=flowRequestedRate" json:"flow_requested_rate,omitempty"`
	// The Flow Slack
	FlowSlack uint32 `protobuf:"varint,7,opt,name=flow_slack,json=flowSlack" json:"flow_slack,omitempty"`
	// The Flow Quality of Service
	FlowQos              string   `protobuf:"bytes,8,opt,name=flow_qos,json=flowQos" json:"flow_qos,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RsvpMgmtFlowSpec) Reset()         { *m = RsvpMgmtFlowSpec{} }
func (m *RsvpMgmtFlowSpec) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtFlowSpec) ProtoMessage()    {}
func (*RsvpMgmtFlowSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_rsvp_mgmt_request_detail_527ab3c8be72aad2, []int{18}
}
func (m *RsvpMgmtFlowSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtFlowSpec.Unmarshal(m, b)
}
func (m *RsvpMgmtFlowSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtFlowSpec.Marshal(b, m, deterministic)
}
func (dst *RsvpMgmtFlowSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtFlowSpec.Merge(dst, src)
}
func (m *RsvpMgmtFlowSpec) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtFlowSpec.Size(m)
}
func (m *RsvpMgmtFlowSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtFlowSpec.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtFlowSpec proto.InternalMessageInfo

func (m *RsvpMgmtFlowSpec) GetFlowAverageRate() uint64 {
	if m != nil {
		return m.FlowAverageRate
	}
	return 0
}

func (m *RsvpMgmtFlowSpec) GetFlowMaxBurst() uint64 {
	if m != nil {
		return m.FlowMaxBurst
	}
	return 0
}

func (m *RsvpMgmtFlowSpec) GetFlowPeakRate() uint64 {
	if m != nil {
		return m.FlowPeakRate
	}
	return 0
}

func (m *RsvpMgmtFlowSpec) GetFlowMinUnit() uint32 {
	if m != nil {
		return m.FlowMinUnit
	}
	return 0
}

func (m *RsvpMgmtFlowSpec) GetFlowMaxUnit() uint32 {
	if m != nil {
		return m.FlowMaxUnit
	}
	return 0
}

func (m *RsvpMgmtFlowSpec) GetFlowRequestedRate() uint64 {
	if m != nil {
		return m.FlowRequestedRate
	}
	return 0
}

func (m *RsvpMgmtFlowSpec) GetFlowSlack() uint32 {
	if m != nil {
		return m.FlowSlack
	}
	return 0
}

func (m *RsvpMgmtFlowSpec) GetFlowQos() string {
	if m != nil {
		return m.FlowQos
	}
	return ""
}

// RSVP G709 OTN FlowSpec Info
type RsvpMgmtFlowSpecG709Otn struct {
	// G709 OTN Flow Signal Type (Refer G709 v3)
	FlowSignalType uint32 `protobuf:"varint,1,opt,name=flow_signal_type,json=flowSignalType" json:"flow_signal_type,omitempty"`
	// G709 OTN Flow NVC
	FlowNvc uint32 `protobuf:"varint,2,opt,name=flow_nvc,json=flowNvc" json:"flow_nvc,omitempty"`
	// G709 OTN Flow Multiplier
	FlowMultiplier uint32 `protobuf:"varint,3,opt,name=flow_multiplier,json=flowMultiplier" json:"flow_multiplier,omitempty"`
	// G709 OTN Flow Bit Rate
	FlowBitRate          uint64   `protobuf:"varint,4,opt,name=flow_bit_rate,json=flowBitRate" json:"flow_bit_rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RsvpMgmtFlowSpecG709Otn) Reset()         { *m = RsvpMgmtFlowSpecG709Otn{} }
func (m *RsvpMgmtFlowSpecG709Otn) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtFlowSpecG709Otn) ProtoMessage()    {}
func (*RsvpMgmtFlowSpecG709Otn) Descriptor() ([]byte, []int) {
	return fileDescriptor_rsvp_mgmt_request_detail_527ab3c8be72aad2, []int{19}
}
func (m *RsvpMgmtFlowSpecG709Otn) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtFlowSpecG709Otn.Unmarshal(m, b)
}
func (m *RsvpMgmtFlowSpecG709Otn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtFlowSpecG709Otn.Marshal(b, m, deterministic)
}
func (dst *RsvpMgmtFlowSpecG709Otn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtFlowSpecG709Otn.Merge(dst, src)
}
func (m *RsvpMgmtFlowSpecG709Otn) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtFlowSpecG709Otn.Size(m)
}
func (m *RsvpMgmtFlowSpecG709Otn) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtFlowSpecG709Otn.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtFlowSpecG709Otn proto.InternalMessageInfo

func (m *RsvpMgmtFlowSpecG709Otn) GetFlowSignalType() uint32 {
	if m != nil {
		return m.FlowSignalType
	}
	return 0
}

func (m *RsvpMgmtFlowSpecG709Otn) GetFlowNvc() uint32 {
	if m != nil {
		return m.FlowNvc
	}
	return 0
}

func (m *RsvpMgmtFlowSpecG709Otn) GetFlowMultiplier() uint32 {
	if m != nil {
		return m.FlowMultiplier
	}
	return 0
}

func (m *RsvpMgmtFlowSpecG709Otn) GetFlowBitRate() uint64 {
	if m != nil {
		return m.FlowBitRate
	}
	return 0
}

// Union of different RSVP Generic FlowSpec types
type RsvpMgmtGenFlowSpec struct {
	FlowSpecType string `protobuf:"bytes,1,opt,name=flow_spec_type,json=flowSpecType" json:"flow_spec_type,omitempty"`
	// G709 OTN FlowSpec
	G709OtnFlowSpec      *RsvpMgmtFlowSpecG709Otn `protobuf:"bytes,2,opt,name=g709_otn_flow_spec,json=g709OtnFlowSpec" json:"g709_otn_flow_spec,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *RsvpMgmtGenFlowSpec) Reset()         { *m = RsvpMgmtGenFlowSpec{} }
func (m *RsvpMgmtGenFlowSpec) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtGenFlowSpec) ProtoMessage()    {}
func (*RsvpMgmtGenFlowSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_rsvp_mgmt_request_detail_527ab3c8be72aad2, []int{20}
}
func (m *RsvpMgmtGenFlowSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtGenFlowSpec.Unmarshal(m, b)
}
func (m *RsvpMgmtGenFlowSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtGenFlowSpec.Marshal(b, m, deterministic)
}
func (dst *RsvpMgmtGenFlowSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtGenFlowSpec.Merge(dst, src)
}
func (m *RsvpMgmtGenFlowSpec) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtGenFlowSpec.Size(m)
}
func (m *RsvpMgmtGenFlowSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtGenFlowSpec.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtGenFlowSpec proto.InternalMessageInfo

func (m *RsvpMgmtGenFlowSpec) GetFlowSpecType() string {
	if m != nil {
		return m.FlowSpecType
	}
	return ""
}

func (m *RsvpMgmtGenFlowSpec) GetG709OtnFlowSpec() *RsvpMgmtFlowSpecG709Otn {
	if m != nil {
		return m.G709OtnFlowSpec
	}
	return nil
}

// Hop Info
type RsvpMgmtHopInfo struct {
	// IP address of the neighbor
	NeighborAddress string `protobuf:"bytes,1,opt,name=neighbor_address,json=neighborAddress" json:"neighbor_address,omitempty"`
	// Neighbor Logical Interface Name
	NeighborLogicalInterfaceName string   `protobuf:"bytes,2,opt,name=neighbor_logical_interface_name,json=neighborLogicalInterfaceName" json:"neighbor_logical_interface_name,omitempty"`
	XXX_NoUnkeyedLiteral         struct{} `json:"-"`
	XXX_unrecognized             []byte   `json:"-"`
	XXX_sizecache                int32    `json:"-"`
}

func (m *RsvpMgmtHopInfo) Reset()         { *m = RsvpMgmtHopInfo{} }
func (m *RsvpMgmtHopInfo) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtHopInfo) ProtoMessage()    {}
func (*RsvpMgmtHopInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_rsvp_mgmt_request_detail_527ab3c8be72aad2, []int{21}
}
func (m *RsvpMgmtHopInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtHopInfo.Unmarshal(m, b)
}
func (m *RsvpMgmtHopInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtHopInfo.Marshal(b, m, deterministic)
}
func (dst *RsvpMgmtHopInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtHopInfo.Merge(dst, src)
}
func (m *RsvpMgmtHopInfo) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtHopInfo.Size(m)
}
func (m *RsvpMgmtHopInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtHopInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtHopInfo proto.InternalMessageInfo

func (m *RsvpMgmtHopInfo) GetNeighborAddress() string {
	if m != nil {
		return m.NeighborAddress
	}
	return ""
}

func (m *RsvpMgmtHopInfo) GetNeighborLogicalInterfaceName() string {
	if m != nil {
		return m.NeighborLogicalInterfaceName
	}
	return ""
}

// RSVP/IP Header Info
type RsvpMgmtHeaderInfo struct {
	// RSVP Version
	RsvpVersion uint32 `protobuf:"varint,1,opt,name=rsvp_version,json=rsvpVersion" json:"rsvp_version,omitempty"`
	// RSVP Header Flags (defined in RFC2205 Section 3.1.1)
	RsvpHeaderFlags uint32 `protobuf:"varint,2,opt,name=rsvp_header_flags,json=rsvpHeaderFlags" json:"rsvp_header_flags,omitempty"`
	// RSVP TTL
	RsvpTtl uint32 `protobuf:"varint,3,opt,name=rsvp_ttl,json=rsvpTtl" json:"rsvp_ttl,omitempty"`
	// RSVP Message Type
	RsvpMessageType uint32 `protobuf:"varint,4,opt,name=rsvp_message_type,json=rsvpMessageType" json:"rsvp_message_type,omitempty"`
	// IP Type of Service
	IpTos uint32 `protobuf:"varint,5,opt,name=ip_tos,json=ipTos" json:"ip_tos,omitempty"`
	// IP TTL
	IpTtl uint32 `protobuf:"varint,6,opt,name=ip_ttl,json=ipTtl" json:"ip_ttl,omitempty"`
	// IP Source Address
	IpSourceAddress      string   `protobuf:"bytes,7,opt,name=ip_source_address,json=ipSourceAddress" json:"ip_source_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RsvpMgmtHeaderInfo) Reset()         { *m = RsvpMgmtHeaderInfo{} }
func (m *RsvpMgmtHeaderInfo) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtHeaderInfo) ProtoMessage()    {}
func (*RsvpMgmtHeaderInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_rsvp_mgmt_request_detail_527ab3c8be72aad2, []int{22}
}
func (m *RsvpMgmtHeaderInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtHeaderInfo.Unmarshal(m, b)
}
func (m *RsvpMgmtHeaderInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtHeaderInfo.Marshal(b, m, deterministic)
}
func (dst *RsvpMgmtHeaderInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtHeaderInfo.Merge(dst, src)
}
func (m *RsvpMgmtHeaderInfo) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtHeaderInfo.Size(m)
}
func (m *RsvpMgmtHeaderInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtHeaderInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtHeaderInfo proto.InternalMessageInfo

func (m *RsvpMgmtHeaderInfo) GetRsvpVersion() uint32 {
	if m != nil {
		return m.RsvpVersion
	}
	return 0
}

func (m *RsvpMgmtHeaderInfo) GetRsvpHeaderFlags() uint32 {
	if m != nil {
		return m.RsvpHeaderFlags
	}
	return 0
}

func (m *RsvpMgmtHeaderInfo) GetRsvpTtl() uint32 {
	if m != nil {
		return m.RsvpTtl
	}
	return 0
}

func (m *RsvpMgmtHeaderInfo) GetRsvpMessageType() uint32 {
	if m != nil {
		return m.RsvpMessageType
	}
	return 0
}

func (m *RsvpMgmtHeaderInfo) GetIpTos() uint32 {
	if m != nil {
		return m.IpTos
	}
	return 0
}

func (m *RsvpMgmtHeaderInfo) GetIpTtl() uint32 {
	if m != nil {
		return m.IpTtl
	}
	return 0
}

func (m *RsvpMgmtHeaderInfo) GetIpSourceAddress() string {
	if m != nil {
		return m.IpSourceAddress
	}
	return ""
}

// Request state flags
type RsvpMgmtRequestFlags struct {
	// Local Receiver
	IsLocalReceiver bool `protobuf:"varint,1,opt,name=is_local_receiver,json=isLocalReceiver" json:"is_local_receiver,omitempty"`
	// Is neighbor refreshing
	IsRefreshing bool `protobuf:"varint,2,opt,name=is_refreshing,json=isRefreshing" json:"is_refreshing,omitempty"`
	// Send Confirm message
	IsSendConfirm bool `protobuf:"varint,3,opt,name=is_send_confirm,json=isSendConfirm" json:"is_send_confirm,omitempty"`
	// Is ACK message outstanding
	IsAckOutstanding bool `protobuf:"varint,4,opt,name=is_ack_outstanding,json=isAckOutstanding" json:"is_ack_outstanding,omitempty"`
	// Is MessageID allocated
	IsMessageIdAllocated bool `protobuf:"varint,5,opt,name=is_message_id_allocated,json=isMessageIdAllocated" json:"is_message_id_allocated,omitempty"`
	// A NACK message was received
	IsNackReceived bool `protobuf:"varint,6,opt,name=is_nack_received,json=isNackReceived" json:"is_nack_received,omitempty"`
	// Retransmit the message
	IsRetransmit bool `protobuf:"varint,7,opt,name=is_retransmit,json=isRetransmit" json:"is_retransmit,omitempty"`
	// Message is paced
	IsPaced bool `protobuf:"varint,8,opt,name=is_paced,json=isPaced" json:"is_paced,omitempty"`
	// The Path message contains Label Request
	IsLabelRequestInPath bool `protobuf:"varint,9,opt,name=is_label_request_in_path,json=isLabelRequestInPath" json:"is_label_request_in_path,omitempty"`
	// The Path message contains RRO
	IsRroInPath bool `protobuf:"varint,10,opt,name=is_rro_in_path,json=isRroInPath" json:"is_rro_in_path,omitempty"`
	// Path has Session-Attr object with Record Labels set
	IsRecordLabelInPath bool `protobuf:"varint,11,opt,name=is_record_label_in_path,json=isRecordLabelInPath" json:"is_record_label_in_path,omitempty"`
	// Is node a Merge Point
	IsMergePoint         bool     `protobuf:"varint,12,opt,name=is_merge_point,json=isMergePoint" json:"is_merge_point,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RsvpMgmtRequestFlags) Reset()         { *m = RsvpMgmtRequestFlags{} }
func (m *RsvpMgmtRequestFlags) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtRequestFlags) ProtoMessage()    {}
func (*RsvpMgmtRequestFlags) Descriptor() ([]byte, []int) {
	return fileDescriptor_rsvp_mgmt_request_detail_527ab3c8be72aad2, []int{23}
}
func (m *RsvpMgmtRequestFlags) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtRequestFlags.Unmarshal(m, b)
}
func (m *RsvpMgmtRequestFlags) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtRequestFlags.Marshal(b, m, deterministic)
}
func (dst *RsvpMgmtRequestFlags) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtRequestFlags.Merge(dst, src)
}
func (m *RsvpMgmtRequestFlags) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtRequestFlags.Size(m)
}
func (m *RsvpMgmtRequestFlags) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtRequestFlags.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtRequestFlags proto.InternalMessageInfo

func (m *RsvpMgmtRequestFlags) GetIsLocalReceiver() bool {
	if m != nil {
		return m.IsLocalReceiver
	}
	return false
}

func (m *RsvpMgmtRequestFlags) GetIsRefreshing() bool {
	if m != nil {
		return m.IsRefreshing
	}
	return false
}

func (m *RsvpMgmtRequestFlags) GetIsSendConfirm() bool {
	if m != nil {
		return m.IsSendConfirm
	}
	return false
}

func (m *RsvpMgmtRequestFlags) GetIsAckOutstanding() bool {
	if m != nil {
		return m.IsAckOutstanding
	}
	return false
}

func (m *RsvpMgmtRequestFlags) GetIsMessageIdAllocated() bool {
	if m != nil {
		return m.IsMessageIdAllocated
	}
	return false
}

func (m *RsvpMgmtRequestFlags) GetIsNackReceived() bool {
	if m != nil {
		return m.IsNackReceived
	}
	return false
}

func (m *RsvpMgmtRequestFlags) GetIsRetransmit() bool {
	if m != nil {
		return m.IsRetransmit
	}
	return false
}

func (m *RsvpMgmtRequestFlags) GetIsPaced() bool {
	if m != nil {
		return m.IsPaced
	}
	return false
}

func (m *RsvpMgmtRequestFlags) GetIsLabelRequestInPath() bool {
	if m != nil {
		return m.IsLabelRequestInPath
	}
	return false
}

func (m *RsvpMgmtRequestFlags) GetIsRroInPath() bool {
	if m != nil {
		return m.IsRroInPath
	}
	return false
}

func (m *RsvpMgmtRequestFlags) GetIsRecordLabelInPath() bool {
	if m != nil {
		return m.IsRecordLabelInPath
	}
	return false
}

func (m *RsvpMgmtRequestFlags) GetIsMergePoint() bool {
	if m != nil {
		return m.IsMergePoint
	}
	return false
}

func init() {
	proto.RegisterType((*RsvpMgmtRequestDetail_KEYS)(nil), "cisco_ios_xr_ip_rsvp_oper.rsvp.request_details.request_detail.rsvp_mgmt_request_detail_KEYS")
	proto.RegisterType((*RsvpMgmtRequestDetail)(nil), "cisco_ios_xr_ip_rsvp_oper.rsvp.request_details.request_detail.rsvp_mgmt_request_detail")
	proto.RegisterType((*RsvpMgmtS2LSubLspIpv4)(nil), "cisco_ios_xr_ip_rsvp_oper.rsvp.request_details.request_detail.rsvp_mgmt_s2l_sub_lsp_ipv4")
	proto.RegisterType((*RsvpMgmtFilterIpv4)(nil), "cisco_ios_xr_ip_rsvp_oper.rsvp.request_details.request_detail.rsvp_mgmt_filter_ipv4")
	proto.RegisterType((*RsvpMgmtFilterP2MpIpv4)(nil), "cisco_ios_xr_ip_rsvp_oper.rsvp.request_details.request_detail.rsvp_mgmt_filter_p2mp_ipv4")
	proto.RegisterType((*RsvpFilterUnion)(nil), "cisco_ios_xr_ip_rsvp_oper.rsvp.request_details.request_detail.rsvp_filter_union")
	proto.RegisterType((*RsvpMgmtFilterInfo)(nil), "cisco_ios_xr_ip_rsvp_oper.rsvp.request_details.request_detail.rsvp_mgmt_filter_info")
	proto.RegisterType((*RsvpMgmtSessionUdpIpv4)(nil), "cisco_ios_xr_ip_rsvp_oper.rsvp.request_details.request_detail.rsvp_mgmt_session_udp_ipv4")
	proto.RegisterType((*RsvpMgmtSessionLspTunnelIpv4)(nil), "cisco_ios_xr_ip_rsvp_oper.rsvp.request_details.request_detail.rsvp_mgmt_session_lsp_tunnel_ipv4")
	proto.RegisterType((*RsvpMgmtSessionUniIpv4)(nil), "cisco_ios_xr_ip_rsvp_oper.rsvp.request_details.request_detail.rsvp_mgmt_session_uni_ipv4")
	proto.RegisterType((*RsvpMgmtSessionP2MpLspTunnelIpv4)(nil), "cisco_ios_xr_ip_rsvp_oper.rsvp.request_details.request_detail.rsvp_mgmt_session_p2mp_lsp_tunnel_ipv4")
	proto.RegisterType((*RsvpSessionUnion)(nil), "cisco_ios_xr_ip_rsvp_oper.rsvp.request_details.request_detail.rsvp_session_union")
	proto.RegisterType((*RsvpMgmtSessionInfo)(nil), "cisco_ios_xr_ip_rsvp_oper.rsvp.request_details.request_detail.rsvp_mgmt_session_info")
	proto.RegisterType((*RsvpMgmtStyle)(nil), "cisco_ios_xr_ip_rsvp_oper.rsvp.request_details.request_detail.rsvp_mgmt_style")
	proto.RegisterType((*RsvpMgmtPolicySources)(nil), "cisco_ios_xr_ip_rsvp_oper.rsvp.request_details.request_detail.rsvp_mgmt_policy_sources")
	proto.RegisterType((*RsvpMgmtPolicyFlags)(nil), "cisco_ios_xr_ip_rsvp_oper.rsvp.request_details.request_detail.rsvp_mgmt_policy_flags")
	proto.RegisterType((*RsvpMgmtKey)(nil), "cisco_ios_xr_ip_rsvp_oper.rsvp.request_details.request_detail.rsvp_mgmt_key")
	proto.RegisterType((*RsvpMgmtPolicyQueryFlags)(nil), "cisco_ios_xr_ip_rsvp_oper.rsvp.request_details.request_detail.rsvp_mgmt_policy_query_flags")
	proto.RegisterType((*RsvpMgmtFlowSpec)(nil), "cisco_ios_xr_ip_rsvp_oper.rsvp.request_details.request_detail.rsvp_mgmt_flow_spec")
	proto.RegisterType((*RsvpMgmtFlowSpecG709Otn)(nil), "cisco_ios_xr_ip_rsvp_oper.rsvp.request_details.request_detail.rsvp_mgmt_flow_spec_g709_otn")
	proto.RegisterType((*RsvpMgmtGenFlowSpec)(nil), "cisco_ios_xr_ip_rsvp_oper.rsvp.request_details.request_detail.rsvp_mgmt_gen_flow_spec")
	proto.RegisterType((*RsvpMgmtHopInfo)(nil), "cisco_ios_xr_ip_rsvp_oper.rsvp.request_details.request_detail.rsvp_mgmt_hop_info")
	proto.RegisterType((*RsvpMgmtHeaderInfo)(nil), "cisco_ios_xr_ip_rsvp_oper.rsvp.request_details.request_detail.rsvp_mgmt_header_info")
	proto.RegisterType((*RsvpMgmtRequestFlags)(nil), "cisco_ios_xr_ip_rsvp_oper.rsvp.request_details.request_detail.rsvp_mgmt_request_flags")
}

func init() {
	proto.RegisterFile("rsvp_mgmt_request_detail.proto", fileDescriptor_rsvp_mgmt_request_detail_527ab3c8be72aad2)
}

var fileDescriptor_rsvp_mgmt_request_detail_527ab3c8be72aad2 = []byte{
	// 2143 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x59, 0xcd, 0x8f, 0x1c, 0x47,
	0x15, 0x57, 0xef, 0xce, 0xee, 0xce, 0xd6, 0xec, 0xec, 0xac, 0xcb, 0xb1, 0xdd, 0x0e, 0x36, 0x76,
	0x3a, 0x21, 0x6c, 0x10, 0x5a, 0xa2, 0x89, 0x13, 0x13, 0x48, 0x20, 0xb6, 0x13, 0xc3, 0x2a, 0xb3,
	0xf6, 0xba, 0x67, 0x1d, 0x64, 0x71, 0x28, 0x7a, 0xba, 0x6b, 0x66, 0x4b, 0xd3, 0xd3, 0x5d, 0x5b,
	0x55, 0x33, 0xd9, 0xe5, 0x10, 0x09, 0x90, 0xf8, 0x88, 0x04, 0x27, 0x38, 0x80, 0x90, 0x38, 0x20,
	0x71, 0x86, 0x2b, 0x12, 0xe2, 0xce, 0x81, 0x1b, 0xff, 0x0f, 0xaa, 0x57, 0x55, 0x3d, 0x3d, 0x1f,
	0x6b, 0x2d, 0xa4, 0x7d, 0x59, 0x4d, 0xbd, 0x7a, 0xfd, 0xbe, 0xea, 0xd5, 0x7b, 0xbf, 0x7a, 0x8b,
	0xbe, 0x2c, 0xe4, 0x84, 0x93, 0xd1, 0x60, 0xa4, 0x88, 0xa0, 0x27, 0x63, 0x2a, 0x15, 0x49, 0xa8,
	0x8a, 0x58, 0xba, 0xc7, 0x45, 0xae, 0x72, 0xfc, 0x7e, 0xcc, 0x64, 0x9c, 0x13, 0x96, 0x4b, 0x72,
	0x2a, 0x08, 0xe3, 0x04, 0xf8, 0x73, 0x4e, 0xc5, 0x9e, 0xfe, 0xb5, 0x37, 0xfb, 0x91, 0x9c, 0x5b,
	0x07, 0x7f, 0x5b, 0x45, 0x37, 0xcf, 0xd3, 0x40, 0x3e, 0xfe, 0xe8, 0x59, 0x17, 0x7f, 0x03, 0x5d,
	0x4e, 0xa8, 0x54, 0x2c, 0x8b, 0x14, 0xcb, 0x33, 0x12, 0x25, 0x89, 0xa0, 0x52, 0xfa, 0xde, 0x6d,
	0x6f, 0x77, 0x33, 0xc4, 0xa5, 0xad, 0x7b, 0x66, 0x07, 0xbf, 0x81, 0x76, 0xca, 0x1f, 0xf0, 0x5c,
	0x28, 0x7f, 0xe5, 0xb6, 0xb7, 0xdb, 0x0c, 0x5b, 0x25, 0xfa, 0x61, 0x2e, 0x14, 0x7e, 0x19, 0xd5,
	0xc1, 0x8b, 0x38, 0x4f, 0xfd, 0x55, 0x60, 0x29, 0xd6, 0xf8, 0xeb, 0x08, 0xd3, 0x53, 0x45, 0xb3,
	0x84, 0x26, 0x44, 0x8d, 0xb3, 0x8c, 0xa6, 0x84, 0x25, 0x7e, 0x0d, 0xd4, 0xee, 0xb8, 0x9d, 0x23,
	0xd8, 0xd8, 0x4f, 0xf0, 0x2b, 0x68, 0x4b, 0x52, 0x29, 0xb5, 0x42, 0x75, 0xc6, 0xa9, 0xbf, 0x06,
	0x7c, 0x0d, 0x4b, 0x3b, 0x3a, 0xe3, 0x14, 0xfb, 0xa8, 0xce, 0xdb, 0x64, 0xc4, 0xb5, 0x98, 0x75,
	0x50, 0xb6, 0xce, 0xdb, 0x07, 0x7c, 0x3f, 0xc1, 0x5f, 0x41, 0xdb, 0x32, 0x1f, 0x8b, 0x98, 0x16,
	0xde, 0x6d, 0xc0, 0xe7, 0x4d, 0x43, 0x75, 0x8e, 0xdd, 0x42, 0x0d, 0xcb, 0x06, 0x3e, 0xd5, 0x41,
	0x06, 0x32, 0x24, 0x70, 0x67, 0x17, 0xed, 0xc8, 0x71, 0x8f, 0x0c, 0x44, 0x3e, 0xe6, 0x24, 0x17,
	0x6c, 0xc0, 0x32, 0x7f, 0x13, 0x24, 0x6d, 0xcb, 0x71, 0xef, 0x7b, 0x9a, 0xfc, 0x18, 0xa8, 0xf8,
	0x36, 0xda, 0x9a, 0x72, 0xb2, 0xc4, 0x47, 0x56, 0x96, 0xe5, 0xda, 0x4f, 0xf0, 0x75, 0x54, 0x9f,
	0x88, 0x3e, 0xc9, 0xa2, 0x11, 0xf5, 0x1b, 0x20, 0x63, 0x63, 0x22, 0xfa, 0x8f, 0xa2, 0x11, 0x0d,
	0xfe, 0xd8, 0x44, 0xfe, 0x79, 0x67, 0x86, 0x73, 0xb4, 0x61, 0x9d, 0xf6, 0xdb, 0xb7, 0xbd, 0xdd,
	0x46, 0xfb, 0xe9, 0xde, 0x17, 0xca, 0x90, 0xbd, 0xa9, 0x26, 0x17, 0x60, 0x96, 0xf5, 0xf3, 0xd0,
	0x69, 0xc1, 0x3f, 0x46, 0x5b, 0xb2, 0x4d, 0x52, 0xa2, 0xfd, 0x49, 0x25, 0xf7, 0xdf, 0x02, 0xad,
	0xcf, 0xaa, 0xd3, 0xda, 0x2e, 0x64, 0x13, 0xc6, 0x27, 0x77, 0xc2, 0x4d, 0xd9, 0xee, 0x74, 0xc7,
	0xbd, 0x8e, 0xe4, 0x38, 0x47, 0x9b, 0xfd, 0x34, 0xff, 0x94, 0x48, 0x4e, 0x63, 0xff, 0x0e, 0x28,
	0x0e, 0x2b, 0x53, 0x5c, 0x48, 0x0e, 0xeb, 0xfa, 0x67, 0x97, 0xd3, 0x18, 0xff, 0xd4, 0x43, 0x97,
	0x06, 0x34, 0xa3, 0x82, 0xc5, 0xd3, 0x7d, 0xff, 0x6d, 0xd0, 0xfc, 0x49, 0x65, 0x9a, 0x07, 0x34,
	0x2b, 0x69, 0x6f, 0x59, 0x85, 0x0f, 0x9d, 0x11, 0x29, 0x5a, 0xef, 0xb3, 0x54, 0x51, 0xe1, 0xbf,
	0x03, 0x8a, 0x8f, 0xaa, 0x73, 0x19, 0xc4, 0x9a, 0x03, 0xb6, 0x3a, 0x70, 0x82, 0xd6, 0xa4, 0x3a,
	0x4b, 0xa9, 0x7f, 0x17, 0x94, 0x3d, 0xaa, 0xee, 0x60, 0xb5, 0xd4, 0xd0, 0x08, 0xd7, 0x45, 0x23,
	0x1f, 0x2b, 0x3e, 0x56, 0x84, 0x65, 0x8a, 0x8a, 0x7e, 0x14, 0x53, 0xff, 0x9b, 0x90, 0xf6, 0x2d,
	0x43, 0xdf, 0x77, 0x64, 0x2c, 0xd1, 0xa6, 0xa0, 0x27, 0xa4, 0x9f, 0x46, 0x03, 0xe9, 0xbf, 0x5b,
	0x71, 0xe8, 0xdd, 0x06, 0x48, 0x0f, 0xeb, 0x82, 0x9e, 0x3c, 0xd4, 0xbf, 0x70, 0x8c, 0x56, 0x8f,
	0x73, 0xee, 0x7f, 0x0b, 0xd4, 0x3d, 0xa9, 0x4c, 0xdd, 0x71, 0xce, 0x4d, 0xb4, 0xb5, 0x74, 0x7d,
	0xb0, 0xc7, 0x34, 0x4a, 0xa8, 0xf0, 0xbf, 0x5d, 0xf1, 0xc1, 0x1a, 0xb1, 0xf6, 0x60, 0xcd, 0x02,
	0x7f, 0x86, 0xb6, 0x79, 0x9e, 0xb2, 0xf8, 0x8c, 0x98, 0x12, 0x26, 0xfd, 0xf7, 0x40, 0xeb, 0x0f,
	0x2a, 0xd3, 0x3a, 0x2b, 0x3e, 0x6c, 0x9a, 0x75, 0xd7, 0x2c, 0xf1, 0x29, 0xda, 0xb2, 0x0c, 0xe6,
	0x28, 0xdf, 0xaf, 0xb8, 0x5c, 0x95, 0x85, 0x87, 0x0d, 0xb3, 0x32, 0x87, 0xf9, 0x2b, 0x0f, 0x61,
	0xbb, 0x7b, 0x32, 0xa6, 0xc2, 0x19, 0xf0, 0x1d, 0x30, 0xe0, 0x87, 0x55, 0x1b, 0x50, 0x52, 0x11,
	0xee, 0x18, 0xda, 0x13, 0x4d, 0x32, 0xb6, 0x0c, 0x50, 0x9d, 0xcb, 0x1e, 0x19, 0xd2, 0x33, 0xe9,
	0x7f, 0xf7, 0xf6, 0xea, 0x6e, 0xa3, 0xdd, 0xa9, 0xcc, 0x80, 0x21, 0x3d, 0x0b, 0x37, 0xb8, 0xec,
	0x7d, 0x4c, 0xcf, 0x40, 0x91, 0x70, 0x8a, 0x3e, 0x78, 0x11, 0x8a, 0x84, 0x51, 0x14, 0x3c, 0x45,
	0x2f, 0x9f, 0x5f, 0xbd, 0xf1, 0x5d, 0xe4, 0x43, 0xbb, 0x38, 0x1f, 0x53, 0x5c, 0x91, 0xed, 0xce,
	0x87, 0x0b, 0xb0, 0x22, 0x20, 0xe8, 0xca, 0x62, 0xa1, 0xd2, 0x12, 0x17, 0xbb, 0xb7, 0x77, 0x81,
	0xee, 0xbd, 0x32, 0xdf, 0xbd, 0x83, 0xbf, 0x7b, 0x65, 0xc3, 0xad, 0x06, 0xde, 0x1e, 0xf1, 0x4a,
	0xd5, 0xe0, 0x36, 0xba, 0x6a, 0x60, 0xc8, 0x02, 0x54, 0x58, 0x35, 0x90, 0x4a, 0x83, 0x92, 0xee,
	0xf3, 0xe1, 0x42, 0x6d, 0x1e, 0x2e, 0x04, 0xff, 0x58, 0x41, 0x97, 0xc0, 0x78, 0x6b, 0xf7, 0x38,
	0xd3, 0xbd, 0xf9, 0x16, 0x6a, 0xd8, 0x35, 0x80, 0x22, 0x63, 0x30, 0x32, 0x24, 0xc0, 0x44, 0x9f,
	0xa1, 0x9d, 0x71, 0x62, 0x1c, 0x74, 0xed, 0x1d, 0x4c, 0x7e, 0x11, 0x4d, 0x45, 0xf7, 0xee, 0xed,
	0x71, 0xc2, 0xf7, 0xf9, 0xe4, 0x4e, 0xd7, 0x82, 0x87, 0x9f, 0xeb, 0x9b, 0x68, 0x40, 0x59, 0xd9,
	0x84, 0xd5, 0x8a, 0x31, 0xc4, 0xfc, 0x61, 0x86, 0x2d, 0x40, 0x7e, 0x53, 0x43, 0x82, 0xcf, 0xbd,
	0x65, 0xe9, 0x95, 0xf5, 0x73, 0x7c, 0x82, 0x1a, 0xa5, 0xc0, 0x42, 0x0c, 0x1b, 0xed, 0xc3, 0x2a,
	0x4c, 0x2b, 0x1f, 0x55, 0x88, 0x34, 0xe9, 0x21, 0x50, 0x82, 0xdf, 0xce, 0x64, 0xa2, 0x83, 0x5d,
	0xee, 0xa0, 0xfe, 0x77, 0x44, 0x5e, 0x86, 0xd9, 0x2b, 0x73, 0x30, 0x7b, 0x19, 0x5a, 0x5f, 0x5d,
	0x8a, 0xd6, 0x83, 0x3f, 0x79, 0xe8, 0x95, 0x45, 0xb3, 0xf4, 0xcd, 0x76, 0xf8, 0xfc, 0xff, 0xb2,
	0xee, 0x4b, 0x68, 0x73, 0x8a, 0xef, 0xad, 0x79, 0xca, 0xe1, 0xfa, 0xe5, 0xaf, 0x80, 0xd5, 0xe5,
	0xaf, 0x80, 0xe0, 0x77, 0xcb, 0x03, 0x97, 0xb1, 0x17, 0x61, 0xda, 0x1b, 0xa8, 0x30, 0xa0, 0x10,
	0x65, 0x0c, 0x6b, 0x39, 0xba, 0xab, 0x5d, 0xbf, 0xf6, 0xd0, 0xeb, 0x8b, 0x76, 0x41, 0x3a, 0xce,
	0x87, 0xaf, 0xfc, 0x4a, 0xf1, 0x66, 0x5e, 0x29, 0x15, 0xc6, 0xe9, 0x3f, 0x35, 0x84, 0xc1, 0x9e,
	0x52, 0x88, 0xf2, 0x6c, 0xe1, 0x11, 0xe5, 0x2d, 0x3e, 0xa2, 0x46, 0xa8, 0xa6, 0xcd, 0xb4, 0x45,
	0xe2, 0x59, 0xe5, 0x6f, 0x0b, 0x97, 0xe4, 0x21, 0xa8, 0xc1, 0x9f, 0x7b, 0x68, 0x07, 0x2a, 0x83,
	0x0e, 0xd3, 0x6c, 0x75, 0xf8, 0x51, 0xe5, 0xba, 0xe7, 0x8e, 0x22, 0xdc, 0xd6, 0x7f, 0x3b, 0x92,
	0xbb, 0x62, 0xf5, 0x33, 0x67, 0x8c, 0x4e, 0x28, 0x67, 0x4c, 0xed, 0x45, 0x05, 0xc2, 0x26, 0xad,
	0xb1, 0xe2, 0x69, 0xc6, 0x9c, 0x15, 0xbf, 0xf7, 0xd0, 0x55, 0xb0, 0xc2, 0xa4, 0x49, 0x39, 0x30,
	0x6b, 0x60, 0x0b, 0xad, 0xdc, 0x96, 0x65, 0x89, 0x1a, 0x62, 0xfd, 0xf7, 0xb0, 0x7d, 0xc0, 0xa7,
	0x11, 0x0a, 0x7e, 0xe3, 0xa1, 0xab, 0xcb, 0xdf, 0x8b, 0x58, 0xa1, 0xad, 0x72, 0xc6, 0xd9, 0x3a,
	0x5a, 0x09, 0x92, 0x9e, 0x49, 0xe2, 0x10, 0xaa, 0xb5, 0x33, 0xe8, 0x3d, 0xd4, 0x9a, 0x7b, 0x70,
	0xe8, 0x6b, 0x2b, 0xa8, 0xa4, 0x62, 0x62, 0x8a, 0x40, 0x29, 0xd1, 0x5b, 0x25, 0xba, 0x4e, 0xf6,
	0xe0, 0x2f, 0x5e, 0xf9, 0xa1, 0x3d, 0x8b, 0x66, 0xf1, 0x0d, 0x84, 0x98, 0x24, 0x8a, 0x92, 0x94,
	0x65, 0x43, 0x90, 0x50, 0x0f, 0xeb, 0x4c, 0x1e, 0xd1, 0x0e, 0xcb, 0x86, 0xfa, 0xf9, 0xce, 0x24,
	0x49, 0xf3, 0x38, 0x32, 0x25, 0xb7, 0x1e, 0x6e, 0x30, 0xd9, 0xd1, 0x4b, 0x7c, 0x0d, 0x6d, 0x30,
	0x49, 0xe2, 0x9c, 0x9b, 0x72, 0x51, 0x0f, 0xd7, 0x99, 0x7c, 0x90, 0x73, 0x89, 0x6f, 0x82, 0xc4,
	0x84, 0xf6, 0xa3, 0x71, 0xaa, 0x20, 0xb1, 0xea, 0xe1, 0x26, 0x93, 0x1f, 0x1a, 0x82, 0x15, 0x19,
	0x47, 0xbd, 0xd4, 0x8c, 0x37, 0x40, 0xe4, 0x03, 0xbd, 0x0c, 0x7e, 0x32, 0x13, 0xf7, 0x32, 0xf0,
	0xd5, 0x10, 0x80, 0x49, 0x12, 0xc5, 0x31, 0xe5, 0x8a, 0x26, 0xd6, 0x4e, 0xc4, 0xe4, 0x3d, 0x4b,
	0xd1, 0x97, 0x9e, 0x49, 0xc2, 0x32, 0xa9, 0xa2, 0x34, 0xa5, 0x89, 0xb5, 0xb6, 0xc1, 0xe4, 0xbe,
	0x23, 0xe1, 0x57, 0x51, 0x93, 0x49, 0xd2, 0xcf, 0xc5, 0xa7, 0x91, 0x48, 0x58, 0x36, 0xb0, 0x76,
	0x6f, 0x31, 0xf9, 0xb0, 0xa0, 0x05, 0xff, 0x5e, 0x45, 0xcd, 0x19, 0x44, 0xf8, 0x9c, 0x52, 0x76,
	0x4e, 0x21, 0x5e, 0x39, 0xb7, 0x10, 0x7f, 0x80, 0x6e, 0xce, 0x77, 0x29, 0x92, 0x8b, 0xb9, 0x4a,
	0xd7, 0x0c, 0xaf, 0xcf, 0xb5, 0xac, 0xc7, 0xa2, 0x18, 0x10, 0x95, 0x7b, 0x60, 0xed, 0x42, 0xa3,
	0xa6, 0xb5, 0x0b, 0x8e, 0x9a, 0xd6, 0x17, 0xab, 0xe4, 0x05, 0x07, 0x4a, 0x6f, 0xa2, 0x2b, 0x25,
	0xac, 0xa8, 0x1d, 0x02, 0x98, 0x9c, 0xd8, 0xd1, 0xd2, 0xa5, 0x29, 0x6a, 0x7c, 0x2c, 0x3a, 0x52,
	0x07, 0xee, 0x7c, 0xf0, 0xb8, 0x79, 0x61, 0xf0, 0xb8, 0x38, 0x6b, 0x7a, 0x09, 0xad, 0x4d, 0x44,
	0x9f, 0x25, 0x30, 0x68, 0x6a, 0x86, 0x66, 0x11, 0xfc, 0xd9, 0x43, 0x37, 0x9e, 0xf7, 0x98, 0xd1,
	0x0d, 0x89, 0x49, 0x92, 0x51, 0x9a, 0x14, 0x89, 0x55, 0x67, 0xf2, 0x11, 0xac, 0x75, 0x4c, 0x99,
	0x24, 0x82, 0x82, 0x67, 0xfa, 0xd6, 0x32, 0x51, 0x24, 0xd7, 0x0e, 0x93, 0x21, 0x6c, 0x84, 0x96,
	0x6e, 0x45, 0x09, 0x2a, 0xcf, 0xb2, 0xd8, 0x66, 0x57, 0x5d, 0x33, 0xe9, 0xb5, 0xdd, 0xec, 0x9d,
	0xf1, 0x48, 0x4a, 0x7b, 0x2d, 0xea, 0x4c, 0xde, 0x87, 0x75, 0xf0, 0xcf, 0x15, 0x74, 0x79, 0xc9,
	0xcc, 0x06, 0x7f, 0x0d, 0x5d, 0x82, 0x45, 0x34, 0xa1, 0x22, 0x1a, 0x50, 0x22, 0x22, 0x65, 0xee,
	0x79, 0x2d, 0x6c, 0xe9, 0x8d, 0x7b, 0x86, 0x1e, 0x46, 0x8a, 0xe2, 0xd7, 0xd0, 0x36, 0xf0, 0x8e,
	0xa2, 0x53, 0xd2, 0x1b, 0x0b, 0x69, 0x60, 0x7b, 0x2d, 0xdc, 0xd2, 0xd4, 0x83, 0xe8, 0xf4, 0xbe,
	0xa6, 0x15, 0x5c, 0x9c, 0x46, 0x43, 0x23, 0x6e, 0x75, 0xca, 0x75, 0x48, 0xa3, 0x21, 0xc8, 0x0a,
	0x50, 0xd3, 0xc8, 0x62, 0x50, 0x90, 0x94, 0x4d, 0xb6, 0x06, 0x88, 0x62, 0xd9, 0xd3, 0x8c, 0xa9,
	0x29, 0x4f, 0x74, 0x6a, 0x78, 0xd6, 0x4a, 0x3c, 0xd1, 0x29, 0xf0, 0xec, 0xa1, 0xcb, 0xc0, 0x63,
	0x0b, 0x1e, 0x4d, 0x8c, 0xca, 0x75, 0x50, 0x09, 0xae, 0x85, 0x6e, 0x07, 0xf4, 0xde, 0x44, 0xc8,
	0x38, 0x9f, 0x46, 0xf1, 0x10, 0xd2, 0xad, 0x19, 0xc2, 0x70, 0xac, 0xab, 0x09, 0xba, 0x78, 0xc0,
	0xf6, 0x49, 0x2e, 0x21, 0xbb, 0x36, 0xc3, 0x0d, 0xbd, 0x7e, 0x92, 0xcb, 0xe0, 0xaf, 0x33, 0xe7,
	0x5c, 0x44, 0x90, 0x0c, 0xee, 0xbe, 0xf9, 0x2e, 0xc9, 0x55, 0x86, 0x77, 0xd1, 0x8e, 0xa1, 0xb2,
	0x41, 0x16, 0xa5, 0xd3, 0x8a, 0xd9, 0x0c, 0x21, 0x20, 0x5d, 0x20, 0x43, 0xde, 0x3b, 0x2d, 0xd9,
	0x24, 0xb6, 0x08, 0x05, 0xb4, 0x3c, 0x9a, 0xc4, 0xf8, 0xab, 0xa8, 0x65, 0x7c, 0x1e, 0xa7, 0x8a,
	0xf1, 0x94, 0x51, 0x61, 0xef, 0x2c, 0xc8, 0x38, 0x28, 0xa8, 0x45, 0x70, 0x7a, 0x4c, 0x19, 0x97,
	0x6b, 0xe0, 0x32, 0x04, 0xe7, 0x3e, 0x53, 0xda, 0xd9, 0xe0, 0x5f, 0x1e, 0xba, 0x76, 0xce, 0xb8,
	0xac, 0x38, 0x26, 0xf0, 0xa1, 0x54, 0xdd, 0xb7, 0xdc, 0x10, 0x0f, 0x2c, 0xfd, 0xa5, 0x87, 0xb0,
	0x73, 0xb0, 0x34, 0xc9, 0x5b, 0xa9, 0x78, 0x04, 0xb0, 0x18, 0xcd, 0xb0, 0xa5, 0x7f, 0x3d, 0x56,
	0x99, 0x1b, 0xe7, 0x05, 0xfa, 0x0d, 0xb4, 0x38, 0x11, 0xd2, 0x7d, 0x2a, 0xa3, 0x6c, 0x70, 0xdc,
	0xcb, 0xc5, 0x1c, 0x52, 0x6d, 0x39, 0xba, 0xab, 0x23, 0x1f, 0xa1, 0x5b, 0x05, 0x6b, 0x9a, 0x0f,
	0x58, 0x1c, 0xa5, 0xd3, 0x31, 0x9a, 0x19, 0x21, 0x9b, 0xd2, 0x7a, 0xc3, 0xb1, 0x75, 0x0c, 0x57,
	0x31, 0x54, 0x83, 0xb9, 0xf2, 0x2f, 0x56, 0xca, 0x6f, 0xa0, 0xd2, 0xc8, 0x48, 0x97, 0x3c, 0xd8,
	0x98, 0x50, 0x51, 0x34, 0xef, 0xa6, 0xe9, 0xb4, 0x9f, 0x18, 0x92, 0xbe, 0x6f, 0xc0, 0x62, 0x3f,
	0x33, 0x13, 0x15, 0x3b, 0xf6, 0xd7, 0x1b, 0xdf, 0x07, 0xba, 0x99, 0x79, 0x5c, 0x47, 0x75, 0xe0,
	0x55, 0xca, 0x8d, 0xfd, 0x37, 0xf4, 0xfa, 0x48, 0xa5, 0x85, 0x98, 0x11, 0x95, 0x52, 0x5f, 0x5b,
	0x38, 0xc0, 0xda, 0x54, 0xcc, 0x81, 0xa1, 0xc3, 0x19, 0x5e, 0x41, 0xeb, 0x8c, 0x13, 0x95, 0x4b,
	0x7b, 0x7f, 0xd6, 0x18, 0x3f, 0xca, 0xa5, 0x23, 0xab, 0xd4, 0x4e, 0xf9, 0x35, 0xd9, 0x48, 0x66,
	0x9c, 0x2c, 0x2d, 0xcb, 0x2d, 0xc6, 0xbb, 0xe5, 0xc2, 0x1c, 0xfc, 0xa1, 0x56, 0xce, 0xaf, 0x99,
	0x99, 0x20, 0xc8, 0xb1, 0x9d, 0x9d, 0x08, 0x1a, 0x53, 0x36, 0xb1, 0xaf, 0xc2, 0x7a, 0xd8, 0xb2,
	0x2d, 0x3e, 0xb4, 0x64, 0xdb, 0x38, 0x05, 0xed, 0x0b, 0x2a, 0x8f, 0x75, 0xe3, 0x5c, 0x71, 0x8d,
	0x33, 0x2c, 0x68, 0xf8, 0x75, 0xd4, 0x62, 0x92, 0x48, 0x9a, 0x25, 0x24, 0xce, 0xb3, 0x3e, 0x13,
	0x23, 0x5b, 0x01, 0x9b, 0x4c, 0x76, 0x69, 0x96, 0x3c, 0x30, 0x44, 0x5b, 0x51, 0xa3, 0x78, 0x48,
	0xf2, 0xb1, 0x92, 0x2a, 0xca, 0xa0, 0x15, 0xd7, 0x5c, 0x45, 0xbd, 0x17, 0x0f, 0x1f, 0x4f, 0xe9,
	0xf8, 0x6d, 0x74, 0x8d, 0xc9, 0x22, 0x8c, 0x2c, 0x21, 0x51, 0xaa, 0x6d, 0xd6, 0x18, 0xc0, 0x80,
	0x87, 0x97, 0x98, 0xb4, 0xc1, 0xdc, 0x4f, 0xee, 0xb9, 0x3d, 0x7d, 0xd7, 0x75, 0x4d, 0xd7, 0x5a,
	0xac, 0x73, 0xe6, 0x9f, 0x25, 0xf5, 0x70, 0x9b, 0xc9, 0x47, 0x51, 0x3c, 0xb4, 0xbe, 0x25, 0x85,
	0x6f, 0x4a, 0x44, 0x99, 0x1c, 0x31, 0x05, 0xb1, 0xb4, 0xbe, 0x39, 0x9a, 0xc5, 0x2c, 0x3c, 0x8a,
	0xa9, 0x69, 0x6a, 0x80, 0x59, 0x0e, 0xf5, 0x12, 0xbf, 0x83, 0x7c, 0x1d, 0xc7, 0xa8, 0x47, 0xd3,
	0x22, 0xc2, 0x2c, 0x23, 0x3c, 0x52, 0xc7, 0xd0, 0xcc, 0xc0, 0xc2, 0x8e, 0xde, 0xb6, 0x85, 0x6e,
	0x3f, 0x3b, 0x8c, 0xd4, 0x31, 0x7e, 0x15, 0x6d, 0x6b, 0xbd, 0x22, 0x2f, 0xb8, 0x91, 0x43, 0x2c,
	0xa1, 0xc8, 0x2d, 0xd3, 0x1d, 0xf0, 0x5e, 0xd0, 0x38, 0x17, 0x89, 0xd5, 0xe1, 0xb8, 0x1b, 0xc0,
	0x7d, 0x59, 0x9b, 0xa9, 0x77, 0x41, 0x83, 0xfd, 0xea, 0x35, 0x10, 0x3d, 0xa2, 0x62, 0xa0, 0x3b,
	0x32, 0xcb, 0x94, 0xbf, 0xe5, 0x7c, 0x3a, 0xd0, 0xc4, 0x43, 0x4d, 0xeb, 0xad, 0x03, 0x6e, 0x78,
	0xeb, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x32, 0x4c, 0xb6, 0x18, 0x9a, 0x1b, 0x00, 0x00,
}
