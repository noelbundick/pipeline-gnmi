// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mpls_lm_soft_preemption_link_info.proto

package cisco_ios_xr_mpls_te_oper_mpls_lcac_soft_preemptions_soft_preemption

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Soft Preemption Info per Link
type MplsLmSoftPreemptionLinkInfo_KEYS struct {
	InterfaceName        string   `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName" json:"interface_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsLmSoftPreemptionLinkInfo_KEYS) Reset()         { *m = MplsLmSoftPreemptionLinkInfo_KEYS{} }
func (m *MplsLmSoftPreemptionLinkInfo_KEYS) String() string { return proto.CompactTextString(m) }
func (*MplsLmSoftPreemptionLinkInfo_KEYS) ProtoMessage()    {}
func (*MplsLmSoftPreemptionLinkInfo_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_lm_soft_preemption_link_info_67042a50994fc1f4, []int{0}
}
func (m *MplsLmSoftPreemptionLinkInfo_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsLmSoftPreemptionLinkInfo_KEYS.Unmarshal(m, b)
}
func (m *MplsLmSoftPreemptionLinkInfo_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsLmSoftPreemptionLinkInfo_KEYS.Marshal(b, m, deterministic)
}
func (dst *MplsLmSoftPreemptionLinkInfo_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsLmSoftPreemptionLinkInfo_KEYS.Merge(dst, src)
}
func (m *MplsLmSoftPreemptionLinkInfo_KEYS) XXX_Size() int {
	return xxx_messageInfo_MplsLmSoftPreemptionLinkInfo_KEYS.Size(m)
}
func (m *MplsLmSoftPreemptionLinkInfo_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsLmSoftPreemptionLinkInfo_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_MplsLmSoftPreemptionLinkInfo_KEYS proto.InternalMessageInfo

func (m *MplsLmSoftPreemptionLinkInfo_KEYS) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

type MplsLmSoftPreemptionLinkInfo struct {
	// The link's IPv4 address
	LinkAddress string `protobuf:"bytes,50,opt,name=link_address,json=linkAddress" json:"link_address,omitempty"`
	// The total BC0 BW that is softly preempted: this is the sum of bandwidth for all the LSPs that were soft preempted
	TotalSoftPreemptedBandwidthBc0 uint64 `protobuf:"varint,51,opt,name=total_soft_preempted_bandwidth_bc0,json=totalSoftPreemptedBandwidthBc0" json:"total_soft_preempted_bandwidth_bc0,omitempty"`
	// The total BC1 BW that is softly preempted: this is the sum of bandwidth for all the LSPs that were soft preempted
	TotalSoftPreemptedBandwidthBc1 uint64 `protobuf:"varint,52,opt,name=total_soft_preempted_bandwidth_bc1,json=totalSoftPreemptedBandwidthBc1" json:"total_soft_preempted_bandwidth_bc1,omitempty"`
	// The current BC0 BW that is softly preempted: this is the sum of bandwidth for the LSPs that are soft preempted and have not been torn down yet
	CurrentSoftPreemptedBandwidthBc0 uint64 `protobuf:"varint,53,opt,name=current_soft_preempted_bandwidth_bc0,json=currentSoftPreemptedBandwidthBc0" json:"current_soft_preempted_bandwidth_bc0,omitempty"`
	// The current BC1 BW that is softly preempted: this is the sum of bandwidth for the LSPs that are soft preempted and have not been torn down yet
	CurrentSoftPreemptedBandwidthBc1 uint64 `protobuf:"varint,54,opt,name=current_soft_preempted_bandwidth_bc1,json=currentSoftPreemptedBandwidthBc1" json:"current_soft_preempted_bandwidth_bc1,omitempty"`
	// The total released BC0 BW that is softly preempted: this is the sum of bandwidth for the LSPs that are soft preempted and are torn down
	ReleaseSoftPreemptedBandwidthBc0 uint64 `protobuf:"varint,55,opt,name=release_soft_preempted_bandwidth_bc0,json=releaseSoftPreemptedBandwidthBc0" json:"release_soft_preempted_bandwidth_bc0,omitempty"`
	// The total released BC1 BW that is softly preempted: this is the sum of bandwidth for the LSPs that are soft preempted and are torn down
	ReleaseSoftPreemptedBandwidthBc1 uint64 `protobuf:"varint,56,opt,name=release_soft_preempted_bandwidth_bc1,json=releaseSoftPreemptedBandwidthBc1" json:"release_soft_preempted_bandwidth_bc1,omitempty"`
	// The BC0 bandwidth that is over subscribed on this link: this is the difference between the maximum available BC0 BW on the link and the sum of the currently reserved BC0 bandwidth and the currently soft preempted BC0 BW
	CurrentOverSubscribedBandwidthBc0 uint64 `protobuf:"varint,57,opt,name=current_over_subscribed_bandwidth_bc0,json=currentOverSubscribedBandwidthBc0" json:"current_over_subscribed_bandwidth_bc0,omitempty"`
	// The BC1 bandwidth that is over subscribed on this link: this is the difference between the maximum available BC1 BW on the link and the sum of the currently reserved BC1 bandwidth and the currently soft preempted BC1 BW
	CurrentOverSubscribedBandwidthBc1 uint64 `protobuf:"varint,58,opt,name=current_over_subscribed_bandwidth_bc1,json=currentOverSubscribedBandwidthBc1" json:"current_over_subscribed_bandwidth_bc1,omitempty"`
	// List of the soft preempted LSPs that are not yet cleaned up
	CurrentSoftPreemptionLsPs []*MplsLmPreemptedLsp `protobuf:"bytes,59,rep,name=current_soft_preemption_ls_ps,json=currentSoftPreemptionLsPs" json:"current_soft_preemption_ls_ps,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}              `json:"-"`
	XXX_unrecognized          []byte                `json:"-"`
	XXX_sizecache             int32                 `json:"-"`
}

func (m *MplsLmSoftPreemptionLinkInfo) Reset()         { *m = MplsLmSoftPreemptionLinkInfo{} }
func (m *MplsLmSoftPreemptionLinkInfo) String() string { return proto.CompactTextString(m) }
func (*MplsLmSoftPreemptionLinkInfo) ProtoMessage()    {}
func (*MplsLmSoftPreemptionLinkInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_lm_soft_preemption_link_info_67042a50994fc1f4, []int{1}
}
func (m *MplsLmSoftPreemptionLinkInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsLmSoftPreemptionLinkInfo.Unmarshal(m, b)
}
func (m *MplsLmSoftPreemptionLinkInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsLmSoftPreemptionLinkInfo.Marshal(b, m, deterministic)
}
func (dst *MplsLmSoftPreemptionLinkInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsLmSoftPreemptionLinkInfo.Merge(dst, src)
}
func (m *MplsLmSoftPreemptionLinkInfo) XXX_Size() int {
	return xxx_messageInfo_MplsLmSoftPreemptionLinkInfo.Size(m)
}
func (m *MplsLmSoftPreemptionLinkInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsLmSoftPreemptionLinkInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MplsLmSoftPreemptionLinkInfo proto.InternalMessageInfo

func (m *MplsLmSoftPreemptionLinkInfo) GetLinkAddress() string {
	if m != nil {
		return m.LinkAddress
	}
	return ""
}

func (m *MplsLmSoftPreemptionLinkInfo) GetTotalSoftPreemptedBandwidthBc0() uint64 {
	if m != nil {
		return m.TotalSoftPreemptedBandwidthBc0
	}
	return 0
}

func (m *MplsLmSoftPreemptionLinkInfo) GetTotalSoftPreemptedBandwidthBc1() uint64 {
	if m != nil {
		return m.TotalSoftPreemptedBandwidthBc1
	}
	return 0
}

func (m *MplsLmSoftPreemptionLinkInfo) GetCurrentSoftPreemptedBandwidthBc0() uint64 {
	if m != nil {
		return m.CurrentSoftPreemptedBandwidthBc0
	}
	return 0
}

func (m *MplsLmSoftPreemptionLinkInfo) GetCurrentSoftPreemptedBandwidthBc1() uint64 {
	if m != nil {
		return m.CurrentSoftPreemptedBandwidthBc1
	}
	return 0
}

func (m *MplsLmSoftPreemptionLinkInfo) GetReleaseSoftPreemptedBandwidthBc0() uint64 {
	if m != nil {
		return m.ReleaseSoftPreemptedBandwidthBc0
	}
	return 0
}

func (m *MplsLmSoftPreemptionLinkInfo) GetReleaseSoftPreemptedBandwidthBc1() uint64 {
	if m != nil {
		return m.ReleaseSoftPreemptedBandwidthBc1
	}
	return 0
}

func (m *MplsLmSoftPreemptionLinkInfo) GetCurrentOverSubscribedBandwidthBc0() uint64 {
	if m != nil {
		return m.CurrentOverSubscribedBandwidthBc0
	}
	return 0
}

func (m *MplsLmSoftPreemptionLinkInfo) GetCurrentOverSubscribedBandwidthBc1() uint64 {
	if m != nil {
		return m.CurrentOverSubscribedBandwidthBc1
	}
	return 0
}

func (m *MplsLmSoftPreemptionLinkInfo) GetCurrentSoftPreemptionLsPs() []*MplsLmPreemptedLsp {
	if m != nil {
		return m.CurrentSoftPreemptionLsPs
	}
	return nil
}

// Preempted LSP info
type MplsLmPreemptedLsp struct {
	// Tunnel ID
	TunnelId uint32 `protobuf:"varint,1,opt,name=tunnel_id,json=tunnelId" json:"tunnel_id,omitempty"`
	// LSP ID
	LspId uint32 `protobuf:"varint,2,opt,name=lsp_id,json=lspId" json:"lsp_id,omitempty"`
	// Source
	SourceAddress string `protobuf:"bytes,3,opt,name=source_address,json=sourceAddress" json:"source_address,omitempty"`
	// Destination
	DestinationAddress string `protobuf:"bytes,4,opt,name=destination_address,json=destinationAddress" json:"destination_address,omitempty"`
	// The path's requested bandwidth
	RequestedBandwidth uint64 `protobuf:"varint,5,opt,name=requested_bandwidth,json=requestedBandwidth" json:"requested_bandwidth,omitempty"`
	// The path's setup priority
	SetupPriority uint32 `protobuf:"varint,6,opt,name=setup_priority,json=setupPriority" json:"setup_priority,omitempty"`
	// The path's hold priority
	HoldPriority uint32 `protobuf:"varint,7,opt,name=hold_priority,json=holdPriority" json:"hold_priority,omitempty"`
	// The path's bandwidth type; 0:BC0, 1:BC1, so on
	BandwidthType uint32 `protobuf:"varint,8,opt,name=bandwidth_type,json=bandwidthType" json:"bandwidth_type,omitempty"`
	// TRUE is the preemption is a soft preemption
	SoftPreempted bool `protobuf:"varint,9,opt,name=soft_preempted,json=softPreempted" json:"soft_preempted,omitempty"`
	// If the soft preemption is underway, this value indicates the number of seconds before hard preemption is triggered
	SoftPreemptionTimeout uint32 `protobuf:"varint,10,opt,name=soft_preemption_timeout,json=softPreemptionTimeout" json:"soft_preemption_timeout,omitempty"`
	// LSPs bandwidth is already preempted
	BandwidthPreempted bool `protobuf:"varint,11,opt,name=bandwidth_preempted,json=bandwidthPreempted" json:"bandwidth_preempted,omitempty"`
	// FRR-rewrite is done during soft preemption
	SoftPreemptedFrRrewrite bool     `protobuf:"varint,12,opt,name=soft_preempted_fr_rrewrite,json=softPreemptedFrRrewrite" json:"soft_preempted_fr_rrewrite,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *MplsLmPreemptedLsp) Reset()         { *m = MplsLmPreemptedLsp{} }
func (m *MplsLmPreemptedLsp) String() string { return proto.CompactTextString(m) }
func (*MplsLmPreemptedLsp) ProtoMessage()    {}
func (*MplsLmPreemptedLsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_lm_soft_preemption_link_info_67042a50994fc1f4, []int{2}
}
func (m *MplsLmPreemptedLsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsLmPreemptedLsp.Unmarshal(m, b)
}
func (m *MplsLmPreemptedLsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsLmPreemptedLsp.Marshal(b, m, deterministic)
}
func (dst *MplsLmPreemptedLsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsLmPreemptedLsp.Merge(dst, src)
}
func (m *MplsLmPreemptedLsp) XXX_Size() int {
	return xxx_messageInfo_MplsLmPreemptedLsp.Size(m)
}
func (m *MplsLmPreemptedLsp) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsLmPreemptedLsp.DiscardUnknown(m)
}

var xxx_messageInfo_MplsLmPreemptedLsp proto.InternalMessageInfo

func (m *MplsLmPreemptedLsp) GetTunnelId() uint32 {
	if m != nil {
		return m.TunnelId
	}
	return 0
}

func (m *MplsLmPreemptedLsp) GetLspId() uint32 {
	if m != nil {
		return m.LspId
	}
	return 0
}

func (m *MplsLmPreemptedLsp) GetSourceAddress() string {
	if m != nil {
		return m.SourceAddress
	}
	return ""
}

func (m *MplsLmPreemptedLsp) GetDestinationAddress() string {
	if m != nil {
		return m.DestinationAddress
	}
	return ""
}

func (m *MplsLmPreemptedLsp) GetRequestedBandwidth() uint64 {
	if m != nil {
		return m.RequestedBandwidth
	}
	return 0
}

func (m *MplsLmPreemptedLsp) GetSetupPriority() uint32 {
	if m != nil {
		return m.SetupPriority
	}
	return 0
}

func (m *MplsLmPreemptedLsp) GetHoldPriority() uint32 {
	if m != nil {
		return m.HoldPriority
	}
	return 0
}

func (m *MplsLmPreemptedLsp) GetBandwidthType() uint32 {
	if m != nil {
		return m.BandwidthType
	}
	return 0
}

func (m *MplsLmPreemptedLsp) GetSoftPreempted() bool {
	if m != nil {
		return m.SoftPreempted
	}
	return false
}

func (m *MplsLmPreemptedLsp) GetSoftPreemptionTimeout() uint32 {
	if m != nil {
		return m.SoftPreemptionTimeout
	}
	return 0
}

func (m *MplsLmPreemptedLsp) GetBandwidthPreempted() bool {
	if m != nil {
		return m.BandwidthPreempted
	}
	return false
}

func (m *MplsLmPreemptedLsp) GetSoftPreemptedFrRrewrite() bool {
	if m != nil {
		return m.SoftPreemptedFrRrewrite
	}
	return false
}

func init() {
	proto.RegisterType((*MplsLmSoftPreemptionLinkInfo_KEYS)(nil), "cisco_ios_xr_mpls_te_oper.mpls_lcac.soft_preemptions.soft_preemption.mpls_lm_soft_preemption_link_info_KEYS")
	proto.RegisterType((*MplsLmSoftPreemptionLinkInfo)(nil), "cisco_ios_xr_mpls_te_oper.mpls_lcac.soft_preemptions.soft_preemption.mpls_lm_soft_preemption_link_info")
	proto.RegisterType((*MplsLmPreemptedLsp)(nil), "cisco_ios_xr_mpls_te_oper.mpls_lcac.soft_preemptions.soft_preemption.mpls_lm_preempted_lsp")
}

func init() {
	proto.RegisterFile("mpls_lm_soft_preemption_link_info.proto", fileDescriptor_mpls_lm_soft_preemption_link_info_67042a50994fc1f4)
}

var fileDescriptor_mpls_lm_soft_preemption_link_info_67042a50994fc1f4 = []byte{
	// 589 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x95, 0x5f, 0x6f, 0xd3, 0x3c,
	0x14, 0xc6, 0xd5, 0x77, 0x5d, 0xdf, 0xd6, 0x6d, 0x77, 0x61, 0x54, 0xcd, 0x80, 0x40, 0x6d, 0xa1,
	0xd0, 0xab, 0xb2, 0x6c, 0x30, 0xfe, 0xec, 0x8a, 0x09, 0x90, 0x06, 0x68, 0xab, 0xda, 0xdd, 0x20,
	0x2e, 0xac, 0x34, 0x39, 0xd5, 0x2c, 0x12, 0xdb, 0xd8, 0xce, 0x46, 0xbf, 0x07, 0xb7, 0x7c, 0x39,
	0x3e, 0x09, 0x8a, 0xd3, 0x24, 0x4d, 0x37, 0xba, 0x5c, 0x70, 0xd9, 0xe7, 0x3c, 0xfe, 0xf9, 0x89,
	0xcf, 0x39, 0x2a, 0x7a, 0x1a, 0xca, 0x40, 0xd3, 0x20, 0xa4, 0x5a, 0xcc, 0x0d, 0x95, 0x0a, 0x20,
	0x94, 0x86, 0x09, 0x4e, 0x03, 0xc6, 0xbf, 0x51, 0xc6, 0xe7, 0x62, 0x24, 0x95, 0x30, 0x02, 0xbf,
	0xf3, 0x98, 0xf6, 0x04, 0x65, 0x42, 0xd3, 0x1f, 0x8a, 0xda, 0x53, 0x06, 0xa8, 0x90, 0xa0, 0x46,
	0x09, 0xc2, 0x73, 0xbd, 0xd1, 0x1a, 0x44, 0xaf, 0x0b, 0xfd, 0x33, 0xf4, 0xe4, 0xd6, 0x0b, 0xe9,
	0xa7, 0xf7, 0x5f, 0xa6, 0x78, 0x80, 0x76, 0x18, 0x37, 0xa0, 0xe6, 0xae, 0x07, 0x94, 0xbb, 0x21,
	0x90, 0x4a, 0xb7, 0x32, 0x6c, 0x4c, 0xda, 0x99, 0x7a, 0xea, 0x86, 0xd0, 0xff, 0x5d, 0x43, 0xbd,
	0x5b, 0x89, 0xb8, 0x87, 0x5a, 0xf6, 0x87, 0xeb, 0xfb, 0x0a, 0xb4, 0x26, 0xfb, 0x16, 0xd5, 0x8c,
	0xb5, 0xb7, 0x89, 0x84, 0x3f, 0xa2, 0xbe, 0x11, 0xc6, 0x0d, 0x0a, 0x14, 0xf0, 0xe9, 0xcc, 0xe5,
	0xfe, 0x15, 0xf3, 0xcd, 0x05, 0x9d, 0x79, 0x7b, 0xe4, 0xa0, 0x5b, 0x19, 0x56, 0x27, 0x0f, 0xad,
	0x73, 0x2a, 0xe6, 0x66, 0x9c, 0xfa, 0x8e, 0x53, 0xdb, 0xb1, 0xb7, 0x57, 0x8a, 0xe5, 0x90, 0xe7,
	0x25, 0x58, 0x0e, 0x3e, 0x45, 0x8f, 0xbd, 0x48, 0x29, 0xe0, 0x66, 0x73, 0xb2, 0x17, 0x96, 0xd6,
	0x5d, 0x7a, 0xff, 0x9e, 0xad, 0x1c, 0xcf, 0x21, 0x87, 0xa5, 0x78, 0x36, 0x9f, 0x82, 0x00, 0x5c,
	0x0d, 0x9b, 0xf3, 0xbd, 0x4c, 0x78, 0x4b, 0xef, 0xc6, 0x7c, 0x25, 0x78, 0x0e, 0x79, 0x55, 0x8a,
	0xe7, 0xe0, 0x31, 0x1a, 0xa4, 0xdf, 0x2b, 0x2e, 0x41, 0x51, 0x1d, 0xcd, 0xb4, 0xa7, 0xd8, 0xec,
	0x5a, 0xc0, 0xd7, 0x16, 0xd8, 0x5b, 0x9a, 0xcf, 0x2e, 0x41, 0x4d, 0x33, 0x6b, 0x21, 0x61, 0x49,
	0xa2, 0x43, 0xde, 0x94, 0x23, 0x3a, 0xf8, 0x57, 0x05, 0x3d, 0xb8, 0xa9, 0x29, 0x76, 0x88, 0x35,
	0x95, 0x9a, 0x1c, 0x75, 0xb7, 0x86, 0xcd, 0xfd, 0xaf, 0xa3, 0x7f, 0xb1, 0x84, 0xa3, 0x74, 0x5f,
	0xf2, 0xa7, 0x0d, 0xb4, 0x9c, 0xdc, 0xbd, 0xde, 0x6a, 0x26, 0xf8, 0x67, 0x3d, 0xd6, 0xfd, 0x9f,
	0x55, 0xd4, 0xb9, 0xf1, 0x10, 0xbe, 0x8f, 0x1a, 0x26, 0xe2, 0x1c, 0x02, 0xca, 0x7c, 0xbb, 0xa0,
	0xed, 0x49, 0x3d, 0x11, 0x4e, 0x7c, 0xdc, 0x41, 0xb5, 0x40, 0xcb, 0xb8, 0xf2, 0x9f, 0xad, 0x6c,
	0x07, 0x5a, 0x9e, 0xf8, 0xf1, 0x66, 0x6b, 0x11, 0x29, 0x0f, 0xb2, 0x75, 0xdc, 0x4a, 0x36, 0x3b,
	0x51, 0xd3, 0x85, 0x7c, 0x86, 0xee, 0xf8, 0xa0, 0x0d, 0xe3, 0xae, 0x7d, 0x87, 0xd4, 0x5b, 0xb5,
	0x5e, 0xbc, 0x52, 0x5a, 0x39, 0xa0, 0xe0, 0x7b, 0x04, 0xba, 0x30, 0x2c, 0x64, 0xdb, 0x76, 0x01,
	0x67, 0xa5, 0xec, 0xe5, 0x6d, 0x10, 0x30, 0x91, 0xa4, 0x52, 0x31, 0xa1, 0x98, 0x59, 0x90, 0x9a,
	0xcd, 0xd9, 0xb6, 0xea, 0x78, 0x29, 0xe2, 0x47, 0xa8, 0x7d, 0x21, 0x02, 0x3f, 0x77, 0xfd, 0x6f,
	0x5d, 0xad, 0x58, 0xcc, 0x4c, 0x03, 0xb4, 0x93, 0x37, 0xdf, 0x2c, 0x24, 0x90, 0x7a, 0xc2, 0xca,
	0xd4, 0xf3, 0x85, 0x84, 0xe4, 0xdb, 0x57, 0xa7, 0x9a, 0x34, 0xba, 0x95, 0x61, 0x3d, 0xfe, 0xf6,
	0x95, 0x01, 0xc6, 0x87, 0x68, 0x77, 0x7d, 0x0e, 0x0c, 0x0b, 0x41, 0x44, 0x86, 0x20, 0x8b, 0xed,
	0xe8, 0x42, 0x97, 0xce, 0x93, 0x62, 0xfc, 0x04, 0x79, 0x8a, 0xfc, 0x8e, 0xa6, 0xbd, 0x03, 0x67,
	0xa5, 0xfc, 0xa2, 0x23, 0x74, 0x6f, 0x6d, 0xcb, 0xe6, 0x8a, 0x2a, 0x05, 0x57, 0x8a, 0x19, 0x20,
	0x2d, 0x7b, 0x6e, 0xb7, 0x90, 0xed, 0x83, 0x9a, 0x2c, 0xcb, 0xb3, 0x9a, 0xfd, 0x67, 0x38, 0xf8,
	0x13, 0x00, 0x00, 0xff, 0xff, 0x48, 0xd0, 0x97, 0x57, 0x44, 0x06, 0x00, 0x00,
}
