// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mpls_lm_admission_control_tunnel_info.proto

package cisco_ios_xr_mpls_te_oper_mpls_lcac_standby_admission_control_admitted_tunnels_admitted_tunnel

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Information about a given admitted tunnel
type MplsLmAdmissionControlTunnelInfo_KEYS struct {
	SourceAddress        string   `protobuf:"bytes,1,opt,name=source_address,json=sourceAddress" json:"source_address,omitempty"`
	DestinationPort      uint32   `protobuf:"varint,2,opt,name=destination_port,json=destinationPort" json:"destination_port,omitempty"`
	SourcePort           uint32   `protobuf:"varint,3,opt,name=source_port,json=sourcePort" json:"source_port,omitempty"`
	DestinationAddress   string   `protobuf:"bytes,4,opt,name=destination_address,json=destinationAddress" json:"destination_address,omitempty"`
	ExtendedTunnelId     string   `protobuf:"bytes,5,opt,name=extended_tunnel_id,json=extendedTunnelId" json:"extended_tunnel_id,omitempty"`
	NextHopAddress       string   `protobuf:"bytes,6,opt,name=next_hop_address,json=nextHopAddress" json:"next_hop_address,omitempty"`
	Ctype                string   `protobuf:"bytes,7,opt,name=ctype" json:"ctype,omitempty"`
	P2MpId               uint32   `protobuf:"varint,8,opt,name=p2_mp_id,json=p2MpId" json:"p2_mp_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsLmAdmissionControlTunnelInfo_KEYS) Reset()         { *m = MplsLmAdmissionControlTunnelInfo_KEYS{} }
func (m *MplsLmAdmissionControlTunnelInfo_KEYS) String() string { return proto.CompactTextString(m) }
func (*MplsLmAdmissionControlTunnelInfo_KEYS) ProtoMessage()    {}
func (*MplsLmAdmissionControlTunnelInfo_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_lm_admission_control_tunnel_info_f3c15adbff2fc0ca, []int{0}
}
func (m *MplsLmAdmissionControlTunnelInfo_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsLmAdmissionControlTunnelInfo_KEYS.Unmarshal(m, b)
}
func (m *MplsLmAdmissionControlTunnelInfo_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsLmAdmissionControlTunnelInfo_KEYS.Marshal(b, m, deterministic)
}
func (dst *MplsLmAdmissionControlTunnelInfo_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsLmAdmissionControlTunnelInfo_KEYS.Merge(dst, src)
}
func (m *MplsLmAdmissionControlTunnelInfo_KEYS) XXX_Size() int {
	return xxx_messageInfo_MplsLmAdmissionControlTunnelInfo_KEYS.Size(m)
}
func (m *MplsLmAdmissionControlTunnelInfo_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsLmAdmissionControlTunnelInfo_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_MplsLmAdmissionControlTunnelInfo_KEYS proto.InternalMessageInfo

func (m *MplsLmAdmissionControlTunnelInfo_KEYS) GetSourceAddress() string {
	if m != nil {
		return m.SourceAddress
	}
	return ""
}

func (m *MplsLmAdmissionControlTunnelInfo_KEYS) GetDestinationPort() uint32 {
	if m != nil {
		return m.DestinationPort
	}
	return 0
}

func (m *MplsLmAdmissionControlTunnelInfo_KEYS) GetSourcePort() uint32 {
	if m != nil {
		return m.SourcePort
	}
	return 0
}

func (m *MplsLmAdmissionControlTunnelInfo_KEYS) GetDestinationAddress() string {
	if m != nil {
		return m.DestinationAddress
	}
	return ""
}

func (m *MplsLmAdmissionControlTunnelInfo_KEYS) GetExtendedTunnelId() string {
	if m != nil {
		return m.ExtendedTunnelId
	}
	return ""
}

func (m *MplsLmAdmissionControlTunnelInfo_KEYS) GetNextHopAddress() string {
	if m != nil {
		return m.NextHopAddress
	}
	return ""
}

func (m *MplsLmAdmissionControlTunnelInfo_KEYS) GetCtype() string {
	if m != nil {
		return m.Ctype
	}
	return ""
}

func (m *MplsLmAdmissionControlTunnelInfo_KEYS) GetP2MpId() uint32 {
	if m != nil {
		return m.P2MpId
	}
	return 0
}

type MplsLmAdmissionControlTunnelInfo struct {
	// The admitted tunnel's name
	TunnelName string `protobuf:"bytes,50,opt,name=tunnel_name,json=tunnelName" json:"tunnel_name,omitempty"`
	// The bandwidth state
	BandwidthState string `protobuf:"bytes,51,opt,name=bandwidth_state,json=bandwidthState" json:"bandwidth_state,omitempty"`
	// The bandwidth pool
	BandwidthPool string `protobuf:"bytes,52,opt,name=bandwidth_pool,json=bandwidthPool" json:"bandwidth_pool,omitempty"`
	// The tunnel's setup priority
	SetupPriority uint32 `protobuf:"varint,53,opt,name=setup_priority,json=setupPriority" json:"setup_priority,omitempty"`
	// The tunnel's hold priority
	HoldPriority uint32 `protobuf:"varint,54,opt,name=hold_priority,json=holdPriority" json:"hold_priority,omitempty"`
	// The uplink's name for this tunnel
	UpLinkName string `protobuf:"bytes,55,opt,name=up_link_name,json=upLinkName" json:"up_link_name,omitempty"`
	// The downlink's name for this tunnel
	DownLinkName string `protobuf:"bytes,56,opt,name=down_link_name,json=downLinkName" json:"down_link_name,omitempty"`
	// The tunnel's state
	TunnelState string `protobuf:"bytes,57,opt,name=tunnel_state,json=tunnelState" json:"tunnel_state,omitempty"`
	// The bandwidth used by this tunnel
	Bandwidth uint64 `protobuf:"varint,58,opt,name=bandwidth" json:"bandwidth,omitempty"`
	// The local label
	LocalLabel uint32 `protobuf:"varint,59,opt,name=local_label,json=localLabel" json:"local_label,omitempty"`
	// The outgoing label
	OutgoingLabel uint32 `protobuf:"varint,60,opt,name=outgoing_label,json=outgoingLabel" json:"outgoing_label,omitempty"`
	// The backup Interface
	BackupInterface string `protobuf:"bytes,61,opt,name=backup_interface,json=backupInterface" json:"backup_interface,omitempty"`
	// TRUE if the tunnel is currently rerouted
	IsRerouted           bool     `protobuf:"varint,62,opt,name=is_rerouted,json=isRerouted" json:"is_rerouted,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsLmAdmissionControlTunnelInfo) Reset()         { *m = MplsLmAdmissionControlTunnelInfo{} }
func (m *MplsLmAdmissionControlTunnelInfo) String() string { return proto.CompactTextString(m) }
func (*MplsLmAdmissionControlTunnelInfo) ProtoMessage()    {}
func (*MplsLmAdmissionControlTunnelInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_lm_admission_control_tunnel_info_f3c15adbff2fc0ca, []int{1}
}
func (m *MplsLmAdmissionControlTunnelInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsLmAdmissionControlTunnelInfo.Unmarshal(m, b)
}
func (m *MplsLmAdmissionControlTunnelInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsLmAdmissionControlTunnelInfo.Marshal(b, m, deterministic)
}
func (dst *MplsLmAdmissionControlTunnelInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsLmAdmissionControlTunnelInfo.Merge(dst, src)
}
func (m *MplsLmAdmissionControlTunnelInfo) XXX_Size() int {
	return xxx_messageInfo_MplsLmAdmissionControlTunnelInfo.Size(m)
}
func (m *MplsLmAdmissionControlTunnelInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsLmAdmissionControlTunnelInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MplsLmAdmissionControlTunnelInfo proto.InternalMessageInfo

func (m *MplsLmAdmissionControlTunnelInfo) GetTunnelName() string {
	if m != nil {
		return m.TunnelName
	}
	return ""
}

func (m *MplsLmAdmissionControlTunnelInfo) GetBandwidthState() string {
	if m != nil {
		return m.BandwidthState
	}
	return ""
}

func (m *MplsLmAdmissionControlTunnelInfo) GetBandwidthPool() string {
	if m != nil {
		return m.BandwidthPool
	}
	return ""
}

func (m *MplsLmAdmissionControlTunnelInfo) GetSetupPriority() uint32 {
	if m != nil {
		return m.SetupPriority
	}
	return 0
}

func (m *MplsLmAdmissionControlTunnelInfo) GetHoldPriority() uint32 {
	if m != nil {
		return m.HoldPriority
	}
	return 0
}

func (m *MplsLmAdmissionControlTunnelInfo) GetUpLinkName() string {
	if m != nil {
		return m.UpLinkName
	}
	return ""
}

func (m *MplsLmAdmissionControlTunnelInfo) GetDownLinkName() string {
	if m != nil {
		return m.DownLinkName
	}
	return ""
}

func (m *MplsLmAdmissionControlTunnelInfo) GetTunnelState() string {
	if m != nil {
		return m.TunnelState
	}
	return ""
}

func (m *MplsLmAdmissionControlTunnelInfo) GetBandwidth() uint64 {
	if m != nil {
		return m.Bandwidth
	}
	return 0
}

func (m *MplsLmAdmissionControlTunnelInfo) GetLocalLabel() uint32 {
	if m != nil {
		return m.LocalLabel
	}
	return 0
}

func (m *MplsLmAdmissionControlTunnelInfo) GetOutgoingLabel() uint32 {
	if m != nil {
		return m.OutgoingLabel
	}
	return 0
}

func (m *MplsLmAdmissionControlTunnelInfo) GetBackupInterface() string {
	if m != nil {
		return m.BackupInterface
	}
	return ""
}

func (m *MplsLmAdmissionControlTunnelInfo) GetIsRerouted() bool {
	if m != nil {
		return m.IsRerouted
	}
	return false
}

func init() {
	proto.RegisterType((*MplsLmAdmissionControlTunnelInfo_KEYS)(nil), "cisco_ios_xr_mpls_te_oper.mpls_lcac_standby.admission_control.admitted_tunnels.admitted_tunnel.mpls_lm_admission_control_tunnel_info_KEYS")
	proto.RegisterType((*MplsLmAdmissionControlTunnelInfo)(nil), "cisco_ios_xr_mpls_te_oper.mpls_lcac_standby.admission_control.admitted_tunnels.admitted_tunnel.mpls_lm_admission_control_tunnel_info")
}

func init() {
	proto.RegisterFile("mpls_lm_admission_control_tunnel_info.proto", fileDescriptor_mpls_lm_admission_control_tunnel_info_f3c15adbff2fc0ca)
}

var fileDescriptor_mpls_lm_admission_control_tunnel_info_f3c15adbff2fc0ca = []byte{
	// 529 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xcb, 0x6f, 0x13, 0x31,
	0x10, 0xc6, 0x95, 0xd2, 0x96, 0xd6, 0xe4, 0xa5, 0x85, 0x83, 0x0f, 0x48, 0x84, 0x42, 0x45, 0x0a,
	0x28, 0x48, 0x29, 0xef, 0x97, 0xc4, 0x01, 0x89, 0x88, 0x82, 0xa2, 0x94, 0x0b, 0x17, 0x2c, 0x67,
	0xed, 0x36, 0x56, 0xbc, 0x1e, 0xcb, 0xf6, 0xaa, 0xc9, 0x91, 0xff, 0x92, 0x3f, 0x07, 0x79, 0xbc,
	0xbb, 0x89, 0xe0, 0xd2, 0xa3, 0x7f, 0xf3, 0xe5, 0x9b, 0x6f, 0x66, 0xb2, 0xe4, 0x49, 0x61, 0xb5,
	0x67, 0xba, 0x60, 0x5c, 0x14, 0xca, 0x7b, 0x05, 0x86, 0xe5, 0x60, 0x82, 0x03, 0xcd, 0x42, 0x69,
	0x8c, 0xd4, 0x4c, 0x99, 0x0b, 0x18, 0x59, 0x07, 0x01, 0xb2, 0x5f, 0xb9, 0xf2, 0x39, 0x30, 0x05,
	0x9e, 0xad, 0x1c, 0xc3, 0x5f, 0x06, 0xc9, 0xc0, 0x4a, 0x37, 0x4a, 0x36, 0x39, 0xcf, 0x99, 0x0f,
	0xdc, 0x88, 0xf9, 0x7a, 0xf4, 0x9f, 0x21, 0x92, 0x10, 0xa4, 0xa8, 0x9c, 0xfd, 0xbf, 0xe0, 0xe8,
	0xcf, 0x0e, 0x79, 0x7c, 0xad, 0x3c, 0xec, 0xeb, 0xe7, 0x9f, 0xe7, 0xd9, 0x31, 0xe9, 0x7a, 0x28,
	0x5d, 0x2e, 0x19, 0x17, 0xc2, 0x49, 0xef, 0x69, 0x6b, 0xd0, 0x1a, 0x1e, 0xce, 0x3a, 0x89, 0x7e,
	0x4a, 0x30, 0x3b, 0x21, 0x7d, 0x21, 0x7d, 0x50, 0x86, 0x87, 0x68, 0x67, 0xc1, 0x05, 0xba, 0x33,
	0x68, 0x0d, 0x3b, 0xb3, 0xde, 0x16, 0x9f, 0x82, 0x0b, 0xd9, 0x3d, 0x72, 0xab, 0x72, 0x44, 0xd5,
	0x0d, 0x54, 0x91, 0x84, 0x50, 0xf0, 0x8c, 0xdc, 0xde, 0xf6, 0xaa, 0xfb, 0xee, 0x62, 0xdf, 0x6c,
	0xab, 0x54, 0x37, 0x7f, 0x4a, 0x32, 0xb9, 0x0a, 0xd2, 0x88, 0x66, 0x4a, 0xa6, 0x04, 0xdd, 0x43,
	0x7d, 0xbf, 0xae, 0xfc, 0xc0, 0xc2, 0x44, 0x64, 0x43, 0xd2, 0x37, 0x72, 0x15, 0xd8, 0x02, 0x6c,
	0xe3, 0xbd, 0x8f, 0xda, 0x6e, 0xe4, 0x5f, 0xc0, 0xd6, 0xbe, 0x77, 0xc8, 0x5e, 0x1e, 0xd6, 0x56,
	0xd2, 0x9b, 0x58, 0x4e, 0x8f, 0x8c, 0x92, 0x03, 0x3b, 0x66, 0x85, 0x8d, 0x3d, 0x0e, 0x30, 0xfc,
	0xbe, 0x1d, 0x7f, 0xb3, 0x13, 0x71, 0xf4, 0x7b, 0x97, 0x1c, 0x5f, 0x6b, 0xb5, 0x71, 0x07, 0xd5,
	0xd3, 0xf0, 0x42, 0xd2, 0x31, 0xfa, 0x93, 0x84, 0xbe, 0xf3, 0x42, 0x66, 0x8f, 0x48, 0x6f, 0xce,
	0x8d, 0xb8, 0x52, 0x22, 0x2c, 0xe2, 0xb5, 0x83, 0xa4, 0xa7, 0x29, 0x63, 0x83, 0xcf, 0x23, 0x8d,
	0xf7, 0xd9, 0x08, 0x2d, 0x80, 0xa6, 0xcf, 0xd3, 0x7d, 0x1a, 0x3a, 0x05, 0xd0, 0x78, 0x46, 0x19,
	0x4a, 0xcb, 0xac, 0x53, 0xe0, 0x54, 0x58, 0xd3, 0x17, 0x18, 0xbd, 0x83, 0x74, 0x5a, 0xc1, 0xec,
	0x01, 0xe9, 0x2c, 0x40, 0x8b, 0x8d, 0xea, 0x25, 0xaa, 0xda, 0x11, 0x36, 0xa2, 0x01, 0x69, 0x97,
	0x96, 0x69, 0x65, 0x96, 0x29, 0xfd, 0xab, 0x94, 0xbe, 0xb4, 0x67, 0xca, 0x2c, 0x31, 0xfd, 0x43,
	0xd2, 0x15, 0x70, 0x65, 0xb6, 0x34, 0xaf, 0x51, 0xd3, 0x8e, 0xb4, 0x51, 0xdd, 0x27, 0xed, 0x6a,
	0x09, 0x69, 0xc0, 0x37, 0xa8, 0xa9, 0x16, 0x93, 0xa6, 0xbb, 0x4b, 0x0e, 0x9b, 0x39, 0xe8, 0xdb,
	0x41, 0x6b, 0xb8, 0x3b, 0xdb, 0x80, 0xb8, 0x45, 0x0d, 0x39, 0xd7, 0x4c, 0xf3, 0xb9, 0xd4, 0xf4,
	0x5d, 0xfa, 0x27, 0x21, 0x3a, 0x8b, 0x24, 0x4e, 0x0d, 0x65, 0xb8, 0x04, 0x65, 0x2e, 0x2b, 0xcd,
	0xfb, 0x34, 0x75, 0x4d, 0x93, 0xec, 0x84, 0xf4, 0xe7, 0x3c, 0x5f, 0x96, 0x96, 0x29, 0x13, 0xa4,
	0xbb, 0xe0, 0xb9, 0xa4, 0x1f, 0x30, 0x4c, 0x2f, 0xf1, 0x49, 0x8d, 0x63, 0x4b, 0xe5, 0x99, 0x93,
	0x0e, 0xca, 0x20, 0x05, 0xfd, 0x38, 0x68, 0x0d, 0x0f, 0x66, 0x44, 0xf9, 0x59, 0x45, 0xe6, 0xfb,
	0xf8, 0x15, 0x9f, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x5d, 0x60, 0xfc, 0x09, 0xf4, 0x03, 0x00,
	0x00,
}
