// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mpls_lm_bw_alloc_link_info.proto

package cisco_ios_xr_mpls_te_oper_mpls_lcac_standby_bandwidth_allocation_bandwidth_allocation_links_bandwidth_allocation_link

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Bandwidth allocation information for a given link
type MplsLmBwAllocLinkInfo_KEYS struct {
	InterfaceName        string   `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName" json:"interface_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsLmBwAllocLinkInfo_KEYS) Reset()         { *m = MplsLmBwAllocLinkInfo_KEYS{} }
func (m *MplsLmBwAllocLinkInfo_KEYS) String() string { return proto.CompactTextString(m) }
func (*MplsLmBwAllocLinkInfo_KEYS) ProtoMessage()    {}
func (*MplsLmBwAllocLinkInfo_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_lm_bw_alloc_link_info_40a8eced46599389, []int{0}
}
func (m *MplsLmBwAllocLinkInfo_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsLmBwAllocLinkInfo_KEYS.Unmarshal(m, b)
}
func (m *MplsLmBwAllocLinkInfo_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsLmBwAllocLinkInfo_KEYS.Marshal(b, m, deterministic)
}
func (dst *MplsLmBwAllocLinkInfo_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsLmBwAllocLinkInfo_KEYS.Merge(dst, src)
}
func (m *MplsLmBwAllocLinkInfo_KEYS) XXX_Size() int {
	return xxx_messageInfo_MplsLmBwAllocLinkInfo_KEYS.Size(m)
}
func (m *MplsLmBwAllocLinkInfo_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsLmBwAllocLinkInfo_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_MplsLmBwAllocLinkInfo_KEYS proto.InternalMessageInfo

func (m *MplsLmBwAllocLinkInfo_KEYS) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

type MplsLmBwAllocLinkInfo struct {
	// The link's common info
	LinkCommon *MplsLmCommonLinkInfo `protobuf:"bytes,50,opt,name=link_common,json=linkCommon" json:"link_common,omitempty"`
	// Number of total BW descriptors
	TotalBandwidthDescriptors uint32 `protobuf:"varint,51,opt,name=total_bandwidth_descriptors,json=totalBandwidthDescriptors" json:"total_bandwidth_descriptors,omitempty"`
	// Number of BW descriptor for the given pool
	BandwidthDescriptors uint32 `protobuf:"varint,52,opt,name=bandwidth_descriptors,json=bandwidthDescriptors" json:"bandwidth_descriptors,omitempty"`
	// type of the BW pool
	BandwidthPool string `protobuf:"bytes,53,opt,name=bandwidth_pool,json=bandwidthPool" json:"bandwidth_pool,omitempty"`
	// BW info in the upstream direction
	UpstreamBandwidth *MplsLmBwLinkDirBwInfo `protobuf:"bytes,54,opt,name=upstream_bandwidth,json=upstreamBandwidth" json:"upstream_bandwidth,omitempty"`
	// BW info in the dnstream direction
	DownstreamBandwidth *MplsLmBwLinkDirBwInfo `protobuf:"bytes,55,opt,name=downstream_bandwidth,json=downstreamBandwidth" json:"downstream_bandwidth,omitempty"`
	// Flooding up-thresholds
	FloodingUpThresholds []uint32 `protobuf:"varint,56,rep,packed,name=flooding_up_thresholds,json=floodingUpThresholds" json:"flooding_up_thresholds,omitempty"`
	// TRUE if the up-threshold are default
	FloodingUpThresholdsAreDefault bool `protobuf:"varint,57,opt,name=flooding_up_thresholds_are_default,json=floodingUpThresholdsAreDefault" json:"flooding_up_thresholds_are_default,omitempty"`
	// Flooding down-thresholds
	FloodingDownThresholds []uint32 `protobuf:"varint,58,rep,packed,name=flooding_down_thresholds,json=floodingDownThresholds" json:"flooding_down_thresholds,omitempty"`
	// TRUE if the down-threshold are default
	FloodingDownThresholdsAreDefault bool `protobuf:"varint,59,opt,name=flooding_down_thresholds_are_default,json=floodingDownThresholdsAreDefault" json:"flooding_down_thresholds_are_default,omitempty"`
	// TRUE if the up-threshold are global
	FloodingUpThresholdsAreGlobal bool `protobuf:"varint,60,opt,name=flooding_up_thresholds_are_global,json=floodingUpThresholdsAreGlobal" json:"flooding_up_thresholds_are_global,omitempty"`
	// TRUE if the down-threshold are global
	FloodingDownThresholdsAreGlobal bool     `protobuf:"varint,61,opt,name=flooding_down_thresholds_are_global,json=floodingDownThresholdsAreGlobal" json:"flooding_down_thresholds_are_global,omitempty"`
	XXX_NoUnkeyedLiteral            struct{} `json:"-"`
	XXX_unrecognized                []byte   `json:"-"`
	XXX_sizecache                   int32    `json:"-"`
}

func (m *MplsLmBwAllocLinkInfo) Reset()         { *m = MplsLmBwAllocLinkInfo{} }
func (m *MplsLmBwAllocLinkInfo) String() string { return proto.CompactTextString(m) }
func (*MplsLmBwAllocLinkInfo) ProtoMessage()    {}
func (*MplsLmBwAllocLinkInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_lm_bw_alloc_link_info_40a8eced46599389, []int{1}
}
func (m *MplsLmBwAllocLinkInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsLmBwAllocLinkInfo.Unmarshal(m, b)
}
func (m *MplsLmBwAllocLinkInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsLmBwAllocLinkInfo.Marshal(b, m, deterministic)
}
func (dst *MplsLmBwAllocLinkInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsLmBwAllocLinkInfo.Merge(dst, src)
}
func (m *MplsLmBwAllocLinkInfo) XXX_Size() int {
	return xxx_messageInfo_MplsLmBwAllocLinkInfo.Size(m)
}
func (m *MplsLmBwAllocLinkInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsLmBwAllocLinkInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MplsLmBwAllocLinkInfo proto.InternalMessageInfo

func (m *MplsLmBwAllocLinkInfo) GetLinkCommon() *MplsLmCommonLinkInfo {
	if m != nil {
		return m.LinkCommon
	}
	return nil
}

func (m *MplsLmBwAllocLinkInfo) GetTotalBandwidthDescriptors() uint32 {
	if m != nil {
		return m.TotalBandwidthDescriptors
	}
	return 0
}

func (m *MplsLmBwAllocLinkInfo) GetBandwidthDescriptors() uint32 {
	if m != nil {
		return m.BandwidthDescriptors
	}
	return 0
}

func (m *MplsLmBwAllocLinkInfo) GetBandwidthPool() string {
	if m != nil {
		return m.BandwidthPool
	}
	return ""
}

func (m *MplsLmBwAllocLinkInfo) GetUpstreamBandwidth() *MplsLmBwLinkDirBwInfo {
	if m != nil {
		return m.UpstreamBandwidth
	}
	return nil
}

func (m *MplsLmBwAllocLinkInfo) GetDownstreamBandwidth() *MplsLmBwLinkDirBwInfo {
	if m != nil {
		return m.DownstreamBandwidth
	}
	return nil
}

func (m *MplsLmBwAllocLinkInfo) GetFloodingUpThresholds() []uint32 {
	if m != nil {
		return m.FloodingUpThresholds
	}
	return nil
}

func (m *MplsLmBwAllocLinkInfo) GetFloodingUpThresholdsAreDefault() bool {
	if m != nil {
		return m.FloodingUpThresholdsAreDefault
	}
	return false
}

func (m *MplsLmBwAllocLinkInfo) GetFloodingDownThresholds() []uint32 {
	if m != nil {
		return m.FloodingDownThresholds
	}
	return nil
}

func (m *MplsLmBwAllocLinkInfo) GetFloodingDownThresholdsAreDefault() bool {
	if m != nil {
		return m.FloodingDownThresholdsAreDefault
	}
	return false
}

func (m *MplsLmBwAllocLinkInfo) GetFloodingUpThresholdsAreGlobal() bool {
	if m != nil {
		return m.FloodingUpThresholdsAreGlobal
	}
	return false
}

func (m *MplsLmBwAllocLinkInfo) GetFloodingDownThresholdsAreGlobal() bool {
	if m != nil {
		return m.FloodingDownThresholdsAreGlobal
	}
	return false
}

// Information about the Shared Risk Link Group
type MplsSrlgInfo struct {
	// SRLG number
	SharedRiskGroup uint32 `protobuf:"varint,1,opt,name=shared_risk_group,json=sharedRiskGroup" json:"shared_risk_group,omitempty"`
	// SRLG name
	SrlgName             string   `protobuf:"bytes,2,opt,name=srlg_name,json=srlgName" json:"srlg_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsSrlgInfo) Reset()         { *m = MplsSrlgInfo{} }
func (m *MplsSrlgInfo) String() string { return proto.CompactTextString(m) }
func (*MplsSrlgInfo) ProtoMessage()    {}
func (*MplsSrlgInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_lm_bw_alloc_link_info_40a8eced46599389, []int{2}
}
func (m *MplsSrlgInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsSrlgInfo.Unmarshal(m, b)
}
func (m *MplsSrlgInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsSrlgInfo.Marshal(b, m, deterministic)
}
func (dst *MplsSrlgInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsSrlgInfo.Merge(dst, src)
}
func (m *MplsSrlgInfo) XXX_Size() int {
	return xxx_messageInfo_MplsSrlgInfo.Size(m)
}
func (m *MplsSrlgInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsSrlgInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MplsSrlgInfo proto.InternalMessageInfo

func (m *MplsSrlgInfo) GetSharedRiskGroup() uint32 {
	if m != nil {
		return m.SharedRiskGroup
	}
	return 0
}

func (m *MplsSrlgInfo) GetSrlgName() string {
	if m != nil {
		return m.SrlgName
	}
	return ""
}

// Information about the Interface Switching Capability Descriptor (IXCD)
type MplsLmIntfSwitchingCapInfo struct {
	// The switching capability descriptor key
	Key uint32 `protobuf:"varint,1,opt,name=key" json:"key,omitempty"`
	// The switching capability
	SwitchingCapability uint32 `protobuf:"varint,2,opt,name=switching_capability,json=switchingCapability" json:"switching_capability,omitempty"`
	// The link encoding type
	Encoding             uint32   `protobuf:"varint,3,opt,name=encoding" json:"encoding,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsLmIntfSwitchingCapInfo) Reset()         { *m = MplsLmIntfSwitchingCapInfo{} }
func (m *MplsLmIntfSwitchingCapInfo) String() string { return proto.CompactTextString(m) }
func (*MplsLmIntfSwitchingCapInfo) ProtoMessage()    {}
func (*MplsLmIntfSwitchingCapInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_lm_bw_alloc_link_info_40a8eced46599389, []int{3}
}
func (m *MplsLmIntfSwitchingCapInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsLmIntfSwitchingCapInfo.Unmarshal(m, b)
}
func (m *MplsLmIntfSwitchingCapInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsLmIntfSwitchingCapInfo.Marshal(b, m, deterministic)
}
func (dst *MplsLmIntfSwitchingCapInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsLmIntfSwitchingCapInfo.Merge(dst, src)
}
func (m *MplsLmIntfSwitchingCapInfo) XXX_Size() int {
	return xxx_messageInfo_MplsLmIntfSwitchingCapInfo.Size(m)
}
func (m *MplsLmIntfSwitchingCapInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsLmIntfSwitchingCapInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MplsLmIntfSwitchingCapInfo proto.InternalMessageInfo

func (m *MplsLmIntfSwitchingCapInfo) GetKey() uint32 {
	if m != nil {
		return m.Key
	}
	return 0
}

func (m *MplsLmIntfSwitchingCapInfo) GetSwitchingCapability() uint32 {
	if m != nil {
		return m.SwitchingCapability
	}
	return 0
}

func (m *MplsLmIntfSwitchingCapInfo) GetEncoding() uint32 {
	if m != nil {
		return m.Encoding
	}
	return 0
}

// Link properties
type MplsLmLinkFlags struct {
	// Deprecated - TRUE if the link is a TE-Link
	IsMplsTeOn bool `protobuf:"varint,1,opt,name=is_mpls_te_on,json=isMplsTeOn" json:"is_mpls_te_on,omitempty"`
	// Deprecated - Signaling agent
	SignalingAgent string `protobuf:"bytes,2,opt,name=signaling_agent,json=signalingAgent" json:"signaling_agent,omitempty"`
	// TRUE if the link is admin up
	IsAdminUp            bool     `protobuf:"varint,3,opt,name=is_admin_up,json=isAdminUp" json:"is_admin_up,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsLmLinkFlags) Reset()         { *m = MplsLmLinkFlags{} }
func (m *MplsLmLinkFlags) String() string { return proto.CompactTextString(m) }
func (*MplsLmLinkFlags) ProtoMessage()    {}
func (*MplsLmLinkFlags) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_lm_bw_alloc_link_info_40a8eced46599389, []int{4}
}
func (m *MplsLmLinkFlags) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsLmLinkFlags.Unmarshal(m, b)
}
func (m *MplsLmLinkFlags) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsLmLinkFlags.Marshal(b, m, deterministic)
}
func (dst *MplsLmLinkFlags) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsLmLinkFlags.Merge(dst, src)
}
func (m *MplsLmLinkFlags) XXX_Size() int {
	return xxx_messageInfo_MplsLmLinkFlags.Size(m)
}
func (m *MplsLmLinkFlags) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsLmLinkFlags.DiscardUnknown(m)
}

var xxx_messageInfo_MplsLmLinkFlags proto.InternalMessageInfo

func (m *MplsLmLinkFlags) GetIsMplsTeOn() bool {
	if m != nil {
		return m.IsMplsTeOn
	}
	return false
}

func (m *MplsLmLinkFlags) GetSignalingAgent() string {
	if m != nil {
		return m.SignalingAgent
	}
	return ""
}

func (m *MplsLmLinkFlags) GetIsAdminUp() bool {
	if m != nil {
		return m.IsAdminUp
	}
	return false
}

// Information for the flooded area
type MplsLmFloodedArea struct {
	// The flooded area information
	FloodedArea          string   `protobuf:"bytes,1,opt,name=flooded_area,json=floodedArea" json:"flooded_area,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsLmFloodedArea) Reset()         { *m = MplsLmFloodedArea{} }
func (m *MplsLmFloodedArea) String() string { return proto.CompactTextString(m) }
func (*MplsLmFloodedArea) ProtoMessage()    {}
func (*MplsLmFloodedArea) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_lm_bw_alloc_link_info_40a8eced46599389, []int{5}
}
func (m *MplsLmFloodedArea) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsLmFloodedArea.Unmarshal(m, b)
}
func (m *MplsLmFloodedArea) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsLmFloodedArea.Marshal(b, m, deterministic)
}
func (dst *MplsLmFloodedArea) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsLmFloodedArea.Merge(dst, src)
}
func (m *MplsLmFloodedArea) XXX_Size() int {
	return xxx_messageInfo_MplsLmFloodedArea.Size(m)
}
func (m *MplsLmFloodedArea) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsLmFloodedArea.DiscardUnknown(m)
}

var xxx_messageInfo_MplsLmFloodedArea proto.InternalMessageInfo

func (m *MplsLmFloodedArea) GetFloodedArea() string {
	if m != nil {
		return m.FloodedArea
	}
	return ""
}

// Link information
type MplsLmCommonLinkInfo struct {
	// The link's id
	LinkId string `protobuf:"bytes,1,opt,name=link_id,json=linkId" json:"link_id,omitempty"`
	// The link's ip address
	LinkAddress string `protobuf:"bytes,2,opt,name=link_address,json=linkAddress" json:"link_address,omitempty"`
	// TRUE if the link is unnumbered
	IsUnnumbered bool `protobuf:"varint,3,opt,name=is_unnumbered,json=isUnnumbered" json:"is_unnumbered,omitempty"`
	// TRUE if the link is protected
	HasProtection bool `protobuf:"varint,4,opt,name=has_protection,json=hasProtection" json:"has_protection,omitempty"`
	// The link's protection capability
	Capability uint32 `protobuf:"varint,5,opt,name=capability" json:"capability,omitempty"`
	// The link's working priority
	WorkingPriority uint32 `protobuf:"varint,6,opt,name=working_priority,json=workingPriority" json:"working_priority,omitempty"`
	// The link's shared risk link groups
	SharedRiskLinkGroups []*MplsSrlgInfo `protobuf:"bytes,7,rep,name=shared_risk_link_groups,json=sharedRiskLinkGroups" json:"shared_risk_link_groups,omitempty"`
	// The link's switching capability descriptor
	InterfaceSwitchingCapabilityDescriptor []*MplsLmIntfSwitchingCapInfo `protobuf:"bytes,8,rep,name=interface_switching_capability_descriptor,json=interfaceSwitchingCapabilityDescriptor" json:"interface_switching_capability_descriptor,omitempty"`
	// The link's resource provider
	ResourceProvider string `protobuf:"bytes,9,opt,name=resource_provider,json=resourceProvider" json:"resource_provider,omitempty"`
	// TRUE if the resource provider is installed
	IsResourceProviderInstalled bool `protobuf:"varint,10,opt,name=is_resource_provider_installed,json=isResourceProviderInstalled" json:"is_resource_provider_installed,omitempty"`
	// The bandwidth units
	BandwidthUnits string `protobuf:"bytes,11,opt,name=bandwidth_units,json=bandwidthUnits" json:"bandwidth_units,omitempty"`
	// The link's physical bandwidth
	PhysicalBandwidth uint64 `protobuf:"varint,12,opt,name=physical_bandwidth,json=physicalBandwidth" json:"physical_bandwidth,omitempty"`
	// Bandwidth Constraints Model ID
	BcmId uint32 `protobuf:"varint,13,opt,name=bcm_id,json=bcmId" json:"bcm_id,omitempty"`
	// The link's maximum reservable BW
	MaximumReservableBandwidth uint64 `protobuf:"varint,14,opt,name=maximum_reservable_bandwidth,json=maximumReservableBandwidth" json:"maximum_reservable_bandwidth,omitempty"`
	// Incoming reserved BW in %
	IncomingReservableBandwidthPercentage uint32 `protobuf:"varint,15,opt,name=incoming_reservable_bandwidth_percentage,json=incomingReservableBandwidthPercentage" json:"incoming_reservable_bandwidth_percentage,omitempty"`
	// Outgoing reserved BW in %
	OutgoingReservableBandwidthPercentage uint32 `protobuf:"varint,16,opt,name=outgoing_reservable_bandwidth_percentage,json=outgoingReservableBandwidthPercentage" json:"outgoing_reservable_bandwidth_percentage,omitempty"`
	// The link's maximum reservable pool0 BW
	MaximumReservablePool0Bandwidth uint64 `protobuf:"varint,17,opt,name=maximum_reservable_pool0_bandwidth,json=maximumReservablePool0Bandwidth" json:"maximum_reservable_pool0_bandwidth,omitempty"`
	// Incoming reserved pool0 BW in %
	IncomingReservablePool0BandwidthPercentage uint32 `protobuf:"varint,18,opt,name=incoming_reservable_pool0_bandwidth_percentage,json=incomingReservablePool0BandwidthPercentage" json:"incoming_reservable_pool0_bandwidth_percentage,omitempty"`
	// Outgoing reserved pool0 BW in %
	OutgoingReservablePool0BandwidthPercentage uint32 `protobuf:"varint,19,opt,name=outgoing_reservable_pool0_bandwidth_percentage,json=outgoingReservablePool0BandwidthPercentage" json:"outgoing_reservable_pool0_bandwidth_percentage,omitempty"`
	// The link's maximum reservable pool1 BW
	MaximumReservablePool1Bandwidth uint64 `protobuf:"varint,20,opt,name=maximum_reservable_pool1_bandwidth,json=maximumReservablePool1Bandwidth" json:"maximum_reservable_pool1_bandwidth,omitempty"`
	// Incoming reserved pool1 BW in %
	IncomingReservablePool1BandwidthPercentage uint32 `protobuf:"varint,21,opt,name=incoming_reservable_pool1_bandwidth_percentage,json=incomingReservablePool1BandwidthPercentage" json:"incoming_reservable_pool1_bandwidth_percentage,omitempty"`
	// Outgoing reserved pool1 BW in %
	OutgoingReservablePool1BandwidthPercentage uint32 `protobuf:"varint,22,opt,name=outgoing_reservable_pool1_bandwidth_percentage,json=outgoingReservablePool1BandwidthPercentage" json:"outgoing_reservable_pool1_bandwidth_percentage,omitempty"`
	// The link's flags
	LinkFlags *MplsLmLinkFlags `protobuf:"bytes,23,opt,name=link_flags,json=linkFlags" json:"link_flags,omitempty"`
	// Deprecated
	InboundAdmissionMethod string `protobuf:"bytes,24,opt,name=inbound_admission_method,json=inboundAdmissionMethod" json:"inbound_admission_method,omitempty"`
	// Deprecated
	OutboundAdmissionMethod string `protobuf:"bytes,25,opt,name=outbound_admission_method,json=outboundAdmissionMethod" json:"outbound_admission_method,omitempty"`
	// The link's neighbor count
	IgpNeighbors uint32 `protobuf:"varint,26,opt,name=igp_neighbors,json=igpNeighbors" json:"igp_neighbors,omitempty"`
	// List of areas into which the link is flooded
	FloodedAreas         []*MplsLmFloodedArea `protobuf:"bytes,27,rep,name=flooded_areas,json=floodedAreas" json:"flooded_areas,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *MplsLmCommonLinkInfo) Reset()         { *m = MplsLmCommonLinkInfo{} }
func (m *MplsLmCommonLinkInfo) String() string { return proto.CompactTextString(m) }
func (*MplsLmCommonLinkInfo) ProtoMessage()    {}
func (*MplsLmCommonLinkInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_lm_bw_alloc_link_info_40a8eced46599389, []int{6}
}
func (m *MplsLmCommonLinkInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsLmCommonLinkInfo.Unmarshal(m, b)
}
func (m *MplsLmCommonLinkInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsLmCommonLinkInfo.Marshal(b, m, deterministic)
}
func (dst *MplsLmCommonLinkInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsLmCommonLinkInfo.Merge(dst, src)
}
func (m *MplsLmCommonLinkInfo) XXX_Size() int {
	return xxx_messageInfo_MplsLmCommonLinkInfo.Size(m)
}
func (m *MplsLmCommonLinkInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsLmCommonLinkInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MplsLmCommonLinkInfo proto.InternalMessageInfo

func (m *MplsLmCommonLinkInfo) GetLinkId() string {
	if m != nil {
		return m.LinkId
	}
	return ""
}

func (m *MplsLmCommonLinkInfo) GetLinkAddress() string {
	if m != nil {
		return m.LinkAddress
	}
	return ""
}

func (m *MplsLmCommonLinkInfo) GetIsUnnumbered() bool {
	if m != nil {
		return m.IsUnnumbered
	}
	return false
}

func (m *MplsLmCommonLinkInfo) GetHasProtection() bool {
	if m != nil {
		return m.HasProtection
	}
	return false
}

func (m *MplsLmCommonLinkInfo) GetCapability() uint32 {
	if m != nil {
		return m.Capability
	}
	return 0
}

func (m *MplsLmCommonLinkInfo) GetWorkingPriority() uint32 {
	if m != nil {
		return m.WorkingPriority
	}
	return 0
}

func (m *MplsLmCommonLinkInfo) GetSharedRiskLinkGroups() []*MplsSrlgInfo {
	if m != nil {
		return m.SharedRiskLinkGroups
	}
	return nil
}

func (m *MplsLmCommonLinkInfo) GetInterfaceSwitchingCapabilityDescriptor() []*MplsLmIntfSwitchingCapInfo {
	if m != nil {
		return m.InterfaceSwitchingCapabilityDescriptor
	}
	return nil
}

func (m *MplsLmCommonLinkInfo) GetResourceProvider() string {
	if m != nil {
		return m.ResourceProvider
	}
	return ""
}

func (m *MplsLmCommonLinkInfo) GetIsResourceProviderInstalled() bool {
	if m != nil {
		return m.IsResourceProviderInstalled
	}
	return false
}

func (m *MplsLmCommonLinkInfo) GetBandwidthUnits() string {
	if m != nil {
		return m.BandwidthUnits
	}
	return ""
}

func (m *MplsLmCommonLinkInfo) GetPhysicalBandwidth() uint64 {
	if m != nil {
		return m.PhysicalBandwidth
	}
	return 0
}

func (m *MplsLmCommonLinkInfo) GetBcmId() uint32 {
	if m != nil {
		return m.BcmId
	}
	return 0
}

func (m *MplsLmCommonLinkInfo) GetMaximumReservableBandwidth() uint64 {
	if m != nil {
		return m.MaximumReservableBandwidth
	}
	return 0
}

func (m *MplsLmCommonLinkInfo) GetIncomingReservableBandwidthPercentage() uint32 {
	if m != nil {
		return m.IncomingReservableBandwidthPercentage
	}
	return 0
}

func (m *MplsLmCommonLinkInfo) GetOutgoingReservableBandwidthPercentage() uint32 {
	if m != nil {
		return m.OutgoingReservableBandwidthPercentage
	}
	return 0
}

func (m *MplsLmCommonLinkInfo) GetMaximumReservablePool0Bandwidth() uint64 {
	if m != nil {
		return m.MaximumReservablePool0Bandwidth
	}
	return 0
}

func (m *MplsLmCommonLinkInfo) GetIncomingReservablePool0BandwidthPercentage() uint32 {
	if m != nil {
		return m.IncomingReservablePool0BandwidthPercentage
	}
	return 0
}

func (m *MplsLmCommonLinkInfo) GetOutgoingReservablePool0BandwidthPercentage() uint32 {
	if m != nil {
		return m.OutgoingReservablePool0BandwidthPercentage
	}
	return 0
}

func (m *MplsLmCommonLinkInfo) GetMaximumReservablePool1Bandwidth() uint64 {
	if m != nil {
		return m.MaximumReservablePool1Bandwidth
	}
	return 0
}

func (m *MplsLmCommonLinkInfo) GetIncomingReservablePool1BandwidthPercentage() uint32 {
	if m != nil {
		return m.IncomingReservablePool1BandwidthPercentage
	}
	return 0
}

func (m *MplsLmCommonLinkInfo) GetOutgoingReservablePool1BandwidthPercentage() uint32 {
	if m != nil {
		return m.OutgoingReservablePool1BandwidthPercentage
	}
	return 0
}

func (m *MplsLmCommonLinkInfo) GetLinkFlags() *MplsLmLinkFlags {
	if m != nil {
		return m.LinkFlags
	}
	return nil
}

func (m *MplsLmCommonLinkInfo) GetInboundAdmissionMethod() string {
	if m != nil {
		return m.InboundAdmissionMethod
	}
	return ""
}

func (m *MplsLmCommonLinkInfo) GetOutboundAdmissionMethod() string {
	if m != nil {
		return m.OutboundAdmissionMethod
	}
	return ""
}

func (m *MplsLmCommonLinkInfo) GetIgpNeighbors() uint32 {
	if m != nil {
		return m.IgpNeighbors
	}
	return 0
}

func (m *MplsLmCommonLinkInfo) GetFloodedAreas() []*MplsLmFloodedArea {
	if m != nil {
		return m.FloodedAreas
	}
	return nil
}

// Information about the bandwidth of a given pool and priority
type MplsLmBwLinkBwPoolInfo struct {
	// The BW priority
	HoldPriority uint32 `protobuf:"varint,1,opt,name=hold_priority,json=holdPriority" json:"hold_priority,omitempty"`
	// The held bandwidth
	HeldAmount uint32 `protobuf:"varint,2,opt,name=held_amount,json=heldAmount" json:"held_amount,omitempty"`
	// The total held bandwidth
	TotalHeldAmount uint32 `protobuf:"varint,3,opt,name=total_held_amount,json=totalHeldAmount" json:"total_held_amount,omitempty"`
	// The locked bandwidth
	LockedAmount uint32 `protobuf:"varint,4,opt,name=locked_amount,json=lockedAmount" json:"locked_amount,omitempty"`
	// The total locked bandwidth
	TotalLockedAmount    uint32   `protobuf:"varint,5,opt,name=total_locked_amount,json=totalLockedAmount" json:"total_locked_amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsLmBwLinkBwPoolInfo) Reset()         { *m = MplsLmBwLinkBwPoolInfo{} }
func (m *MplsLmBwLinkBwPoolInfo) String() string { return proto.CompactTextString(m) }
func (*MplsLmBwLinkBwPoolInfo) ProtoMessage()    {}
func (*MplsLmBwLinkBwPoolInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_lm_bw_alloc_link_info_40a8eced46599389, []int{7}
}
func (m *MplsLmBwLinkBwPoolInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsLmBwLinkBwPoolInfo.Unmarshal(m, b)
}
func (m *MplsLmBwLinkBwPoolInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsLmBwLinkBwPoolInfo.Marshal(b, m, deterministic)
}
func (dst *MplsLmBwLinkBwPoolInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsLmBwLinkBwPoolInfo.Merge(dst, src)
}
func (m *MplsLmBwLinkBwPoolInfo) XXX_Size() int {
	return xxx_messageInfo_MplsLmBwLinkBwPoolInfo.Size(m)
}
func (m *MplsLmBwLinkBwPoolInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsLmBwLinkBwPoolInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MplsLmBwLinkBwPoolInfo proto.InternalMessageInfo

func (m *MplsLmBwLinkBwPoolInfo) GetHoldPriority() uint32 {
	if m != nil {
		return m.HoldPriority
	}
	return 0
}

func (m *MplsLmBwLinkBwPoolInfo) GetHeldAmount() uint32 {
	if m != nil {
		return m.HeldAmount
	}
	return 0
}

func (m *MplsLmBwLinkBwPoolInfo) GetTotalHeldAmount() uint32 {
	if m != nil {
		return m.TotalHeldAmount
	}
	return 0
}

func (m *MplsLmBwLinkBwPoolInfo) GetLockedAmount() uint32 {
	if m != nil {
		return m.LockedAmount
	}
	return 0
}

func (m *MplsLmBwLinkBwPoolInfo) GetTotalLockedAmount() uint32 {
	if m != nil {
		return m.TotalLockedAmount
	}
	return 0
}

// Information about the bandwidth of a given  link.
type MplsLmBwLinkDirBwInfo struct {
	// BW Direction
	BandwidthDirection string `protobuf:"bytes,1,opt,name=bandwidth_direction,json=bandwidthDirection" json:"bandwidth_direction,omitempty"`
	// True if the link's admit method is based on Allocated BW
	IsAdmissionMethodAllocatedBandwidth bool `protobuf:"varint,2,opt,name=is_admission_method_allocated_bandwidth,json=isAdmissionMethodAllocatedBandwidth" json:"is_admission_method_allocated_bandwidth,omitempty"`
	// Bandwidth units
	BandwidthUnits string `protobuf:"bytes,3,opt,name=bandwidth_units,json=bandwidthUnits" json:"bandwidth_units,omitempty"`
	// Pool0 BW info for the different priority levels
	BandwidthPool0 []*MplsLmBwLinkBwPoolInfo `protobuf:"bytes,4,rep,name=bandwidth_pool0,json=bandwidthPool0" json:"bandwidth_pool0,omitempty"`
	// Pool1 BW info for the different priority levels
	BandwidthPool1       []*MplsLmBwLinkBwPoolInfo `protobuf:"bytes,5,rep,name=bandwidth_pool1,json=bandwidthPool1" json:"bandwidth_pool1,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *MplsLmBwLinkDirBwInfo) Reset()         { *m = MplsLmBwLinkDirBwInfo{} }
func (m *MplsLmBwLinkDirBwInfo) String() string { return proto.CompactTextString(m) }
func (*MplsLmBwLinkDirBwInfo) ProtoMessage()    {}
func (*MplsLmBwLinkDirBwInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_lm_bw_alloc_link_info_40a8eced46599389, []int{8}
}
func (m *MplsLmBwLinkDirBwInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsLmBwLinkDirBwInfo.Unmarshal(m, b)
}
func (m *MplsLmBwLinkDirBwInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsLmBwLinkDirBwInfo.Marshal(b, m, deterministic)
}
func (dst *MplsLmBwLinkDirBwInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsLmBwLinkDirBwInfo.Merge(dst, src)
}
func (m *MplsLmBwLinkDirBwInfo) XXX_Size() int {
	return xxx_messageInfo_MplsLmBwLinkDirBwInfo.Size(m)
}
func (m *MplsLmBwLinkDirBwInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsLmBwLinkDirBwInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MplsLmBwLinkDirBwInfo proto.InternalMessageInfo

func (m *MplsLmBwLinkDirBwInfo) GetBandwidthDirection() string {
	if m != nil {
		return m.BandwidthDirection
	}
	return ""
}

func (m *MplsLmBwLinkDirBwInfo) GetIsAdmissionMethodAllocatedBandwidth() bool {
	if m != nil {
		return m.IsAdmissionMethodAllocatedBandwidth
	}
	return false
}

func (m *MplsLmBwLinkDirBwInfo) GetBandwidthUnits() string {
	if m != nil {
		return m.BandwidthUnits
	}
	return ""
}

func (m *MplsLmBwLinkDirBwInfo) GetBandwidthPool0() []*MplsLmBwLinkBwPoolInfo {
	if m != nil {
		return m.BandwidthPool0
	}
	return nil
}

func (m *MplsLmBwLinkDirBwInfo) GetBandwidthPool1() []*MplsLmBwLinkBwPoolInfo {
	if m != nil {
		return m.BandwidthPool1
	}
	return nil
}

func init() {
	proto.RegisterType((*MplsLmBwAllocLinkInfo_KEYS)(nil), "cisco_ios_xr_mpls_te_oper.mpls_lcac_standby.bandwidth_allocation.bandwidth_allocation_links.bandwidth_allocation_link.mpls_lm_bw_alloc_link_info_KEYS")
	proto.RegisterType((*MplsLmBwAllocLinkInfo)(nil), "cisco_ios_xr_mpls_te_oper.mpls_lcac_standby.bandwidth_allocation.bandwidth_allocation_links.bandwidth_allocation_link.mpls_lm_bw_alloc_link_info")
	proto.RegisterType((*MplsSrlgInfo)(nil), "cisco_ios_xr_mpls_te_oper.mpls_lcac_standby.bandwidth_allocation.bandwidth_allocation_links.bandwidth_allocation_link.mpls_srlg_info")
	proto.RegisterType((*MplsLmIntfSwitchingCapInfo)(nil), "cisco_ios_xr_mpls_te_oper.mpls_lcac_standby.bandwidth_allocation.bandwidth_allocation_links.bandwidth_allocation_link.mpls_lm_intf_switching_cap_info")
	proto.RegisterType((*MplsLmLinkFlags)(nil), "cisco_ios_xr_mpls_te_oper.mpls_lcac_standby.bandwidth_allocation.bandwidth_allocation_links.bandwidth_allocation_link.mpls_lm_link_flags")
	proto.RegisterType((*MplsLmFloodedArea)(nil), "cisco_ios_xr_mpls_te_oper.mpls_lcac_standby.bandwidth_allocation.bandwidth_allocation_links.bandwidth_allocation_link.mpls_lm_flooded_area")
	proto.RegisterType((*MplsLmCommonLinkInfo)(nil), "cisco_ios_xr_mpls_te_oper.mpls_lcac_standby.bandwidth_allocation.bandwidth_allocation_links.bandwidth_allocation_link.mpls_lm_common_link_info")
	proto.RegisterType((*MplsLmBwLinkBwPoolInfo)(nil), "cisco_ios_xr_mpls_te_oper.mpls_lcac_standby.bandwidth_allocation.bandwidth_allocation_links.bandwidth_allocation_link.mpls_lm_bw_link_bw_pool_info")
	proto.RegisterType((*MplsLmBwLinkDirBwInfo)(nil), "cisco_ios_xr_mpls_te_oper.mpls_lcac_standby.bandwidth_allocation.bandwidth_allocation_links.bandwidth_allocation_link.mpls_lm_bw_link_dir_bw_info")
}

func init() {
	proto.RegisterFile("mpls_lm_bw_alloc_link_info.proto", fileDescriptor_mpls_lm_bw_alloc_link_info_40a8eced46599389)
}

var fileDescriptor_mpls_lm_bw_alloc_link_info_40a8eced46599389 = []byte{
	// 1432 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x58, 0xcd, 0x6e, 0x1c, 0xc5,
	0x13, 0xd7, 0xc4, 0x8e, 0x63, 0x97, 0xbd, 0xfe, 0x68, 0x3b, 0xf1, 0xc4, 0xce, 0xdf, 0xde, 0xac,
	0xff, 0x21, 0x9b, 0x20, 0x96, 0x6c, 0x12, 0x20, 0x09, 0x1f, 0x62, 0x49, 0x20, 0x09, 0xf9, 0xc0,
	0x9a, 0xc4, 0x42, 0x39, 0x8d, 0x7a, 0x66, 0xda, 0xbb, 0x2d, 0xcf, 0x4c, 0x8f, 0xa6, 0x67, 0xb2,
	0xf1, 0x0d, 0x21, 0x71, 0x40, 0x1c, 0x90, 0x40, 0xe2, 0x84, 0xb8, 0x73, 0xe4, 0x01, 0x72, 0xe1,
	0xc0, 0x8d, 0xc7, 0xe0, 0x05, 0x78, 0x02, 0xd4, 0xd5, 0xf3, 0x65, 0x7b, 0x76, 0x15, 0x4e, 0x0e,
	0xb7, 0x9d, 0xea, 0x5f, 0x55, 0xff, 0xaa, 0xba, 0xba, 0xaa, 0x7a, 0xa1, 0x19, 0x44, 0xbe, 0xb4,
	0xfd, 0xc0, 0x76, 0x86, 0x36, 0xf5, 0x7d, 0xe1, 0xda, 0x3e, 0x0f, 0xf7, 0x6c, 0x1e, 0xee, 0x8a,
	0x4e, 0x14, 0x8b, 0x44, 0x90, 0xd4, 0xe5, 0xd2, 0x15, 0x36, 0x17, 0xd2, 0x7e, 0x11, 0xdb, 0x08,
	0x4f, 0x98, 0x2d, 0x22, 0x16, 0x77, 0xb4, 0xae, 0x4b, 0x5d, 0x5b, 0x26, 0x34, 0xf4, 0x9c, 0xfd,
	0x8e, 0x43, 0x43, 0x6f, 0xc8, 0xbd, 0x64, 0xa0, 0x8d, 0xd1, 0x84, 0x8b, 0xb0, 0x56, 0x88, 0xdb,
	0xc8, 0xd1, 0x4b, 0xad, 0x7b, 0xb0, 0x39, 0x9a, 0x9a, 0xfd, 0xe0, 0xd3, 0x67, 0x4f, 0xc8, 0x05,
	0x98, 0xe7, 0x61, 0xc2, 0xe2, 0x5d, 0xea, 0x32, 0x3b, 0xa4, 0x01, 0x33, 0x8d, 0xa6, 0xd1, 0x9e,
	0xb1, 0x1a, 0x85, 0xf4, 0x31, 0x0d, 0x58, 0xeb, 0x97, 0x19, 0x58, 0x1b, 0x6d, 0x8a, 0xfc, 0x66,
	0xc0, 0x2c, 0x7e, 0xb9, 0x22, 0x08, 0x44, 0x68, 0x5e, 0x6d, 0x1a, 0xed, 0xd9, 0xab, 0xdf, 0x1b,
	0x9d, 0x63, 0xf1, 0xbb, 0x93, 0x33, 0xd5, 0x6c, 0x4a, 0x9e, 0x16, 0xa8, 0x9f, 0xb7, 0x51, 0x4a,
	0x3e, 0x82, 0xf5, 0x44, 0x24, 0xd4, 0xb7, 0x4b, 0x3b, 0x1e, 0x93, 0x6e, 0xcc, 0xa3, 0x44, 0xc4,
	0xd2, 0xbc, 0xd6, 0x34, 0xda, 0x0d, 0xeb, 0x2c, 0x42, 0x3e, 0xc9, 0x11, 0x77, 0x4a, 0x00, 0xb9,
	0x06, 0xa7, 0xeb, 0x35, 0xaf, 0xa3, 0xe6, 0x8a, 0x53, 0xa7, 0x74, 0x01, 0xe6, 0x4b, 0xa5, 0x48,
	0x08, 0xdf, 0x7c, 0x47, 0x87, 0xbb, 0x90, 0x6e, 0x0b, 0xe1, 0x93, 0xdf, 0x0d, 0x20, 0x69, 0x24,
	0x93, 0x98, 0xd1, 0xa0, 0xe4, 0x67, 0xbe, 0x8b, 0x61, 0xfd, 0xe1, 0xb8, 0xc3, 0xea, 0x0c, 0x75,
	0x48, 0x3d, 0x1e, 0xab, 0xdf, 0x18, 0xd9, 0xa5, 0x9c, 0x6e, 0x11, 0x2b, 0xf2, 0x87, 0x01, 0x2b,
	0x9e, 0x18, 0x86, 0x47, 0xdc, 0x78, 0xef, 0xf5, 0x75, 0x63, 0xb9, 0x24, 0x5c, 0x3a, 0x72, 0x1d,
	0xce, 0xec, 0xfa, 0x42, 0x78, 0x3c, 0xec, 0xdb, 0x69, 0x64, 0x27, 0x83, 0x98, 0xc9, 0x81, 0xf0,
	0x3d, 0x69, 0xde, 0x68, 0x4e, 0xa8, 0xa3, 0xce, 0x57, 0x77, 0xa2, 0xa7, 0xc5, 0x1a, 0xf9, 0x1c,
	0x5a, 0xf5, 0x5a, 0x36, 0x8d, 0x99, 0xed, 0xb1, 0x5d, 0x9a, 0xfa, 0x89, 0x79, 0xb3, 0x69, 0xb4,
	0xa7, 0xad, 0x8d, 0x3a, 0x0b, 0xbd, 0x98, 0xdd, 0xd1, 0x28, 0x72, 0x03, 0xcc, 0xc2, 0x96, 0x62,
	0x58, 0xe5, 0x70, 0x0b, 0x39, 0x14, 0x0c, 0xef, 0x88, 0x61, 0x58, 0x61, 0xf1, 0x18, 0xfe, 0x3f,
	0x4a, 0xf3, 0x00, 0x8f, 0xf7, 0x91, 0x47, 0xb3, 0xde, 0x4a, 0x85, 0xc9, 0x3d, 0x38, 0x3f, 0xc6,
	0xab, 0xbe, 0x2f, 0x1c, 0xea, 0x9b, 0x1f, 0xa0, 0xb1, 0xff, 0x8d, 0x70, 0xea, 0x2e, 0x82, 0xc8,
	0x43, 0xd8, 0x1a, 0xcb, 0x2c, 0xb3, 0xf5, 0x21, 0xda, 0xda, 0x1c, 0x49, 0x4c, 0x5b, 0x6b, 0x3d,
	0x83, 0x79, 0x3c, 0x57, 0x19, 0xfb, 0x7d, 0x5d, 0x93, 0x2e, 0xc3, 0x92, 0x1c, 0xd0, 0x98, 0x79,
	0x76, 0xcc, 0xe5, 0x9e, 0xdd, 0x8f, 0x45, 0x1a, 0x61, 0x71, 0x6b, 0x58, 0x0b, 0x7a, 0xc1, 0xe2,
	0x72, 0xef, 0xae, 0x12, 0x93, 0x75, 0x98, 0x41, 0x45, 0x2c, 0x80, 0x27, 0xf0, 0x46, 0x4e, 0x2b,
	0x01, 0xd6, 0xbe, 0xaf, 0x8d, 0xb2, 0x8c, 0xf2, 0x30, 0xd9, 0xb5, 0xe5, 0x90, 0x27, 0xee, 0x40,
	0xf1, 0x76, 0x69, 0xa4, 0x37, 0x5b, 0x84, 0x89, 0x3d, 0xb6, 0x9f, 0x99, 0x57, 0x3f, 0x49, 0x17,
	0x56, 0x0e, 0xe0, 0xa8, 0xc3, 0x7d, 0x9e, 0xec, 0xa3, 0xf5, 0x86, 0xb5, 0x5c, 0xac, 0xdd, 0x2e,
	0x96, 0xc8, 0x1a, 0x4c, 0xb3, 0xd0, 0x45, 0x37, 0xcd, 0x09, 0x84, 0x15, 0xdf, 0xad, 0xaf, 0x0c,
	0x20, 0x39, 0x09, 0xcc, 0xda, 0x5d, 0x9f, 0xf6, 0x25, 0x39, 0x0f, 0x0d, 0x2e, 0xcb, 0xab, 0x13,
	0x22, 0x83, 0x69, 0x0b, 0xb8, 0x7c, 0x14, 0xf9, 0xf2, 0x29, 0xfb, 0x22, 0x24, 0x17, 0x61, 0x41,
	0xf2, 0x7e, 0x48, 0x7d, 0x45, 0x84, 0xf6, 0x59, 0x98, 0x64, 0x1e, 0xce, 0x17, 0xe2, 0x9e, 0x92,
	0x92, 0x0d, 0x98, 0xe5, 0xd2, 0xa6, 0x5e, 0xc0, 0x43, 0x3b, 0x8d, 0x90, 0xc1, 0xb4, 0x35, 0xc3,
	0x65, 0x4f, 0x49, 0x76, 0xa2, 0xd6, 0x4d, 0x58, 0xc9, 0x19, 0xe0, 0x69, 0x30, 0x4f, 0x9d, 0x13,
	0x25, 0xe7, 0x61, 0xae, 0xfa, 0x9d, 0x35, 0x90, 0xd9, 0x4c, 0xd6, 0x8b, 0x19, 0x6d, 0xfd, 0xbc,
	0x04, 0xe6, 0xa8, 0xa2, 0x4c, 0x56, 0xe1, 0x94, 0xfe, 0xf0, 0x32, 0xd5, 0x29, 0xf5, 0x79, 0xdf,
	0x53, 0x86, 0x71, 0x81, 0x7a, 0x5e, 0xcc, 0xa4, 0xcc, 0x68, 0x63, 0xa3, 0xe9, 0x69, 0x11, 0xd9,
	0x42, 0xff, 0xd3, 0x30, 0x4c, 0x03, 0x87, 0xc5, 0xcc, 0xcb, 0x58, 0xcf, 0x71, 0xb9, 0x53, 0xc8,
	0x54, 0xd1, 0x1d, 0x50, 0x69, 0xab, 0x56, 0xcc, 0x5c, 0x55, 0x07, 0xcc, 0x49, 0x44, 0x35, 0x06,
	0x54, 0x6e, 0x17, 0x42, 0xb2, 0x01, 0x50, 0x39, 0xa7, 0x93, 0x78, 0x00, 0x15, 0x09, 0xb9, 0x04,
	0x8b, 0x43, 0x11, 0xef, 0xa9, 0x30, 0x46, 0x31, 0x17, 0xb1, 0x42, 0x4d, 0xe9, 0x7c, 0xca, 0xe4,
	0xdb, 0x99, 0x98, 0xbc, 0x34, 0x60, 0xb5, 0x9a, 0x7c, 0xe8, 0x06, 0x66, 0xa0, 0x34, 0x4f, 0x35,
	0x27, 0xda, 0xb3, 0x57, 0xbf, 0x39, 0xd6, 0xea, 0x57, 0xdc, 0x12, 0x6b, 0xa5, 0xbc, 0x0a, 0x0f,
	0x79, 0xa8, 0xaf, 0x83, 0x24, 0x7f, 0x1b, 0x70, 0xa9, 0x1c, 0x0b, 0xea, 0xf2, 0xb8, 0xd2, 0xf1,
	0xcc, 0x69, 0xf4, 0xe8, 0xa7, 0xe3, 0xae, 0xe7, 0x23, 0xee, 0xa6, 0xf5, 0x46, 0xe1, 0xc9, 0x93,
	0xa3, 0x97, 0xae, 0x6c, 0xce, 0xe4, 0x4d, 0x58, 0x8a, 0x99, 0x14, 0x69, 0xec, 0x32, 0x95, 0x2b,
	0xcf, 0xb9, 0xc7, 0x62, 0x73, 0x06, 0x73, 0x6e, 0x31, 0x5f, 0xd8, 0xce, 0xe4, 0xe4, 0x36, 0x6c,
	0x70, 0x69, 0x1f, 0xc1, 0xdb, 0x3c, 0x94, 0x09, 0xf5, 0x7d, 0xe6, 0x99, 0x80, 0x39, 0xb6, 0xce,
	0xa5, 0x75, 0x48, 0xf7, 0x7e, 0x0e, 0x51, 0x57, 0xb3, 0x74, 0x2b, 0x0d, 0x79, 0x22, 0xcd, 0x59,
	0x7d, 0x35, 0x0b, 0xf1, 0x8e, 0x92, 0x92, 0xb7, 0x80, 0x44, 0x83, 0x7d, 0xc9, 0xdd, 0xea, 0xb8,
	0x62, 0xce, 0x35, 0x8d, 0xf6, 0xa4, 0xb5, 0x94, 0xaf, 0x94, 0x0d, 0xeb, 0x34, 0x4c, 0x39, 0x6e,
	0xa0, 0x2e, 0x54, 0x03, 0xf3, 0xf3, 0xa4, 0xe3, 0x06, 0xf7, 0x3d, 0xf2, 0x31, 0x9c, 0x0b, 0xe8,
	0x0b, 0x1e, 0xa4, 0x81, 0x22, 0xce, 0xe2, 0xe7, 0xd4, 0xf1, 0x59, 0xc5, 0xde, 0x3c, 0xda, 0x5b,
	0xcb, 0x30, 0x56, 0x01, 0x29, 0x0d, 0x7f, 0x09, 0x6d, 0x1e, 0xba, 0x22, 0x50, 0xf1, 0xad, 0x33,
	0x61, 0x47, 0x2c, 0x76, 0x59, 0x98, 0xd0, 0x3e, 0x33, 0x17, 0x70, 0xeb, 0x0b, 0x39, 0xbe, 0xc6,
	0xdc, 0x76, 0x01, 0x56, 0x86, 0x45, 0x9a, 0xf4, 0xc5, 0xab, 0x18, 0x5e, 0xd4, 0x86, 0x73, 0xfc,
	0x78, 0xc3, 0x0f, 0xa0, 0x55, 0xe3, 0xb3, 0x9a, 0xbc, 0xae, 0x54, 0x3c, 0x5f, 0x42, 0xcf, 0x37,
	0x8f, 0x78, 0xae, 0x86, 0xb1, 0x2b, 0xa5, 0xfb, 0x0e, 0x74, 0xea, 0xdc, 0x3f, 0x64, 0xad, 0xca,
	0x95, 0x20, 0xd7, 0xcb, 0x47, 0x83, 0x70, 0xd0, 0x72, 0x85, 0xb0, 0x03, 0x9d, 0xba, 0x48, 0x8c,
	0xd9, 0x63, 0x59, 0xef, 0x71, 0x34, 0x1e, 0x23, 0xf7, 0x18, 0x1d, 0x94, 0x6e, 0x25, 0x28, 0x2b,
	0x63, 0x82, 0xd2, 0x7d, 0xa5, 0xa0, 0x74, 0xeb, 0x09, 0x9f, 0x1e, 0x17, 0x94, 0xee, 0xbf, 0x0c,
	0xca, 0x88, 0x3d, 0xce, 0x8c, 0x0b, 0x4a, 0xed, 0x1e, 0xbf, 0x1a, 0x00, 0x65, 0x67, 0x35, 0x57,
	0x71, 0x48, 0xfd, 0xf6, 0xb8, 0x8b, 0x5a, 0xc9, 0xc8, 0x9a, 0x51, 0xbf, 0x3f, 0xc3, 0xb6, 0x7f,
	0x03, 0x4c, 0x1e, 0x3a, 0x22, 0x0d, 0x3d, 0xec, 0xd7, 0x52, 0x2a, 0xbd, 0x80, 0x25, 0x03, 0xe1,
	0x99, 0x26, 0x56, 0x90, 0x33, 0xd9, 0x7a, 0x2f, 0x5f, 0x7e, 0x84, 0xab, 0xe4, 0x16, 0x9c, 0x15,
	0x69, 0x32, 0x42, 0xf5, 0x2c, 0xaa, 0xae, 0xe6, 0x80, 0xc3, 0xba, 0xaa, 0xd9, 0xf6, 0x23, 0x3b,
	0x64, 0xbc, 0x3f, 0x70, 0xd4, 0x4b, 0x67, 0x0d, 0x83, 0x3c, 0xc7, 0xfb, 0xd1, 0xe3, 0x5c, 0xa6,
	0x9e, 0x82, 0x8d, 0xea, 0x38, 0x20, 0xcd, 0x75, 0x6c, 0x0f, 0xdf, 0x1d, 0x77, 0x24, 0xab, 0xa4,
	0xac, 0xb9, 0xca, 0x74, 0x22, 0x5b, 0x7f, 0x19, 0x70, 0xee, 0xf0, 0xab, 0xc0, 0x19, 0x62, 0x7a,
	0xe9, 0x11, 0x65, 0x0b, 0x1a, 0x6a, 0xde, 0x2c, 0xfb, 0xbe, 0x1e, 0xf4, 0xe6, 0x94, 0xb0, 0x68,
	0xfa, 0x9b, 0x30, 0x3b, 0x60, 0xbe, 0x67, 0xd3, 0x40, 0xa4, 0xd9, 0x90, 0xd5, 0xb0, 0x40, 0x89,
	0x7a, 0x28, 0x51, 0x13, 0xa9, 0x7e, 0x71, 0x56, 0x61, 0x7a, 0xd0, 0x5b, 0xc0, 0x85, 0x7b, 0x25,
	0x76, 0x0b, 0x1a, 0xbe, 0x70, 0xf7, 0x58, 0x81, 0x9b, 0xd4, 0x3b, 0x6a, 0x61, 0x06, 0xea, 0xc0,
	0xb2, 0x36, 0x78, 0x10, 0xaa, 0x47, 0x17, 0xbd, 0xd7, 0xc3, 0x0a, 0xbe, 0xf5, 0xe7, 0x24, 0xac,
	0x8f, 0x79, 0xfd, 0x90, 0xb7, 0x61, 0xb9, 0xf2, 0xa4, 0xe5, 0x71, 0x36, 0x2d, 0xe9, 0xa9, 0x8c,
	0x94, 0x0f, 0xda, 0x7c, 0x85, 0x3c, 0x85, 0x8b, 0xd9, 0xc8, 0x58, 0xcd, 0xa3, 0xfc, 0x08, 0x98,
	0x57, 0xa9, 0x26, 0x27, 0xb0, 0x1d, 0x6e, 0xe9, 0x71, 0xb2, 0x92, 0x55, 0xbd, 0x1c, 0x5b, 0x56,
	0x94, 0x9a, 0xb6, 0x38, 0x51, 0xdb, 0x16, 0x5f, 0x1a, 0x55, 0x24, 0x96, 0x48, 0x73, 0x12, 0xb3,
	0xed, 0xc7, 0xd7, 0xe5, 0x71, 0x59, 0x4d, 0xa3, 0x0a, 0x7f, 0x2c, 0xcd, 0x35, 0xfc, 0xbb, 0xe6,
	0xc9, 0xff, 0x0c, 0xff, 0xae, 0x33, 0x85, 0xff, 0x6e, 0x5d, 0xfb, 0x27, 0x00, 0x00, 0xff, 0xff,
	0xeb, 0xeb, 0xeb, 0xee, 0x01, 0x13, 0x00, 0x00,
}
