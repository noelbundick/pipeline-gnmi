// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mpls_lm_interface_link_info.proto

package cisco_ios_xr_mpls_te_oper_mpls_lcac_standby_link_information_links_link

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// IGP and area information of a link
type MplsLmInterfaceLinkInfo_KEYS struct {
	InterfaceName        string   `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName" json:"interface_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsLmInterfaceLinkInfo_KEYS) Reset()         { *m = MplsLmInterfaceLinkInfo_KEYS{} }
func (m *MplsLmInterfaceLinkInfo_KEYS) String() string { return proto.CompactTextString(m) }
func (*MplsLmInterfaceLinkInfo_KEYS) ProtoMessage()    {}
func (*MplsLmInterfaceLinkInfo_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_lm_interface_link_info_e8463c68c90cff2d, []int{0}
}
func (m *MplsLmInterfaceLinkInfo_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsLmInterfaceLinkInfo_KEYS.Unmarshal(m, b)
}
func (m *MplsLmInterfaceLinkInfo_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsLmInterfaceLinkInfo_KEYS.Marshal(b, m, deterministic)
}
func (dst *MplsLmInterfaceLinkInfo_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsLmInterfaceLinkInfo_KEYS.Merge(dst, src)
}
func (m *MplsLmInterfaceLinkInfo_KEYS) XXX_Size() int {
	return xxx_messageInfo_MplsLmInterfaceLinkInfo_KEYS.Size(m)
}
func (m *MplsLmInterfaceLinkInfo_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsLmInterfaceLinkInfo_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_MplsLmInterfaceLinkInfo_KEYS proto.InternalMessageInfo

func (m *MplsLmInterfaceLinkInfo_KEYS) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

type MplsLmInterfaceLinkInfo struct {
	// The link's common info
	LinkCommon *MplsLmCommonLinkInfo `protobuf:"bytes,50,opt,name=link_common,json=linkCommon" json:"link_common,omitempty"`
	// Reason why link is not flooded (area-independent)
	ReasonNotFlooded string `protobuf:"bytes,51,opt,name=reason_not_flooded,json=reasonNotFlooded" json:"reason_not_flooded,omitempty"`
	// The link's maximum reservable BW in RDM
	MaximumReservationBandwidthRdm uint64 `protobuf:"varint,52,opt,name=maximum_reservation_bandwidth_rdm,json=maximumReservationBandwidthRdm" json:"maximum_reservation_bandwidth_rdm,omitempty"`
	// The link's reservable pool0 BW in RDM
	ReservablePool0BandwidthRdm uint64 `protobuf:"varint,53,opt,name=reservable_pool0_bandwidth_rdm,json=reservablePool0BandwidthRdm" json:"reservable_pool0_bandwidth_rdm,omitempty"`
	// The link's reservable pool1 BW in RDM
	ReservablePool1BandwidthRdm uint64 `protobuf:"varint,54,opt,name=reservable_pool1_bandwidth_rdm,json=reservablePool1BandwidthRdm" json:"reservable_pool1_bandwidth_rdm,omitempty"`
	// The link's maximum reservable BW in MAM
	MaximumReservationBandwidthMam uint64 `protobuf:"varint,55,opt,name=maximum_reservation_bandwidth_mam,json=maximumReservationBandwidthMam" json:"maximum_reservation_bandwidth_mam,omitempty"`
	// The link's reservable pool0 BW in MAM
	ReservablePool0BandwidthMam uint64 `protobuf:"varint,56,opt,name=reservable_pool0_bandwidth_mam,json=reservablePool0BandwidthMam" json:"reservable_pool0_bandwidth_mam,omitempty"`
	// The link's reservable pool1 BW in MAM
	ReservablePool1BandwidthMam uint64 `protobuf:"varint,57,opt,name=reservable_pool1_bandwidth_mam,json=reservablePool1BandwidthMam" json:"reservable_pool1_bandwidth_mam,omitempty"`
	// Deprecated
	LinkAttributes uint32 `protobuf:"varint,58,opt,name=link_attributes,json=linkAttributes" json:"link_attributes,omitempty"`
	// The link's extended attribute bit map
	LinkExtendedAttributes []uint32 `protobuf:"varint,59,rep,packed,name=link_extended_attributes,json=linkExtendedAttributes" json:"link_extended_attributes,omitempty"`
	// Reference bits for undefined affinity names
	LinkForwadRefValue []uint32 `protobuf:"varint,60,rep,packed,name=link_forwad_ref_value,json=linkForwadRefValue" json:"link_forwad_ref_value,omitempty"`
	// Affinity map array
	AffinityMap []*MplsTeAffinityMapInfo `protobuf:"bytes,61,rep,name=affinity_map,json=affinityMap" json:"affinity_map,omitempty"`
	// TRUE if one or more affinity definition(s) is/are unknown
	IsAttributeIncomplete bool `protobuf:"varint,62,opt,name=is_attribute_incomplete,json=isAttributeIncomplete" json:"is_attribute_incomplete,omitempty"`
	// TRUE, if name based attribute style is in effect
	IsNameBasedAttribute bool `protobuf:"varint,63,opt,name=is_name_based_attribute,json=isNameBasedAttribute" json:"is_name_based_attribute,omitempty"`
	// The link's TE metric
	TeMetric uint32 `protobuf:"varint,64,opt,name=te_metric,json=teMetric" json:"te_metric,omitempty"`
	// Flag to indicate whether the link's TE metric is a valid value
	IsTeMetricValid bool `protobuf:"varint,65,opt,name=is_te_metric_valid,json=isTeMetricValid" json:"is_te_metric_valid,omitempty"`
	// Per-area data
	Areas []*MplsLmInterfaceLinkAreaInfo `protobuf:"bytes,66,rep,name=areas" json:"areas,omitempty"`
	// Flex LSP Lockout info
	Lockout []*MplsLmInterfaceLockoutInfo `protobuf:"bytes,67,rep,name=lockout" json:"lockout,omitempty"`
	// The link's NPU OOR info. This field is NULL for platforms that do not support HW-OOR notifications
	HwOor                *MplsLmInterfaceHwOorInfo `protobuf:"bytes,68,opt,name=hw_oor,json=hwOor" json:"hw_oor,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *MplsLmInterfaceLinkInfo) Reset()         { *m = MplsLmInterfaceLinkInfo{} }
func (m *MplsLmInterfaceLinkInfo) String() string { return proto.CompactTextString(m) }
func (*MplsLmInterfaceLinkInfo) ProtoMessage()    {}
func (*MplsLmInterfaceLinkInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_lm_interface_link_info_e8463c68c90cff2d, []int{1}
}
func (m *MplsLmInterfaceLinkInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsLmInterfaceLinkInfo.Unmarshal(m, b)
}
func (m *MplsLmInterfaceLinkInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsLmInterfaceLinkInfo.Marshal(b, m, deterministic)
}
func (dst *MplsLmInterfaceLinkInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsLmInterfaceLinkInfo.Merge(dst, src)
}
func (m *MplsLmInterfaceLinkInfo) XXX_Size() int {
	return xxx_messageInfo_MplsLmInterfaceLinkInfo.Size(m)
}
func (m *MplsLmInterfaceLinkInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsLmInterfaceLinkInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MplsLmInterfaceLinkInfo proto.InternalMessageInfo

func (m *MplsLmInterfaceLinkInfo) GetLinkCommon() *MplsLmCommonLinkInfo {
	if m != nil {
		return m.LinkCommon
	}
	return nil
}

func (m *MplsLmInterfaceLinkInfo) GetReasonNotFlooded() string {
	if m != nil {
		return m.ReasonNotFlooded
	}
	return ""
}

func (m *MplsLmInterfaceLinkInfo) GetMaximumReservationBandwidthRdm() uint64 {
	if m != nil {
		return m.MaximumReservationBandwidthRdm
	}
	return 0
}

func (m *MplsLmInterfaceLinkInfo) GetReservablePool0BandwidthRdm() uint64 {
	if m != nil {
		return m.ReservablePool0BandwidthRdm
	}
	return 0
}

func (m *MplsLmInterfaceLinkInfo) GetReservablePool1BandwidthRdm() uint64 {
	if m != nil {
		return m.ReservablePool1BandwidthRdm
	}
	return 0
}

func (m *MplsLmInterfaceLinkInfo) GetMaximumReservationBandwidthMam() uint64 {
	if m != nil {
		return m.MaximumReservationBandwidthMam
	}
	return 0
}

func (m *MplsLmInterfaceLinkInfo) GetReservablePool0BandwidthMam() uint64 {
	if m != nil {
		return m.ReservablePool0BandwidthMam
	}
	return 0
}

func (m *MplsLmInterfaceLinkInfo) GetReservablePool1BandwidthMam() uint64 {
	if m != nil {
		return m.ReservablePool1BandwidthMam
	}
	return 0
}

func (m *MplsLmInterfaceLinkInfo) GetLinkAttributes() uint32 {
	if m != nil {
		return m.LinkAttributes
	}
	return 0
}

func (m *MplsLmInterfaceLinkInfo) GetLinkExtendedAttributes() []uint32 {
	if m != nil {
		return m.LinkExtendedAttributes
	}
	return nil
}

func (m *MplsLmInterfaceLinkInfo) GetLinkForwadRefValue() []uint32 {
	if m != nil {
		return m.LinkForwadRefValue
	}
	return nil
}

func (m *MplsLmInterfaceLinkInfo) GetAffinityMap() []*MplsTeAffinityMapInfo {
	if m != nil {
		return m.AffinityMap
	}
	return nil
}

func (m *MplsLmInterfaceLinkInfo) GetIsAttributeIncomplete() bool {
	if m != nil {
		return m.IsAttributeIncomplete
	}
	return false
}

func (m *MplsLmInterfaceLinkInfo) GetIsNameBasedAttribute() bool {
	if m != nil {
		return m.IsNameBasedAttribute
	}
	return false
}

func (m *MplsLmInterfaceLinkInfo) GetTeMetric() uint32 {
	if m != nil {
		return m.TeMetric
	}
	return 0
}

func (m *MplsLmInterfaceLinkInfo) GetIsTeMetricValid() bool {
	if m != nil {
		return m.IsTeMetricValid
	}
	return false
}

func (m *MplsLmInterfaceLinkInfo) GetAreas() []*MplsLmInterfaceLinkAreaInfo {
	if m != nil {
		return m.Areas
	}
	return nil
}

func (m *MplsLmInterfaceLinkInfo) GetLockout() []*MplsLmInterfaceLockoutInfo {
	if m != nil {
		return m.Lockout
	}
	return nil
}

func (m *MplsLmInterfaceLinkInfo) GetHwOor() *MplsLmInterfaceHwOorInfo {
	if m != nil {
		return m.HwOor
	}
	return nil
}

// Affinity Map
type MplsTeAffinityMapInfo struct {
	// Affinity name
	AffinityName string `protobuf:"bytes,1,opt,name=affinity_name,json=affinityName" json:"affinity_name,omitempty"`
	// Affinity value
	AffinityValue uint32 `protobuf:"varint,2,opt,name=affinity_value,json=affinityValue" json:"affinity_value,omitempty"`
	// EAG value
	AffinityExtendedValue []uint32 `protobuf:"varint,3,rep,packed,name=affinity_extended_value,json=affinityExtendedValue" json:"affinity_extended_value,omitempty"`
	// Affinity bit position
	AffinityBitPosition uint32 `protobuf:"varint,4,opt,name=affinity_bit_position,json=affinityBitPosition" json:"affinity_bit_position,omitempty"`
	// Affinity table id
	AffinityTableId      string   `protobuf:"bytes,5,opt,name=affinity_table_id,json=affinityTableId" json:"affinity_table_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeAffinityMapInfo) Reset()         { *m = MplsTeAffinityMapInfo{} }
func (m *MplsTeAffinityMapInfo) String() string { return proto.CompactTextString(m) }
func (*MplsTeAffinityMapInfo) ProtoMessage()    {}
func (*MplsTeAffinityMapInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_lm_interface_link_info_e8463c68c90cff2d, []int{2}
}
func (m *MplsTeAffinityMapInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeAffinityMapInfo.Unmarshal(m, b)
}
func (m *MplsTeAffinityMapInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeAffinityMapInfo.Marshal(b, m, deterministic)
}
func (dst *MplsTeAffinityMapInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeAffinityMapInfo.Merge(dst, src)
}
func (m *MplsTeAffinityMapInfo) XXX_Size() int {
	return xxx_messageInfo_MplsTeAffinityMapInfo.Size(m)
}
func (m *MplsTeAffinityMapInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeAffinityMapInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeAffinityMapInfo proto.InternalMessageInfo

func (m *MplsTeAffinityMapInfo) GetAffinityName() string {
	if m != nil {
		return m.AffinityName
	}
	return ""
}

func (m *MplsTeAffinityMapInfo) GetAffinityValue() uint32 {
	if m != nil {
		return m.AffinityValue
	}
	return 0
}

func (m *MplsTeAffinityMapInfo) GetAffinityExtendedValue() []uint32 {
	if m != nil {
		return m.AffinityExtendedValue
	}
	return nil
}

func (m *MplsTeAffinityMapInfo) GetAffinityBitPosition() uint32 {
	if m != nil {
		return m.AffinityBitPosition
	}
	return 0
}

func (m *MplsTeAffinityMapInfo) GetAffinityTableId() string {
	if m != nil {
		return m.AffinityTableId
	}
	return ""
}

// Information about the Shared Risk Link Group
type MplsSrlgInfo struct {
	// SRLG number
	SharedRiskGroup uint32 `protobuf:"varint,1,opt,name=shared_risk_group,json=sharedRiskGroup" json:"shared_risk_group,omitempty"`
	// SRLG name
	SrlgName             string   `protobuf:"bytes,2,opt,name=srlg_name,json=srlgName" json:"srlg_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsSrlgInfo) Reset()         { *m = MplsSrlgInfo{} }
func (m *MplsSrlgInfo) String() string { return proto.CompactTextString(m) }
func (*MplsSrlgInfo) ProtoMessage()    {}
func (*MplsSrlgInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_lm_interface_link_info_e8463c68c90cff2d, []int{3}
}
func (m *MplsSrlgInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsSrlgInfo.Unmarshal(m, b)
}
func (m *MplsSrlgInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsSrlgInfo.Marshal(b, m, deterministic)
}
func (dst *MplsSrlgInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsSrlgInfo.Merge(dst, src)
}
func (m *MplsSrlgInfo) XXX_Size() int {
	return xxx_messageInfo_MplsSrlgInfo.Size(m)
}
func (m *MplsSrlgInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsSrlgInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MplsSrlgInfo proto.InternalMessageInfo

func (m *MplsSrlgInfo) GetSharedRiskGroup() uint32 {
	if m != nil {
		return m.SharedRiskGroup
	}
	return 0
}

func (m *MplsSrlgInfo) GetSrlgName() string {
	if m != nil {
		return m.SrlgName
	}
	return ""
}

// HW OOR statistics
type TeHwOorStats struct {
	// The HW-OOR state that these statistics belong to
	HwOorState string `protobuf:"bytes,1,opt,name=hw_oor_state,json=hwOorState" json:"hw_oor_state,omitempty"`
	// Number of transitions to this state
	Transitions uint32 `protobuf:"varint,2,opt,name=transitions" json:"transitions,omitempty"`
	// Number of times this OOR state disabled node protection assignment
	NodeProtectionDisableNumber uint32 `protobuf:"varint,3,opt,name=node_protection_disable_number,json=nodeProtectionDisableNumber" json:"node_protection_disable_number,omitempty"`
	// Number of LSPs that were rejected in this state
	RejectedLsPsNumber uint32 `protobuf:"varint,4,opt,name=rejected_ls_ps_number,json=rejectedLsPsNumber" json:"rejected_ls_ps_number,omitempty"`
	// Number of LSPs that were accepted in this state
	AcceptedLsPsNumber uint32 `protobuf:"varint,5,opt,name=accepted_ls_ps_number,json=acceptedLsPsNumber" json:"accepted_ls_ps_number,omitempty"`
	// Number of Reoptimize LSPs that were accepted in this state
	AcceptedReoptLsPsNumber uint32 `protobuf:"varint,6,opt,name=accepted_reopt_ls_ps_number,json=acceptedReoptLsPsNumber" json:"accepted_reopt_ls_ps_number,omitempty"`
	// Number of Reoptimize LSPs that were rejected in this state
	RejectedReoptLsPsNumber uint32   `protobuf:"varint,7,opt,name=rejected_reopt_ls_ps_number,json=rejectedReoptLsPsNumber" json:"rejected_reopt_ls_ps_number,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *TeHwOorStats) Reset()         { *m = TeHwOorStats{} }
func (m *TeHwOorStats) String() string { return proto.CompactTextString(m) }
func (*TeHwOorStats) ProtoMessage()    {}
func (*TeHwOorStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_lm_interface_link_info_e8463c68c90cff2d, []int{4}
}
func (m *TeHwOorStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeHwOorStats.Unmarshal(m, b)
}
func (m *TeHwOorStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeHwOorStats.Marshal(b, m, deterministic)
}
func (dst *TeHwOorStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeHwOorStats.Merge(dst, src)
}
func (m *TeHwOorStats) XXX_Size() int {
	return xxx_messageInfo_TeHwOorStats.Size(m)
}
func (m *TeHwOorStats) XXX_DiscardUnknown() {
	xxx_messageInfo_TeHwOorStats.DiscardUnknown(m)
}

var xxx_messageInfo_TeHwOorStats proto.InternalMessageInfo

func (m *TeHwOorStats) GetHwOorState() string {
	if m != nil {
		return m.HwOorState
	}
	return ""
}

func (m *TeHwOorStats) GetTransitions() uint32 {
	if m != nil {
		return m.Transitions
	}
	return 0
}

func (m *TeHwOorStats) GetNodeProtectionDisableNumber() uint32 {
	if m != nil {
		return m.NodeProtectionDisableNumber
	}
	return 0
}

func (m *TeHwOorStats) GetRejectedLsPsNumber() uint32 {
	if m != nil {
		return m.RejectedLsPsNumber
	}
	return 0
}

func (m *TeHwOorStats) GetAcceptedLsPsNumber() uint32 {
	if m != nil {
		return m.AcceptedLsPsNumber
	}
	return 0
}

func (m *TeHwOorStats) GetAcceptedReoptLsPsNumber() uint32 {
	if m != nil {
		return m.AcceptedReoptLsPsNumber
	}
	return 0
}

func (m *TeHwOorStats) GetRejectedReoptLsPsNumber() uint32 {
	if m != nil {
		return m.RejectedReoptLsPsNumber
	}
	return 0
}

// Information about the Interface Switching Capability Descriptor (IXCD)
type MplsLmIntfSwitchingCapInfo struct {
	// The switching capability descriptor key
	Key uint32 `protobuf:"varint,1,opt,name=key" json:"key,omitempty"`
	// The switching capability
	SwitchingCapability uint32 `protobuf:"varint,2,opt,name=switching_capability,json=switchingCapability" json:"switching_capability,omitempty"`
	// The link encoding type
	Encoding             uint32   `protobuf:"varint,3,opt,name=encoding" json:"encoding,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsLmIntfSwitchingCapInfo) Reset()         { *m = MplsLmIntfSwitchingCapInfo{} }
func (m *MplsLmIntfSwitchingCapInfo) String() string { return proto.CompactTextString(m) }
func (*MplsLmIntfSwitchingCapInfo) ProtoMessage()    {}
func (*MplsLmIntfSwitchingCapInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_lm_interface_link_info_e8463c68c90cff2d, []int{5}
}
func (m *MplsLmIntfSwitchingCapInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsLmIntfSwitchingCapInfo.Unmarshal(m, b)
}
func (m *MplsLmIntfSwitchingCapInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsLmIntfSwitchingCapInfo.Marshal(b, m, deterministic)
}
func (dst *MplsLmIntfSwitchingCapInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsLmIntfSwitchingCapInfo.Merge(dst, src)
}
func (m *MplsLmIntfSwitchingCapInfo) XXX_Size() int {
	return xxx_messageInfo_MplsLmIntfSwitchingCapInfo.Size(m)
}
func (m *MplsLmIntfSwitchingCapInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsLmIntfSwitchingCapInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MplsLmIntfSwitchingCapInfo proto.InternalMessageInfo

func (m *MplsLmIntfSwitchingCapInfo) GetKey() uint32 {
	if m != nil {
		return m.Key
	}
	return 0
}

func (m *MplsLmIntfSwitchingCapInfo) GetSwitchingCapability() uint32 {
	if m != nil {
		return m.SwitchingCapability
	}
	return 0
}

func (m *MplsLmIntfSwitchingCapInfo) GetEncoding() uint32 {
	if m != nil {
		return m.Encoding
	}
	return 0
}

// Link properties
type MplsLmLinkFlags struct {
	// Deprecated - TRUE if the link is a TE-Link
	IsMplsTeOn bool `protobuf:"varint,1,opt,name=is_mpls_te_on,json=isMplsTeOn" json:"is_mpls_te_on,omitempty"`
	// Deprecated - Signaling agent
	SignalingAgent string `protobuf:"bytes,2,opt,name=signaling_agent,json=signalingAgent" json:"signaling_agent,omitempty"`
	// TRUE if the link is admin up
	IsAdminUp            bool     `protobuf:"varint,3,opt,name=is_admin_up,json=isAdminUp" json:"is_admin_up,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsLmLinkFlags) Reset()         { *m = MplsLmLinkFlags{} }
func (m *MplsLmLinkFlags) String() string { return proto.CompactTextString(m) }
func (*MplsLmLinkFlags) ProtoMessage()    {}
func (*MplsLmLinkFlags) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_lm_interface_link_info_e8463c68c90cff2d, []int{6}
}
func (m *MplsLmLinkFlags) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsLmLinkFlags.Unmarshal(m, b)
}
func (m *MplsLmLinkFlags) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsLmLinkFlags.Marshal(b, m, deterministic)
}
func (dst *MplsLmLinkFlags) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsLmLinkFlags.Merge(dst, src)
}
func (m *MplsLmLinkFlags) XXX_Size() int {
	return xxx_messageInfo_MplsLmLinkFlags.Size(m)
}
func (m *MplsLmLinkFlags) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsLmLinkFlags.DiscardUnknown(m)
}

var xxx_messageInfo_MplsLmLinkFlags proto.InternalMessageInfo

func (m *MplsLmLinkFlags) GetIsMplsTeOn() bool {
	if m != nil {
		return m.IsMplsTeOn
	}
	return false
}

func (m *MplsLmLinkFlags) GetSignalingAgent() string {
	if m != nil {
		return m.SignalingAgent
	}
	return ""
}

func (m *MplsLmLinkFlags) GetIsAdminUp() bool {
	if m != nil {
		return m.IsAdminUp
	}
	return false
}

// Information for the flooded area
type MplsLmFloodedArea struct {
	// The flooded area information
	FloodedArea          string   `protobuf:"bytes,1,opt,name=flooded_area,json=floodedArea" json:"flooded_area,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsLmFloodedArea) Reset()         { *m = MplsLmFloodedArea{} }
func (m *MplsLmFloodedArea) String() string { return proto.CompactTextString(m) }
func (*MplsLmFloodedArea) ProtoMessage()    {}
func (*MplsLmFloodedArea) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_lm_interface_link_info_e8463c68c90cff2d, []int{7}
}
func (m *MplsLmFloodedArea) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsLmFloodedArea.Unmarshal(m, b)
}
func (m *MplsLmFloodedArea) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsLmFloodedArea.Marshal(b, m, deterministic)
}
func (dst *MplsLmFloodedArea) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsLmFloodedArea.Merge(dst, src)
}
func (m *MplsLmFloodedArea) XXX_Size() int {
	return xxx_messageInfo_MplsLmFloodedArea.Size(m)
}
func (m *MplsLmFloodedArea) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsLmFloodedArea.DiscardUnknown(m)
}

var xxx_messageInfo_MplsLmFloodedArea proto.InternalMessageInfo

func (m *MplsLmFloodedArea) GetFloodedArea() string {
	if m != nil {
		return m.FloodedArea
	}
	return ""
}

// Link information
type MplsLmCommonLinkInfo struct {
	// The link's id
	LinkId string `protobuf:"bytes,1,opt,name=link_id,json=linkId" json:"link_id,omitempty"`
	// The link's ip address
	LinkAddress string `protobuf:"bytes,2,opt,name=link_address,json=linkAddress" json:"link_address,omitempty"`
	// TRUE if the link is unnumbered
	IsUnnumbered bool `protobuf:"varint,3,opt,name=is_unnumbered,json=isUnnumbered" json:"is_unnumbered,omitempty"`
	// TRUE if the link is protected
	HasProtection bool `protobuf:"varint,4,opt,name=has_protection,json=hasProtection" json:"has_protection,omitempty"`
	// The link's protection capability
	Capability uint32 `protobuf:"varint,5,opt,name=capability" json:"capability,omitempty"`
	// The link's working priority
	WorkingPriority uint32 `protobuf:"varint,6,opt,name=working_priority,json=workingPriority" json:"working_priority,omitempty"`
	// The link's shared risk link groups
	SharedRiskLinkGroups []*MplsSrlgInfo `protobuf:"bytes,7,rep,name=shared_risk_link_groups,json=sharedRiskLinkGroups" json:"shared_risk_link_groups,omitempty"`
	// The link's switching capability descriptor
	InterfaceSwitchingCapabilityDescriptor []*MplsLmIntfSwitchingCapInfo `protobuf:"bytes,8,rep,name=interface_switching_capability_descriptor,json=interfaceSwitchingCapabilityDescriptor" json:"interface_switching_capability_descriptor,omitempty"`
	// The link's resource provider
	ResourceProvider string `protobuf:"bytes,9,opt,name=resource_provider,json=resourceProvider" json:"resource_provider,omitempty"`
	// TRUE if the resource provider is installed
	IsResourceProviderInstalled bool `protobuf:"varint,10,opt,name=is_resource_provider_installed,json=isResourceProviderInstalled" json:"is_resource_provider_installed,omitempty"`
	// The bandwidth units
	BandwidthUnits string `protobuf:"bytes,11,opt,name=bandwidth_units,json=bandwidthUnits" json:"bandwidth_units,omitempty"`
	// The link's physical bandwidth
	PhysicalBandwidth uint64 `protobuf:"varint,12,opt,name=physical_bandwidth,json=physicalBandwidth" json:"physical_bandwidth,omitempty"`
	// Bandwidth Constraints Model ID
	BcmId uint32 `protobuf:"varint,13,opt,name=bcm_id,json=bcmId" json:"bcm_id,omitempty"`
	// The link's maximum reservable BW
	MaximumReservableBandwidth uint64 `protobuf:"varint,14,opt,name=maximum_reservable_bandwidth,json=maximumReservableBandwidth" json:"maximum_reservable_bandwidth,omitempty"`
	// Incoming reserved BW in %
	IncomingReservableBandwidthPercentage uint32 `protobuf:"varint,15,opt,name=incoming_reservable_bandwidth_percentage,json=incomingReservableBandwidthPercentage" json:"incoming_reservable_bandwidth_percentage,omitempty"`
	// Outgoing reserved BW in %
	OutgoingReservableBandwidthPercentage uint32 `protobuf:"varint,16,opt,name=outgoing_reservable_bandwidth_percentage,json=outgoingReservableBandwidthPercentage" json:"outgoing_reservable_bandwidth_percentage,omitempty"`
	// The link's maximum reservable pool0 BW
	MaximumReservablePool0Bandwidth uint64 `protobuf:"varint,17,opt,name=maximum_reservable_pool0_bandwidth,json=maximumReservablePool0Bandwidth" json:"maximum_reservable_pool0_bandwidth,omitempty"`
	// Incoming reserved pool0 BW in %
	IncomingReservablePool0BandwidthPercentage uint32 `protobuf:"varint,18,opt,name=incoming_reservable_pool0_bandwidth_percentage,json=incomingReservablePool0BandwidthPercentage" json:"incoming_reservable_pool0_bandwidth_percentage,omitempty"`
	// Outgoing reserved pool0 BW in %
	OutgoingReservablePool0BandwidthPercentage uint32 `protobuf:"varint,19,opt,name=outgoing_reservable_pool0_bandwidth_percentage,json=outgoingReservablePool0BandwidthPercentage" json:"outgoing_reservable_pool0_bandwidth_percentage,omitempty"`
	// The link's maximum reservable pool1 BW
	MaximumReservablePool1Bandwidth uint64 `protobuf:"varint,20,opt,name=maximum_reservable_pool1_bandwidth,json=maximumReservablePool1Bandwidth" json:"maximum_reservable_pool1_bandwidth,omitempty"`
	// Incoming reserved pool1 BW in %
	IncomingReservablePool1BandwidthPercentage uint32 `protobuf:"varint,21,opt,name=incoming_reservable_pool1_bandwidth_percentage,json=incomingReservablePool1BandwidthPercentage" json:"incoming_reservable_pool1_bandwidth_percentage,omitempty"`
	// Outgoing reserved pool1 BW in %
	OutgoingReservablePool1BandwidthPercentage uint32 `protobuf:"varint,22,opt,name=outgoing_reservable_pool1_bandwidth_percentage,json=outgoingReservablePool1BandwidthPercentage" json:"outgoing_reservable_pool1_bandwidth_percentage,omitempty"`
	// The link's flags
	LinkFlags *MplsLmLinkFlags `protobuf:"bytes,23,opt,name=link_flags,json=linkFlags" json:"link_flags,omitempty"`
	// Deprecated
	InboundAdmissionMethod string `protobuf:"bytes,24,opt,name=inbound_admission_method,json=inboundAdmissionMethod" json:"inbound_admission_method,omitempty"`
	// Deprecated
	OutboundAdmissionMethod string `protobuf:"bytes,25,opt,name=outbound_admission_method,json=outboundAdmissionMethod" json:"outbound_admission_method,omitempty"`
	// The link's neighbor count
	IgpNeighbors uint32 `protobuf:"varint,26,opt,name=igp_neighbors,json=igpNeighbors" json:"igp_neighbors,omitempty"`
	// List of areas into which the link is flooded
	FloodedAreas         []*MplsLmFloodedArea `protobuf:"bytes,27,rep,name=flooded_areas,json=floodedAreas" json:"flooded_areas,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *MplsLmCommonLinkInfo) Reset()         { *m = MplsLmCommonLinkInfo{} }
func (m *MplsLmCommonLinkInfo) String() string { return proto.CompactTextString(m) }
func (*MplsLmCommonLinkInfo) ProtoMessage()    {}
func (*MplsLmCommonLinkInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_lm_interface_link_info_e8463c68c90cff2d, []int{8}
}
func (m *MplsLmCommonLinkInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsLmCommonLinkInfo.Unmarshal(m, b)
}
func (m *MplsLmCommonLinkInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsLmCommonLinkInfo.Marshal(b, m, deterministic)
}
func (dst *MplsLmCommonLinkInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsLmCommonLinkInfo.Merge(dst, src)
}
func (m *MplsLmCommonLinkInfo) XXX_Size() int {
	return xxx_messageInfo_MplsLmCommonLinkInfo.Size(m)
}
func (m *MplsLmCommonLinkInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsLmCommonLinkInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MplsLmCommonLinkInfo proto.InternalMessageInfo

func (m *MplsLmCommonLinkInfo) GetLinkId() string {
	if m != nil {
		return m.LinkId
	}
	return ""
}

func (m *MplsLmCommonLinkInfo) GetLinkAddress() string {
	if m != nil {
		return m.LinkAddress
	}
	return ""
}

func (m *MplsLmCommonLinkInfo) GetIsUnnumbered() bool {
	if m != nil {
		return m.IsUnnumbered
	}
	return false
}

func (m *MplsLmCommonLinkInfo) GetHasProtection() bool {
	if m != nil {
		return m.HasProtection
	}
	return false
}

func (m *MplsLmCommonLinkInfo) GetCapability() uint32 {
	if m != nil {
		return m.Capability
	}
	return 0
}

func (m *MplsLmCommonLinkInfo) GetWorkingPriority() uint32 {
	if m != nil {
		return m.WorkingPriority
	}
	return 0
}

func (m *MplsLmCommonLinkInfo) GetSharedRiskLinkGroups() []*MplsSrlgInfo {
	if m != nil {
		return m.SharedRiskLinkGroups
	}
	return nil
}

func (m *MplsLmCommonLinkInfo) GetInterfaceSwitchingCapabilityDescriptor() []*MplsLmIntfSwitchingCapInfo {
	if m != nil {
		return m.InterfaceSwitchingCapabilityDescriptor
	}
	return nil
}

func (m *MplsLmCommonLinkInfo) GetResourceProvider() string {
	if m != nil {
		return m.ResourceProvider
	}
	return ""
}

func (m *MplsLmCommonLinkInfo) GetIsResourceProviderInstalled() bool {
	if m != nil {
		return m.IsResourceProviderInstalled
	}
	return false
}

func (m *MplsLmCommonLinkInfo) GetBandwidthUnits() string {
	if m != nil {
		return m.BandwidthUnits
	}
	return ""
}

func (m *MplsLmCommonLinkInfo) GetPhysicalBandwidth() uint64 {
	if m != nil {
		return m.PhysicalBandwidth
	}
	return 0
}

func (m *MplsLmCommonLinkInfo) GetBcmId() uint32 {
	if m != nil {
		return m.BcmId
	}
	return 0
}

func (m *MplsLmCommonLinkInfo) GetMaximumReservableBandwidth() uint64 {
	if m != nil {
		return m.MaximumReservableBandwidth
	}
	return 0
}

func (m *MplsLmCommonLinkInfo) GetIncomingReservableBandwidthPercentage() uint32 {
	if m != nil {
		return m.IncomingReservableBandwidthPercentage
	}
	return 0
}

func (m *MplsLmCommonLinkInfo) GetOutgoingReservableBandwidthPercentage() uint32 {
	if m != nil {
		return m.OutgoingReservableBandwidthPercentage
	}
	return 0
}

func (m *MplsLmCommonLinkInfo) GetMaximumReservablePool0Bandwidth() uint64 {
	if m != nil {
		return m.MaximumReservablePool0Bandwidth
	}
	return 0
}

func (m *MplsLmCommonLinkInfo) GetIncomingReservablePool0BandwidthPercentage() uint32 {
	if m != nil {
		return m.IncomingReservablePool0BandwidthPercentage
	}
	return 0
}

func (m *MplsLmCommonLinkInfo) GetOutgoingReservablePool0BandwidthPercentage() uint32 {
	if m != nil {
		return m.OutgoingReservablePool0BandwidthPercentage
	}
	return 0
}

func (m *MplsLmCommonLinkInfo) GetMaximumReservablePool1Bandwidth() uint64 {
	if m != nil {
		return m.MaximumReservablePool1Bandwidth
	}
	return 0
}

func (m *MplsLmCommonLinkInfo) GetIncomingReservablePool1BandwidthPercentage() uint32 {
	if m != nil {
		return m.IncomingReservablePool1BandwidthPercentage
	}
	return 0
}

func (m *MplsLmCommonLinkInfo) GetOutgoingReservablePool1BandwidthPercentage() uint32 {
	if m != nil {
		return m.OutgoingReservablePool1BandwidthPercentage
	}
	return 0
}

func (m *MplsLmCommonLinkInfo) GetLinkFlags() *MplsLmLinkFlags {
	if m != nil {
		return m.LinkFlags
	}
	return nil
}

func (m *MplsLmCommonLinkInfo) GetInboundAdmissionMethod() string {
	if m != nil {
		return m.InboundAdmissionMethod
	}
	return ""
}

func (m *MplsLmCommonLinkInfo) GetOutboundAdmissionMethod() string {
	if m != nil {
		return m.OutboundAdmissionMethod
	}
	return ""
}

func (m *MplsLmCommonLinkInfo) GetIgpNeighbors() uint32 {
	if m != nil {
		return m.IgpNeighbors
	}
	return 0
}

func (m *MplsLmCommonLinkInfo) GetFloodedAreas() []*MplsLmFloodedArea {
	if m != nil {
		return m.FloodedAreas
	}
	return nil
}

// Information about an area to which the link belongs
type MplsLmInterfaceLinkAreaInfo struct {
	// Area id
	AreaId string `protobuf:"bytes,1,opt,name=area_id,json=areaId" json:"area_id,omitempty"`
	// The interface neighbor id
	NeighborId string `protobuf:"bytes,2,opt,name=neighbor_id,json=neighborId" json:"neighbor_id,omitempty"`
	// The interface's neighbor's ip address
	NeighborAddress string `protobuf:"bytes,3,opt,name=neighbor_address,json=neighborAddress" json:"neighbor_address,omitempty"`
	// TRUE if the neighbor is up
	IsNeighborUp bool `protobuf:"varint,4,opt,name=is_neighbor_up,json=isNeighborUp" json:"is_neighbor_up,omitempty"`
	// The link's IGP metric
	IgpMetric            uint32   `protobuf:"varint,5,opt,name=igp_metric,json=igpMetric" json:"igp_metric,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsLmInterfaceLinkAreaInfo) Reset()         { *m = MplsLmInterfaceLinkAreaInfo{} }
func (m *MplsLmInterfaceLinkAreaInfo) String() string { return proto.CompactTextString(m) }
func (*MplsLmInterfaceLinkAreaInfo) ProtoMessage()    {}
func (*MplsLmInterfaceLinkAreaInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_lm_interface_link_info_e8463c68c90cff2d, []int{9}
}
func (m *MplsLmInterfaceLinkAreaInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsLmInterfaceLinkAreaInfo.Unmarshal(m, b)
}
func (m *MplsLmInterfaceLinkAreaInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsLmInterfaceLinkAreaInfo.Marshal(b, m, deterministic)
}
func (dst *MplsLmInterfaceLinkAreaInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsLmInterfaceLinkAreaInfo.Merge(dst, src)
}
func (m *MplsLmInterfaceLinkAreaInfo) XXX_Size() int {
	return xxx_messageInfo_MplsLmInterfaceLinkAreaInfo.Size(m)
}
func (m *MplsLmInterfaceLinkAreaInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsLmInterfaceLinkAreaInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MplsLmInterfaceLinkAreaInfo proto.InternalMessageInfo

func (m *MplsLmInterfaceLinkAreaInfo) GetAreaId() string {
	if m != nil {
		return m.AreaId
	}
	return ""
}

func (m *MplsLmInterfaceLinkAreaInfo) GetNeighborId() string {
	if m != nil {
		return m.NeighborId
	}
	return ""
}

func (m *MplsLmInterfaceLinkAreaInfo) GetNeighborAddress() string {
	if m != nil {
		return m.NeighborAddress
	}
	return ""
}

func (m *MplsLmInterfaceLinkAreaInfo) GetIsNeighborUp() bool {
	if m != nil {
		return m.IsNeighborUp
	}
	return false
}

func (m *MplsLmInterfaceLinkAreaInfo) GetIgpMetric() uint32 {
	if m != nil {
		return m.IgpMetric
	}
	return 0
}

// Information about flex LSP lockout info for the link
type MplsLmInterfaceLockoutInfo struct {
	// True if link is locked out
	IsLockout bool `protobuf:"varint,1,opt,name=is_lockout,json=isLockout" json:"is_lockout,omitempty"`
	// Timestamp when the lockout is set
	LockoutOnTimestamp uint32 `protobuf:"varint,2,opt,name=lockout_on_timestamp,json=lockoutOnTimestamp" json:"lockout_on_timestamp,omitempty"`
	// Timestamp when the lockout is cleared
	LockoutOffTimestamp  uint32   `protobuf:"varint,3,opt,name=lockout_off_timestamp,json=lockoutOffTimestamp" json:"lockout_off_timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsLmInterfaceLockoutInfo) Reset()         { *m = MplsLmInterfaceLockoutInfo{} }
func (m *MplsLmInterfaceLockoutInfo) String() string { return proto.CompactTextString(m) }
func (*MplsLmInterfaceLockoutInfo) ProtoMessage()    {}
func (*MplsLmInterfaceLockoutInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_lm_interface_link_info_e8463c68c90cff2d, []int{10}
}
func (m *MplsLmInterfaceLockoutInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsLmInterfaceLockoutInfo.Unmarshal(m, b)
}
func (m *MplsLmInterfaceLockoutInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsLmInterfaceLockoutInfo.Marshal(b, m, deterministic)
}
func (dst *MplsLmInterfaceLockoutInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsLmInterfaceLockoutInfo.Merge(dst, src)
}
func (m *MplsLmInterfaceLockoutInfo) XXX_Size() int {
	return xxx_messageInfo_MplsLmInterfaceLockoutInfo.Size(m)
}
func (m *MplsLmInterfaceLockoutInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsLmInterfaceLockoutInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MplsLmInterfaceLockoutInfo proto.InternalMessageInfo

func (m *MplsLmInterfaceLockoutInfo) GetIsLockout() bool {
	if m != nil {
		return m.IsLockout
	}
	return false
}

func (m *MplsLmInterfaceLockoutInfo) GetLockoutOnTimestamp() uint32 {
	if m != nil {
		return m.LockoutOnTimestamp
	}
	return 0
}

func (m *MplsLmInterfaceLockoutInfo) GetLockoutOffTimestamp() uint32 {
	if m != nil {
		return m.LockoutOffTimestamp
	}
	return 0
}

// Information about NPU Resources state for the link
type MplsLmInterfaceHwOorInfo struct {
	// The NPU (Network Processor Unit) HW resource state
	HwOorState string `protobuf:"bytes,1,opt,name=hw_oor_state,json=hwOorState" json:"hw_oor_state,omitempty"`
	// Timestamp when the OOR state last changed
	HwOorTimestamp uint32 `protobuf:"varint,2,opt,name=hw_oor_timestamp,json=hwOorTimestamp" json:"hw_oor_timestamp,omitempty"`
	// Time Remaining in Green Recovery State (seconds)
	HwOorGreenRecoveryTime uint32 `protobuf:"varint,3,opt,name=hw_oor_green_recovery_time,json=hwOorGreenRecoveryTime" json:"hw_oor_green_recovery_time,omitempty"`
	// HW OOR statistics for the link
	HwOorLinkStatistics  []*TeHwOorStats `protobuf:"bytes,4,rep,name=hw_oor_link_statistics,json=hwOorLinkStatistics" json:"hw_oor_link_statistics,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *MplsLmInterfaceHwOorInfo) Reset()         { *m = MplsLmInterfaceHwOorInfo{} }
func (m *MplsLmInterfaceHwOorInfo) String() string { return proto.CompactTextString(m) }
func (*MplsLmInterfaceHwOorInfo) ProtoMessage()    {}
func (*MplsLmInterfaceHwOorInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_lm_interface_link_info_e8463c68c90cff2d, []int{11}
}
func (m *MplsLmInterfaceHwOorInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsLmInterfaceHwOorInfo.Unmarshal(m, b)
}
func (m *MplsLmInterfaceHwOorInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsLmInterfaceHwOorInfo.Marshal(b, m, deterministic)
}
func (dst *MplsLmInterfaceHwOorInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsLmInterfaceHwOorInfo.Merge(dst, src)
}
func (m *MplsLmInterfaceHwOorInfo) XXX_Size() int {
	return xxx_messageInfo_MplsLmInterfaceHwOorInfo.Size(m)
}
func (m *MplsLmInterfaceHwOorInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsLmInterfaceHwOorInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MplsLmInterfaceHwOorInfo proto.InternalMessageInfo

func (m *MplsLmInterfaceHwOorInfo) GetHwOorState() string {
	if m != nil {
		return m.HwOorState
	}
	return ""
}

func (m *MplsLmInterfaceHwOorInfo) GetHwOorTimestamp() uint32 {
	if m != nil {
		return m.HwOorTimestamp
	}
	return 0
}

func (m *MplsLmInterfaceHwOorInfo) GetHwOorGreenRecoveryTime() uint32 {
	if m != nil {
		return m.HwOorGreenRecoveryTime
	}
	return 0
}

func (m *MplsLmInterfaceHwOorInfo) GetHwOorLinkStatistics() []*TeHwOorStats {
	if m != nil {
		return m.HwOorLinkStatistics
	}
	return nil
}

func init() {
	proto.RegisterType((*MplsLmInterfaceLinkInfo_KEYS)(nil), "cisco_ios_xr_mpls_te_oper.mpls_lcac_standby.link_information.links.link.mpls_lm_interface_link_info_KEYS")
	proto.RegisterType((*MplsLmInterfaceLinkInfo)(nil), "cisco_ios_xr_mpls_te_oper.mpls_lcac_standby.link_information.links.link.mpls_lm_interface_link_info")
	proto.RegisterType((*MplsTeAffinityMapInfo)(nil), "cisco_ios_xr_mpls_te_oper.mpls_lcac_standby.link_information.links.link.mpls_te_affinity_map_info")
	proto.RegisterType((*MplsSrlgInfo)(nil), "cisco_ios_xr_mpls_te_oper.mpls_lcac_standby.link_information.links.link.mpls_srlg_info")
	proto.RegisterType((*TeHwOorStats)(nil), "cisco_ios_xr_mpls_te_oper.mpls_lcac_standby.link_information.links.link.te_hw_oor_stats")
	proto.RegisterType((*MplsLmIntfSwitchingCapInfo)(nil), "cisco_ios_xr_mpls_te_oper.mpls_lcac_standby.link_information.links.link.mpls_lm_intf_switching_cap_info")
	proto.RegisterType((*MplsLmLinkFlags)(nil), "cisco_ios_xr_mpls_te_oper.mpls_lcac_standby.link_information.links.link.mpls_lm_link_flags")
	proto.RegisterType((*MplsLmFloodedArea)(nil), "cisco_ios_xr_mpls_te_oper.mpls_lcac_standby.link_information.links.link.mpls_lm_flooded_area")
	proto.RegisterType((*MplsLmCommonLinkInfo)(nil), "cisco_ios_xr_mpls_te_oper.mpls_lcac_standby.link_information.links.link.mpls_lm_common_link_info")
	proto.RegisterType((*MplsLmInterfaceLinkAreaInfo)(nil), "cisco_ios_xr_mpls_te_oper.mpls_lcac_standby.link_information.links.link.mpls_lm_interface_link_area_info")
	proto.RegisterType((*MplsLmInterfaceLockoutInfo)(nil), "cisco_ios_xr_mpls_te_oper.mpls_lcac_standby.link_information.links.link.mpls_lm_interface_lockout_info")
	proto.RegisterType((*MplsLmInterfaceHwOorInfo)(nil), "cisco_ios_xr_mpls_te_oper.mpls_lcac_standby.link_information.links.link.mpls_lm_interface_hw_oor_info")
}

func init() {
	proto.RegisterFile("mpls_lm_interface_link_info.proto", fileDescriptor_mpls_lm_interface_link_info_e8463c68c90cff2d)
}

var fileDescriptor_mpls_lm_interface_link_info_e8463c68c90cff2d = []byte{
	// 1823 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0x5f, 0x6f, 0x1c, 0x49,
	0x11, 0xd7, 0xc4, 0x89, 0x63, 0xd7, 0xfa, 0x6f, 0xfb, 0x5f, 0x27, 0xe6, 0x9c, 0xcd, 0xc2, 0xc1,
	0x5e, 0x0e, 0xac, 0x73, 0x8e, 0x0b, 0xb9, 0x70, 0xc0, 0x39, 0xc9, 0x5d, 0xb4, 0xba, 0x38, 0xb1,
	0x26, 0xc9, 0x1d, 0x27, 0x84, 0x5a, 0xb3, 0x33, 0xbd, 0xbb, 0x8d, 0x67, 0xa6, 0x47, 0xdd, 0xbd,
	0x71, 0x8c, 0x84, 0x80, 0x48, 0x3c, 0xc2, 0xb7, 0xe0, 0x33, 0xf0, 0x01, 0x78, 0xe5, 0x95, 0x67,
	0xbe, 0x08, 0x12, 0xa8, 0xab, 0xa7, 0x67, 0xc7, 0xeb, 0xf5, 0x26, 0x27, 0x39, 0x2f, 0x96, 0xbb,
	0xaa, 0x7e, 0xf5, 0x6f, 0xaa, 0xab, 0xaa, 0x17, 0x6e, 0x66, 0x45, 0xaa, 0x59, 0x9a, 0x31, 0x91,
	0x1b, 0xae, 0x7a, 0x51, 0xcc, 0x59, 0x2a, 0xf2, 0x23, 0x26, 0xf2, 0x9e, 0xdc, 0x2d, 0x94, 0x34,
	0x92, 0x3c, 0x8a, 0x85, 0x8e, 0x25, 0x13, 0x52, 0xb3, 0x57, 0x8a, 0xa1, 0xbc, 0xe1, 0x4c, 0x16,
	0x5c, 0xed, 0x3a, 0x70, 0x1c, 0xc5, 0x4c, 0x9b, 0x28, 0x4f, 0xba, 0x27, 0xbb, 0x15, 0x58, 0x65,
	0x91, 0x11, 0x32, 0x47, 0x82, 0xc6, 0xbf, 0xad, 0x0e, 0x34, 0xa7, 0x58, 0x63, 0x5f, 0x7d, 0xf1,
	0xed, 0x33, 0xf2, 0x3e, 0x2c, 0x8d, 0x78, 0x79, 0x94, 0x71, 0x1a, 0x34, 0x83, 0xf6, 0x7c, 0xb8,
	0x58, 0x51, 0x9f, 0x44, 0x19, 0x6f, 0xfd, 0xbb, 0x01, 0xdb, 0x53, 0x74, 0x91, 0xd7, 0x01, 0x34,
	0xf0, 0x14, 0xcb, 0x2c, 0x93, 0x39, 0xbd, 0xdd, 0x0c, 0xda, 0x8d, 0xdb, 0xd1, 0xee, 0x05, 0x85,
	0xb2, 0xeb, 0x6d, 0x3b, 0xf5, 0x23, 0xc3, 0x21, 0xd8, 0x7f, 0x1f, 0x20, 0x95, 0xfc, 0x18, 0x88,
	0xe2, 0x91, 0x96, 0x39, 0xcb, 0xa5, 0x61, 0xbd, 0x54, 0xca, 0x84, 0x27, 0xf4, 0x63, 0x8c, 0x67,
	0xc5, 0x71, 0x9e, 0x48, 0xf3, 0xa5, 0xa3, 0x93, 0x0e, 0xdc, 0xcc, 0xa2, 0x57, 0x22, 0x1b, 0x66,
	0x4c, 0x71, 0xcd, 0xd5, 0x4b, 0x34, 0xca, 0xba, 0x51, 0x9e, 0x1c, 0x8b, 0xc4, 0x0c, 0x98, 0x4a,
	0x32, 0xfa, 0xd3, 0x66, 0xd0, 0xbe, 0x1c, 0xee, 0x94, 0x82, 0xe1, 0x48, 0xee, 0xbe, 0x17, 0x0b,
	0x93, 0x8c, 0x3c, 0x80, 0x9d, 0x52, 0x45, 0x37, 0xe5, 0xac, 0x90, 0x32, 0xfd, 0x68, 0x4c, 0xcf,
	0x27, 0xa8, 0x67, 0x7b, 0x24, 0x75, 0x68, 0x85, 0xde, 0xa0, 0x64, 0x6f, 0x4c, 0xc9, 0x9d, 0x49,
	0x4a, 0xf6, 0x4e, 0x29, 0x79, 0x63, 0x50, 0x59, 0x94, 0xd1, 0x9f, 0xbd, 0x31, 0xa8, 0x83, 0xe8,
	0x4d, 0x41, 0x59, 0x3d, 0x77, 0xa7, 0x07, 0x35, 0x59, 0xc9, 0xde, 0x98, 0x92, 0x4f, 0xa7, 0x07,
	0x65, 0x95, 0xfc, 0x08, 0x96, 0xf1, 0x83, 0x47, 0xc6, 0x28, 0xd1, 0x1d, 0x1a, 0xae, 0xe9, 0xbd,
	0x66, 0xd0, 0x5e, 0x0c, 0x97, 0x2c, 0x79, 0xbf, 0xa2, 0x92, 0xbb, 0x40, 0x51, 0x90, 0xbf, 0x32,
	0x3c, 0x4f, 0x78, 0x52, 0x47, 0xfc, 0xbc, 0x39, 0xd3, 0x5e, 0x0c, 0x37, 0x2d, 0xff, 0x8b, 0x92,
	0x5d, 0x43, 0xee, 0xc1, 0x06, 0x22, 0x7b, 0x52, 0x1d, 0x47, 0x09, 0x53, 0xbc, 0xc7, 0x5e, 0x46,
	0xe9, 0x90, 0xd3, 0xcf, 0x10, 0x46, 0x2c, 0xf3, 0x4b, 0xe4, 0x85, 0xbc, 0xf7, 0xb5, 0xe5, 0x90,
	0xbf, 0x04, 0xb0, 0x10, 0xf5, 0x7a, 0x22, 0x17, 0xe6, 0x84, 0x65, 0x51, 0x41, 0x7f, 0xd1, 0x9c,
	0x69, 0x37, 0x6e, 0x77, 0x2f, 0xb6, 0xe6, 0x0d, 0x67, 0x75, 0x23, 0xae, 0xe8, 0x1b, 0x9e, 0x74,
	0x10, 0x15, 0xe4, 0x0e, 0x6c, 0x09, 0x3d, 0x8a, 0x94, 0x89, 0x3c, 0x96, 0x59, 0x91, 0x72, 0xc3,
	0xe9, 0x2f, 0x9b, 0x41, 0x7b, 0x2e, 0xdc, 0x10, 0xba, 0x8a, 0xb4, 0x53, 0x31, 0xc9, 0x27, 0x88,
	0xb3, 0x57, 0x9e, 0x75, 0x23, 0x5d, 0x4f, 0x16, 0xfd, 0x15, 0xe2, 0xd6, 0x85, 0xb6, 0x77, 0xff,
	0xbe, 0x65, 0x56, 0x0a, 0xc8, 0x36, 0xcc, 0x1b, 0xce, 0x32, 0x6e, 0x94, 0x88, 0xe9, 0xe7, 0xf8,
	0x19, 0xe6, 0x0c, 0x3f, 0xc0, 0x33, 0xf9, 0x10, 0x88, 0x40, 0x9f, 0x1d, 0xdf, 0xe6, 0x50, 0x24,
	0x74, 0x1f, 0xd5, 0x2d, 0x0b, 0xfd, 0xbc, 0x94, 0xfb, 0xda, 0x92, 0xc9, 0x1f, 0xe1, 0x4a, 0x64,
	0x6f, 0x25, 0xbd, 0x8f, 0x89, 0x13, 0x17, 0xde, 0x2c, 0xc6, 0x1a, 0x95, 0x35, 0xe6, 0xf2, 0xe7,
	0xec, 0x92, 0x3f, 0x07, 0x70, 0x35, 0x95, 0xf1, 0x91, 0x1c, 0x1a, 0xfa, 0x00, 0x7d, 0xe8, 0xbf,
	0x4b, 0x1f, 0x9c, 0x25, 0xe7, 0x81, 0xb7, 0x4b, 0xfe, 0x00, 0xb3, 0x83, 0x63, 0x26, 0xa5, 0xa2,
	0x0f, 0xb1, 0x65, 0xf6, 0xde, 0xa1, 0x07, 0xce, 0x50, 0x99, 0x82, 0xc1, 0xf1, 0x53, 0xa9, 0x5a,
	0xff, 0x0b, 0xe0, 0xda, 0xb9, 0x75, 0x46, 0xbe, 0x0f, 0x8b, 0x15, 0xb1, 0x36, 0x1b, 0xaa, 0xb2,
	0xb7, 0xe5, 0x61, 0x27, 0x48, 0x25, 0xe4, 0xee, 0xcc, 0x25, 0xac, 0x8a, 0x0a, 0xea, 0xae, 0xcb,
	0x1d, 0xd8, 0xaa, 0xc4, 0xaa, 0xfb, 0xe9, 0xe4, 0x67, 0xf0, 0x8e, 0x6d, 0x78, 0xb6, 0xbf, 0x9e,
	0x0e, 0x77, 0x1b, 0x2a, 0x06, 0xeb, 0x0a, 0xc3, 0x0a, 0xa9, 0x85, 0x0d, 0x95, 0x5e, 0x46, 0x2b,
	0x6b, 0x9e, 0x79, 0x5f, 0x98, 0xc3, 0x92, 0x45, 0x6e, 0xc1, 0x6a, 0x85, 0x31, 0xd8, 0x79, 0x44,
	0x42, 0xaf, 0xa0, 0xef, 0xcb, 0x9e, 0xf1, 0xdc, 0xd2, 0x3b, 0x49, 0xeb, 0x5b, 0x58, 0xc2, 0x04,
	0x68, 0x95, 0xf6, 0x5d, 0xd4, 0xb7, 0x60, 0x55, 0x0f, 0x22, 0xc5, 0x13, 0xa6, 0x84, 0x3e, 0x62,
	0x7d, 0x25, 0x87, 0x05, 0x46, 0xbe, 0x18, 0x2e, 0x3b, 0x46, 0x28, 0xf4, 0xd1, 0x23, 0x4b, 0xb6,
	0xb7, 0x01, 0x81, 0x98, 0x9d, 0x4b, 0x68, 0x61, 0xce, 0x12, 0x70, 0x68, 0xfe, 0xf7, 0x12, 0x2c,
	0x9b, 0x2a, 0xed, 0xda, 0x44, 0x46, 0x93, 0x26, 0x2c, 0xd4, 0xce, 0x3e, 0xa3, 0x80, 0x5f, 0xe3,
	0x99, 0xa5, 0x90, 0x26, 0x34, 0x8c, 0x8a, 0x72, 0x17, 0x8a, 0x2e, 0x93, 0x59, 0x27, 0xd9, 0xa6,
	0x9a, 0xcb, 0x84, 0x33, 0xbb, 0x2e, 0xf0, 0x18, 0x1b, 0x7c, 0x22, 0x34, 0xc6, 0x99, 0x0f, 0xb3,
	0x2e, 0x57, 0x74, 0x06, 0x41, 0xdb, 0x56, 0xea, 0xb0, 0x12, 0x7a, 0xe8, 0x64, 0x9e, 0xa0, 0x88,
	0xed, 0x78, 0x8a, 0xff, 0x8e, 0xc7, 0x86, 0x27, 0x2c, 0xd5, 0xac, 0xd0, 0x1e, 0xeb, 0xf2, 0x4a,
	0x3c, 0xf3, 0xb1, 0x3e, 0xd4, 0x23, 0x48, 0x14, 0xc7, 0xbc, 0x38, 0x03, 0xb9, 0xe2, 0x20, 0x9e,
	0x59, 0x83, 0x7c, 0x06, 0xdb, 0x15, 0x44, 0x71, 0x59, 0x98, 0xd3, 0xc0, 0x59, 0x04, 0x6e, 0x79,
	0x91, 0xd0, 0x4a, 0x9c, 0x46, 0x57, 0x3e, 0x4e, 0x40, 0x5f, 0x75, 0x68, 0x2f, 0x32, 0x86, 0x6e,
	0xbd, 0x0e, 0xe0, 0x46, 0xed, 0x12, 0xf4, 0x98, 0x3e, 0x16, 0x26, 0x1e, 0x88, 0xbc, 0xcf, 0x62,
	0x5f, 0xe1, 0x2b, 0x30, 0x73, 0xc4, 0x4f, 0xca, 0xaf, 0x6b, 0xff, 0x25, 0x7b, 0xb0, 0x7e, 0x4a,
	0x2e, 0xea, 0x8a, 0x54, 0x98, 0x93, 0xf2, 0x3b, 0xac, 0x55, 0xbc, 0x07, 0x15, 0x8b, 0x5c, 0x87,
	0x39, 0x9e, 0xc7, 0x32, 0x11, 0x79, 0xbf, 0xcc, 0x7c, 0x75, 0x6e, 0xfd, 0x29, 0x00, 0xe2, 0x9d,
	0x70, 0x13, 0x26, 0x8d, 0xfa, 0x9a, 0xdc, 0x84, 0x45, 0xa1, 0x47, 0xb7, 0x3b, 0x47, 0x0f, 0xe6,
	0x42, 0x10, 0xfa, 0xa0, 0x48, 0xf5, 0x73, 0xfe, 0x34, 0xb7, 0x53, 0x4f, 0x8b, 0x7e, 0x1e, 0xa5,
	0xd6, 0x91, 0xa8, 0xcf, 0x73, 0x53, 0x16, 0xd8, 0x52, 0x45, 0xde, 0xb7, 0x54, 0xb2, 0x03, 0x0d,
	0x3b, 0x00, 0x92, 0x4c, 0xe4, 0x6c, 0x58, 0xa0, 0x07, 0x73, 0xe1, 0xbc, 0xd0, 0xfb, 0x96, 0xf2,
	0xa2, 0x68, 0x7d, 0x0a, 0xeb, 0xde, 0x83, 0x72, 0x27, 0xc2, 0x56, 0x48, 0x6e, 0xc2, 0x42, 0xfd,
	0x5c, 0x96, 0x62, 0xa3, 0xa4, 0xed, 0x2b, 0x1e, 0xb5, 0xfe, 0xb3, 0x0c, 0xf4, 0xbc, 0xd5, 0x8b,
	0x6c, 0xc1, 0x55, 0x77, 0x48, 0x4a, 0xe8, 0xac, 0x3d, 0x76, 0x12, 0xab, 0xd8, 0x35, 0xdc, 0x24,
	0x51, 0x5c, 0xeb, 0xd2, 0x6d, 0xdc, 0x0f, 0xf7, 0x1d, 0xc9, 0x76, 0x16, 0xa1, 0xd9, 0x30, 0x77,
	0x5f, 0x92, 0x27, 0xa5, 0xd7, 0x0b, 0x42, 0xbf, 0xa8, 0x68, 0xb6, 0xb3, 0x0c, 0x22, 0x5d, 0x2b,
	0x73, 0xac, 0xcd, 0xb9, 0x70, 0x71, 0x10, 0xe9, 0x51, 0x59, 0x93, 0x1d, 0x80, 0xda, 0x77, 0x72,
	0xb5, 0x58, 0xa3, 0x90, 0x0f, 0x60, 0xe5, 0x58, 0xaa, 0x23, 0x9b, 0xc6, 0x42, 0x09, 0xa9, 0xac,
	0x94, 0x2b, 0xbc, 0xe5, 0x92, 0x7e, 0x58, 0x92, 0xc9, 0xdf, 0x02, 0xd8, 0xaa, 0xdf, 0x7d, 0x0c,
	0x03, 0x1b, 0x80, 0xa6, 0x57, 0x71, 0x42, 0x7c, 0x73, 0xb1, 0xfd, 0xb9, 0xea, 0x3a, 0xe1, 0xfa,
	0xa8, 0xb5, 0x3c, 0x16, 0xb9, 0x6b, 0x2f, 0x9a, 0xfc, 0x33, 0x80, 0x0f, 0x46, 0x0d, 0x7c, 0x52,
	0x61, 0xb2, 0x84, 0xeb, 0x58, 0x89, 0xc2, 0x48, 0x45, 0xe7, 0xd0, 0xc5, 0xc1, 0xbb, 0x18, 0x21,
	0x93, 0x6e, 0x4f, 0xf8, 0xc3, 0xca, 0xb5, 0x67, 0x67, 0xaf, 0xc5, 0xc3, 0xca, 0x2f, 0xf2, 0x21,
	0xac, 0x2a, 0xae, 0xe5, 0x50, 0xc5, 0xd8, 0xb4, 0x5e, 0x8a, 0x84, 0x2b, 0x3a, 0xef, 0xf7, 0x72,
	0xc7, 0x38, 0x2c, 0xe9, 0xb6, 0xbb, 0x09, 0xcd, 0xce, 0xc8, 0x33, 0x91, 0x6b, 0x13, 0xa5, 0x29,
	0x4f, 0x28, 0x60, 0x15, 0x6c, 0x0b, 0x1d, 0x8e, 0x61, 0x3b, 0x5e, 0xc4, 0x5e, 0x9e, 0xd1, 0x9a,
	0x39, 0xcc, 0x85, 0xd1, 0xb4, 0xe1, 0x2e, 0x4f, 0x45, 0x7e, 0x61, 0xa9, 0xe4, 0x27, 0x40, 0x8a,
	0xc1, 0x89, 0x16, 0x71, 0x94, 0x8e, 0x16, 0x53, 0xba, 0x80, 0x4b, 0xe9, 0xaa, 0xe7, 0x54, 0xdb,
	0x28, 0xd9, 0x80, 0xd9, 0x6e, 0x9c, 0xd9, 0x92, 0x5f, 0xc4, 0x0a, 0xba, 0xd2, 0x8d, 0xb3, 0x4e,
	0x42, 0x3e, 0x87, 0xef, 0x8d, 0xad, 0xdd, 0xb6, 0x19, 0x8f, 0xf4, 0x2d, 0xa1, 0xbe, 0xeb, 0xa7,
	0x37, 0xee, 0x6e, 0xca, 0x47, 0x8a, 0xbf, 0x81, 0x36, 0x2e, 0x6e, 0x36, 0xbf, 0x93, 0x54, 0xb0,
	0x82, 0xab, 0x98, 0xe7, 0x26, 0xea, 0x73, 0xba, 0x8c, 0xa6, 0xdf, 0xf7, 0xf2, 0x13, 0xd4, 0x1d,
	0x56, 0xc2, 0x56, 0xb1, 0x1c, 0x9a, 0xbe, 0x7c, 0x1b, 0xc5, 0x2b, 0x4e, 0xb1, 0x97, 0x9f, 0xae,
	0xf8, 0x2b, 0x68, 0x4d, 0x88, 0x79, 0xec, 0x9d, 0x40, 0x57, 0x31, 0xf2, 0x1b, 0x67, 0x22, 0x3f,
	0xfd, 0x54, 0x20, 0x5d, 0xd8, 0x9d, 0x14, 0xfe, 0xf8, 0xab, 0xa3, 0xe6, 0x2b, 0x41, 0x5f, 0x6f,
	0x9d, 0x4d, 0xc2, 0x69, 0xcd, 0x35, 0x87, 0xbb, 0xb0, 0x3b, 0x29, 0x13, 0x53, 0x6c, 0xac, 0x39,
	0x1b, 0x67, 0xf3, 0x71, 0xae, 0x8d, 0xf3, 0x93, 0x52, 0x7b, 0xf7, 0xd0, 0xf5, 0x29, 0x49, 0xd9,
	0x7b, 0xab, 0xa4, 0xec, 0x4d, 0x76, 0x78, 0x63, 0x5a, 0x52, 0xf6, 0xbe, 0x63, 0x52, 0xce, 0xb1,
	0xb1, 0x39, 0x2d, 0x29, 0x13, 0x6d, 0xfc, 0x1e, 0x60, 0x34, 0xfa, 0xe8, 0x16, 0xee, 0xb9, 0xbf,
	0xb9, 0xf0, 0x26, 0x35, 0x32, 0x11, 0xce, 0xe3, 0x73, 0x0d, 0x07, 0xed, 0x5d, 0xa0, 0x22, 0xef,
	0xca, 0x61, 0x9e, 0xe0, 0x84, 0xd4, 0xda, 0x6e, 0x4b, 0x19, 0x37, 0x03, 0x99, 0x50, 0x8a, 0x1d,
	0x61, 0xb3, 0xe4, 0xef, 0x7b, 0xf6, 0x01, 0x72, 0xc9, 0x3d, 0xb8, 0x26, 0x87, 0xe6, 0x1c, 0xe8,
	0x35, 0x84, 0x6e, 0x79, 0x81, 0x71, 0xac, 0x1d, 0x6f, 0xfd, 0x82, 0xe5, 0x5c, 0xf4, 0x07, 0x5d,
	0xa9, 0x34, 0xbd, 0x8e, 0x49, 0x5b, 0x10, 0xfd, 0xe2, 0x89, 0xa7, 0x91, 0xd7, 0x01, 0x2c, 0xd6,
	0x07, 0xb0, 0xa6, 0xdb, 0xd8, 0xbf, 0x7f, 0x7b, 0xe1, 0xa9, 0xa9, 0x5b, 0x09, 0x17, 0x6a, 0x03,
	0x5e, 0xb7, 0xfe, 0x15, 0x9c, 0xfb, 0x23, 0x51, 0xf5, 0x5e, 0xb2, 0x93, 0xde, 0x1d, 0xaa, 0x49,
	0x6f, 0x8f, 0x9d, 0x84, 0xdc, 0x80, 0x86, 0x8f, 0xd1, 0x32, 0xdd, 0xa0, 0x07, 0x4f, 0xea, 0x24,
	0x76, 0xf6, 0x56, 0x02, 0x7e, 0x1d, 0x98, 0x71, 0x8b, 0xb8, 0xa7, 0xfb, 0x95, 0xe0, 0x07, 0xb0,
	0x64, 0xdf, 0xa3, 0x5e, 0x7a, 0x58, 0x94, 0xd3, 0x7e, 0x41, 0x68, 0x9f, 0xb3, 0x17, 0x05, 0x79,
	0x0f, 0xc0, 0x66, 0xb6, 0x7c, 0x7f, 0xba, 0x61, 0x3f, 0x2f, 0xfa, 0x85, 0x7b, 0x58, 0xb6, 0xfe,
	0x1e, 0xc0, 0xce, 0xf4, 0xa7, 0x17, 0x6a, 0xd0, 0x9e, 0x54, 0xee, 0x5d, 0xf3, 0x42, 0x3f, 0x2e,
	0x1f, 0x64, 0x1f, 0xc1, 0xba, 0x17, 0x97, 0x39, 0x33, 0x22, 0xe3, 0xda, 0x44, 0x59, 0x51, 0xee,
	0x7f, 0xa4, 0xe4, 0x3d, 0xcd, 0x9f, 0x7b, 0x8e, 0x7d, 0xa1, 0x54, 0x88, 0x5e, 0xaf, 0x06, 0x71,
	0xbb, 0xe0, 0x9a, 0x87, 0xf4, 0x7a, 0x15, 0xa6, 0xf5, 0x8f, 0x4b, 0xf0, 0xde, 0xd4, 0x07, 0xda,
	0x5b, 0x3c, 0x14, 0xda, 0xb0, 0x52, 0x4a, 0x8c, 0x7b, 0xb9, 0x84, 0x52, 0x23, 0x0f, 0xef, 0xc1,
	0xf5, 0x52, 0xb2, 0xaf, 0x38, 0xcf, 0x99, 0xe2, 0xb1, 0x7c, 0xc9, 0xd5, 0x09, 0x02, 0x4b, 0x37,
	0x37, 0x11, 0xf3, 0xc8, 0xf2, 0xc3, 0x92, 0x6d, 0x15, 0x90, 0xbf, 0x06, 0xb0, 0x59, 0x82, 0xb1,
	0x2a, 0xac, 0x37, 0x42, 0x1b, 0x11, 0x6b, 0x7a, 0x19, 0xcb, 0xf5, 0xd7, 0x17, 0x56, 0xae, 0x63,
	0x6f, 0xa5, 0x70, 0x0d, 0x5d, 0xb2, 0xdb, 0xd0, 0xb3, 0xca, 0x68, 0x77, 0x16, 0x7f, 0x24, 0xfd,
	0xf8, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x39, 0x76, 0xa1, 0xc1, 0x49, 0x15, 0x00, 0x00,
}
