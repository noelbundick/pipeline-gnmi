// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mpls_lm_preemption_event.proto

package cisco_ios_xr_mpls_te_oper_mpls_lcac_standby_preemption_events_preemption_event

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Preemption event info
type MplsLmPreemptionEvent_KEYS struct {
	EventIndex           uint32   `protobuf:"varint,1,opt,name=event_index,json=eventIndex" json:"event_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsLmPreemptionEvent_KEYS) Reset()         { *m = MplsLmPreemptionEvent_KEYS{} }
func (m *MplsLmPreemptionEvent_KEYS) String() string { return proto.CompactTextString(m) }
func (*MplsLmPreemptionEvent_KEYS) ProtoMessage()    {}
func (*MplsLmPreemptionEvent_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_lm_preemption_event_7b3a30b9648a1c71, []int{0}
}
func (m *MplsLmPreemptionEvent_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsLmPreemptionEvent_KEYS.Unmarshal(m, b)
}
func (m *MplsLmPreemptionEvent_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsLmPreemptionEvent_KEYS.Marshal(b, m, deterministic)
}
func (dst *MplsLmPreemptionEvent_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsLmPreemptionEvent_KEYS.Merge(dst, src)
}
func (m *MplsLmPreemptionEvent_KEYS) XXX_Size() int {
	return xxx_messageInfo_MplsLmPreemptionEvent_KEYS.Size(m)
}
func (m *MplsLmPreemptionEvent_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsLmPreemptionEvent_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_MplsLmPreemptionEvent_KEYS proto.InternalMessageInfo

func (m *MplsLmPreemptionEvent_KEYS) GetEventIndex() uint32 {
	if m != nil {
		return m.EventIndex
	}
	return 0
}

type MplsLmPreemptionEvent struct {
	// Tunnel ID
	TunnelId uint32 `protobuf:"varint,50,opt,name=tunnel_id,json=tunnelId" json:"tunnel_id,omitempty"`
	// LSP ID
	LspId uint32 `protobuf:"varint,51,opt,name=lsp_id,json=lspId" json:"lsp_id,omitempty"`
	// Source
	SourceAddress string `protobuf:"bytes,52,opt,name=source_address,json=sourceAddress" json:"source_address,omitempty"`
	// Destination
	DestinationAddress string `protobuf:"bytes,53,opt,name=destination_address,json=destinationAddress" json:"destination_address,omitempty"`
	// The path's requested bandwidth
	RequestedBandwidth uint64 `protobuf:"varint,54,opt,name=requested_bandwidth,json=requestedBandwidth" json:"requested_bandwidth,omitempty"`
	// The path's setup priority
	SetupPriority uint32 `protobuf:"varint,55,opt,name=setup_priority,json=setupPriority" json:"setup_priority,omitempty"`
	// The path's hold priority
	HoldPriority uint32 `protobuf:"varint,56,opt,name=hold_priority,json=holdPriority" json:"hold_priority,omitempty"`
	// The path's bandwidth type; 0:CT0, 1:CT1, so on
	BandwidthType uint32 `protobuf:"varint,57,opt,name=bandwidth_type,json=bandwidthType" json:"bandwidth_type,omitempty"`
	// Old BW for BC0
	OldBandwidthBc0 uint64 `protobuf:"varint,58,opt,name=old_bandwidth_bc0,json=oldBandwidthBc0" json:"old_bandwidth_bc0,omitempty"`
	// Old BW for BC1
	OldBandwidthBc1 uint64 `protobuf:"varint,59,opt,name=old_bandwidth_bc1,json=oldBandwidthBc1" json:"old_bandwidth_bc1,omitempty"`
	// New BW for BC0
	NewBandwidthBc0 uint64 `protobuf:"varint,60,opt,name=new_bandwidth_bc0,json=newBandwidthBc0" json:"new_bandwidth_bc0,omitempty"`
	// New BW for BC1
	NewBandwidthBc1 uint64 `protobuf:"varint,61,opt,name=new_bandwidth_bc1,json=newBandwidthBc1" json:"new_bandwidth_bc1,omitempty"`
	// BW Overshoot for BC0
	BandwidthOvershoot0 uint64 `protobuf:"varint,62,opt,name=bandwidth_overshoot0,json=bandwidthOvershoot0" json:"bandwidth_overshoot0,omitempty"`
	// BW Overshoot for BC1
	BandwidthOvershoot1 uint64 `protobuf:"varint,63,opt,name=bandwidth_overshoot1,json=bandwidthOvershoot1" json:"bandwidth_overshoot1,omitempty"`
	// Interface name
	InterfaceName string `protobuf:"bytes,64,opt,name=interface_name,json=interfaceName" json:"interface_name,omitempty"`
	// Event time; seconds elapsed since January 1, 1970
	EventTime uint32 `protobuf:"varint,65,opt,name=event_time,json=eventTime" json:"event_time,omitempty"`
	// Number of LSPs (not all may be present in the list)
	LsPs uint32 `protobuf:"varint,66,opt,name=ls_ps,json=lsPs" json:"ls_ps,omitempty"`
	// Number of LSPs softly preempted
	SoftPreemptedLsPs uint32 `protobuf:"varint,67,opt,name=soft_preempted_ls_ps,json=softPreemptedLsPs" json:"soft_preempted_ls_ps,omitempty"`
	// Number of LSPs softly preempted with traffic switched to backup
	SoftPreemptedLsPsFrRrewrite uint32 `protobuf:"varint,68,opt,name=soft_preempted_ls_ps_fr_rrewrite,json=softPreemptedLsPsFrRrewrite" json:"soft_preempted_ls_ps_fr_rrewrite,omitempty"`
	// Number of LSPs hardly preempted
	HardPreemptedLsPs uint32 `protobuf:"varint,69,opt,name=hard_preempted_ls_ps,json=hardPreemptedLsPs" json:"hard_preempted_ls_ps,omitempty"`
	// Total amount of preempted class 0 bandwidth
	TotalPreemptedBandwidthBc0 uint64 `protobuf:"varint,70,opt,name=total_preempted_bandwidth_bc0,json=totalPreemptedBandwidthBc0" json:"total_preempted_bandwidth_bc0,omitempty"`
	// Total amount of preempted class 1 bandwidth
	TotalPreemptedBandwidthBc1 uint64 `protobuf:"varint,71,opt,name=total_preempted_bandwidth_bc1,json=totalPreemptedBandwidthBc1" json:"total_preempted_bandwidth_bc1,omitempty"`
	// Amount of softly preempted class 0 bandwidth
	SoftlyPreemptedBandwidthBc0 uint64 `protobuf:"varint,72,opt,name=softly_preempted_bandwidth_bc0,json=softlyPreemptedBandwidthBc0" json:"softly_preempted_bandwidth_bc0,omitempty"`
	// Amount of softly preempted class 1 bandwidth
	SoftlyPreemptedBandwidthBc1 uint64 `protobuf:"varint,73,opt,name=softly_preempted_bandwidth_bc1,json=softlyPreemptedBandwidthBc1" json:"softly_preempted_bandwidth_bc1,omitempty"`
	// Amount of softly preempted FRR RW class 0 bandwidth
	SoftPreemptedFrRrewriteBandwidthBc0 uint64 `protobuf:"varint,74,opt,name=soft_preempted_fr_rrewrite_bandwidth_bc0,json=softPreemptedFrRrewriteBandwidthBc0" json:"soft_preempted_fr_rrewrite_bandwidth_bc0,omitempty"`
	// Amount of softly preempted FRR RW class 1 bandwidth
	SoftPreemptedFrRrewriteBandwidthBc1 uint64 `protobuf:"varint,75,opt,name=soft_preempted_fr_rrewrite_bandwidth_bc1,json=softPreemptedFrRrewriteBandwidthBc1" json:"soft_preempted_fr_rrewrite_bandwidth_bc1,omitempty"`
	// Amount of hard preempted class 0 bandwidth
	HardPreemptedBandwidthBc0 uint64 `protobuf:"varint,76,opt,name=hard_preempted_bandwidth_bc0,json=hardPreemptedBandwidthBc0" json:"hard_preempted_bandwidth_bc0,omitempty"`
	// Amount of hard preempted class 1 bandwidth
	HardPreemptedBandwidthBc1 uint64 `protobuf:"varint,77,opt,name=hard_preempted_bandwidth_bc1,json=hardPreemptedBandwidthBc1" json:"hard_preempted_bandwidth_bc1,omitempty"`
	// List of preempted LSPs
	LspList []*MplsLmPreemptedLsp `protobuf:"bytes,78,rep,name=lsp_list,json=lspList" json:"lsp_list,omitempty"`
	// Number of Tunnels
	Tunnels uint32 `protobuf:"varint,79,opt,name=tunnels" json:"tunnels,omitempty"`
	// Number of Tunnels softly preempted
	SoftPreemptedTunnels uint32 `protobuf:"varint,80,opt,name=soft_preempted_tunnels,json=softPreemptedTunnels" json:"soft_preempted_tunnels,omitempty"`
	// Number of Tunnels softly preempted with traffic switched to backup
	SoftPreemptedTunnelsFrRrewrite uint32 `protobuf:"varint,81,opt,name=soft_preempted_tunnels_fr_rrewrite,json=softPreemptedTunnelsFrRrewrite" json:"soft_preempted_tunnels_fr_rrewrite,omitempty"`
	// Number of Tunnels hardly preempted
	HardPreemptedTunnels uint32   `protobuf:"varint,82,opt,name=hard_preempted_tunnels,json=hardPreemptedTunnels" json:"hard_preempted_tunnels,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsLmPreemptionEvent) Reset()         { *m = MplsLmPreemptionEvent{} }
func (m *MplsLmPreemptionEvent) String() string { return proto.CompactTextString(m) }
func (*MplsLmPreemptionEvent) ProtoMessage()    {}
func (*MplsLmPreemptionEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_lm_preemption_event_7b3a30b9648a1c71, []int{1}
}
func (m *MplsLmPreemptionEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsLmPreemptionEvent.Unmarshal(m, b)
}
func (m *MplsLmPreemptionEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsLmPreemptionEvent.Marshal(b, m, deterministic)
}
func (dst *MplsLmPreemptionEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsLmPreemptionEvent.Merge(dst, src)
}
func (m *MplsLmPreemptionEvent) XXX_Size() int {
	return xxx_messageInfo_MplsLmPreemptionEvent.Size(m)
}
func (m *MplsLmPreemptionEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsLmPreemptionEvent.DiscardUnknown(m)
}

var xxx_messageInfo_MplsLmPreemptionEvent proto.InternalMessageInfo

func (m *MplsLmPreemptionEvent) GetTunnelId() uint32 {
	if m != nil {
		return m.TunnelId
	}
	return 0
}

func (m *MplsLmPreemptionEvent) GetLspId() uint32 {
	if m != nil {
		return m.LspId
	}
	return 0
}

func (m *MplsLmPreemptionEvent) GetSourceAddress() string {
	if m != nil {
		return m.SourceAddress
	}
	return ""
}

func (m *MplsLmPreemptionEvent) GetDestinationAddress() string {
	if m != nil {
		return m.DestinationAddress
	}
	return ""
}

func (m *MplsLmPreemptionEvent) GetRequestedBandwidth() uint64 {
	if m != nil {
		return m.RequestedBandwidth
	}
	return 0
}

func (m *MplsLmPreemptionEvent) GetSetupPriority() uint32 {
	if m != nil {
		return m.SetupPriority
	}
	return 0
}

func (m *MplsLmPreemptionEvent) GetHoldPriority() uint32 {
	if m != nil {
		return m.HoldPriority
	}
	return 0
}

func (m *MplsLmPreemptionEvent) GetBandwidthType() uint32 {
	if m != nil {
		return m.BandwidthType
	}
	return 0
}

func (m *MplsLmPreemptionEvent) GetOldBandwidthBc0() uint64 {
	if m != nil {
		return m.OldBandwidthBc0
	}
	return 0
}

func (m *MplsLmPreemptionEvent) GetOldBandwidthBc1() uint64 {
	if m != nil {
		return m.OldBandwidthBc1
	}
	return 0
}

func (m *MplsLmPreemptionEvent) GetNewBandwidthBc0() uint64 {
	if m != nil {
		return m.NewBandwidthBc0
	}
	return 0
}

func (m *MplsLmPreemptionEvent) GetNewBandwidthBc1() uint64 {
	if m != nil {
		return m.NewBandwidthBc1
	}
	return 0
}

func (m *MplsLmPreemptionEvent) GetBandwidthOvershoot0() uint64 {
	if m != nil {
		return m.BandwidthOvershoot0
	}
	return 0
}

func (m *MplsLmPreemptionEvent) GetBandwidthOvershoot1() uint64 {
	if m != nil {
		return m.BandwidthOvershoot1
	}
	return 0
}

func (m *MplsLmPreemptionEvent) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

func (m *MplsLmPreemptionEvent) GetEventTime() uint32 {
	if m != nil {
		return m.EventTime
	}
	return 0
}

func (m *MplsLmPreemptionEvent) GetLsPs() uint32 {
	if m != nil {
		return m.LsPs
	}
	return 0
}

func (m *MplsLmPreemptionEvent) GetSoftPreemptedLsPs() uint32 {
	if m != nil {
		return m.SoftPreemptedLsPs
	}
	return 0
}

func (m *MplsLmPreemptionEvent) GetSoftPreemptedLsPsFrRrewrite() uint32 {
	if m != nil {
		return m.SoftPreemptedLsPsFrRrewrite
	}
	return 0
}

func (m *MplsLmPreemptionEvent) GetHardPreemptedLsPs() uint32 {
	if m != nil {
		return m.HardPreemptedLsPs
	}
	return 0
}

func (m *MplsLmPreemptionEvent) GetTotalPreemptedBandwidthBc0() uint64 {
	if m != nil {
		return m.TotalPreemptedBandwidthBc0
	}
	return 0
}

func (m *MplsLmPreemptionEvent) GetTotalPreemptedBandwidthBc1() uint64 {
	if m != nil {
		return m.TotalPreemptedBandwidthBc1
	}
	return 0
}

func (m *MplsLmPreemptionEvent) GetSoftlyPreemptedBandwidthBc0() uint64 {
	if m != nil {
		return m.SoftlyPreemptedBandwidthBc0
	}
	return 0
}

func (m *MplsLmPreemptionEvent) GetSoftlyPreemptedBandwidthBc1() uint64 {
	if m != nil {
		return m.SoftlyPreemptedBandwidthBc1
	}
	return 0
}

func (m *MplsLmPreemptionEvent) GetSoftPreemptedFrRrewriteBandwidthBc0() uint64 {
	if m != nil {
		return m.SoftPreemptedFrRrewriteBandwidthBc0
	}
	return 0
}

func (m *MplsLmPreemptionEvent) GetSoftPreemptedFrRrewriteBandwidthBc1() uint64 {
	if m != nil {
		return m.SoftPreemptedFrRrewriteBandwidthBc1
	}
	return 0
}

func (m *MplsLmPreemptionEvent) GetHardPreemptedBandwidthBc0() uint64 {
	if m != nil {
		return m.HardPreemptedBandwidthBc0
	}
	return 0
}

func (m *MplsLmPreemptionEvent) GetHardPreemptedBandwidthBc1() uint64 {
	if m != nil {
		return m.HardPreemptedBandwidthBc1
	}
	return 0
}

func (m *MplsLmPreemptionEvent) GetLspList() []*MplsLmPreemptedLsp {
	if m != nil {
		return m.LspList
	}
	return nil
}

func (m *MplsLmPreemptionEvent) GetTunnels() uint32 {
	if m != nil {
		return m.Tunnels
	}
	return 0
}

func (m *MplsLmPreemptionEvent) GetSoftPreemptedTunnels() uint32 {
	if m != nil {
		return m.SoftPreemptedTunnels
	}
	return 0
}

func (m *MplsLmPreemptionEvent) GetSoftPreemptedTunnelsFrRrewrite() uint32 {
	if m != nil {
		return m.SoftPreemptedTunnelsFrRrewrite
	}
	return 0
}

func (m *MplsLmPreemptionEvent) GetHardPreemptedTunnels() uint32 {
	if m != nil {
		return m.HardPreemptedTunnels
	}
	return 0
}

// HASI ID Event
type HasiIdEvent struct {
	// LocalID
	LocalId uint64 `protobuf:"varint,1,opt,name=local_id,json=localId" json:"local_id,omitempty"`
	// RemoteID
	RemoreId uint64 `protobuf:"varint,2,opt,name=remore_id,json=remoreId" json:"remore_id,omitempty"`
	// Time
	Time uint32 `protobuf:"varint,3,opt,name=time" json:"time,omitempty"`
	// Count
	Count                uint64   `protobuf:"varint,4,opt,name=count" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HasiIdEvent) Reset()         { *m = HasiIdEvent{} }
func (m *HasiIdEvent) String() string { return proto.CompactTextString(m) }
func (*HasiIdEvent) ProtoMessage()    {}
func (*HasiIdEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_lm_preemption_event_7b3a30b9648a1c71, []int{2}
}
func (m *HasiIdEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HasiIdEvent.Unmarshal(m, b)
}
func (m *HasiIdEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HasiIdEvent.Marshal(b, m, deterministic)
}
func (dst *HasiIdEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HasiIdEvent.Merge(dst, src)
}
func (m *HasiIdEvent) XXX_Size() int {
	return xxx_messageInfo_HasiIdEvent.Size(m)
}
func (m *HasiIdEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_HasiIdEvent.DiscardUnknown(m)
}

var xxx_messageInfo_HasiIdEvent proto.InternalMessageInfo

func (m *HasiIdEvent) GetLocalId() uint64 {
	if m != nil {
		return m.LocalId
	}
	return 0
}

func (m *HasiIdEvent) GetRemoreId() uint64 {
	if m != nil {
		return m.RemoreId
	}
	return 0
}

func (m *HasiIdEvent) GetTime() uint32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *HasiIdEvent) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

// HASI Slave Object ID events
type HasiSObjIdEvents struct {
	// Create
	Create *HasiIdEvent `protobuf:"bytes,1,opt,name=create" json:"create,omitempty"`
	// Updates
	Updates *HasiIdEvent `protobuf:"bytes,2,opt,name=updates" json:"updates,omitempty"`
	// ApplicationSyncs
	ApplicationSyncs *HasiIdEvent `protobuf:"bytes,3,opt,name=application_syncs,json=applicationSyncs" json:"application_syncs,omitempty"`
	// ApplicationNaks
	ApplicationNaks *HasiIdEvent `protobuf:"bytes,4,opt,name=application_naks,json=applicationNaks" json:"application_naks,omitempty"`
	// SummaryReplaySyncs
	SummaryReplaySyncs *HasiIdEvent `protobuf:"bytes,5,opt,name=summary_replay_syncs,json=summaryReplaySyncs" json:"summary_replay_syncs,omitempty"`
	// SummaryReplayNaks
	SummaryReplayNaks *HasiIdEvent `protobuf:"bytes,6,opt,name=summary_replay_naks,json=summaryReplayNaks" json:"summary_replay_naks,omitempty"`
	// CacheNakRetries
	CacheNakRetries      *HasiIdEvent `protobuf:"bytes,7,opt,name=cache_nak_retries,json=cacheNakRetries" json:"cache_nak_retries,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *HasiSObjIdEvents) Reset()         { *m = HasiSObjIdEvents{} }
func (m *HasiSObjIdEvents) String() string { return proto.CompactTextString(m) }
func (*HasiSObjIdEvents) ProtoMessage()    {}
func (*HasiSObjIdEvents) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_lm_preemption_event_7b3a30b9648a1c71, []int{3}
}
func (m *HasiSObjIdEvents) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HasiSObjIdEvents.Unmarshal(m, b)
}
func (m *HasiSObjIdEvents) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HasiSObjIdEvents.Marshal(b, m, deterministic)
}
func (dst *HasiSObjIdEvents) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HasiSObjIdEvents.Merge(dst, src)
}
func (m *HasiSObjIdEvents) XXX_Size() int {
	return xxx_messageInfo_HasiSObjIdEvents.Size(m)
}
func (m *HasiSObjIdEvents) XXX_DiscardUnknown() {
	xxx_messageInfo_HasiSObjIdEvents.DiscardUnknown(m)
}

var xxx_messageInfo_HasiSObjIdEvents proto.InternalMessageInfo

func (m *HasiSObjIdEvents) GetCreate() *HasiIdEvent {
	if m != nil {
		return m.Create
	}
	return nil
}

func (m *HasiSObjIdEvents) GetUpdates() *HasiIdEvent {
	if m != nil {
		return m.Updates
	}
	return nil
}

func (m *HasiSObjIdEvents) GetApplicationSyncs() *HasiIdEvent {
	if m != nil {
		return m.ApplicationSyncs
	}
	return nil
}

func (m *HasiSObjIdEvents) GetApplicationNaks() *HasiIdEvent {
	if m != nil {
		return m.ApplicationNaks
	}
	return nil
}

func (m *HasiSObjIdEvents) GetSummaryReplaySyncs() *HasiIdEvent {
	if m != nil {
		return m.SummaryReplaySyncs
	}
	return nil
}

func (m *HasiSObjIdEvents) GetSummaryReplayNaks() *HasiIdEvent {
	if m != nil {
		return m.SummaryReplayNaks
	}
	return nil
}

func (m *HasiSObjIdEvents) GetCacheNakRetries() *HasiIdEvent {
	if m != nil {
		return m.CacheNakRetries
	}
	return nil
}

// HASI Slave Object Context
type HasiSObjectCtx struct {
	// ObjectSyncID
	ObjectSyncId uint64 `protobuf:"varint,1,opt,name=object_sync_id,json=objectSyncId" json:"object_sync_id,omitempty"`
	// ObjectType
	ObjectType uint32 `protobuf:"varint,2,opt,name=object_type,json=objectType" json:"object_type,omitempty"`
	// ObjectIdEvents
	ObjectIdEvents       *HasiSObjIdEvents `protobuf:"bytes,3,opt,name=object_id_events,json=objectIdEvents" json:"object_id_events,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *HasiSObjectCtx) Reset()         { *m = HasiSObjectCtx{} }
func (m *HasiSObjectCtx) String() string { return proto.CompactTextString(m) }
func (*HasiSObjectCtx) ProtoMessage()    {}
func (*HasiSObjectCtx) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_lm_preemption_event_7b3a30b9648a1c71, []int{4}
}
func (m *HasiSObjectCtx) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HasiSObjectCtx.Unmarshal(m, b)
}
func (m *HasiSObjectCtx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HasiSObjectCtx.Marshal(b, m, deterministic)
}
func (dst *HasiSObjectCtx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HasiSObjectCtx.Merge(dst, src)
}
func (m *HasiSObjectCtx) XXX_Size() int {
	return xxx_messageInfo_HasiSObjectCtx.Size(m)
}
func (m *HasiSObjectCtx) XXX_DiscardUnknown() {
	xxx_messageInfo_HasiSObjectCtx.DiscardUnknown(m)
}

var xxx_messageInfo_HasiSObjectCtx proto.InternalMessageInfo

func (m *HasiSObjectCtx) GetObjectSyncId() uint64 {
	if m != nil {
		return m.ObjectSyncId
	}
	return 0
}

func (m *HasiSObjectCtx) GetObjectType() uint32 {
	if m != nil {
		return m.ObjectType
	}
	return 0
}

func (m *HasiSObjectCtx) GetObjectIdEvents() *HasiSObjIdEvents {
	if m != nil {
		return m.ObjectIdEvents
	}
	return nil
}

// HASI Master Slave ID Events
type HasiMIdEvents struct {
	// ApplicationSyncs
	ApplicationSyncs *HasiIdEvent `protobuf:"bytes,1,opt,name=application_syncs,json=applicationSyncs" json:"application_syncs,omitempty"`
	// ImplicitDeletes
	ImplicitDeletes *HasiIdEvent `protobuf:"bytes,2,opt,name=implicit_deletes,json=implicitDeletes" json:"implicit_deletes,omitempty"`
	// ApplicationNaks
	ApplicationNaks *HasiIdEvent `protobuf:"bytes,3,opt,name=application_naks,json=applicationNaks" json:"application_naks,omitempty"`
	// SummaryReplaySyncs
	SummaryReplaySyncs *HasiIdEvent `protobuf:"bytes,4,opt,name=summary_replay_syncs,json=summaryReplaySyncs" json:"summary_replay_syncs,omitempty"`
	// SummaryReplayNaks
	SummaryReplayNaks    *HasiIdEvent `protobuf:"bytes,5,opt,name=summary_replay_naks,json=summaryReplayNaks" json:"summary_replay_naks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *HasiMIdEvents) Reset()         { *m = HasiMIdEvents{} }
func (m *HasiMIdEvents) String() string { return proto.CompactTextString(m) }
func (*HasiMIdEvents) ProtoMessage()    {}
func (*HasiMIdEvents) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_lm_preemption_event_7b3a30b9648a1c71, []int{5}
}
func (m *HasiMIdEvents) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HasiMIdEvents.Unmarshal(m, b)
}
func (m *HasiMIdEvents) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HasiMIdEvents.Marshal(b, m, deterministic)
}
func (dst *HasiMIdEvents) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HasiMIdEvents.Merge(dst, src)
}
func (m *HasiMIdEvents) XXX_Size() int {
	return xxx_messageInfo_HasiMIdEvents.Size(m)
}
func (m *HasiMIdEvents) XXX_DiscardUnknown() {
	xxx_messageInfo_HasiMIdEvents.DiscardUnknown(m)
}

var xxx_messageInfo_HasiMIdEvents proto.InternalMessageInfo

func (m *HasiMIdEvents) GetApplicationSyncs() *HasiIdEvent {
	if m != nil {
		return m.ApplicationSyncs
	}
	return nil
}

func (m *HasiMIdEvents) GetImplicitDeletes() *HasiIdEvent {
	if m != nil {
		return m.ImplicitDeletes
	}
	return nil
}

func (m *HasiMIdEvents) GetApplicationNaks() *HasiIdEvent {
	if m != nil {
		return m.ApplicationNaks
	}
	return nil
}

func (m *HasiMIdEvents) GetSummaryReplaySyncs() *HasiIdEvent {
	if m != nil {
		return m.SummaryReplaySyncs
	}
	return nil
}

func (m *HasiMIdEvents) GetSummaryReplayNaks() *HasiIdEvent {
	if m != nil {
		return m.SummaryReplayNaks
	}
	return nil
}

// HASI Master Object Client Info
type HasiMObjectSlaveInfo struct {
	// SlaveId
	SlaveId uint32 `protobuf:"varint,1,opt,name=slave_id,json=slaveId" json:"slave_id,omitempty"`
	// IdEvents
	IdEvents             *HasiMIdEvents `protobuf:"bytes,2,opt,name=id_events,json=idEvents" json:"id_events,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *HasiMObjectSlaveInfo) Reset()         { *m = HasiMObjectSlaveInfo{} }
func (m *HasiMObjectSlaveInfo) String() string { return proto.CompactTextString(m) }
func (*HasiMObjectSlaveInfo) ProtoMessage()    {}
func (*HasiMObjectSlaveInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_lm_preemption_event_7b3a30b9648a1c71, []int{6}
}
func (m *HasiMObjectSlaveInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HasiMObjectSlaveInfo.Unmarshal(m, b)
}
func (m *HasiMObjectSlaveInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HasiMObjectSlaveInfo.Marshal(b, m, deterministic)
}
func (dst *HasiMObjectSlaveInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HasiMObjectSlaveInfo.Merge(dst, src)
}
func (m *HasiMObjectSlaveInfo) XXX_Size() int {
	return xxx_messageInfo_HasiMObjectSlaveInfo.Size(m)
}
func (m *HasiMObjectSlaveInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_HasiMObjectSlaveInfo.DiscardUnknown(m)
}

var xxx_messageInfo_HasiMObjectSlaveInfo proto.InternalMessageInfo

func (m *HasiMObjectSlaveInfo) GetSlaveId() uint32 {
	if m != nil {
		return m.SlaveId
	}
	return 0
}

func (m *HasiMObjectSlaveInfo) GetIdEvents() *HasiMIdEvents {
	if m != nil {
		return m.IdEvents
	}
	return nil
}

// HASI Master Object Context
type HasiMObjectCtx struct {
	// ObjectSyncID
	ObjectSyncId uint64 `protobuf:"varint,1,opt,name=object_sync_id,json=objectSyncId" json:"object_sync_id,omitempty"`
	// ObjectType
	ObjectType uint32 `protobuf:"varint,2,opt,name=object_type,json=objectType" json:"object_type,omitempty"`
	// Queue
	Queue uint32 `protobuf:"varint,3,opt,name=queue" json:"queue,omitempty"`
	// CreateID
	CreateId uint64 `protobuf:"varint,4,opt,name=create_id,json=createId" json:"create_id,omitempty"`
	// CreateTime
	CreateTime uint32 `protobuf:"varint,5,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	// UpdateTime
	UpdateTime uint32 `protobuf:"varint,6,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	// DeleteTime
	DeleteTime uint32 `protobuf:"varint,7,opt,name=delete_time,json=deleteTime" json:"delete_time,omitempty"`
	// DeleteContextLength
	DeleteCtxLenght uint32 `protobuf:"varint,8,opt,name=delete_ctx_lenght,json=deleteCtxLenght" json:"delete_ctx_lenght,omitempty"`
	// SlaveInformation
	SlaveInformation []*HasiMObjectSlaveInfo `protobuf:"bytes,9,rep,name=slave_information,json=slaveInformation" json:"slave_information,omitempty"`
	// HasHistory
	HasHistory bool `protobuf:"varint,10,opt,name=has_history,json=hasHistory" json:"has_history,omitempty"`
	// PreActiveHistory
	PreActiveHistory     *HasiSObjIdEvents `protobuf:"bytes,11,opt,name=pre_active_history,json=preActiveHistory" json:"pre_active_history,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *HasiMObjectCtx) Reset()         { *m = HasiMObjectCtx{} }
func (m *HasiMObjectCtx) String() string { return proto.CompactTextString(m) }
func (*HasiMObjectCtx) ProtoMessage()    {}
func (*HasiMObjectCtx) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_lm_preemption_event_7b3a30b9648a1c71, []int{7}
}
func (m *HasiMObjectCtx) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HasiMObjectCtx.Unmarshal(m, b)
}
func (m *HasiMObjectCtx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HasiMObjectCtx.Marshal(b, m, deterministic)
}
func (dst *HasiMObjectCtx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HasiMObjectCtx.Merge(dst, src)
}
func (m *HasiMObjectCtx) XXX_Size() int {
	return xxx_messageInfo_HasiMObjectCtx.Size(m)
}
func (m *HasiMObjectCtx) XXX_DiscardUnknown() {
	xxx_messageInfo_HasiMObjectCtx.DiscardUnknown(m)
}

var xxx_messageInfo_HasiMObjectCtx proto.InternalMessageInfo

func (m *HasiMObjectCtx) GetObjectSyncId() uint64 {
	if m != nil {
		return m.ObjectSyncId
	}
	return 0
}

func (m *HasiMObjectCtx) GetObjectType() uint32 {
	if m != nil {
		return m.ObjectType
	}
	return 0
}

func (m *HasiMObjectCtx) GetQueue() uint32 {
	if m != nil {
		return m.Queue
	}
	return 0
}

func (m *HasiMObjectCtx) GetCreateId() uint64 {
	if m != nil {
		return m.CreateId
	}
	return 0
}

func (m *HasiMObjectCtx) GetCreateTime() uint32 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *HasiMObjectCtx) GetUpdateTime() uint32 {
	if m != nil {
		return m.UpdateTime
	}
	return 0
}

func (m *HasiMObjectCtx) GetDeleteTime() uint32 {
	if m != nil {
		return m.DeleteTime
	}
	return 0
}

func (m *HasiMObjectCtx) GetDeleteCtxLenght() uint32 {
	if m != nil {
		return m.DeleteCtxLenght
	}
	return 0
}

func (m *HasiMObjectCtx) GetSlaveInformation() []*HasiMObjectSlaveInfo {
	if m != nil {
		return m.SlaveInformation
	}
	return nil
}

func (m *HasiMObjectCtx) GetHasHistory() bool {
	if m != nil {
		return m.HasHistory
	}
	return false
}

func (m *HasiMObjectCtx) GetPreActiveHistory() *HasiSObjIdEvents {
	if m != nil {
		return m.PreActiveHistory
	}
	return nil
}

// Preempted LSP info
type MplsLmPreemptedLsp struct {
	// Tunnel ID
	TunnelId uint32 `protobuf:"varint,1,opt,name=tunnel_id,json=tunnelId" json:"tunnel_id,omitempty"`
	// LSP ID
	LspId uint32 `protobuf:"varint,2,opt,name=lsp_id,json=lspId" json:"lsp_id,omitempty"`
	// Source
	SourceAddress string `protobuf:"bytes,3,opt,name=source_address,json=sourceAddress" json:"source_address,omitempty"`
	// Destination
	DestinationAddress string `protobuf:"bytes,4,opt,name=destination_address,json=destinationAddress" json:"destination_address,omitempty"`
	// The path's requested bandwidth
	RequestedBandwidth uint64 `protobuf:"varint,5,opt,name=requested_bandwidth,json=requestedBandwidth" json:"requested_bandwidth,omitempty"`
	// The path's setup priority
	SetupPriority uint32 `protobuf:"varint,6,opt,name=setup_priority,json=setupPriority" json:"setup_priority,omitempty"`
	// The path's hold priority
	HoldPriority uint32 `protobuf:"varint,7,opt,name=hold_priority,json=holdPriority" json:"hold_priority,omitempty"`
	// The path's bandwidth type; 0:BC0, 1:BC1, so on
	BandwidthType uint32 `protobuf:"varint,8,opt,name=bandwidth_type,json=bandwidthType" json:"bandwidth_type,omitempty"`
	// TRUE is the preemption is a soft preemption
	SoftPreempted bool `protobuf:"varint,9,opt,name=soft_preempted,json=softPreempted" json:"soft_preempted,omitempty"`
	// If the soft preemption is underway, this value indicates the number of seconds before hard preemption is triggered
	SoftPreemptionTimeout uint32 `protobuf:"varint,10,opt,name=soft_preemption_timeout,json=softPreemptionTimeout" json:"soft_preemption_timeout,omitempty"`
	// LSPs bandwidth is already preempted
	BandwidthPreempted bool `protobuf:"varint,11,opt,name=bandwidth_preempted,json=bandwidthPreempted" json:"bandwidth_preempted,omitempty"`
	// FRR-rewrite is done during soft preemption
	SoftPreemptedFrRrewrite bool     `protobuf:"varint,12,opt,name=soft_preempted_fr_rrewrite,json=softPreemptedFrRrewrite" json:"soft_preempted_fr_rrewrite,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *MplsLmPreemptedLsp) Reset()         { *m = MplsLmPreemptedLsp{} }
func (m *MplsLmPreemptedLsp) String() string { return proto.CompactTextString(m) }
func (*MplsLmPreemptedLsp) ProtoMessage()    {}
func (*MplsLmPreemptedLsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_lm_preemption_event_7b3a30b9648a1c71, []int{8}
}
func (m *MplsLmPreemptedLsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsLmPreemptedLsp.Unmarshal(m, b)
}
func (m *MplsLmPreemptedLsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsLmPreemptedLsp.Marshal(b, m, deterministic)
}
func (dst *MplsLmPreemptedLsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsLmPreemptedLsp.Merge(dst, src)
}
func (m *MplsLmPreemptedLsp) XXX_Size() int {
	return xxx_messageInfo_MplsLmPreemptedLsp.Size(m)
}
func (m *MplsLmPreemptedLsp) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsLmPreemptedLsp.DiscardUnknown(m)
}

var xxx_messageInfo_MplsLmPreemptedLsp proto.InternalMessageInfo

func (m *MplsLmPreemptedLsp) GetTunnelId() uint32 {
	if m != nil {
		return m.TunnelId
	}
	return 0
}

func (m *MplsLmPreemptedLsp) GetLspId() uint32 {
	if m != nil {
		return m.LspId
	}
	return 0
}

func (m *MplsLmPreemptedLsp) GetSourceAddress() string {
	if m != nil {
		return m.SourceAddress
	}
	return ""
}

func (m *MplsLmPreemptedLsp) GetDestinationAddress() string {
	if m != nil {
		return m.DestinationAddress
	}
	return ""
}

func (m *MplsLmPreemptedLsp) GetRequestedBandwidth() uint64 {
	if m != nil {
		return m.RequestedBandwidth
	}
	return 0
}

func (m *MplsLmPreemptedLsp) GetSetupPriority() uint32 {
	if m != nil {
		return m.SetupPriority
	}
	return 0
}

func (m *MplsLmPreemptedLsp) GetHoldPriority() uint32 {
	if m != nil {
		return m.HoldPriority
	}
	return 0
}

func (m *MplsLmPreemptedLsp) GetBandwidthType() uint32 {
	if m != nil {
		return m.BandwidthType
	}
	return 0
}

func (m *MplsLmPreemptedLsp) GetSoftPreempted() bool {
	if m != nil {
		return m.SoftPreempted
	}
	return false
}

func (m *MplsLmPreemptedLsp) GetSoftPreemptionTimeout() uint32 {
	if m != nil {
		return m.SoftPreemptionTimeout
	}
	return 0
}

func (m *MplsLmPreemptedLsp) GetBandwidthPreempted() bool {
	if m != nil {
		return m.BandwidthPreempted
	}
	return false
}

func (m *MplsLmPreemptedLsp) GetSoftPreemptedFrRrewrite() bool {
	if m != nil {
		return m.SoftPreemptedFrRrewrite
	}
	return false
}

func init() {
	proto.RegisterType((*MplsLmPreemptionEvent_KEYS)(nil), "cisco_ios_xr_mpls_te_oper.mpls_lcac_standby.preemption_events.preemption_event.mpls_lm_preemption_event_KEYS")
	proto.RegisterType((*MplsLmPreemptionEvent)(nil), "cisco_ios_xr_mpls_te_oper.mpls_lcac_standby.preemption_events.preemption_event.mpls_lm_preemption_event")
	proto.RegisterType((*HasiIdEvent)(nil), "cisco_ios_xr_mpls_te_oper.mpls_lcac_standby.preemption_events.preemption_event.hasi_id_event")
	proto.RegisterType((*HasiSObjIdEvents)(nil), "cisco_ios_xr_mpls_te_oper.mpls_lcac_standby.preemption_events.preemption_event.hasi_s_obj_id_events")
	proto.RegisterType((*HasiSObjectCtx)(nil), "cisco_ios_xr_mpls_te_oper.mpls_lcac_standby.preemption_events.preemption_event.hasi_s_object_ctx")
	proto.RegisterType((*HasiMIdEvents)(nil), "cisco_ios_xr_mpls_te_oper.mpls_lcac_standby.preemption_events.preemption_event.hasi_m_id_events")
	proto.RegisterType((*HasiMObjectSlaveInfo)(nil), "cisco_ios_xr_mpls_te_oper.mpls_lcac_standby.preemption_events.preemption_event.hasi_m_object_slave_info")
	proto.RegisterType((*HasiMObjectCtx)(nil), "cisco_ios_xr_mpls_te_oper.mpls_lcac_standby.preemption_events.preemption_event.hasi_m_object_ctx")
	proto.RegisterType((*MplsLmPreemptedLsp)(nil), "cisco_ios_xr_mpls_te_oper.mpls_lcac_standby.preemption_events.preemption_event.mpls_lm_preempted_lsp")
}

func init() {
	proto.RegisterFile("mpls_lm_preemption_event.proto", fileDescriptor_mpls_lm_preemption_event_7b3a30b9648a1c71)
}

var fileDescriptor_mpls_lm_preemption_event_7b3a30b9648a1c71 = []byte{
	// 1390 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0x5f, 0x73, 0x14, 0x45,
	0x10, 0xaf, 0x25, 0x77, 0xb9, 0xcb, 0x84, 0x23, 0xb9, 0x49, 0x80, 0x01, 0x04, 0x52, 0x87, 0x54,
	0xa5, 0x78, 0x88, 0x2c, 0x20, 0xfe, 0x41, 0x85, 0x00, 0x41, 0x0e, 0x62, 0x88, 0x4b, 0x7c, 0xf0,
	0xc1, 0x1a, 0x37, 0xbb, 0x13, 0x6f, 0xcc, 0xfe, 0x63, 0x66, 0x2e, 0xc9, 0x3d, 0x58, 0xe5, 0xa3,
	0x5a, 0xa5, 0x56, 0x59, 0xfa, 0x4d, 0xfc, 0x18, 0xbe, 0xfb, 0x1d, 0xf4, 0x13, 0xf8, 0x66, 0x4d,
	0xcf, 0xee, 0xed, 0xee, 0xe5, 0x8e, 0x24, 0x55, 0x5c, 0xe0, 0x6d, 0xa7, 0xfb, 0xd7, 0x7f, 0xa6,
	0x7b, 0xba, 0xb7, 0x67, 0xd0, 0xa5, 0x30, 0x09, 0x24, 0x0d, 0x42, 0x9a, 0x08, 0xc6, 0xc2, 0x44,
	0xf1, 0x38, 0xa2, 0x6c, 0x87, 0x45, 0x6a, 0x29, 0x11, 0xb1, 0x8a, 0xf1, 0x9a, 0xc7, 0xa5, 0x17,
	0x53, 0x1e, 0x4b, 0xba, 0x27, 0x28, 0x80, 0x15, 0xa3, 0x71, 0xc2, 0xc4, 0x92, 0x91, 0xf4, 0x5c,
	0x8f, 0x4a, 0xe5, 0x46, 0xfe, 0x66, 0x6f, 0x69, 0x50, 0x87, 0xdc, 0x47, 0x69, 0xdd, 0x43, 0x17,
	0x47, 0x59, 0xa4, 0x4f, 0x57, 0xbe, 0x7c, 0x8e, 0x2f, 0xa3, 0x69, 0xb3, 0xe2, 0x91, 0xcf, 0xf6,
	0x88, 0xb5, 0x60, 0x2d, 0x36, 0x1c, 0x04, 0xa4, 0xb6, 0xa6, 0xb4, 0xfe, 0x6b, 0x20, 0x32, 0x4a,
	0x05, 0xbe, 0x80, 0xa6, 0x54, 0x37, 0x8a, 0x58, 0x40, 0xb9, 0x4f, 0x6e, 0x80, 0x6c, 0xdd, 0x10,
	0xda, 0x3e, 0x3e, 0x8d, 0x26, 0x03, 0x99, 0x68, 0xce, 0x4d, 0xe0, 0x54, 0x03, 0x99, 0xb4, 0x7d,
	0x7c, 0x15, 0x9d, 0x92, 0x71, 0x57, 0x78, 0x8c, 0xba, 0xbe, 0x2f, 0x98, 0x94, 0xe4, 0xd6, 0x82,
	0xb5, 0x38, 0xe5, 0x34, 0x0c, 0x75, 0xd9, 0x10, 0xf1, 0x3b, 0x68, 0xce, 0x67, 0x52, 0xf1, 0xc8,
	0x05, 0x7b, 0x19, 0xf6, 0x5d, 0xc0, 0xe2, 0x02, 0xab, 0x20, 0x20, 0xd8, 0x8b, 0x2e, 0x93, 0x8a,
	0xf9, 0x74, 0xd3, 0x8d, 0xfc, 0x5d, 0xee, 0xab, 0x0e, 0xb9, 0xbd, 0x60, 0x2d, 0x56, 0x1c, 0xdc,
	0x67, 0xdd, 0xcf, 0x38, 0xe0, 0x08, 0x53, 0xdd, 0x84, 0x26, 0x82, 0xc7, 0x82, 0xab, 0x1e, 0x79,
	0x0f, 0xfc, 0x6c, 0x00, 0x75, 0x3d, 0x25, 0xe2, 0x2b, 0xa8, 0xd1, 0x89, 0x03, 0x3f, 0x47, 0xbd,
	0x0f, 0xa8, 0x93, 0x9a, 0xd8, 0x07, 0x5d, 0x45, 0xa7, 0xfa, 0x26, 0xa9, 0xea, 0x25, 0x8c, 0x7c,
	0x60, 0x74, 0xf5, 0xa9, 0x1b, 0xbd, 0x84, 0xe1, 0x6b, 0xa8, 0xa9, 0x55, 0xe5, 0xd0, 0x4d, 0xef,
	0x3a, 0xf9, 0x10, 0x3c, 0x9c, 0x89, 0x83, 0xdc, 0xb7, 0xfb, 0xde, 0xf5, 0x61, 0x58, 0x9b, 0xdc,
	0x19, 0x86, 0xb5, 0x35, 0x36, 0x62, 0xbb, 0x03, 0x7a, 0x3f, 0x32, 0xd8, 0x88, 0xed, 0x0e, 0xea,
	0x1d, 0xc4, 0xda, 0xe4, 0xe3, 0x61, 0x58, 0x1b, 0xdb, 0x68, 0x3e, 0xc7, 0xc5, 0x3b, 0x4c, 0xc8,
	0x4e, 0x1c, 0xab, 0xeb, 0xe4, 0x13, 0x80, 0xcf, 0xf5, 0x79, 0xcf, 0xfa, 0xac, 0x11, 0x22, 0x36,
	0xb9, 0x3b, 0x4a, 0xc4, 0xd6, 0xc1, 0xe3, 0x91, 0x62, 0x62, 0xcb, 0xf5, 0x18, 0x8d, 0xdc, 0x90,
	0x91, 0x7b, 0xe6, 0x44, 0xf4, 0xa9, 0x6b, 0x6e, 0xc8, 0xf0, 0x45, 0x64, 0xce, 0x25, 0x55, 0x3c,
	0x64, 0x64, 0x19, 0xe2, 0x3b, 0x05, 0x94, 0x0d, 0x1e, 0x32, 0x3c, 0x87, 0xaa, 0x81, 0xa4, 0x89,
	0x24, 0xf7, 0x81, 0x53, 0x09, 0xe4, 0xba, 0x3e, 0x14, 0xf3, 0x32, 0xde, 0x52, 0xd9, 0xc9, 0x65,
	0x3e, 0x35, 0x98, 0x07, 0x80, 0x69, 0x6a, 0xde, 0x7a, 0xc6, 0x5a, 0xd5, 0x02, 0x2b, 0x68, 0x61,
	0x98, 0x00, 0xdd, 0x12, 0x54, 0x08, 0xb6, 0x2b, 0xb8, 0x62, 0xe4, 0x21, 0x08, 0x5f, 0xd8, 0x27,
	0xfc, 0x48, 0x38, 0x29, 0x44, 0xdb, 0xed, 0xb8, 0xc2, 0xdf, 0x67, 0x77, 0xc5, 0xd8, 0xd5, 0xbc,
	0xb2, 0xdd, 0x65, 0x74, 0x51, 0xc5, 0xca, 0x0d, 0x0a, 0x12, 0xe5, 0x6c, 0x3e, 0x82, 0xf8, 0x9d,
	0x07, 0x50, 0x5f, 0xb4, 0x94, 0xd8, 0x03, 0x54, 0xd8, 0xe4, 0xd3, 0x03, 0x54, 0xd8, 0xf8, 0x01,
	0xba, 0xa4, 0x77, 0x15, 0xf4, 0x46, 0xba, 0xf1, 0x18, 0x74, 0x5c, 0x30, 0xa8, 0xe1, 0x7e, 0x1c,
	0xa4, 0xc4, 0x26, 0xed, 0x83, 0x94, 0xd8, 0xf8, 0x0b, 0xb4, 0x38, 0x90, 0x87, 0x42, 0x06, 0x06,
	0x7c, 0x7a, 0x02, 0xea, 0xae, 0x94, 0xf2, 0x91, 0xe7, 0xa2, 0xe4, 0xdb, 0xe1, 0xd5, 0xda, 0xe4,
	0xe9, 0x61, 0xd5, 0xda, 0xf8, 0x2e, 0x7a, 0x6b, 0x20, 0xdd, 0x65, 0x0f, 0x57, 0x41, 0xd5, 0xb9,
	0x52, 0xda, 0x4b, 0x7e, 0xbd, 0x5c, 0x81, 0x4d, 0x3e, 0x7b, 0xb9, 0x02, 0x1b, 0x7f, 0x6f, 0xa1,
	0xba, 0xee, 0xb6, 0x01, 0x97, 0x8a, 0xac, 0x2d, 0x4c, 0x2c, 0x4e, 0xdf, 0x60, 0x4b, 0xaf, 0xf6,
	0x67, 0xb2, 0x34, 0xf0, 0x1b, 0x80, 0x43, 0x9d, 0x38, 0xb5, 0x40, 0x26, 0xab, 0x5c, 0x2a, 0x4c,
	0x50, 0xcd, 0xf4, 0x7e, 0x49, 0x9e, 0xc1, 0x31, 0xcf, 0x96, 0xf8, 0x16, 0x3a, 0x33, 0x10, 0xf5,
	0x0c, 0xb8, 0x0e, 0xc0, 0xf9, 0x52, 0x8c, 0x37, 0x52, 0xa9, 0x27, 0xa8, 0x35, 0x5c, 0xaa, 0x54,
	0x8c, 0x9f, 0x83, 0x86, 0x4b, 0xc3, 0x34, 0x14, 0xea, 0xf1, 0x16, 0x3a, 0x33, 0x10, 0xdf, 0xcc,
	0x03, 0xc7, 0x78, 0x50, 0x8a, 0x6c, 0x2a, 0xdf, 0x7a, 0x81, 0x1a, 0x1d, 0x57, 0x72, 0xca, 0xfd,
	0xf4, 0x7f, 0x77, 0x0e, 0xd5, 0x83, 0xd8, 0x73, 0xe1, 0x77, 0x67, 0x41, 0x4a, 0x6a, 0xb0, 0x6e,
	0xfb, 0xfa, 0x57, 0x28, 0x58, 0x18, 0x0b, 0xa6, 0x79, 0x27, 0x80, 0x57, 0x37, 0x84, 0xb6, 0x8f,
	0x31, 0xaa, 0x40, 0xd3, 0x9a, 0x30, 0xad, 0x49, 0x7f, 0xe3, 0x79, 0x54, 0xf5, 0xe2, 0x6e, 0xa4,
	0x48, 0x05, 0xc0, 0x66, 0xd1, 0xfa, 0xab, 0xa6, 0x3b, 0x87, 0xe4, 0x54, 0xd2, 0x78, 0xf3, 0xdb,
	0xbe, 0x65, 0x89, 0xbb, 0x68, 0xd2, 0x13, 0xcc, 0x55, 0x0c, 0x0c, 0x4f, 0xdf, 0xf8, 0xea, 0x55,
	0x67, 0xb7, 0xb4, 0x53, 0x27, 0x35, 0x86, 0x77, 0x51, 0xad, 0x9b, 0xf8, 0xae, 0x62, 0x12, 0x36,
	0x35, 0x76, 0xbb, 0x99, 0x35, 0xfc, 0x93, 0x85, 0x9a, 0x6e, 0x92, 0x04, 0xdc, 0x33, 0x03, 0x80,
	0xec, 0x45, 0x9e, 0x84, 0x00, 0x8e, 0xdd, 0x87, 0xd9, 0x82, 0xdd, 0xe7, 0xda, 0x2c, 0xfe, 0xc1,
	0x42, 0x45, 0x22, 0x8d, 0xdc, 0x6d, 0x09, 0x79, 0x1b, 0xbb, 0x2f, 0x33, 0x05, 0xb3, 0x6b, 0xee,
	0xb6, 0xc4, 0xbf, 0x5a, 0x68, 0x5e, 0x76, 0xc3, 0xd0, 0x15, 0x3d, 0x2a, 0x58, 0x12, 0xb8, 0xbd,
	0x34, 0x34, 0xd5, 0xe3, 0x70, 0x07, 0xa7, 0xa6, 0x1d, 0xb0, 0x6c, 0x82, 0xf3, 0xb3, 0x85, 0xe6,
	0x06, 0x3c, 0x82, 0xf8, 0x4c, 0x1e, 0x87, 0x43, 0xcd, 0x92, 0x43, 0x10, 0xa1, 0x1f, 0x2d, 0xd4,
	0xf4, 0x5c, 0xaf, 0xa3, 0x67, 0x89, 0x6d, 0x2a, 0x98, 0x12, 0x9c, 0x49, 0x52, 0x3b, 0x96, 0x6c,
	0x81, 0xdd, 0x35, 0x77, 0xdb, 0x31, 0x56, 0x5b, 0xff, 0x5a, 0xa8, 0x99, 0x97, 0x33, 0xf3, 0x14,
	0xf5, 0xd4, 0x1e, 0x7e, 0x1b, 0x9d, 0x4a, 0x57, 0x3a, 0x75, 0x79, 0x33, 0x39, 0x69, 0xa8, 0x3a,
	0xac, 0x6d, 0x5f, 0x8f, 0xe6, 0x29, 0x0a, 0x06, 0xca, 0x13, 0x66, 0x34, 0x37, 0x24, 0x98, 0x26,
	0x7f, 0xb1, 0xd0, 0x6c, 0x8a, 0xe8, 0xf7, 0x89, 0xb4, 0x42, 0xfc, 0xb1, 0xec, 0x73, 0xa0, 0x27,
	0x39, 0xe9, 0x2e, 0xda, 0xfe, 0x0a, 0xac, 0x5b, 0x7f, 0x57, 0xd1, 0x2c, 0x00, 0xc3, 0x42, 0xe3,
	0x1a, 0x5e, 0xc8, 0xd6, 0xeb, 0x2b, 0x64, 0x1e, 0x6a, 0x22, 0x57, 0xd4, 0x67, 0x01, 0x3b, 0xb6,
	0xc6, 0x36, 0x93, 0x99, 0x7d, 0x68, 0xac, 0x0e, 0xef, 0x29, 0x13, 0x6f, 0x56, 0x4f, 0xa9, 0xbc,
	0x69, 0x3d, 0xa5, 0xfa, 0x7a, 0x7a, 0x4a, 0xeb, 0x4f, 0x0b, 0x91, 0xf4, 0x64, 0x67, 0x95, 0x1b,
	0xb8, 0x3b, 0x8c, 0xf2, 0x68, 0x2b, 0xd6, 0x53, 0x41, 0xba, 0xf2, 0xd3, 0x0b, 0x74, 0x0d, 0xd6,
	0x6d, 0x1f, 0x7f, 0x87, 0xa6, 0xf2, 0xd2, 0x34, 0xe7, 0xec, 0xeb, 0xb1, 0x38, 0x5f, 0xa8, 0x38,
	0xa7, 0xce, 0xb3, 0x82, 0xfc, 0xa7, 0x92, 0xb6, 0x9f, 0x70, 0x0c, 0xed, 0x67, 0x1e, 0x55, 0x5f,
	0x74, 0x59, 0x37, 0x9b, 0x6a, 0xcc, 0x42, 0xcf, 0x41, 0x66, 0x74, 0xd0, 0x7a, 0xcd, 0x68, 0x53,
	0x37, 0x04, 0xa3, 0x33, 0x65, 0xc2, 0x38, 0x54, 0x35, 0x3a, 0x0d, 0x09, 0x2e, 0x71, 0x97, 0xd1,
	0xb4, 0x19, 0x00, 0x0c, 0x60, 0xd2, 0x00, 0x0c, 0x29, 0x03, 0x98, 0xb2, 0x35, 0x80, 0x9a, 0x01,
	0x18, 0x12, 0x00, 0xae, 0xa1, 0x66, 0x0a, 0xf0, 0xd4, 0x1e, 0x0d, 0x58, 0xf4, 0x4d, 0x47, 0x91,
	0x3a, 0xc0, 0x66, 0x0c, 0xe3, 0x81, 0xda, 0x5b, 0x05, 0x32, 0xfe, 0xc3, 0x42, 0xcd, 0x3c, 0x8f,
	0x22, 0x84, 0x8a, 0x20, 0x53, 0x30, 0x3d, 0x77, 0xc6, 0x94, 0xa6, 0x7d, 0xc7, 0xc7, 0x99, 0x35,
	0x87, 0x25, 0xf7, 0x40, 0x6f, 0xb2, 0xe3, 0x4a, 0xda, 0xe1, 0x52, 0xc5, 0xa2, 0x47, 0xd0, 0x82,
	0xb5, 0x58, 0x77, 0x50, 0xc7, 0x95, 0x8f, 0x0d, 0x05, 0xff, 0x66, 0x21, 0x9c, 0x08, 0x46, 0x5d,
	0x4f, 0xf1, 0x1d, 0xd6, 0x07, 0x4e, 0x1f, 0x63, 0xef, 0x9f, 0x4d, 0x04, 0x5b, 0x06, 0xf3, 0xa9,
	0x53, 0xad, 0xdf, 0x2b, 0xe8, 0xf4, 0xd0, 0x2b, 0x42, 0xf9, 0x99, 0xc8, 0x1a, 0xf9, 0x4c, 0x74,
	0xe2, 0xe5, 0xcf, 0x44, 0x13, 0x47, 0x78, 0x26, 0xaa, 0x1c, 0xf5, 0x99, 0xa8, 0x7a, 0x84, 0x67,
	0xa2, 0xc9, 0x43, 0x3d, 0x13, 0xd5, 0x0e, 0xf5, 0x4c, 0x54, 0x1f, 0xf6, 0x4c, 0x04, 0x7b, 0x2f,
	0xde, 0x7c, 0xc8, 0x14, 0x1c, 0x81, 0x46, 0xe9, 0x96, 0x83, 0x6f, 0xa3, 0xb3, 0x45, 0x98, 0xde,
	0xbf, 0x2e, 0x8a, 0xb8, 0xab, 0xe0, 0xc8, 0x34, 0x9c, 0xd3, 0x05, 0x3c, 0x8f, 0xa3, 0x0d, 0xc3,
	0xd4, 0x21, 0xc8, 0xbd, 0xc8, 0x6d, 0x4c, 0x83, 0x0d, 0xdc, 0x67, 0xe5, 0x86, 0xee, 0xa0, 0xf3,
	0xa3, 0x6f, 0xcd, 0xe4, 0x24, 0xc8, 0x9d, 0x1d, 0x71, 0x4f, 0xde, 0x9c, 0x84, 0x97, 0xcd, 0x9b,
	0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0x9e, 0xc0, 0x55, 0xd9, 0xfb, 0x14, 0x00, 0x00,
}
