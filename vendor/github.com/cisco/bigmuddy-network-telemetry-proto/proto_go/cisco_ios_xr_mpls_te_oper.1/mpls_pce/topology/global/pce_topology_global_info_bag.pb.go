// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pce_topology_global_info_bag.proto

package cisco_ios_xr_mpls_te_oper_mpls_pce_topology_global

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// PCE Topology Information
type PceTopologyGlobalInfoBag_KEYS struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PceTopologyGlobalInfoBag_KEYS) Reset()         { *m = PceTopologyGlobalInfoBag_KEYS{} }
func (m *PceTopologyGlobalInfoBag_KEYS) String() string { return proto.CompactTextString(m) }
func (*PceTopologyGlobalInfoBag_KEYS) ProtoMessage()    {}
func (*PceTopologyGlobalInfoBag_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_pce_topology_global_info_bag_ec37dd5fed0ede3d, []int{0}
}
func (m *PceTopologyGlobalInfoBag_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PceTopologyGlobalInfoBag_KEYS.Unmarshal(m, b)
}
func (m *PceTopologyGlobalInfoBag_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PceTopologyGlobalInfoBag_KEYS.Marshal(b, m, deterministic)
}
func (dst *PceTopologyGlobalInfoBag_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PceTopologyGlobalInfoBag_KEYS.Merge(dst, src)
}
func (m *PceTopologyGlobalInfoBag_KEYS) XXX_Size() int {
	return xxx_messageInfo_PceTopologyGlobalInfoBag_KEYS.Size(m)
}
func (m *PceTopologyGlobalInfoBag_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_PceTopologyGlobalInfoBag_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_PceTopologyGlobalInfoBag_KEYS proto.InternalMessageInfo

type PceTopologyGlobalInfoBag struct {
	// Node information
	Nodes                []*PceNodeBag `protobuf:"bytes,50,rep,name=nodes" json:"nodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *PceTopologyGlobalInfoBag) Reset()         { *m = PceTopologyGlobalInfoBag{} }
func (m *PceTopologyGlobalInfoBag) String() string { return proto.CompactTextString(m) }
func (*PceTopologyGlobalInfoBag) ProtoMessage()    {}
func (*PceTopologyGlobalInfoBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_pce_topology_global_info_bag_ec37dd5fed0ede3d, []int{1}
}
func (m *PceTopologyGlobalInfoBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PceTopologyGlobalInfoBag.Unmarshal(m, b)
}
func (m *PceTopologyGlobalInfoBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PceTopologyGlobalInfoBag.Marshal(b, m, deterministic)
}
func (dst *PceTopologyGlobalInfoBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PceTopologyGlobalInfoBag.Merge(dst, src)
}
func (m *PceTopologyGlobalInfoBag) XXX_Size() int {
	return xxx_messageInfo_PceTopologyGlobalInfoBag.Size(m)
}
func (m *PceTopologyGlobalInfoBag) XXX_DiscardUnknown() {
	xxx_messageInfo_PceTopologyGlobalInfoBag.DiscardUnknown(m)
}

var xxx_messageInfo_PceTopologyGlobalInfoBag proto.InternalMessageInfo

func (m *PceTopologyGlobalInfoBag) GetNodes() []*PceNodeBag {
	if m != nil {
		return m.Nodes
	}
	return nil
}

// PCE Node Information
type PceNodeBag struct {
	// Router ID
	RouterId string `protobuf:"bytes,1,opt,name=router_id,json=routerId" json:"router_id,omitempty"`
	// IGP Area number
	IgpAreaId uint32 `protobuf:"varint,2,opt,name=igp_area_id,json=igpAreaId" json:"igp_area_id,omitempty"`
	// IGP Area Format
	IgpAreaFormat string `protobuf:"bytes,3,opt,name=igp_area_format,json=igpAreaFormat" json:"igp_area_format,omitempty"`
	// PCE cost
	PceCost uint32 `protobuf:"varint,4,opt,name=pce_cost,json=pceCost" json:"pce_cost,omitempty"`
	// Node ID
	NodeId string `protobuf:"bytes,5,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	// PCE border node
	IsPceBorderNode      bool     `protobuf:"varint,6,opt,name=is_pce_border_node,json=isPceBorderNode" json:"is_pce_border_node,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PceNodeBag) Reset()         { *m = PceNodeBag{} }
func (m *PceNodeBag) String() string { return proto.CompactTextString(m) }
func (*PceNodeBag) ProtoMessage()    {}
func (*PceNodeBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_pce_topology_global_info_bag_ec37dd5fed0ede3d, []int{2}
}
func (m *PceNodeBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PceNodeBag.Unmarshal(m, b)
}
func (m *PceNodeBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PceNodeBag.Marshal(b, m, deterministic)
}
func (dst *PceNodeBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PceNodeBag.Merge(dst, src)
}
func (m *PceNodeBag) XXX_Size() int {
	return xxx_messageInfo_PceNodeBag.Size(m)
}
func (m *PceNodeBag) XXX_DiscardUnknown() {
	xxx_messageInfo_PceNodeBag.DiscardUnknown(m)
}

var xxx_messageInfo_PceNodeBag proto.InternalMessageInfo

func (m *PceNodeBag) GetRouterId() string {
	if m != nil {
		return m.RouterId
	}
	return ""
}

func (m *PceNodeBag) GetIgpAreaId() uint32 {
	if m != nil {
		return m.IgpAreaId
	}
	return 0
}

func (m *PceNodeBag) GetIgpAreaFormat() string {
	if m != nil {
		return m.IgpAreaFormat
	}
	return ""
}

func (m *PceNodeBag) GetPceCost() uint32 {
	if m != nil {
		return m.PceCost
	}
	return 0
}

func (m *PceNodeBag) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *PceNodeBag) GetIsPceBorderNode() bool {
	if m != nil {
		return m.IsPceBorderNode
	}
	return false
}

func init() {
	proto.RegisterType((*PceTopologyGlobalInfoBag_KEYS)(nil), "cisco_ios_xr_mpls_te_oper.mpls_pce.topology.global.pce_topology_global_info_bag_KEYS")
	proto.RegisterType((*PceTopologyGlobalInfoBag)(nil), "cisco_ios_xr_mpls_te_oper.mpls_pce.topology.global.pce_topology_global_info_bag")
	proto.RegisterType((*PceNodeBag)(nil), "cisco_ios_xr_mpls_te_oper.mpls_pce.topology.global.pce_node_bag")
}

func init() {
	proto.RegisterFile("pce_topology_global_info_bag.proto", fileDescriptor_pce_topology_global_info_bag_ec37dd5fed0ede3d)
}

var fileDescriptor_pce_topology_global_info_bag_ec37dd5fed0ede3d = []byte{
	// 292 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0xcd, 0x4a, 0x03, 0x31,
	0x10, 0xc7, 0x59, 0x6b, 0xbf, 0x52, 0x4b, 0x21, 0x17, 0x57, 0x14, 0x59, 0x57, 0x90, 0x05, 0x21,
	0x87, 0xfa, 0x02, 0x7e, 0xa0, 0x50, 0x04, 0x91, 0x15, 0x04, 0x4f, 0x43, 0x36, 0x99, 0x2e, 0x81,
	0x6d, 0x27, 0x24, 0x51, 0xf4, 0x3d, 0x7d, 0x20, 0x49, 0xaa, 0xe2, 0xa9, 0xe0, 0x71, 0x7e, 0x33,
	0xf9, 0xcd, 0x3f, 0x0c, 0x2b, 0xad, 0x42, 0x08, 0x64, 0xa9, 0xa3, 0xf6, 0x03, 0xda, 0x8e, 0x1a,
	0xd9, 0x81, 0x59, 0x2f, 0x09, 0x1a, 0xd9, 0x0a, 0xeb, 0x28, 0x10, 0x9f, 0x2b, 0xe3, 0x15, 0x81,
	0x21, 0x0f, 0xef, 0x0e, 0x56, 0xb6, 0xf3, 0x10, 0x10, 0xc8, 0xa2, 0x13, 0xa9, 0xb0, 0x0a, 0xc5,
	0x8f, 0x42, 0x6c, 0x14, 0xe5, 0x29, 0x3b, 0xd9, 0x66, 0x86, 0xfb, 0xdb, 0x97, 0xa7, 0xf2, 0x8d,
	0x1d, 0x6d, 0x1b, 0xe2, 0xcf, 0xac, 0xbf, 0x26, 0x8d, 0x3e, 0x9f, 0x17, 0xbd, 0x6a, 0x32, 0xbf,
	0x14, 0xff, 0x0f, 0x22, 0xe2, 0x82, 0x28, 0x89, 0xc2, 0x7a, 0xa3, 0x2b, 0x3f, 0x33, 0xb6, 0xf7,
	0x97, 0xf3, 0x43, 0x36, 0x76, 0xf4, 0x1a, 0xd0, 0x81, 0xd1, 0x79, 0x56, 0x64, 0xd5, 0xb8, 0x1e,
	0x6d, 0xc0, 0x42, 0xf3, 0x63, 0x36, 0x31, 0xad, 0x05, 0xe9, 0x50, 0xc6, 0xf6, 0x4e, 0x91, 0x55,
	0xd3, 0x7a, 0x6c, 0x5a, 0x7b, 0xe5, 0x50, 0x2e, 0x34, 0x3f, 0x63, 0xb3, 0xdf, 0xfe, 0x92, 0xdc,
	0x4a, 0x86, 0xbc, 0x97, 0x14, 0xd3, 0xef, 0x99, 0xbb, 0x04, 0xf9, 0x01, 0x1b, 0xc5, 0xa5, 0x8a,
	0x7c, 0xc8, 0x77, 0x93, 0x64, 0x68, 0x15, 0xde, 0x90, 0x0f, 0x7c, 0x9f, 0x0d, 0x53, 0x16, 0xa3,
	0xf3, 0x7e, 0x7a, 0x3a, 0x88, 0xe5, 0x42, 0xf3, 0x73, 0xc6, 0x4d, 0xfa, 0x17, 0x34, 0xe4, 0x34,
	0xba, 0x14, 0x39, 0x1f, 0x14, 0x59, 0x35, 0xaa, 0x67, 0xc6, 0x3f, 0x2a, 0xbc, 0x4e, 0xfc, 0x81,
	0x34, 0x36, 0x83, 0x74, 0xae, 0x8b, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa8, 0xff, 0xa0, 0xcb,
	0xd4, 0x01, 0x00, 0x00,
}
