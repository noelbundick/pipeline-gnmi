// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pce_neighbor_bag.proto

package cisco_ios_xr_mpls_te_oper_mpls_pce_stdby_peers_peer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// PCE Neighbor Information
type PceNeighborBag_KEYS struct {
	PeerAddress          string   `protobuf:"bytes,1,opt,name=peer_address,json=peerAddress" json:"peer_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PceNeighborBag_KEYS) Reset()         { *m = PceNeighborBag_KEYS{} }
func (m *PceNeighborBag_KEYS) String() string { return proto.CompactTextString(m) }
func (*PceNeighborBag_KEYS) ProtoMessage()    {}
func (*PceNeighborBag_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_pce_neighbor_bag_a1ef18e863da4ed6, []int{0}
}
func (m *PceNeighborBag_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PceNeighborBag_KEYS.Unmarshal(m, b)
}
func (m *PceNeighborBag_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PceNeighborBag_KEYS.Marshal(b, m, deterministic)
}
func (dst *PceNeighborBag_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PceNeighborBag_KEYS.Merge(dst, src)
}
func (m *PceNeighborBag_KEYS) XXX_Size() int {
	return xxx_messageInfo_PceNeighborBag_KEYS.Size(m)
}
func (m *PceNeighborBag_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_PceNeighborBag_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_PceNeighborBag_KEYS proto.InternalMessageInfo

func (m *PceNeighborBag_KEYS) GetPeerAddress() string {
	if m != nil {
		return m.PeerAddress
	}
	return ""
}

type PceNeighborBag struct {
	// Error (for display only)
	Error string `protobuf:"bytes,50,opt,name=error" json:"error,omitempty"`
	// PCE State
	PceState string `protobuf:"bytes,51,opt,name=pce_state,json=pceState" json:"pce_state,omitempty"`
	// PCE Precedence
	Precedence uint32 `protobuf:"varint,52,opt,name=precedence" json:"precedence,omitempty"`
	// Stateful
	Stateful bool `protobuf:"varint,53,opt,name=stateful" json:"stateful,omitempty"`
	// Update capability
	CapabilityUpdate bool `protobuf:"varint,54,opt,name=capability_update,json=capabilityUpdate" json:"capability_update,omitempty"`
	// Instantiation capability
	CapabilityInstantiate bool `protobuf:"varint,55,opt,name=capability_instantiate,json=capabilityInstantiate" json:"capability_instantiate,omitempty"`
	// Segment Routing capability
	CapabilitySegmentRouting bool `protobuf:"varint,56,opt,name=capability_segment_routing,json=capabilitySegmentRouting" json:"capability_segment_routing,omitempty"`
	// Triggered Synchronization capability
	TriggeredSyncCapability bool `protobuf:"varint,57,opt,name=triggered_sync_capability,json=triggeredSyncCapability" json:"triggered_sync_capability,omitempty"`
	// DB version capability
	CapabilityDbVersion bool `protobuf:"varint,58,opt,name=capability_db_version,json=capabilityDbVersion" json:"capability_db_version,omitempty"`
	// Delta Synchronization capability
	DeltaSyncCapability bool `protobuf:"varint,59,opt,name=delta_sync_capability,json=deltaSyncCapability" json:"delta_sync_capability,omitempty"`
	// PCEP Up Time
	PcepUpTime uint32 `protobuf:"varint,60,opt,name=pcep_up_time,json=pcepUpTime" json:"pcep_up_time,omitempty"`
	// Keepalive count
	Keepalives uint32 `protobuf:"varint,61,opt,name=keepalives" json:"keepalives,omitempty"`
	// Candidate
	Candidate bool `protobuf:"varint,62,opt,name=candidate" json:"candidate,omitempty"`
	// Statically Configured
	StaticallyConfigured bool `protobuf:"varint,63,opt,name=statically_configured,json=staticallyConfigured" json:"statically_configured,omitempty"`
	// MD5 Authentication Enabled
	Md5Enabled bool `protobuf:"varint,64,opt,name=md5_enabled,json=md5Enabled" json:"md5_enabled,omitempty"`
	// Keychain based Authentication Enabled
	KeychainEnabled bool `protobuf:"varint,65,opt,name=keychain_enabled,json=keychainEnabled" json:"keychain_enabled,omitempty"`
	// IGPs
	IgPs []*PcePeerIgpBag `protobuf:"bytes,66,rep,name=ig_ps,json=igPs" json:"ig_ps,omitempty"`
	// Negotiated KA
	NegotiatedKeepalive uint32 `protobuf:"varint,67,opt,name=negotiated_keepalive,json=negotiatedKeepalive" json:"negotiated_keepalive,omitempty"`
	// Negotiated DT
	NegotatedDeadTime uint32 `protobuf:"varint,68,opt,name=negotated_dead_time,json=negotatedDeadTime" json:"negotated_dead_time,omitempty"`
	// PCEReq Rx
	PceReqRx uint32 `protobuf:"varint,69,opt,name=pce_req_rx,json=pceReqRx" json:"pce_req_rx,omitempty"`
	// PCEReq Tx
	PceReqTx uint32 `protobuf:"varint,70,opt,name=pce_req_tx,json=pceReqTx" json:"pce_req_tx,omitempty"`
	// PCERep Rx
	PceRepRx uint32 `protobuf:"varint,71,opt,name=pce_rep_rx,json=pceRepRx" json:"pce_rep_rx,omitempty"`
	// PCERep Tx
	PceRepTx uint32 `protobuf:"varint,72,opt,name=pce_rep_tx,json=pceRepTx" json:"pce_rep_tx,omitempty"`
	// PCEErr Rx
	PceErrRx uint32 `protobuf:"varint,73,opt,name=pce_err_rx,json=pceErrRx" json:"pce_err_rx,omitempty"`
	// PCEErr Tx
	PceErrTx uint32 `protobuf:"varint,74,opt,name=pce_err_tx,json=pceErrTx" json:"pce_err_tx,omitempty"`
	// PCEOpen Tx
	PceOpenTx uint32 `protobuf:"varint,75,opt,name=pce_open_tx,json=pceOpenTx" json:"pce_open_tx,omitempty"`
	// PCEOpen Rx
	PceOpenRx uint32 `protobuf:"varint,76,opt,name=pce_open_rx,json=pceOpenRx" json:"pce_open_rx,omitempty"`
	// PCERpt Rx
	PceRptRx uint32 `protobuf:"varint,77,opt,name=pce_rpt_rx,json=pceRptRx" json:"pce_rpt_rx,omitempty"`
	// PCERpt Tx
	PceRptTx uint32 `protobuf:"varint,78,opt,name=pce_rpt_tx,json=pceRptTx" json:"pce_rpt_tx,omitempty"`
	// PCEUpd Rx
	PceUpdRx uint32 `protobuf:"varint,79,opt,name=pce_upd_rx,json=pceUpdRx" json:"pce_upd_rx,omitempty"`
	// PCEUpd Tx
	PceUpdTx uint32 `protobuf:"varint,80,opt,name=pce_upd_tx,json=pceUpdTx" json:"pce_upd_tx,omitempty"`
	// PCEInit Rx
	PceInitRx uint32 `protobuf:"varint,81,opt,name=pce_init_rx,json=pceInitRx" json:"pce_init_rx,omitempty"`
	// PCEInit_Tx
	PceInitTx uint32 `protobuf:"varint,82,opt,name=pce_init_tx,json=pceInitTx" json:"pce_init_tx,omitempty"`
	// PCE Keepalive Tx
	PceKeepaliveTx uint64 `protobuf:"varint,83,opt,name=pce_keepalive_tx,json=pceKeepaliveTx" json:"pce_keepalive_tx,omitempty"`
	// PCE Keepalive Rx
	PceKeepaliveRx uint64 `protobuf:"varint,84,opt,name=pce_keepalive_rx,json=pceKeepaliveRx" json:"pce_keepalive_rx,omitempty"`
	// Mininum reply time from peer in ms
	ReqReplyMin uint64 `protobuf:"varint,85,opt,name=req_reply_min,json=reqReplyMin" json:"req_reply_min,omitempty"`
	// Maximum reply time from peer in ms
	ReqReplyMax uint64 `protobuf:"varint,86,opt,name=req_reply_max,json=reqReplyMax" json:"req_reply_max,omitempty"`
	// Average reply time from peer in ms
	ReqReplyAvg uint64 `protobuf:"varint,87,opt,name=req_reply_avg,json=reqReplyAvg" json:"req_reply_avg,omitempty"`
	// Request timeout count
	RequestTimeouts uint64 `protobuf:"varint,88,opt,name=request_timeouts,json=requestTimeouts" json:"request_timeouts,omitempty"`
	// Last sent PCEErr
	LastTxPceErr *PceerrBag `protobuf:"bytes,89,opt,name=last_tx_pce_err,json=lastTxPceErr" json:"last_tx_pce_err,omitempty"`
	// Last received PCEErr
	LastRxPceErr *PceerrBag `protobuf:"bytes,90,opt,name=last_rx_pce_err,json=lastRxPceErr" json:"last_rx_pce_err,omitempty"`
	// Local PCEP session ID
	LocalSid uint32 `protobuf:"varint,91,opt,name=local_sid,json=localSid" json:"local_sid,omitempty"`
	// Remote PCEP session ID
	RemoteSid uint32 `protobuf:"varint,92,opt,name=remote_sid,json=remoteSid" json:"remote_sid,omitempty"`
	// Minimum keepalive interval for the peer
	MinKeepaliveInterval uint32 `protobuf:"varint,93,opt,name=min_keepalive_interval,json=minKeepaliveInterval" json:"min_keepalive_interval,omitempty"`
	// Maximum dead interval for the peer
	MaxDeadInterval      uint32   `protobuf:"varint,94,opt,name=max_dead_interval,json=maxDeadInterval" json:"max_dead_interval,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PceNeighborBag) Reset()         { *m = PceNeighborBag{} }
func (m *PceNeighborBag) String() string { return proto.CompactTextString(m) }
func (*PceNeighborBag) ProtoMessage()    {}
func (*PceNeighborBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_pce_neighbor_bag_a1ef18e863da4ed6, []int{1}
}
func (m *PceNeighborBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PceNeighborBag.Unmarshal(m, b)
}
func (m *PceNeighborBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PceNeighborBag.Marshal(b, m, deterministic)
}
func (dst *PceNeighborBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PceNeighborBag.Merge(dst, src)
}
func (m *PceNeighborBag) XXX_Size() int {
	return xxx_messageInfo_PceNeighborBag.Size(m)
}
func (m *PceNeighborBag) XXX_DiscardUnknown() {
	xxx_messageInfo_PceNeighborBag.DiscardUnknown(m)
}

var xxx_messageInfo_PceNeighborBag proto.InternalMessageInfo

func (m *PceNeighborBag) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *PceNeighborBag) GetPceState() string {
	if m != nil {
		return m.PceState
	}
	return ""
}

func (m *PceNeighborBag) GetPrecedence() uint32 {
	if m != nil {
		return m.Precedence
	}
	return 0
}

func (m *PceNeighborBag) GetStateful() bool {
	if m != nil {
		return m.Stateful
	}
	return false
}

func (m *PceNeighborBag) GetCapabilityUpdate() bool {
	if m != nil {
		return m.CapabilityUpdate
	}
	return false
}

func (m *PceNeighborBag) GetCapabilityInstantiate() bool {
	if m != nil {
		return m.CapabilityInstantiate
	}
	return false
}

func (m *PceNeighborBag) GetCapabilitySegmentRouting() bool {
	if m != nil {
		return m.CapabilitySegmentRouting
	}
	return false
}

func (m *PceNeighborBag) GetTriggeredSyncCapability() bool {
	if m != nil {
		return m.TriggeredSyncCapability
	}
	return false
}

func (m *PceNeighborBag) GetCapabilityDbVersion() bool {
	if m != nil {
		return m.CapabilityDbVersion
	}
	return false
}

func (m *PceNeighborBag) GetDeltaSyncCapability() bool {
	if m != nil {
		return m.DeltaSyncCapability
	}
	return false
}

func (m *PceNeighborBag) GetPcepUpTime() uint32 {
	if m != nil {
		return m.PcepUpTime
	}
	return 0
}

func (m *PceNeighborBag) GetKeepalives() uint32 {
	if m != nil {
		return m.Keepalives
	}
	return 0
}

func (m *PceNeighborBag) GetCandidate() bool {
	if m != nil {
		return m.Candidate
	}
	return false
}

func (m *PceNeighborBag) GetStaticallyConfigured() bool {
	if m != nil {
		return m.StaticallyConfigured
	}
	return false
}

func (m *PceNeighborBag) GetMd5Enabled() bool {
	if m != nil {
		return m.Md5Enabled
	}
	return false
}

func (m *PceNeighborBag) GetKeychainEnabled() bool {
	if m != nil {
		return m.KeychainEnabled
	}
	return false
}

func (m *PceNeighborBag) GetIgPs() []*PcePeerIgpBag {
	if m != nil {
		return m.IgPs
	}
	return nil
}

func (m *PceNeighborBag) GetNegotiatedKeepalive() uint32 {
	if m != nil {
		return m.NegotiatedKeepalive
	}
	return 0
}

func (m *PceNeighborBag) GetNegotatedDeadTime() uint32 {
	if m != nil {
		return m.NegotatedDeadTime
	}
	return 0
}

func (m *PceNeighborBag) GetPceReqRx() uint32 {
	if m != nil {
		return m.PceReqRx
	}
	return 0
}

func (m *PceNeighborBag) GetPceReqTx() uint32 {
	if m != nil {
		return m.PceReqTx
	}
	return 0
}

func (m *PceNeighborBag) GetPceRepRx() uint32 {
	if m != nil {
		return m.PceRepRx
	}
	return 0
}

func (m *PceNeighborBag) GetPceRepTx() uint32 {
	if m != nil {
		return m.PceRepTx
	}
	return 0
}

func (m *PceNeighborBag) GetPceErrRx() uint32 {
	if m != nil {
		return m.PceErrRx
	}
	return 0
}

func (m *PceNeighborBag) GetPceErrTx() uint32 {
	if m != nil {
		return m.PceErrTx
	}
	return 0
}

func (m *PceNeighborBag) GetPceOpenTx() uint32 {
	if m != nil {
		return m.PceOpenTx
	}
	return 0
}

func (m *PceNeighborBag) GetPceOpenRx() uint32 {
	if m != nil {
		return m.PceOpenRx
	}
	return 0
}

func (m *PceNeighborBag) GetPceRptRx() uint32 {
	if m != nil {
		return m.PceRptRx
	}
	return 0
}

func (m *PceNeighborBag) GetPceRptTx() uint32 {
	if m != nil {
		return m.PceRptTx
	}
	return 0
}

func (m *PceNeighborBag) GetPceUpdRx() uint32 {
	if m != nil {
		return m.PceUpdRx
	}
	return 0
}

func (m *PceNeighborBag) GetPceUpdTx() uint32 {
	if m != nil {
		return m.PceUpdTx
	}
	return 0
}

func (m *PceNeighborBag) GetPceInitRx() uint32 {
	if m != nil {
		return m.PceInitRx
	}
	return 0
}

func (m *PceNeighborBag) GetPceInitTx() uint32 {
	if m != nil {
		return m.PceInitTx
	}
	return 0
}

func (m *PceNeighborBag) GetPceKeepaliveTx() uint64 {
	if m != nil {
		return m.PceKeepaliveTx
	}
	return 0
}

func (m *PceNeighborBag) GetPceKeepaliveRx() uint64 {
	if m != nil {
		return m.PceKeepaliveRx
	}
	return 0
}

func (m *PceNeighborBag) GetReqReplyMin() uint64 {
	if m != nil {
		return m.ReqReplyMin
	}
	return 0
}

func (m *PceNeighborBag) GetReqReplyMax() uint64 {
	if m != nil {
		return m.ReqReplyMax
	}
	return 0
}

func (m *PceNeighborBag) GetReqReplyAvg() uint64 {
	if m != nil {
		return m.ReqReplyAvg
	}
	return 0
}

func (m *PceNeighborBag) GetRequestTimeouts() uint64 {
	if m != nil {
		return m.RequestTimeouts
	}
	return 0
}

func (m *PceNeighborBag) GetLastTxPceErr() *PceerrBag {
	if m != nil {
		return m.LastTxPceErr
	}
	return nil
}

func (m *PceNeighborBag) GetLastRxPceErr() *PceerrBag {
	if m != nil {
		return m.LastRxPceErr
	}
	return nil
}

func (m *PceNeighborBag) GetLocalSid() uint32 {
	if m != nil {
		return m.LocalSid
	}
	return 0
}

func (m *PceNeighborBag) GetRemoteSid() uint32 {
	if m != nil {
		return m.RemoteSid
	}
	return 0
}

func (m *PceNeighborBag) GetMinKeepaliveInterval() uint32 {
	if m != nil {
		return m.MinKeepaliveInterval
	}
	return 0
}

func (m *PceNeighborBag) GetMaxDeadInterval() uint32 {
	if m != nil {
		return m.MaxDeadInterval
	}
	return 0
}

// PCE Error information
type PceerrBag struct {
	// PCE Error Type
	PceErrType uint32 `protobuf:"varint,1,opt,name=pce_err_type,json=pceErrType" json:"pce_err_type,omitempty"`
	// PCE Error Value
	PceErrValue uint32 `protobuf:"varint,2,opt,name=pce_err_value,json=pceErrValue" json:"pce_err_value,omitempty"`
	// Has Open object
	HasOpenObject bool `protobuf:"varint,3,opt,name=has_open_object,json=hasOpenObject" json:"has_open_object,omitempty"`
	// Open Version
	OpenVersion uint32 `protobuf:"varint,4,opt,name=open_version,json=openVersion" json:"open_version,omitempty"`
	// Open Keepalive (seconds)
	OpenKeepalive uint32 `protobuf:"varint,5,opt,name=open_keepalive,json=openKeepalive" json:"open_keepalive,omitempty"`
	// Open Deadtime (seconds)
	OpenDeadTime uint32 `protobuf:"varint,6,opt,name=open_dead_time,json=openDeadTime" json:"open_dead_time,omitempty"`
	// Has RP object
	HasRpObject bool `protobuf:"varint,7,opt,name=has_rp_object,json=hasRpObject" json:"has_rp_object,omitempty"`
	// RP request ID
	RpRequestId          uint32   `protobuf:"varint,8,opt,name=rp_request_id,json=rpRequestId" json:"rp_request_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PceerrBag) Reset()         { *m = PceerrBag{} }
func (m *PceerrBag) String() string { return proto.CompactTextString(m) }
func (*PceerrBag) ProtoMessage()    {}
func (*PceerrBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_pce_neighbor_bag_a1ef18e863da4ed6, []int{2}
}
func (m *PceerrBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PceerrBag.Unmarshal(m, b)
}
func (m *PceerrBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PceerrBag.Marshal(b, m, deterministic)
}
func (dst *PceerrBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PceerrBag.Merge(dst, src)
}
func (m *PceerrBag) XXX_Size() int {
	return xxx_messageInfo_PceerrBag.Size(m)
}
func (m *PceerrBag) XXX_DiscardUnknown() {
	xxx_messageInfo_PceerrBag.DiscardUnknown(m)
}

var xxx_messageInfo_PceerrBag proto.InternalMessageInfo

func (m *PceerrBag) GetPceErrType() uint32 {
	if m != nil {
		return m.PceErrType
	}
	return 0
}

func (m *PceerrBag) GetPceErrValue() uint32 {
	if m != nil {
		return m.PceErrValue
	}
	return 0
}

func (m *PceerrBag) GetHasOpenObject() bool {
	if m != nil {
		return m.HasOpenObject
	}
	return false
}

func (m *PceerrBag) GetOpenVersion() uint32 {
	if m != nil {
		return m.OpenVersion
	}
	return 0
}

func (m *PceerrBag) GetOpenKeepalive() uint32 {
	if m != nil {
		return m.OpenKeepalive
	}
	return 0
}

func (m *PceerrBag) GetOpenDeadTime() uint32 {
	if m != nil {
		return m.OpenDeadTime
	}
	return 0
}

func (m *PceerrBag) GetHasRpObject() bool {
	if m != nil {
		return m.HasRpObject
	}
	return false
}

func (m *PceerrBag) GetRpRequestId() uint32 {
	if m != nil {
		return m.RpRequestId
	}
	return 0
}

// PCE IGP information
type PcePeerIgpBag struct {
	// Type
	IgpType string `protobuf:"bytes,1,opt,name=igp_type,json=igpType" json:"igp_type,omitempty"`
	// Instance ID
	IgpInstanceId        string   `protobuf:"bytes,2,opt,name=igp_instance_id,json=igpInstanceId" json:"igp_instance_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PcePeerIgpBag) Reset()         { *m = PcePeerIgpBag{} }
func (m *PcePeerIgpBag) String() string { return proto.CompactTextString(m) }
func (*PcePeerIgpBag) ProtoMessage()    {}
func (*PcePeerIgpBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_pce_neighbor_bag_a1ef18e863da4ed6, []int{3}
}
func (m *PcePeerIgpBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PcePeerIgpBag.Unmarshal(m, b)
}
func (m *PcePeerIgpBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PcePeerIgpBag.Marshal(b, m, deterministic)
}
func (dst *PcePeerIgpBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PcePeerIgpBag.Merge(dst, src)
}
func (m *PcePeerIgpBag) XXX_Size() int {
	return xxx_messageInfo_PcePeerIgpBag.Size(m)
}
func (m *PcePeerIgpBag) XXX_DiscardUnknown() {
	xxx_messageInfo_PcePeerIgpBag.DiscardUnknown(m)
}

var xxx_messageInfo_PcePeerIgpBag proto.InternalMessageInfo

func (m *PcePeerIgpBag) GetIgpType() string {
	if m != nil {
		return m.IgpType
	}
	return ""
}

func (m *PcePeerIgpBag) GetIgpInstanceId() string {
	if m != nil {
		return m.IgpInstanceId
	}
	return ""
}

func init() {
	proto.RegisterType((*PceNeighborBag_KEYS)(nil), "cisco_ios_xr_mpls_te_oper.mpls_pce_stdby.peers.peer.pce_neighbor_bag_KEYS")
	proto.RegisterType((*PceNeighborBag)(nil), "cisco_ios_xr_mpls_te_oper.mpls_pce_stdby.peers.peer.pce_neighbor_bag")
	proto.RegisterType((*PceerrBag)(nil), "cisco_ios_xr_mpls_te_oper.mpls_pce_stdby.peers.peer.pceerr_bag")
	proto.RegisterType((*PcePeerIgpBag)(nil), "cisco_ios_xr_mpls_te_oper.mpls_pce_stdby.peers.peer.pce_peer_igp_bag")
}

func init() {
	proto.RegisterFile("pce_neighbor_bag.proto", fileDescriptor_pce_neighbor_bag_a1ef18e863da4ed6)
}

var fileDescriptor_pce_neighbor_bag_a1ef18e863da4ed6 = []byte{
	// 1073 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x96, 0xfb, 0x73, 0x1b, 0x35,
	0x10, 0xc7, 0xc7, 0x7d, 0xc6, 0x72, 0x53, 0xb7, 0x6a, 0x5a, 0xd4, 0x07, 0xc5, 0x78, 0xa0, 0x63,
	0x60, 0xc6, 0x33, 0x24, 0x0d, 0x8f, 0x52, 0x28, 0x21, 0x09, 0x60, 0x42, 0x49, 0x38, 0x3b, 0x81,
	0x96, 0x87, 0x46, 0x3e, 0x6d, 0x2e, 0xa2, 0xf7, 0x50, 0x74, 0xb2, 0xe7, 0xfc, 0x6f, 0xf1, 0x77,
	0xf1, 0x47, 0x30, 0x5a, 0xd9, 0x77, 0x67, 0x97, 0x9f, 0x3a, 0xfc, 0x92, 0xc9, 0x7d, 0x3f, 0xdf,
	0xbd, 0xdd, 0x91, 0x76, 0xd7, 0x47, 0xee, 0xe8, 0x10, 0x78, 0x0a, 0x2a, 0x3a, 0x1b, 0x67, 0x86,
	0x8f, 0x45, 0xd4, 0xd7, 0x26, 0xb3, 0x19, 0xdd, 0x0a, 0x55, 0x1e, 0x66, 0x5c, 0x65, 0x39, 0x2f,
	0x0c, 0x4f, 0x74, 0x9c, 0x73, 0x0b, 0x3c, 0xd3, 0x60, 0xfa, 0xf8, 0xe0, 0xc2, 0x72, 0x2b, 0xc7,
	0xb3, 0xbe, 0x06, 0x30, 0x39, 0xfe, 0xed, 0x3e, 0x21, 0xb7, 0x57, 0x5f, 0xc7, 0x0f, 0xf6, 0x5f,
	0x0c, 0xe9, 0xbb, 0xe4, 0x9a, 0x33, 0x70, 0x21, 0xa5, 0x81, 0x3c, 0x67, 0x8d, 0x4e, 0xa3, 0xd7,
	0x0c, 0x5a, 0x4e, 0xdb, 0xf1, 0x52, 0xf7, 0x9f, 0xeb, 0xe4, 0xc6, 0x6a, 0x30, 0xdd, 0x20, 0x97,
	0xc1, 0x98, 0xcc, 0xb0, 0x4d, 0x0c, 0xf0, 0x0f, 0xf4, 0x3e, 0x69, 0xfa, 0xf4, 0xc2, 0x02, 0xdb,
	0x42, 0xb2, 0xa6, 0x43, 0x18, 0xba, 0x67, 0xfa, 0x90, 0x10, 0x6d, 0x20, 0x04, 0x09, 0x69, 0x08,
	0xec, 0x71, 0xa7, 0xd1, 0x5b, 0x0f, 0x6a, 0x0a, 0xbd, 0x47, 0xd6, 0x30, 0xf0, 0x74, 0x12, 0xb3,
	0xed, 0x4e, 0xa3, 0xb7, 0x16, 0x94, 0xcf, 0xf4, 0x23, 0x72, 0x33, 0x14, 0x5a, 0x8c, 0x55, 0xac,
	0xec, 0x8c, 0x4f, 0xb4, 0x74, 0x09, 0x3e, 0x41, 0xd3, 0x8d, 0x0a, 0x1c, 0xa3, 0x4e, 0xb7, 0xc9,
	0x9d, 0x9a, 0x59, 0xa5, 0xb9, 0x15, 0xa9, 0x55, 0x2e, 0xe2, 0x53, 0x8c, 0xb8, 0x5d, 0xd1, 0x41,
	0x05, 0xe9, 0x53, 0x72, 0xaf, 0x16, 0x96, 0x43, 0x94, 0x40, 0x6a, 0xb9, 0xc9, 0x26, 0x56, 0xa5,
	0x11, 0xfb, 0x0c, 0x43, 0x59, 0xe5, 0x18, 0x7a, 0x43, 0xe0, 0x39, 0x7d, 0x42, 0xee, 0x5a, 0xa3,
	0xa2, 0x08, 0x0c, 0x48, 0x9e, 0xcf, 0xd2, 0x90, 0x57, 0x56, 0xf6, 0x39, 0x06, 0xbf, 0x55, 0x1a,
	0x86, 0xb3, 0x34, 0xdc, 0x2d, 0x31, 0xdd, 0x24, 0xb5, 0x92, 0xb8, 0x1c, 0xf3, 0x29, 0x98, 0x5c,
	0x65, 0x29, 0x7b, 0x82, 0x71, 0xb7, 0x2a, 0xb8, 0x37, 0x3e, 0xf1, 0xc8, 0xc5, 0x48, 0x88, 0xad,
	0x78, 0x2d, 0xd7, 0x17, 0x3e, 0x06, 0xe1, 0x4a, 0x9e, 0x0e, 0xb9, 0xa6, 0x43, 0xd0, 0x7c, 0xa2,
	0xb9, 0x55, 0x09, 0xb0, 0xa7, 0xf3, 0x3b, 0x08, 0x41, 0x1f, 0xeb, 0x91, 0x4a, 0xf0, 0x8e, 0x5e,
	0x01, 0x68, 0x11, 0xab, 0x29, 0xe4, 0xec, 0x4b, 0xcf, 0x2b, 0x85, 0x3e, 0x20, 0xcd, 0x50, 0xa4,
	0x52, 0xe1, 0xf9, 0x7f, 0x85, 0x99, 0x2a, 0x81, 0x6e, 0x91, 0xdb, 0xee, 0xc6, 0x54, 0x28, 0xe2,
	0x78, 0xc6, 0xc3, 0x2c, 0x3d, 0x55, 0xd1, 0xc4, 0x80, 0x64, 0xcf, 0xd0, 0xb9, 0x51, 0xc1, 0xdd,
	0x92, 0xd1, 0x77, 0x48, 0x2b, 0x91, 0xdb, 0x1c, 0x52, 0x31, 0x8e, 0x41, 0xb2, 0xaf, 0xd1, 0x4a,
	0x12, 0xb9, 0xbd, 0xef, 0x15, 0xfa, 0x01, 0xb9, 0xf1, 0x0a, 0x66, 0xe1, 0x99, 0x50, 0x69, 0xe9,
	0xda, 0x41, 0x57, 0x7b, 0xa1, 0x2f, 0xac, 0x2f, 0xc9, 0x65, 0x15, 0x71, 0x9d, 0xb3, 0x6f, 0x3a,
	0x17, 0x7b, 0xad, 0xcd, 0xfd, 0xfe, 0x1b, 0xcc, 0x4a, 0xdf, 0x89, 0x38, 0x13, 0x2a, 0xd2, 0xae,
	0xd7, 0x83, 0x4b, 0x2a, 0x3a, 0xca, 0xe9, 0xc7, 0x64, 0x23, 0x85, 0x28, 0xc3, 0x5e, 0x91, 0xbc,
	0x3c, 0x13, 0xb6, 0x8b, 0x87, 0x74, 0xab, 0x62, 0x07, 0x0b, 0x44, 0xfb, 0xc4, 0xcb, 0x18, 0x21,
	0x41, 0x48, 0x7f, 0xec, 0x7b, 0x18, 0x71, 0xb3, 0x44, 0x7b, 0x20, 0x24, 0x9e, 0xfe, 0x03, 0xe2,
	0xee, 0x82, 0x1b, 0x38, 0xe7, 0xa6, 0x60, 0xfb, 0x68, 0x73, 0xf3, 0x13, 0xc0, 0x79, 0x50, 0xd4,
	0xa9, 0x2d, 0xd8, 0xb7, 0x75, 0x3a, 0xaa, 0x51, 0xed, 0x62, 0xbf, 0xab, 0x51, 0x1d, 0x2c, 0x51,
	0x5b, 0xb0, 0xef, 0xeb, 0xb4, 0x8a, 0x05, 0x63, 0x5c, 0xec, 0xa0, 0xa4, 0xfb, 0xc6, 0x04, 0x4b,
	0xd4, 0x16, 0xec, 0x87, 0x3a, 0x1d, 0x15, 0xf4, 0x21, 0x69, 0x39, 0x9a, 0x69, 0x48, 0x1d, 0x3e,
	0x40, 0xec, 0xb6, 0xc0, 0xa1, 0x86, 0x74, 0x85, 0x9b, 0x82, 0xfd, 0xb8, 0xc4, 0x6b, 0x95, 0x69,
	0xeb, 0xf0, 0xf3, 0xaa, 0x32, 0x6d, 0x97, 0xa9, 0x2d, 0xd8, 0x4f, 0x75, 0x5a, 0xd5, 0x3d, 0xd1,
	0xd2, 0xc5, 0x1e, 0x96, 0xf4, 0x58, 0xcb, 0x60, 0x89, 0xda, 0x82, 0x1d, 0xd5, 0x69, 0x55, 0x97,
	0x4a, 0x15, 0x26, 0xfe, 0xb9, 0xac, 0x6b, 0x90, 0x2a, 0x97, 0xb9, 0xce, 0x6d, 0xc1, 0x82, 0x25,
	0x3e, 0x2a, 0x68, 0xcf, 0x2f, 0xc5, 0xb2, 0x0f, 0x9c, 0x69, 0xd8, 0x69, 0xf4, 0x2e, 0x05, 0xd7,
	0x75, 0x08, 0x65, 0x0f, 0xfc, 0x97, 0xd3, 0x14, 0x6c, 0xf4, 0xba, 0x33, 0x28, 0x68, 0x97, 0xac,
	0xe3, 0xdd, 0x83, 0x8e, 0x67, 0x3c, 0x51, 0x29, 0x3b, 0x46, 0x5b, 0xcb, 0xc0, 0x79, 0xe0, 0xb4,
	0xe7, 0x2a, 0x5d, 0xf1, 0x88, 0x82, 0x9d, 0xac, 0x78, 0xc4, 0xca, 0x7b, 0xc4, 0x34, 0x62, 0xbf,
	0x2c, 0x7b, 0x76, 0xa6, 0x91, 0x9b, 0x2a, 0x03, 0xe7, 0x13, 0xc8, 0x2d, 0x36, 0x65, 0x36, 0xb1,
	0x39, 0xfb, 0x15, 0x6d, 0xed, 0xb9, 0x3e, 0x9a, 0xcb, 0xf4, 0x94, 0xb4, 0x63, 0xe1, 0x7c, 0x05,
	0x9f, 0x37, 0x02, 0x7b, 0xd1, 0x69, 0xf4, 0x5a, 0x9b, 0xcf, 0xde, 0x74, 0xbe, 0x5c, 0x2f, 0xb9,
	0xc9, 0xba, 0xe6, 0xde, 0x3b, 0x2a, 0x8e, 0xb0, 0x99, 0xca, 0x3c, 0xa6, 0xca, 0xf3, 0xf2, 0x7f,
	0xcc, 0x13, 0x2c, 0xf2, 0xdc, 0x27, 0xcd, 0x38, 0x0b, 0x45, 0xcc, 0x73, 0x25, 0xd9, 0x6f, 0xbe,
	0x2f, 0x50, 0x18, 0x2a, 0x49, 0xdf, 0x26, 0xc4, 0x40, 0x92, 0x59, 0x40, 0xfa, 0xbb, 0xbf, 0x76,
	0xaf, 0x38, 0xfc, 0x98, 0xdc, 0x49, 0x54, 0x5a, 0xbb, 0x4c, 0x95, 0x5a, 0x30, 0x53, 0x11, 0xb3,
	0x3f, 0xd0, 0xba, 0x91, 0xa8, 0xb4, 0xbc, 0xd2, 0xc1, 0x9c, 0xd1, 0x0f, 0xc9, 0xcd, 0x44, 0x14,
	0x7e, 0x05, 0x94, 0x01, 0x7f, 0x62, 0x40, 0x3b, 0x11, 0x85, 0x5b, 0x00, 0x0b, 0x6f, 0xf7, 0xef,
	0x0b, 0xd8, 0xb7, 0xf3, 0xd2, 0xe7, 0x3b, 0xdb, 0x4f, 0xdf, 0x4c, 0x03, 0xfe, 0x40, 0xfb, 0x9d,
	0xed, 0xe6, 0x6f, 0xa6, 0xc1, 0xdd, 0xf6, 0xc2, 0x31, 0x15, 0xf1, 0x04, 0xd8, 0x05, 0xb4, 0xb4,
	0xbc, 0xe5, 0xc4, 0x49, 0xf4, 0x11, 0x69, 0x9f, 0x89, 0xdc, 0x4f, 0x61, 0x36, 0xfe, 0x0b, 0x42,
	0xcb, 0x2e, 0xe2, 0x0a, 0x5d, 0x3f, 0x13, 0xb9, 0x9b, 0xc4, 0x43, 0x14, 0xdd, 0xe7, 0x00, 0x7a,
	0x16, 0x3f, 0x40, 0x97, 0xfc, 0xab, 0x9c, 0xb6, 0xf8, 0xe1, 0x79, 0x9f, 0x5c, 0x47, 0x4b, 0xb5,
	0x01, 0x2f, 0xa3, 0x69, 0xdd, 0xa9, 0xd5, 0xee, 0x7b, 0x6f, 0x6e, 0xab, 0xd6, 0xde, 0x15, 0xb4,
	0xe1, 0xfb, 0xcb, 0x8d, 0xd7, 0x25, 0xae, 0x00, 0x6e, 0xf4, 0xa2, 0xaa, 0xab, 0x58, 0x55, 0xeb,
	0x4c, 0xe4, 0x81, 0x9e, 0xd7, 0xe4, 0xba, 0x59, 0xf3, 0x45, 0xb3, 0x2a, 0xc9, 0xd6, 0x7c, 0x51,
	0x46, 0x07, 0x5e, 0x1b, 0xc8, 0xee, 0xb1, 0x9f, 0xb1, 0xfa, 0xda, 0xa6, 0x77, 0xc9, 0x9a, 0xfb,
	0xb7, 0x3c, 0xb5, 0x66, 0x70, 0x55, 0x45, 0x1a, 0x8f, 0xec, 0x11, 0x69, 0x3b, 0xe4, 0x3f, 0x0d,
	0xdc, 0x94, 0x4b, 0x3c, 0xb4, 0x66, 0xb0, 0xae, 0x22, 0x3d, 0x98, 0xab, 0x03, 0x39, 0xbe, 0x82,
	0x9f, 0x5c, 0x5b, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x78, 0xe1, 0xa1, 0x5f, 0x8c, 0x09, 0x00,
	0x00,
}
