// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mpls_te_attribute_set.proto

package cisco_ios_xr_mpls_te_oper_mpls_te_attribute_sets_attribute_set

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// TE Attribute Set
type MplsTeAttributeSet_KEYS struct {
	AttributeSetType     string   `protobuf:"bytes,1,opt,name=attribute_set_type,json=attributeSetType" json:"attribute_set_type,omitempty"`
	AttributeSetName     string   `protobuf:"bytes,2,opt,name=attribute_set_name,json=attributeSetName" json:"attribute_set_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeAttributeSet_KEYS) Reset()         { *m = MplsTeAttributeSet_KEYS{} }
func (m *MplsTeAttributeSet_KEYS) String() string { return proto.CompactTextString(m) }
func (*MplsTeAttributeSet_KEYS) ProtoMessage()    {}
func (*MplsTeAttributeSet_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_attribute_set_ceeb336d731c993d, []int{0}
}
func (m *MplsTeAttributeSet_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeAttributeSet_KEYS.Unmarshal(m, b)
}
func (m *MplsTeAttributeSet_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeAttributeSet_KEYS.Marshal(b, m, deterministic)
}
func (dst *MplsTeAttributeSet_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeAttributeSet_KEYS.Merge(dst, src)
}
func (m *MplsTeAttributeSet_KEYS) XXX_Size() int {
	return xxx_messageInfo_MplsTeAttributeSet_KEYS.Size(m)
}
func (m *MplsTeAttributeSet_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeAttributeSet_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeAttributeSet_KEYS proto.InternalMessageInfo

func (m *MplsTeAttributeSet_KEYS) GetAttributeSetType() string {
	if m != nil {
		return m.AttributeSetType
	}
	return ""
}

func (m *MplsTeAttributeSet_KEYS) GetAttributeSetName() string {
	if m != nil {
		return m.AttributeSetName
	}
	return ""
}

type MplsTeAttributeSet struct {
	// Attribute Set Name
	TunnelAttributeSetName string `protobuf:"bytes,50,opt,name=tunnel_attribute_set_name,json=tunnelAttributeSetName" json:"tunnel_attribute_set_name,omitempty"`
	// Attribute Set name CRC32 value
	TunnelAttributeSetNameCrc32 uint32 `protobuf:"varint,51,opt,name=tunnel_attribute_set_name_crc32,json=tunnelAttributeSetNameCrc32" json:"tunnel_attribute_set_name_crc32,omitempty"`
	// Union of Attribute Sets
	AttributeSetUnion    *MplsTeAttributeSetUnion `protobuf:"bytes,52,opt,name=attribute_set_union,json=attributeSetUnion" json:"attribute_set_union,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *MplsTeAttributeSet) Reset()         { *m = MplsTeAttributeSet{} }
func (m *MplsTeAttributeSet) String() string { return proto.CompactTextString(m) }
func (*MplsTeAttributeSet) ProtoMessage()    {}
func (*MplsTeAttributeSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_attribute_set_ceeb336d731c993d, []int{1}
}
func (m *MplsTeAttributeSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeAttributeSet.Unmarshal(m, b)
}
func (m *MplsTeAttributeSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeAttributeSet.Marshal(b, m, deterministic)
}
func (dst *MplsTeAttributeSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeAttributeSet.Merge(dst, src)
}
func (m *MplsTeAttributeSet) XXX_Size() int {
	return xxx_messageInfo_MplsTeAttributeSet.Size(m)
}
func (m *MplsTeAttributeSet) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeAttributeSet.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeAttributeSet proto.InternalMessageInfo

func (m *MplsTeAttributeSet) GetTunnelAttributeSetName() string {
	if m != nil {
		return m.TunnelAttributeSetName
	}
	return ""
}

func (m *MplsTeAttributeSet) GetTunnelAttributeSetNameCrc32() uint32 {
	if m != nil {
		return m.TunnelAttributeSetNameCrc32
	}
	return 0
}

func (m *MplsTeAttributeSet) GetAttributeSetUnion() *MplsTeAttributeSetUnion {
	if m != nil {
		return m.AttributeSetUnion
	}
	return nil
}

// C-type-specific LSP FEC data
type TeLspFecCtypeDataT struct {
	FecCType string `protobuf:"bytes,1,opt,name=fec_c_type,json=fecCType" json:"fec_c_type,omitempty"`
	// P2P LSP destination
	P2PLspDestination string `protobuf:"bytes,2,opt,name=p2_p_lsp_destination,json=p2PLspDestination" json:"p2_p_lsp_destination,omitempty"`
	// P2MP ID
	FecDestinationP2MpId uint32   `protobuf:"varint,3,opt,name=fec_destination_p2_mp_id,json=fecDestinationP2MpId" json:"fec_destination_p2_mp_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeLspFecCtypeDataT) Reset()         { *m = TeLspFecCtypeDataT{} }
func (m *TeLspFecCtypeDataT) String() string { return proto.CompactTextString(m) }
func (*TeLspFecCtypeDataT) ProtoMessage()    {}
func (*TeLspFecCtypeDataT) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_attribute_set_ceeb336d731c993d, []int{2}
}
func (m *TeLspFecCtypeDataT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeLspFecCtypeDataT.Unmarshal(m, b)
}
func (m *TeLspFecCtypeDataT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeLspFecCtypeDataT.Marshal(b, m, deterministic)
}
func (dst *TeLspFecCtypeDataT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeLspFecCtypeDataT.Merge(dst, src)
}
func (m *TeLspFecCtypeDataT) XXX_Size() int {
	return xxx_messageInfo_TeLspFecCtypeDataT.Size(m)
}
func (m *TeLspFecCtypeDataT) XXX_DiscardUnknown() {
	xxx_messageInfo_TeLspFecCtypeDataT.DiscardUnknown(m)
}

var xxx_messageInfo_TeLspFecCtypeDataT proto.InternalMessageInfo

func (m *TeLspFecCtypeDataT) GetFecCType() string {
	if m != nil {
		return m.FecCType
	}
	return ""
}

func (m *TeLspFecCtypeDataT) GetP2PLspDestination() string {
	if m != nil {
		return m.P2PLspDestination
	}
	return ""
}

func (m *TeLspFecCtypeDataT) GetFecDestinationP2MpId() uint32 {
	if m != nil {
		return m.FecDestinationP2MpId
	}
	return 0
}

// A LSP FEC
type TeLspFecT struct {
	// LSP ID
	FecLspId uint32 `protobuf:"varint,1,opt,name=fec_lsp_id,json=fecLspId" json:"fec_lsp_id,omitempty"`
	// Tunnel ID
	FecTunnelId uint32 `protobuf:"varint,2,opt,name=fec_tunnel_id,json=fecTunnelId" json:"fec_tunnel_id,omitempty"`
	// Extended tunnel ID
	FecExtendedTunnelId string `protobuf:"bytes,3,opt,name=fec_extended_tunnel_id,json=fecExtendedTunnelId" json:"fec_extended_tunnel_id,omitempty"`
	// Tunnel source address
	FecSource string `protobuf:"bytes,4,opt,name=fec_source,json=fecSource" json:"fec_source,omitempty"`
	// Destination or P2MP ID
	FecDestinationInfo *TeLspFecCtypeDataT `protobuf:"bytes,5,opt,name=fec_destination_info,json=fecDestinationInfo" json:"fec_destination_info,omitempty"`
	// VRF; currently only for GMPLS tunnels
	FecVrf               string   `protobuf:"bytes,6,opt,name=fec_vrf,json=fecVrf" json:"fec_vrf,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeLspFecT) Reset()         { *m = TeLspFecT{} }
func (m *TeLspFecT) String() string { return proto.CompactTextString(m) }
func (*TeLspFecT) ProtoMessage()    {}
func (*TeLspFecT) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_attribute_set_ceeb336d731c993d, []int{3}
}
func (m *TeLspFecT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeLspFecT.Unmarshal(m, b)
}
func (m *TeLspFecT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeLspFecT.Marshal(b, m, deterministic)
}
func (dst *TeLspFecT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeLspFecT.Merge(dst, src)
}
func (m *TeLspFecT) XXX_Size() int {
	return xxx_messageInfo_TeLspFecT.Size(m)
}
func (m *TeLspFecT) XXX_DiscardUnknown() {
	xxx_messageInfo_TeLspFecT.DiscardUnknown(m)
}

var xxx_messageInfo_TeLspFecT proto.InternalMessageInfo

func (m *TeLspFecT) GetFecLspId() uint32 {
	if m != nil {
		return m.FecLspId
	}
	return 0
}

func (m *TeLspFecT) GetFecTunnelId() uint32 {
	if m != nil {
		return m.FecTunnelId
	}
	return 0
}

func (m *TeLspFecT) GetFecExtendedTunnelId() string {
	if m != nil {
		return m.FecExtendedTunnelId
	}
	return ""
}

func (m *TeLspFecT) GetFecSource() string {
	if m != nil {
		return m.FecSource
	}
	return ""
}

func (m *TeLspFecT) GetFecDestinationInfo() *TeLspFecCtypeDataT {
	if m != nil {
		return m.FecDestinationInfo
	}
	return nil
}

func (m *TeLspFecT) GetFecVrf() string {
	if m != nil {
		return m.FecVrf
	}
	return ""
}

// Affinity name constraints
type AffinityNameBag struct {
	// Constraint type
	ConstraintType uint32 `protobuf:"varint,1,opt,name=constraint_type,json=constraintType" json:"constraint_type,omitempty"`
	// Deprecated
	ConstraintValue uint32 `protobuf:"varint,2,opt,name=constraint_value,json=constraintValue" json:"constraint_value,omitempty"`
	// Deprecated
	ForwardRefValue uint32 `protobuf:"varint,3,opt,name=forward_ref_value,json=forwardRefValue" json:"forward_ref_value,omitempty"`
	// Constraint value
	ConstraintExtendedValue []uint32 `protobuf:"varint,4,rep,packed,name=constraint_extended_value,json=constraintExtendedValue" json:"constraint_extended_value,omitempty"`
	// Reference bits for undefined affinity names
	ExtendedForwardRefValue []uint32 `protobuf:"varint,5,rep,packed,name=extended_forward_ref_value,json=extendedForwardRefValue" json:"extended_forward_ref_value,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *AffinityNameBag) Reset()         { *m = AffinityNameBag{} }
func (m *AffinityNameBag) String() string { return proto.CompactTextString(m) }
func (*AffinityNameBag) ProtoMessage()    {}
func (*AffinityNameBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_attribute_set_ceeb336d731c993d, []int{4}
}
func (m *AffinityNameBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AffinityNameBag.Unmarshal(m, b)
}
func (m *AffinityNameBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AffinityNameBag.Marshal(b, m, deterministic)
}
func (dst *AffinityNameBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AffinityNameBag.Merge(dst, src)
}
func (m *AffinityNameBag) XXX_Size() int {
	return xxx_messageInfo_AffinityNameBag.Size(m)
}
func (m *AffinityNameBag) XXX_DiscardUnknown() {
	xxx_messageInfo_AffinityNameBag.DiscardUnknown(m)
}

var xxx_messageInfo_AffinityNameBag proto.InternalMessageInfo

func (m *AffinityNameBag) GetConstraintType() uint32 {
	if m != nil {
		return m.ConstraintType
	}
	return 0
}

func (m *AffinityNameBag) GetConstraintValue() uint32 {
	if m != nil {
		return m.ConstraintValue
	}
	return 0
}

func (m *AffinityNameBag) GetForwardRefValue() uint32 {
	if m != nil {
		return m.ForwardRefValue
	}
	return 0
}

func (m *AffinityNameBag) GetConstraintExtendedValue() []uint32 {
	if m != nil {
		return m.ConstraintExtendedValue
	}
	return nil
}

func (m *AffinityNameBag) GetExtendedForwardRefValue() []uint32 {
	if m != nil {
		return m.ExtendedForwardRefValue
	}
	return nil
}

// MPLS TE tunnel Affinity information
type MplsTeTunnelsAffinityInfo struct {
	// The affinity bits (colors)
	AffinityBits uint32 `protobuf:"varint,1,opt,name=affinity_bits,json=affinityBits" json:"affinity_bits,omitempty"`
	// The affinity mask (colors)
	AffinityMask uint32 `protobuf:"varint,2,opt,name=affinity_mask,json=affinityMask" json:"affinity_mask,omitempty"`
	// Array of name based constratints currently applied to the tunnel
	NamedAffinities      []*AffinityNameBag `protobuf:"bytes,3,rep,name=named_affinities,json=namedAffinities" json:"named_affinities,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *MplsTeTunnelsAffinityInfo) Reset()         { *m = MplsTeTunnelsAffinityInfo{} }
func (m *MplsTeTunnelsAffinityInfo) String() string { return proto.CompactTextString(m) }
func (*MplsTeTunnelsAffinityInfo) ProtoMessage()    {}
func (*MplsTeTunnelsAffinityInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_attribute_set_ceeb336d731c993d, []int{5}
}
func (m *MplsTeTunnelsAffinityInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeTunnelsAffinityInfo.Unmarshal(m, b)
}
func (m *MplsTeTunnelsAffinityInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeTunnelsAffinityInfo.Marshal(b, m, deterministic)
}
func (dst *MplsTeTunnelsAffinityInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeTunnelsAffinityInfo.Merge(dst, src)
}
func (m *MplsTeTunnelsAffinityInfo) XXX_Size() int {
	return xxx_messageInfo_MplsTeTunnelsAffinityInfo.Size(m)
}
func (m *MplsTeTunnelsAffinityInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeTunnelsAffinityInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeTunnelsAffinityInfo proto.InternalMessageInfo

func (m *MplsTeTunnelsAffinityInfo) GetAffinityBits() uint32 {
	if m != nil {
		return m.AffinityBits
	}
	return 0
}

func (m *MplsTeTunnelsAffinityInfo) GetAffinityMask() uint32 {
	if m != nil {
		return m.AffinityMask
	}
	return 0
}

func (m *MplsTeTunnelsAffinityInfo) GetNamedAffinities() []*AffinityNameBag {
	if m != nil {
		return m.NamedAffinities
	}
	return nil
}

// XRO IPv4 sub-object
type TeXroSubobjIpv4 struct {
	// IPv4 address
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	// Prefix length
	PrefixLen uint32 `protobuf:"varint,2,opt,name=prefix_len,json=prefixLen" json:"prefix_len,omitempty"`
	// Attribute
	Attribute string `protobuf:"bytes,3,opt,name=attribute" json:"attribute,omitempty"`
	// Exclusion Type
	ExclusionType        string   `protobuf:"bytes,4,opt,name=exclusion_type,json=exclusionType" json:"exclusion_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeXroSubobjIpv4) Reset()         { *m = TeXroSubobjIpv4{} }
func (m *TeXroSubobjIpv4) String() string { return proto.CompactTextString(m) }
func (*TeXroSubobjIpv4) ProtoMessage()    {}
func (*TeXroSubobjIpv4) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_attribute_set_ceeb336d731c993d, []int{6}
}
func (m *TeXroSubobjIpv4) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeXroSubobjIpv4.Unmarshal(m, b)
}
func (m *TeXroSubobjIpv4) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeXroSubobjIpv4.Marshal(b, m, deterministic)
}
func (dst *TeXroSubobjIpv4) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeXroSubobjIpv4.Merge(dst, src)
}
func (m *TeXroSubobjIpv4) XXX_Size() int {
	return xxx_messageInfo_TeXroSubobjIpv4.Size(m)
}
func (m *TeXroSubobjIpv4) XXX_DiscardUnknown() {
	xxx_messageInfo_TeXroSubobjIpv4.DiscardUnknown(m)
}

var xxx_messageInfo_TeXroSubobjIpv4 proto.InternalMessageInfo

func (m *TeXroSubobjIpv4) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *TeXroSubobjIpv4) GetPrefixLen() uint32 {
	if m != nil {
		return m.PrefixLen
	}
	return 0
}

func (m *TeXroSubobjIpv4) GetAttribute() string {
	if m != nil {
		return m.Attribute
	}
	return ""
}

func (m *TeXroSubobjIpv4) GetExclusionType() string {
	if m != nil {
		return m.ExclusionType
	}
	return ""
}

// XRO IPv6 sub-object
type TeXroSubobjIpv6 struct {
	// IPv6 address
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	// Prefix length
	PrefixLen uint32 `protobuf:"varint,2,opt,name=prefix_len,json=prefixLen" json:"prefix_len,omitempty"`
	// Attribute
	Attribute string `protobuf:"bytes,3,opt,name=attribute" json:"attribute,omitempty"`
	// Exclusion Type
	ExclusionType        string   `protobuf:"bytes,4,opt,name=exclusion_type,json=exclusionType" json:"exclusion_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeXroSubobjIpv6) Reset()         { *m = TeXroSubobjIpv6{} }
func (m *TeXroSubobjIpv6) String() string { return proto.CompactTextString(m) }
func (*TeXroSubobjIpv6) ProtoMessage()    {}
func (*TeXroSubobjIpv6) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_attribute_set_ceeb336d731c993d, []int{7}
}
func (m *TeXroSubobjIpv6) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeXroSubobjIpv6.Unmarshal(m, b)
}
func (m *TeXroSubobjIpv6) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeXroSubobjIpv6.Marshal(b, m, deterministic)
}
func (dst *TeXroSubobjIpv6) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeXroSubobjIpv6.Merge(dst, src)
}
func (m *TeXroSubobjIpv6) XXX_Size() int {
	return xxx_messageInfo_TeXroSubobjIpv6.Size(m)
}
func (m *TeXroSubobjIpv6) XXX_DiscardUnknown() {
	xxx_messageInfo_TeXroSubobjIpv6.DiscardUnknown(m)
}

var xxx_messageInfo_TeXroSubobjIpv6 proto.InternalMessageInfo

func (m *TeXroSubobjIpv6) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *TeXroSubobjIpv6) GetPrefixLen() uint32 {
	if m != nil {
		return m.PrefixLen
	}
	return 0
}

func (m *TeXroSubobjIpv6) GetAttribute() string {
	if m != nil {
		return m.Attribute
	}
	return ""
}

func (m *TeXroSubobjIpv6) GetExclusionType() string {
	if m != nil {
		return m.ExclusionType
	}
	return ""
}

// XRO unnumbered sub-object
type TeXroSubobjUnnum struct {
	// TE router-id
	TeRouterId string `protobuf:"bytes,1,opt,name=te_router_id,json=teRouterId" json:"te_router_id,omitempty"`
	// Interface ID
	InterfaceId uint32 `protobuf:"varint,2,opt,name=interface_id,json=interfaceId" json:"interface_id,omitempty"`
	// Attribute
	Attribute string `protobuf:"bytes,3,opt,name=attribute" json:"attribute,omitempty"`
	// Exclusion Type
	ExclusionType        string   `protobuf:"bytes,4,opt,name=exclusion_type,json=exclusionType" json:"exclusion_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeXroSubobjUnnum) Reset()         { *m = TeXroSubobjUnnum{} }
func (m *TeXroSubobjUnnum) String() string { return proto.CompactTextString(m) }
func (*TeXroSubobjUnnum) ProtoMessage()    {}
func (*TeXroSubobjUnnum) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_attribute_set_ceeb336d731c993d, []int{8}
}
func (m *TeXroSubobjUnnum) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeXroSubobjUnnum.Unmarshal(m, b)
}
func (m *TeXroSubobjUnnum) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeXroSubobjUnnum.Marshal(b, m, deterministic)
}
func (dst *TeXroSubobjUnnum) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeXroSubobjUnnum.Merge(dst, src)
}
func (m *TeXroSubobjUnnum) XXX_Size() int {
	return xxx_messageInfo_TeXroSubobjUnnum.Size(m)
}
func (m *TeXroSubobjUnnum) XXX_DiscardUnknown() {
	xxx_messageInfo_TeXroSubobjUnnum.DiscardUnknown(m)
}

var xxx_messageInfo_TeXroSubobjUnnum proto.InternalMessageInfo

func (m *TeXroSubobjUnnum) GetTeRouterId() string {
	if m != nil {
		return m.TeRouterId
	}
	return ""
}

func (m *TeXroSubobjUnnum) GetInterfaceId() uint32 {
	if m != nil {
		return m.InterfaceId
	}
	return 0
}

func (m *TeXroSubobjUnnum) GetAttribute() string {
	if m != nil {
		return m.Attribute
	}
	return ""
}

func (m *TeXroSubobjUnnum) GetExclusionType() string {
	if m != nil {
		return m.ExclusionType
	}
	return ""
}

// XRO AS sub-object
type TeXroSubobjAs struct {
	// Autonomous System number
	AsNumber             uint32   `protobuf:"varint,1,opt,name=as_number,json=asNumber" json:"as_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeXroSubobjAs) Reset()         { *m = TeXroSubobjAs{} }
func (m *TeXroSubobjAs) String() string { return proto.CompactTextString(m) }
func (*TeXroSubobjAs) ProtoMessage()    {}
func (*TeXroSubobjAs) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_attribute_set_ceeb336d731c993d, []int{9}
}
func (m *TeXroSubobjAs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeXroSubobjAs.Unmarshal(m, b)
}
func (m *TeXroSubobjAs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeXroSubobjAs.Marshal(b, m, deterministic)
}
func (dst *TeXroSubobjAs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeXroSubobjAs.Merge(dst, src)
}
func (m *TeXroSubobjAs) XXX_Size() int {
	return xxx_messageInfo_TeXroSubobjAs.Size(m)
}
func (m *TeXroSubobjAs) XXX_DiscardUnknown() {
	xxx_messageInfo_TeXroSubobjAs.DiscardUnknown(m)
}

var xxx_messageInfo_TeXroSubobjAs proto.InternalMessageInfo

func (m *TeXroSubobjAs) GetAsNumber() uint32 {
	if m != nil {
		return m.AsNumber
	}
	return 0
}

// XRO SRLG sub-object
type TeXroSubobjSrlg struct {
	// SRLG ID
	SrlgId uint32 `protobuf:"varint,1,opt,name=srlg_id,json=srlgId" json:"srlg_id,omitempty"`
	// Exclusion Type
	ExclusionType        string   `protobuf:"bytes,2,opt,name=exclusion_type,json=exclusionType" json:"exclusion_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeXroSubobjSrlg) Reset()         { *m = TeXroSubobjSrlg{} }
func (m *TeXroSubobjSrlg) String() string { return proto.CompactTextString(m) }
func (*TeXroSubobjSrlg) ProtoMessage()    {}
func (*TeXroSubobjSrlg) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_attribute_set_ceeb336d731c993d, []int{10}
}
func (m *TeXroSubobjSrlg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeXroSubobjSrlg.Unmarshal(m, b)
}
func (m *TeXroSubobjSrlg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeXroSubobjSrlg.Marshal(b, m, deterministic)
}
func (dst *TeXroSubobjSrlg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeXroSubobjSrlg.Merge(dst, src)
}
func (m *TeXroSubobjSrlg) XXX_Size() int {
	return xxx_messageInfo_TeXroSubobjSrlg.Size(m)
}
func (m *TeXroSubobjSrlg) XXX_DiscardUnknown() {
	xxx_messageInfo_TeXroSubobjSrlg.DiscardUnknown(m)
}

var xxx_messageInfo_TeXroSubobjSrlg proto.InternalMessageInfo

func (m *TeXroSubobjSrlg) GetSrlgId() uint32 {
	if m != nil {
		return m.SrlgId
	}
	return 0
}

func (m *TeXroSubobjSrlg) GetExclusionType() string {
	if m != nil {
		return m.ExclusionType
	}
	return ""
}

// XRO point-to-point LSP sub-object
type TeXroSubobjP2PLsp struct {
	// LSP FEC
	Fec *TeLspFecT `protobuf:"bytes,1,opt,name=fec" json:"fec,omitempty"`
	// Flag to indicate whether or not the lsp-id in the FEC is to be ignored
	IgnoreLspId bool `protobuf:"varint,2,opt,name=ignore_lsp_id,json=ignoreLspId" json:"ignore_lsp_id,omitempty"`
	// Processing-node exception flag
	ProcessingNodeException bool `protobuf:"varint,3,opt,name=processing_node_exception,json=processingNodeException" json:"processing_node_exception,omitempty"`
	// Penultimate-node exception flag
	PenultimateNodeException bool `protobuf:"varint,4,opt,name=penultimate_node_exception,json=penultimateNodeException" json:"penultimate_node_exception,omitempty"`
	// Destination-node exception flag
	DestinationNodeException bool `protobuf:"varint,5,opt,name=destination_node_exception,json=destinationNodeException" json:"destination_node_exception,omitempty"`
	// Exclusion Type
	ExclusionType        string   `protobuf:"bytes,6,opt,name=exclusion_type,json=exclusionType" json:"exclusion_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeXroSubobjP2PLsp) Reset()         { *m = TeXroSubobjP2PLsp{} }
func (m *TeXroSubobjP2PLsp) String() string { return proto.CompactTextString(m) }
func (*TeXroSubobjP2PLsp) ProtoMessage()    {}
func (*TeXroSubobjP2PLsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_attribute_set_ceeb336d731c993d, []int{11}
}
func (m *TeXroSubobjP2PLsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeXroSubobjP2PLsp.Unmarshal(m, b)
}
func (m *TeXroSubobjP2PLsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeXroSubobjP2PLsp.Marshal(b, m, deterministic)
}
func (dst *TeXroSubobjP2PLsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeXroSubobjP2PLsp.Merge(dst, src)
}
func (m *TeXroSubobjP2PLsp) XXX_Size() int {
	return xxx_messageInfo_TeXroSubobjP2PLsp.Size(m)
}
func (m *TeXroSubobjP2PLsp) XXX_DiscardUnknown() {
	xxx_messageInfo_TeXroSubobjP2PLsp.DiscardUnknown(m)
}

var xxx_messageInfo_TeXroSubobjP2PLsp proto.InternalMessageInfo

func (m *TeXroSubobjP2PLsp) GetFec() *TeLspFecT {
	if m != nil {
		return m.Fec
	}
	return nil
}

func (m *TeXroSubobjP2PLsp) GetIgnoreLspId() bool {
	if m != nil {
		return m.IgnoreLspId
	}
	return false
}

func (m *TeXroSubobjP2PLsp) GetProcessingNodeException() bool {
	if m != nil {
		return m.ProcessingNodeException
	}
	return false
}

func (m *TeXroSubobjP2PLsp) GetPenultimateNodeException() bool {
	if m != nil {
		return m.PenultimateNodeException
	}
	return false
}

func (m *TeXroSubobjP2PLsp) GetDestinationNodeException() bool {
	if m != nil {
		return m.DestinationNodeException
	}
	return false
}

func (m *TeXroSubobjP2PLsp) GetExclusionType() string {
	if m != nil {
		return m.ExclusionType
	}
	return ""
}

// XRO sub-object union
type TeXroSubobj struct {
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// IPv4 sub-object
	Ipv4Subobject *TeXroSubobjIpv4 `protobuf:"bytes,2,opt,name=ipv4_subobject,json=ipv4Subobject" json:"ipv4_subobject,omitempty"`
	// IPv6 sub-object
	Ipv6Subobject *TeXroSubobjIpv6 `protobuf:"bytes,3,opt,name=ipv6_subobject,json=ipv6Subobject" json:"ipv6_subobject,omitempty"`
	// Unnumbered sub-object
	UnnumberedSubobject *TeXroSubobjUnnum `protobuf:"bytes,4,opt,name=unnumbered_subobject,json=unnumberedSubobject" json:"unnumbered_subobject,omitempty"`
	// AS sub-object
	AsSubobject *TeXroSubobjAs `protobuf:"bytes,5,opt,name=as_subobject,json=asSubobject" json:"as_subobject,omitempty"`
	// SRLG sub-object
	SrlgSubobject *TeXroSubobjSrlg `protobuf:"bytes,6,opt,name=srlg_subobject,json=srlgSubobject" json:"srlg_subobject,omitempty"`
	// P2P LSP sub-object
	LspSubobject         *TeXroSubobjP2PLsp `protobuf:"bytes,7,opt,name=lsp_subobject,json=lspSubobject" json:"lsp_subobject,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *TeXroSubobj) Reset()         { *m = TeXroSubobj{} }
func (m *TeXroSubobj) String() string { return proto.CompactTextString(m) }
func (*TeXroSubobj) ProtoMessage()    {}
func (*TeXroSubobj) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_attribute_set_ceeb336d731c993d, []int{12}
}
func (m *TeXroSubobj) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeXroSubobj.Unmarshal(m, b)
}
func (m *TeXroSubobj) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeXroSubobj.Marshal(b, m, deterministic)
}
func (dst *TeXroSubobj) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeXroSubobj.Merge(dst, src)
}
func (m *TeXroSubobj) XXX_Size() int {
	return xxx_messageInfo_TeXroSubobj.Size(m)
}
func (m *TeXroSubobj) XXX_DiscardUnknown() {
	xxx_messageInfo_TeXroSubobj.DiscardUnknown(m)
}

var xxx_messageInfo_TeXroSubobj proto.InternalMessageInfo

func (m *TeXroSubobj) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *TeXroSubobj) GetIpv4Subobject() *TeXroSubobjIpv4 {
	if m != nil {
		return m.Ipv4Subobject
	}
	return nil
}

func (m *TeXroSubobj) GetIpv6Subobject() *TeXroSubobjIpv6 {
	if m != nil {
		return m.Ipv6Subobject
	}
	return nil
}

func (m *TeXroSubobj) GetUnnumberedSubobject() *TeXroSubobjUnnum {
	if m != nil {
		return m.UnnumberedSubobject
	}
	return nil
}

func (m *TeXroSubobj) GetAsSubobject() *TeXroSubobjAs {
	if m != nil {
		return m.AsSubobject
	}
	return nil
}

func (m *TeXroSubobj) GetSrlgSubobject() *TeXroSubobjSrlg {
	if m != nil {
		return m.SrlgSubobject
	}
	return nil
}

func (m *TeXroSubobj) GetLspSubobject() *TeXroSubobjP2PLsp {
	if m != nil {
		return m.LspSubobject
	}
	return nil
}

// XRO object
type TeXro struct {
	// List of XRO sub-objects
	XroSubobjects []*TeXroSubobj `protobuf:"bytes,1,rep,name=xro_subobjects,json=xroSubobjects" json:"xro_subobjects,omitempty"`
	// Mutual Diversity Flag
	MutualDiversityFlag  bool     `protobuf:"varint,2,opt,name=mutual_diversity_flag,json=mutualDiversityFlag" json:"mutual_diversity_flag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeXro) Reset()         { *m = TeXro{} }
func (m *TeXro) String() string { return proto.CompactTextString(m) }
func (*TeXro) ProtoMessage()    {}
func (*TeXro) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_attribute_set_ceeb336d731c993d, []int{13}
}
func (m *TeXro) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeXro.Unmarshal(m, b)
}
func (m *TeXro) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeXro.Marshal(b, m, deterministic)
}
func (dst *TeXro) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeXro.Merge(dst, src)
}
func (m *TeXro) XXX_Size() int {
	return xxx_messageInfo_TeXro.Size(m)
}
func (m *TeXro) XXX_DiscardUnknown() {
	xxx_messageInfo_TeXro.DiscardUnknown(m)
}

var xxx_messageInfo_TeXro proto.InternalMessageInfo

func (m *TeXro) GetXroSubobjects() []*TeXroSubobj {
	if m != nil {
		return m.XroSubobjects
	}
	return nil
}

func (m *TeXro) GetMutualDiversityFlag() bool {
	if m != nil {
		return m.MutualDiversityFlag
	}
	return false
}

// Revert Schedule protection attribute set
type TeRevertSchT struct {
	// Schedule name identifier
	Schedulename []byte `protobuf:"bytes,1,opt,name=schedulename,proto3" json:"schedulename,omitempty"`
	// Schedule time for reversion
	ScheduleDate uint32 `protobuf:"varint,2,opt,name=schedule_date,json=scheduleDate" json:"schedule_date,omitempty"`
	// Schedule frequency for reversion
	ScheduleFrequency string `protobuf:"bytes,3,opt,name=schedule_frequency,json=scheduleFrequency" json:"schedule_frequency,omitempty"`
	// Duration for scheduled reversion
	Duration uint32 `protobuf:"varint,4,opt,name=duration" json:"duration,omitempty"`
	// Max tries for scheduled reversion
	MaxTries             uint32   `protobuf:"varint,5,opt,name=max_tries,json=maxTries" json:"max_tries,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeRevertSchT) Reset()         { *m = TeRevertSchT{} }
func (m *TeRevertSchT) String() string { return proto.CompactTextString(m) }
func (*TeRevertSchT) ProtoMessage()    {}
func (*TeRevertSchT) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_attribute_set_ceeb336d731c993d, []int{14}
}
func (m *TeRevertSchT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeRevertSchT.Unmarshal(m, b)
}
func (m *TeRevertSchT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeRevertSchT.Marshal(b, m, deterministic)
}
func (dst *TeRevertSchT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeRevertSchT.Merge(dst, src)
}
func (m *TeRevertSchT) XXX_Size() int {
	return xxx_messageInfo_TeRevertSchT.Size(m)
}
func (m *TeRevertSchT) XXX_DiscardUnknown() {
	xxx_messageInfo_TeRevertSchT.DiscardUnknown(m)
}

var xxx_messageInfo_TeRevertSchT proto.InternalMessageInfo

func (m *TeRevertSchT) GetSchedulename() []byte {
	if m != nil {
		return m.Schedulename
	}
	return nil
}

func (m *TeRevertSchT) GetScheduleDate() uint32 {
	if m != nil {
		return m.ScheduleDate
	}
	return 0
}

func (m *TeRevertSchT) GetScheduleFrequency() string {
	if m != nil {
		return m.ScheduleFrequency
	}
	return ""
}

func (m *TeRevertSchT) GetDuration() uint32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *TeRevertSchT) GetMaxTries() uint32 {
	if m != nil {
		return m.MaxTries
	}
	return 0
}

// TE Logging Attributes
type MplsTeLoggingAttributes struct {
	// LSP State logging: TRUE - enabled, FALSE - disabled
	LspState bool `protobuf:"varint,1,opt,name=lsp_state,json=lspState" json:"lsp_state,omitempty"`
	// S2L State logging: TRUE - enabled, FALSE - disabled
	S2LState bool `protobuf:"varint,2,opt,name=s2_l_state,json=s2LState" json:"s2_l_state,omitempty"`
	// LSP re-route logging: TRUE - enabled, FALSE - disabled
	LspReRoute bool `protobuf:"varint,3,opt,name=lsp_re_route,json=lspReRoute" json:"lsp_re_route,omitempty"`
	// LSP re-optimization logging: TRUE - enabled, FALSE - disabled
	LspReOpt bool `protobuf:"varint,4,opt,name=lsp_re_opt,json=lspReOpt" json:"lsp_re_opt,omitempty"`
	// LSP insufficient bandwidth logging: TRUE - enabled, FALSE - disabled
	LspInsufficientBw bool `protobuf:"varint,5,opt,name=lsp_insufficient_bw,json=lspInsufficientBw" json:"lsp_insufficient_bw,omitempty"`
	// LSP bandwidth change logging: TRUE - enabled, FALSE - disabled
	LspBandwidthChange bool `protobuf:"varint,6,opt,name=lsp_bandwidth_change,json=lspBandwidthChange" json:"lsp_bandwidth_change,omitempty"`
	// LSP pcalc failure logging: TRUE - enabled, FALSE - disabled
	LspPcalcFailureLoggingEnabled bool `protobuf:"varint,7,opt,name=lsp_pcalc_failure_logging_enabled,json=lspPcalcFailureLoggingEnabled" json:"lsp_pcalc_failure_logging_enabled,omitempty"`
	// All logging option: TRUE - enabled, FALSE - disabled
	AllLoggingEnabled    bool     `protobuf:"varint,8,opt,name=all_logging_enabled,json=allLoggingEnabled" json:"all_logging_enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeLoggingAttributes) Reset()         { *m = MplsTeLoggingAttributes{} }
func (m *MplsTeLoggingAttributes) String() string { return proto.CompactTextString(m) }
func (*MplsTeLoggingAttributes) ProtoMessage()    {}
func (*MplsTeLoggingAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_attribute_set_ceeb336d731c993d, []int{15}
}
func (m *MplsTeLoggingAttributes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeLoggingAttributes.Unmarshal(m, b)
}
func (m *MplsTeLoggingAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeLoggingAttributes.Marshal(b, m, deterministic)
}
func (dst *MplsTeLoggingAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeLoggingAttributes.Merge(dst, src)
}
func (m *MplsTeLoggingAttributes) XXX_Size() int {
	return xxx_messageInfo_MplsTeLoggingAttributes.Size(m)
}
func (m *MplsTeLoggingAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeLoggingAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeLoggingAttributes proto.InternalMessageInfo

func (m *MplsTeLoggingAttributes) GetLspState() bool {
	if m != nil {
		return m.LspState
	}
	return false
}

func (m *MplsTeLoggingAttributes) GetS2LState() bool {
	if m != nil {
		return m.S2LState
	}
	return false
}

func (m *MplsTeLoggingAttributes) GetLspReRoute() bool {
	if m != nil {
		return m.LspReRoute
	}
	return false
}

func (m *MplsTeLoggingAttributes) GetLspReOpt() bool {
	if m != nil {
		return m.LspReOpt
	}
	return false
}

func (m *MplsTeLoggingAttributes) GetLspInsufficientBw() bool {
	if m != nil {
		return m.LspInsufficientBw
	}
	return false
}

func (m *MplsTeLoggingAttributes) GetLspBandwidthChange() bool {
	if m != nil {
		return m.LspBandwidthChange
	}
	return false
}

func (m *MplsTeLoggingAttributes) GetLspPcalcFailureLoggingEnabled() bool {
	if m != nil {
		return m.LspPcalcFailureLoggingEnabled
	}
	return false
}

func (m *MplsTeLoggingAttributes) GetAllLoggingEnabled() bool {
	if m != nil {
		return m.AllLoggingEnabled
	}
	return false
}

// TE Auto-mesh Attribute Set
type MplsTeAttributeSetAutoMesh struct {
	// Bandwidth value in kbps
	ConfiguredBandwidth uint32 `protobuf:"varint,1,opt,name=configured_bandwidth,json=configuredBandwidth" json:"configured_bandwidth,omitempty"`
	// DSTE Class
	DsteClassType uint32 `protobuf:"varint,2,opt,name=dste_class_type,json=dsteClassType" json:"dste_class_type,omitempty"`
	// Is bandwidth configured
	IsBandwidthConfigured bool `protobuf:"varint,3,opt,name=is_bandwidth_configured,json=isBandwidthConfigured" json:"is_bandwidth_configured,omitempty"`
	// Setup priority
	SetupPriority uint32 `protobuf:"varint,4,opt,name=setup_priority,json=setupPriority" json:"setup_priority,omitempty"`
	// Hold priority
	HoldPriority uint32 `protobuf:"varint,5,opt,name=hold_priority,json=holdPriority" json:"hold_priority,omitempty"`
	// Is priority configured
	IsPriorityConfigured bool `protobuf:"varint,6,opt,name=is_priority_configured,json=isPriorityConfigured" json:"is_priority_configured,omitempty"`
	// deprecated
	PolicyClass uint32 `protobuf:"varint,7,opt,name=policy_class,json=policyClass" json:"policy_class,omitempty"`
	// PBTS policy classes
	PolicyClasses []uint32 `protobuf:"varint,8,rep,packed,name=policy_classes,json=policyClasses" json:"policy_classes,omitempty"`
	// Is policy class configured
	IsPolicyclassConfigured bool `protobuf:"varint,9,opt,name=is_policyclass_configured,json=isPolicyclassConfigured" json:"is_policyclass_configured,omitempty"`
	// Forward class
	ForwardClass uint32 `protobuf:"varint,10,opt,name=forward_class,json=forwardClass" json:"forward_class,omitempty"`
	// Affinity
	Affinity *MplsTeTunnelsAffinityInfo `protobuf:"bytes,11,opt,name=affinity" json:"affinity,omitempty"`
	// Is affinity configured
	IsAffinityConfigured bool `protobuf:"varint,12,opt,name=is_affinity_configured,json=isAffinityConfigured" json:"is_affinity_configured,omitempty"`
	// Fast reroute
	FastReroute bool `protobuf:"varint,13,opt,name=fast_reroute,json=fastReroute" json:"fast_reroute,omitempty"`
	// FRR Node protection
	FrrNodeProtection bool `protobuf:"varint,14,opt,name=frr_node_protection,json=frrNodeProtection" json:"frr_node_protection,omitempty"`
	// FRR bandwidth protection
	FrrBandwidthProtection bool `protobuf:"varint,15,opt,name=frr_bandwidth_protection,json=frrBandwidthProtection" json:"frr_bandwidth_protection,omitempty"`
	// Record route
	RecordRoute bool `protobuf:"varint,16,opt,name=record_route,json=recordRoute" json:"record_route,omitempty"`
	// Auto bandwidth collect only
	AutoBandwidthCollect bool `protobuf:"varint,17,opt,name=auto_bandwidth_collect,json=autoBandwidthCollect" json:"auto_bandwidth_collect,omitempty"`
	// Announce auto route to IGP
	AutoRouteAnnounce bool `protobuf:"varint,18,opt,name=auto_route_announce,json=autoRouteAnnounce" json:"auto_route_announce,omitempty"`
	// Soft preemption is configured
	SoftPreemptionConfigured bool `protobuf:"varint,19,opt,name=soft_preemption_configured,json=softPreemptionConfigured" json:"soft_preemption_configured,omitempty"`
	// Logging attributes
	Logging *MplsTeLoggingAttributes `protobuf:"bytes,20,opt,name=logging" json:"logging,omitempty"`
	// IM bandwidth
	Bandwidth uint32 `protobuf:"varint,21,opt,name=bandwidth" json:"bandwidth,omitempty"`
	// Load-Share
	LoadShare uint32 `protobuf:"varint,22,opt,name=load_share,json=loadShare" json:"load_share,omitempty"`
	// Is Interface BW configured
	IsInterfaceBwConfigured bool `protobuf:"varint,23,opt,name=is_interface_bw_configured,json=isInterfaceBwConfigured" json:"is_interface_bw_configured,omitempty"`
	// Meshgroup ID
	MeshGroupId []uint32 `protobuf:"varint,24,rep,packed,name=mesh_group_id,json=meshGroupId" json:"mesh_group_id,omitempty"`
	// Tunnel ID
	TunnelId             []uint32 `protobuf:"varint,25,rep,packed,name=tunnel_id,json=tunnelId" json:"tunnel_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeAttributeSetAutoMesh) Reset()         { *m = MplsTeAttributeSetAutoMesh{} }
func (m *MplsTeAttributeSetAutoMesh) String() string { return proto.CompactTextString(m) }
func (*MplsTeAttributeSetAutoMesh) ProtoMessage()    {}
func (*MplsTeAttributeSetAutoMesh) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_attribute_set_ceeb336d731c993d, []int{16}
}
func (m *MplsTeAttributeSetAutoMesh) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeAttributeSetAutoMesh.Unmarshal(m, b)
}
func (m *MplsTeAttributeSetAutoMesh) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeAttributeSetAutoMesh.Marshal(b, m, deterministic)
}
func (dst *MplsTeAttributeSetAutoMesh) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeAttributeSetAutoMesh.Merge(dst, src)
}
func (m *MplsTeAttributeSetAutoMesh) XXX_Size() int {
	return xxx_messageInfo_MplsTeAttributeSetAutoMesh.Size(m)
}
func (m *MplsTeAttributeSetAutoMesh) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeAttributeSetAutoMesh.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeAttributeSetAutoMesh proto.InternalMessageInfo

func (m *MplsTeAttributeSetAutoMesh) GetConfiguredBandwidth() uint32 {
	if m != nil {
		return m.ConfiguredBandwidth
	}
	return 0
}

func (m *MplsTeAttributeSetAutoMesh) GetDsteClassType() uint32 {
	if m != nil {
		return m.DsteClassType
	}
	return 0
}

func (m *MplsTeAttributeSetAutoMesh) GetIsBandwidthConfigured() bool {
	if m != nil {
		return m.IsBandwidthConfigured
	}
	return false
}

func (m *MplsTeAttributeSetAutoMesh) GetSetupPriority() uint32 {
	if m != nil {
		return m.SetupPriority
	}
	return 0
}

func (m *MplsTeAttributeSetAutoMesh) GetHoldPriority() uint32 {
	if m != nil {
		return m.HoldPriority
	}
	return 0
}

func (m *MplsTeAttributeSetAutoMesh) GetIsPriorityConfigured() bool {
	if m != nil {
		return m.IsPriorityConfigured
	}
	return false
}

func (m *MplsTeAttributeSetAutoMesh) GetPolicyClass() uint32 {
	if m != nil {
		return m.PolicyClass
	}
	return 0
}

func (m *MplsTeAttributeSetAutoMesh) GetPolicyClasses() []uint32 {
	if m != nil {
		return m.PolicyClasses
	}
	return nil
}

func (m *MplsTeAttributeSetAutoMesh) GetIsPolicyclassConfigured() bool {
	if m != nil {
		return m.IsPolicyclassConfigured
	}
	return false
}

func (m *MplsTeAttributeSetAutoMesh) GetForwardClass() uint32 {
	if m != nil {
		return m.ForwardClass
	}
	return 0
}

func (m *MplsTeAttributeSetAutoMesh) GetAffinity() *MplsTeTunnelsAffinityInfo {
	if m != nil {
		return m.Affinity
	}
	return nil
}

func (m *MplsTeAttributeSetAutoMesh) GetIsAffinityConfigured() bool {
	if m != nil {
		return m.IsAffinityConfigured
	}
	return false
}

func (m *MplsTeAttributeSetAutoMesh) GetFastReroute() bool {
	if m != nil {
		return m.FastReroute
	}
	return false
}

func (m *MplsTeAttributeSetAutoMesh) GetFrrNodeProtection() bool {
	if m != nil {
		return m.FrrNodeProtection
	}
	return false
}

func (m *MplsTeAttributeSetAutoMesh) GetFrrBandwidthProtection() bool {
	if m != nil {
		return m.FrrBandwidthProtection
	}
	return false
}

func (m *MplsTeAttributeSetAutoMesh) GetRecordRoute() bool {
	if m != nil {
		return m.RecordRoute
	}
	return false
}

func (m *MplsTeAttributeSetAutoMesh) GetAutoBandwidthCollect() bool {
	if m != nil {
		return m.AutoBandwidthCollect
	}
	return false
}

func (m *MplsTeAttributeSetAutoMesh) GetAutoRouteAnnounce() bool {
	if m != nil {
		return m.AutoRouteAnnounce
	}
	return false
}

func (m *MplsTeAttributeSetAutoMesh) GetSoftPreemptionConfigured() bool {
	if m != nil {
		return m.SoftPreemptionConfigured
	}
	return false
}

func (m *MplsTeAttributeSetAutoMesh) GetLogging() *MplsTeLoggingAttributes {
	if m != nil {
		return m.Logging
	}
	return nil
}

func (m *MplsTeAttributeSetAutoMesh) GetBandwidth() uint32 {
	if m != nil {
		return m.Bandwidth
	}
	return 0
}

func (m *MplsTeAttributeSetAutoMesh) GetLoadShare() uint32 {
	if m != nil {
		return m.LoadShare
	}
	return 0
}

func (m *MplsTeAttributeSetAutoMesh) GetIsInterfaceBwConfigured() bool {
	if m != nil {
		return m.IsInterfaceBwConfigured
	}
	return false
}

func (m *MplsTeAttributeSetAutoMesh) GetMeshGroupId() []uint32 {
	if m != nil {
		return m.MeshGroupId
	}
	return nil
}

func (m *MplsTeAttributeSetAutoMesh) GetTunnelId() []uint32 {
	if m != nil {
		return m.TunnelId
	}
	return nil
}

// TE Protected Interface Name String
type MplsTeProtectedIfNameStr struct {
	// Protected Interface Name
	ProtectedInterface   string   `protobuf:"bytes,1,opt,name=protected_interface,json=protectedInterface" json:"protected_interface,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeProtectedIfNameStr) Reset()         { *m = MplsTeProtectedIfNameStr{} }
func (m *MplsTeProtectedIfNameStr) String() string { return proto.CompactTextString(m) }
func (*MplsTeProtectedIfNameStr) ProtoMessage()    {}
func (*MplsTeProtectedIfNameStr) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_attribute_set_ceeb336d731c993d, []int{17}
}
func (m *MplsTeProtectedIfNameStr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeProtectedIfNameStr.Unmarshal(m, b)
}
func (m *MplsTeProtectedIfNameStr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeProtectedIfNameStr.Marshal(b, m, deterministic)
}
func (dst *MplsTeProtectedIfNameStr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeProtectedIfNameStr.Merge(dst, src)
}
func (m *MplsTeProtectedIfNameStr) XXX_Size() int {
	return xxx_messageInfo_MplsTeProtectedIfNameStr.Size(m)
}
func (m *MplsTeProtectedIfNameStr) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeProtectedIfNameStr.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeProtectedIfNameStr proto.InternalMessageInfo

func (m *MplsTeProtectedIfNameStr) GetProtectedInterface() string {
	if m != nil {
		return m.ProtectedInterface
	}
	return ""
}

// Attribute set signalled name
type MplsTeAttributeSetSigName struct {
	// Signalled name
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Source address or name
	SourceType string `protobuf:"bytes,2,opt,name=source_type,json=sourceType" json:"source_type,omitempty"`
	// Protected interface address or name
	ProtectedInterfaceType string `protobuf:"bytes,3,opt,name=protected_interface_type,json=protectedInterfaceType" json:"protected_interface_type,omitempty"`
	// MP address appended
	IsMpAddresses        bool     `protobuf:"varint,4,opt,name=is_mp_addresses,json=isMpAddresses" json:"is_mp_addresses,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeAttributeSetSigName) Reset()         { *m = MplsTeAttributeSetSigName{} }
func (m *MplsTeAttributeSetSigName) String() string { return proto.CompactTextString(m) }
func (*MplsTeAttributeSetSigName) ProtoMessage()    {}
func (*MplsTeAttributeSetSigName) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_attribute_set_ceeb336d731c993d, []int{18}
}
func (m *MplsTeAttributeSetSigName) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeAttributeSetSigName.Unmarshal(m, b)
}
func (m *MplsTeAttributeSetSigName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeAttributeSetSigName.Marshal(b, m, deterministic)
}
func (dst *MplsTeAttributeSetSigName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeAttributeSetSigName.Merge(dst, src)
}
func (m *MplsTeAttributeSetSigName) XXX_Size() int {
	return xxx_messageInfo_MplsTeAttributeSetSigName.Size(m)
}
func (m *MplsTeAttributeSetSigName) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeAttributeSetSigName.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeAttributeSetSigName proto.InternalMessageInfo

func (m *MplsTeAttributeSetSigName) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MplsTeAttributeSetSigName) GetSourceType() string {
	if m != nil {
		return m.SourceType
	}
	return ""
}

func (m *MplsTeAttributeSetSigName) GetProtectedInterfaceType() string {
	if m != nil {
		return m.ProtectedInterfaceType
	}
	return ""
}

func (m *MplsTeAttributeSetSigName) GetIsMpAddresses() bool {
	if m != nil {
		return m.IsMpAddresses
	}
	return false
}

// TE Auto-backup Attribute Set
type MplsTeAttributeSetAutoBackup struct {
	// Is signalled name configured
	IsSignalledNameConfigured bool `protobuf:"varint,1,opt,name=is_signalled_name_configured,json=isSignalledNameConfigured" json:"is_signalled_name_configured,omitempty"`
	// Signalled name
	SignalledName *MplsTeAttributeSetSigName `protobuf:"bytes,2,opt,name=signalled_name,json=signalledName" json:"signalled_name,omitempty"`
	// Setup priority
	SetupPriority uint32 `protobuf:"varint,3,opt,name=setup_priority,json=setupPriority" json:"setup_priority,omitempty"`
	// Hold priority
	HoldPriority uint32 `protobuf:"varint,4,opt,name=hold_priority,json=holdPriority" json:"hold_priority,omitempty"`
	// Is priority configured
	IsPriorityConfigured bool `protobuf:"varint,5,opt,name=is_priority_configured,json=isPriorityConfigured" json:"is_priority_configured,omitempty"`
	// deprecated
	PolicyClass uint32 `protobuf:"varint,6,opt,name=policy_class,json=policyClass" json:"policy_class,omitempty"`
	// PBTS policy classes
	PolicyClasses []uint32 `protobuf:"varint,7,rep,packed,name=policy_classes,json=policyClasses" json:"policy_classes,omitempty"`
	// Is policy class configured
	IsPolicyclassConfigured bool `protobuf:"varint,8,opt,name=is_policyclass_configured,json=isPolicyclassConfigured" json:"is_policyclass_configured,omitempty"`
	// Affinity
	Affinity *MplsTeTunnelsAffinityInfo `protobuf:"bytes,9,opt,name=affinity" json:"affinity,omitempty"`
	// Is affinity configured
	IsAffinityConfigured bool `protobuf:"varint,10,opt,name=is_affinity_configured,json=isAffinityConfigured" json:"is_affinity_configured,omitempty"`
	// Record route
	RecordRoute bool `protobuf:"varint,11,opt,name=record_route,json=recordRoute" json:"record_route,omitempty"`
	// Logging attributes
	Logging *MplsTeLoggingAttributes `protobuf:"bytes,12,opt,name=logging" json:"logging,omitempty"`
	// Array of Protected Interface Names
	ProtectedInterfaces []*MplsTeProtectedIfNameStr `protobuf:"bytes,13,rep,name=protected_interfaces,json=protectedInterfaces" json:"protected_interfaces,omitempty"`
	// Tunnel ID
	TunnelId             []uint32 `protobuf:"varint,14,rep,packed,name=tunnel_id,json=tunnelId" json:"tunnel_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeAttributeSetAutoBackup) Reset()         { *m = MplsTeAttributeSetAutoBackup{} }
func (m *MplsTeAttributeSetAutoBackup) String() string { return proto.CompactTextString(m) }
func (*MplsTeAttributeSetAutoBackup) ProtoMessage()    {}
func (*MplsTeAttributeSetAutoBackup) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_attribute_set_ceeb336d731c993d, []int{19}
}
func (m *MplsTeAttributeSetAutoBackup) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeAttributeSetAutoBackup.Unmarshal(m, b)
}
func (m *MplsTeAttributeSetAutoBackup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeAttributeSetAutoBackup.Marshal(b, m, deterministic)
}
func (dst *MplsTeAttributeSetAutoBackup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeAttributeSetAutoBackup.Merge(dst, src)
}
func (m *MplsTeAttributeSetAutoBackup) XXX_Size() int {
	return xxx_messageInfo_MplsTeAttributeSetAutoBackup.Size(m)
}
func (m *MplsTeAttributeSetAutoBackup) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeAttributeSetAutoBackup.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeAttributeSetAutoBackup proto.InternalMessageInfo

func (m *MplsTeAttributeSetAutoBackup) GetIsSignalledNameConfigured() bool {
	if m != nil {
		return m.IsSignalledNameConfigured
	}
	return false
}

func (m *MplsTeAttributeSetAutoBackup) GetSignalledName() *MplsTeAttributeSetSigName {
	if m != nil {
		return m.SignalledName
	}
	return nil
}

func (m *MplsTeAttributeSetAutoBackup) GetSetupPriority() uint32 {
	if m != nil {
		return m.SetupPriority
	}
	return 0
}

func (m *MplsTeAttributeSetAutoBackup) GetHoldPriority() uint32 {
	if m != nil {
		return m.HoldPriority
	}
	return 0
}

func (m *MplsTeAttributeSetAutoBackup) GetIsPriorityConfigured() bool {
	if m != nil {
		return m.IsPriorityConfigured
	}
	return false
}

func (m *MplsTeAttributeSetAutoBackup) GetPolicyClass() uint32 {
	if m != nil {
		return m.PolicyClass
	}
	return 0
}

func (m *MplsTeAttributeSetAutoBackup) GetPolicyClasses() []uint32 {
	if m != nil {
		return m.PolicyClasses
	}
	return nil
}

func (m *MplsTeAttributeSetAutoBackup) GetIsPolicyclassConfigured() bool {
	if m != nil {
		return m.IsPolicyclassConfigured
	}
	return false
}

func (m *MplsTeAttributeSetAutoBackup) GetAffinity() *MplsTeTunnelsAffinityInfo {
	if m != nil {
		return m.Affinity
	}
	return nil
}

func (m *MplsTeAttributeSetAutoBackup) GetIsAffinityConfigured() bool {
	if m != nil {
		return m.IsAffinityConfigured
	}
	return false
}

func (m *MplsTeAttributeSetAutoBackup) GetRecordRoute() bool {
	if m != nil {
		return m.RecordRoute
	}
	return false
}

func (m *MplsTeAttributeSetAutoBackup) GetLogging() *MplsTeLoggingAttributes {
	if m != nil {
		return m.Logging
	}
	return nil
}

func (m *MplsTeAttributeSetAutoBackup) GetProtectedInterfaces() []*MplsTeProtectedIfNameStr {
	if m != nil {
		return m.ProtectedInterfaces
	}
	return nil
}

func (m *MplsTeAttributeSetAutoBackup) GetTunnelId() []uint32 {
	if m != nil {
		return m.TunnelId
	}
	return nil
}

// TE attribute set versioning info
type MplsTeAttributeSetVersion struct {
	// Attribute Type
	AttributeType string `protobuf:"bytes,1,opt,name=attribute_type,json=attributeType" json:"attribute_type,omitempty"`
	// Generation
	Generation uint32 `protobuf:"varint,2,opt,name=generation" json:"generation,omitempty"`
	// Is default
	IsDefault            bool     `protobuf:"varint,3,opt,name=is_default,json=isDefault" json:"is_default,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeAttributeSetVersion) Reset()         { *m = MplsTeAttributeSetVersion{} }
func (m *MplsTeAttributeSetVersion) String() string { return proto.CompactTextString(m) }
func (*MplsTeAttributeSetVersion) ProtoMessage()    {}
func (*MplsTeAttributeSetVersion) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_attribute_set_ceeb336d731c993d, []int{20}
}
func (m *MplsTeAttributeSetVersion) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeAttributeSetVersion.Unmarshal(m, b)
}
func (m *MplsTeAttributeSetVersion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeAttributeSetVersion.Marshal(b, m, deterministic)
}
func (dst *MplsTeAttributeSetVersion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeAttributeSetVersion.Merge(dst, src)
}
func (m *MplsTeAttributeSetVersion) XXX_Size() int {
	return xxx_messageInfo_MplsTeAttributeSetVersion.Size(m)
}
func (m *MplsTeAttributeSetVersion) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeAttributeSetVersion.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeAttributeSetVersion proto.InternalMessageInfo

func (m *MplsTeAttributeSetVersion) GetAttributeType() string {
	if m != nil {
		return m.AttributeType
	}
	return ""
}

func (m *MplsTeAttributeSetVersion) GetGeneration() uint32 {
	if m != nil {
		return m.Generation
	}
	return 0
}

func (m *MplsTeAttributeSetVersion) GetIsDefault() bool {
	if m != nil {
		return m.IsDefault
	}
	return false
}

// TE segment routing path list
type MplsTeAttributeSetBfdRevPath struct {
	// BFD reverse path type
	PathType string `protobuf:"bytes,1,opt,name=path_type,json=pathType" json:"path_type,omitempty"`
	// BFD reverse path binding label
	BindingLabel         uint32   `protobuf:"varint,2,opt,name=binding_label,json=bindingLabel" json:"binding_label,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeAttributeSetBfdRevPath) Reset()         { *m = MplsTeAttributeSetBfdRevPath{} }
func (m *MplsTeAttributeSetBfdRevPath) String() string { return proto.CompactTextString(m) }
func (*MplsTeAttributeSetBfdRevPath) ProtoMessage()    {}
func (*MplsTeAttributeSetBfdRevPath) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_attribute_set_ceeb336d731c993d, []int{21}
}
func (m *MplsTeAttributeSetBfdRevPath) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeAttributeSetBfdRevPath.Unmarshal(m, b)
}
func (m *MplsTeAttributeSetBfdRevPath) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeAttributeSetBfdRevPath.Marshal(b, m, deterministic)
}
func (dst *MplsTeAttributeSetBfdRevPath) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeAttributeSetBfdRevPath.Merge(dst, src)
}
func (m *MplsTeAttributeSetBfdRevPath) XXX_Size() int {
	return xxx_messageInfo_MplsTeAttributeSetBfdRevPath.Size(m)
}
func (m *MplsTeAttributeSetBfdRevPath) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeAttributeSetBfdRevPath.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeAttributeSetBfdRevPath proto.InternalMessageInfo

func (m *MplsTeAttributeSetBfdRevPath) GetPathType() string {
	if m != nil {
		return m.PathType
	}
	return ""
}

func (m *MplsTeAttributeSetBfdRevPath) GetBindingLabel() uint32 {
	if m != nil {
		return m.BindingLabel
	}
	return 0
}

// TE Path Option Attribute Set
type MplsTeAttributeSetPathOption struct {
	// Bandwidth value in kbps
	ConfiguredBandwidth uint32 `protobuf:"varint,1,opt,name=configured_bandwidth,json=configuredBandwidth" json:"configured_bandwidth,omitempty"`
	// Cost limit on the tunnel path
	CostLimit uint32 `protobuf:"varint,2,opt,name=cost_limit,json=costLimit" json:"cost_limit,omitempty"`
	// DSTE Class
	DsteClassType uint32 `protobuf:"varint,3,opt,name=dste_class_type,json=dsteClassType" json:"dste_class_type,omitempty"`
	// The bandwidth type
	BandwidthType string `protobuf:"bytes,4,opt,name=bandwidth_type,json=bandwidthType" json:"bandwidth_type,omitempty"`
	// Is bandwidth configured
	IsBandwidthConfigured bool `protobuf:"varint,5,opt,name=is_bandwidth_configured,json=isBandwidthConfigured" json:"is_bandwidth_configured,omitempty"`
	// Is Cost Limit configured
	IsCostLimitConfigured bool `protobuf:"varint,6,opt,name=is_cost_limit_configured,json=isCostLimitConfigured" json:"is_cost_limit_configured,omitempty"`
	// Affinity
	Affinity *MplsTeTunnelsAffinityInfo `protobuf:"bytes,7,opt,name=affinity" json:"affinity,omitempty"`
	// Is affinity configured
	IsAffinityConfigured bool `protobuf:"varint,8,opt,name=is_affinity_configured,json=isAffinityConfigured" json:"is_affinity_configured,omitempty"`
	// Tunnel ID
	TunnelId []uint32 `protobuf:"varint,9,rep,packed,name=tunnel_id,json=tunnelId" json:"tunnel_id,omitempty"`
	// Generation
	Generation uint32 `protobuf:"varint,10,opt,name=generation" json:"generation,omitempty"`
	// Version Info
	VersionInfo []*MplsTeAttributeSetVersion `protobuf:"bytes,11,rep,name=version_info,json=versionInfo" json:"version_info,omitempty"`
	// Path invalidation interval on the tunnel path
	PathInvalidationTimeout uint32 `protobuf:"varint,12,opt,name=path_invalidation_timeout,json=pathInvalidationTimeout" json:"path_invalidation_timeout,omitempty"`
	// Path invalidation action
	PathInvalidationAction uint32 `protobuf:"varint,13,opt,name=path_invalidation_action,json=pathInvalidationAction" json:"path_invalidation_action,omitempty"`
	// Is path invalidation timeout configured
	IsPathInvalidationTimeoutConfigured bool `protobuf:"varint,14,opt,name=is_path_invalidation_timeout_configured,json=isPathInvalidationTimeoutConfigured" json:"is_path_invalidation_timeout_configured,omitempty"`
	// Is path invalidation action configured
	IsPathInvalidationActionConfigured bool `protobuf:"varint,15,opt,name=is_path_invalidation_action_configured,json=isPathInvalidationActionConfigured" json:"is_path_invalidation_action_configured,omitempty"`
	// Exclude list name
	ExcludeListName string `protobuf:"bytes,16,opt,name=exclude_list_name,json=excludeListName" json:"exclude_list_name,omitempty"`
	// Is exclude list name configured
	IsExcludeListNameConfigured bool `protobuf:"varint,17,opt,name=is_exclude_list_name_configured,json=isExcludeListNameConfigured" json:"is_exclude_list_name_configured,omitempty"`
	// Is PCE Configured
	IsPceConfigured bool `protobuf:"varint,18,opt,name=is_pce_configured,json=isPceConfigured" json:"is_pce_configured,omitempty"`
	// Is PCE Disjoint Path Source Configured
	IsPceDisjSourceConfigured bool `protobuf:"varint,19,opt,name=is_pce_disj_source_configured,json=isPceDisjSourceConfigured" json:"is_pce_disj_source_configured,omitempty"`
	// Is PCE Disjoint Path Type Configured
	IsPceDisjTypeConfigured bool `protobuf:"varint,20,opt,name=is_pce_disj_type_configured,json=isPceDisjTypeConfigured" json:"is_pce_disj_type_configured,omitempty"`
	// Is PCE Disjoint Path Group ID Configured
	IsPceDisjGroupIdConfigured bool `protobuf:"varint,21,opt,name=is_pce_disj_group_id_configured,json=isPceDisjGroupIdConfigured" json:"is_pce_disj_group_id_configured,omitempty"`
	// PCE Disjoint Path Source Address
	PcedpSourceAddress uint32 `protobuf:"varint,22,opt,name=pcedp_source_address,json=pcedpSourceAddress" json:"pcedp_source_address,omitempty"`
	// PCE Disjoint Path Type
	PcedpType string `protobuf:"bytes,23,opt,name=pcedp_type,json=pcedpType" json:"pcedp_type,omitempty"`
	// PCE Disjoint Path Group ID
	PcedpGroupId uint32 `protobuf:"varint,24,opt,name=pcedp_group_id,json=pcedpGroupId" json:"pcedp_group_id,omitempty"`
	// Is PCE Bidirectional Source Configured
	IsPcebDjSourceConfigured bool `protobuf:"varint,25,opt,name=is_pceb_dj_source_configured,json=isPcebDjSourceConfigured" json:"is_pceb_dj_source_configured,omitempty"`
	// Is PCE Bidirectional Group ID Configured
	IsPcebdGroupIdConfigured bool `protobuf:"varint,26,opt,name=is_pcebd_group_id_configured,json=isPcebdGroupIdConfigured" json:"is_pcebd_group_id_configured,omitempty"`
	// PCE Bidirectional Source Address
	PcebdSourceAddress uint32 `protobuf:"varint,27,opt,name=pcebd_source_address,json=pcebdSourceAddress" json:"pcebd_source_address,omitempty"`
	// PCE Bidirectional Group ID
	PcebdGroupId uint32 `protobuf:"varint,28,opt,name=pcebd_group_id,json=pcebdGroupId" json:"pcebd_group_id,omitempty"`
	// BFD reverse path
	BfdReversePath *MplsTeAttributeSetBfdRevPath `protobuf:"bytes,29,opt,name=bfd_reverse_path,json=bfdReversePath" json:"bfd_reverse_path,omitempty"`
	// Is BFD reverse path configured
	IsBfdReversePatConfigured bool     `protobuf:"varint,30,opt,name=is_bfd_reverse_pat_configured,json=isBfdReversePatConfigured" json:"is_bfd_reverse_pat_configured,omitempty"`
	XXX_NoUnkeyedLiteral      struct{} `json:"-"`
	XXX_unrecognized          []byte   `json:"-"`
	XXX_sizecache             int32    `json:"-"`
}

func (m *MplsTeAttributeSetPathOption) Reset()         { *m = MplsTeAttributeSetPathOption{} }
func (m *MplsTeAttributeSetPathOption) String() string { return proto.CompactTextString(m) }
func (*MplsTeAttributeSetPathOption) ProtoMessage()    {}
func (*MplsTeAttributeSetPathOption) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_attribute_set_ceeb336d731c993d, []int{22}
}
func (m *MplsTeAttributeSetPathOption) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeAttributeSetPathOption.Unmarshal(m, b)
}
func (m *MplsTeAttributeSetPathOption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeAttributeSetPathOption.Marshal(b, m, deterministic)
}
func (dst *MplsTeAttributeSetPathOption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeAttributeSetPathOption.Merge(dst, src)
}
func (m *MplsTeAttributeSetPathOption) XXX_Size() int {
	return xxx_messageInfo_MplsTeAttributeSetPathOption.Size(m)
}
func (m *MplsTeAttributeSetPathOption) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeAttributeSetPathOption.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeAttributeSetPathOption proto.InternalMessageInfo

func (m *MplsTeAttributeSetPathOption) GetConfiguredBandwidth() uint32 {
	if m != nil {
		return m.ConfiguredBandwidth
	}
	return 0
}

func (m *MplsTeAttributeSetPathOption) GetCostLimit() uint32 {
	if m != nil {
		return m.CostLimit
	}
	return 0
}

func (m *MplsTeAttributeSetPathOption) GetDsteClassType() uint32 {
	if m != nil {
		return m.DsteClassType
	}
	return 0
}

func (m *MplsTeAttributeSetPathOption) GetBandwidthType() string {
	if m != nil {
		return m.BandwidthType
	}
	return ""
}

func (m *MplsTeAttributeSetPathOption) GetIsBandwidthConfigured() bool {
	if m != nil {
		return m.IsBandwidthConfigured
	}
	return false
}

func (m *MplsTeAttributeSetPathOption) GetIsCostLimitConfigured() bool {
	if m != nil {
		return m.IsCostLimitConfigured
	}
	return false
}

func (m *MplsTeAttributeSetPathOption) GetAffinity() *MplsTeTunnelsAffinityInfo {
	if m != nil {
		return m.Affinity
	}
	return nil
}

func (m *MplsTeAttributeSetPathOption) GetIsAffinityConfigured() bool {
	if m != nil {
		return m.IsAffinityConfigured
	}
	return false
}

func (m *MplsTeAttributeSetPathOption) GetTunnelId() []uint32 {
	if m != nil {
		return m.TunnelId
	}
	return nil
}

func (m *MplsTeAttributeSetPathOption) GetGeneration() uint32 {
	if m != nil {
		return m.Generation
	}
	return 0
}

func (m *MplsTeAttributeSetPathOption) GetVersionInfo() []*MplsTeAttributeSetVersion {
	if m != nil {
		return m.VersionInfo
	}
	return nil
}

func (m *MplsTeAttributeSetPathOption) GetPathInvalidationTimeout() uint32 {
	if m != nil {
		return m.PathInvalidationTimeout
	}
	return 0
}

func (m *MplsTeAttributeSetPathOption) GetPathInvalidationAction() uint32 {
	if m != nil {
		return m.PathInvalidationAction
	}
	return 0
}

func (m *MplsTeAttributeSetPathOption) GetIsPathInvalidationTimeoutConfigured() bool {
	if m != nil {
		return m.IsPathInvalidationTimeoutConfigured
	}
	return false
}

func (m *MplsTeAttributeSetPathOption) GetIsPathInvalidationActionConfigured() bool {
	if m != nil {
		return m.IsPathInvalidationActionConfigured
	}
	return false
}

func (m *MplsTeAttributeSetPathOption) GetExcludeListName() string {
	if m != nil {
		return m.ExcludeListName
	}
	return ""
}

func (m *MplsTeAttributeSetPathOption) GetIsExcludeListNameConfigured() bool {
	if m != nil {
		return m.IsExcludeListNameConfigured
	}
	return false
}

func (m *MplsTeAttributeSetPathOption) GetIsPceConfigured() bool {
	if m != nil {
		return m.IsPceConfigured
	}
	return false
}

func (m *MplsTeAttributeSetPathOption) GetIsPceDisjSourceConfigured() bool {
	if m != nil {
		return m.IsPceDisjSourceConfigured
	}
	return false
}

func (m *MplsTeAttributeSetPathOption) GetIsPceDisjTypeConfigured() bool {
	if m != nil {
		return m.IsPceDisjTypeConfigured
	}
	return false
}

func (m *MplsTeAttributeSetPathOption) GetIsPceDisjGroupIdConfigured() bool {
	if m != nil {
		return m.IsPceDisjGroupIdConfigured
	}
	return false
}

func (m *MplsTeAttributeSetPathOption) GetPcedpSourceAddress() uint32 {
	if m != nil {
		return m.PcedpSourceAddress
	}
	return 0
}

func (m *MplsTeAttributeSetPathOption) GetPcedpType() string {
	if m != nil {
		return m.PcedpType
	}
	return ""
}

func (m *MplsTeAttributeSetPathOption) GetPcedpGroupId() uint32 {
	if m != nil {
		return m.PcedpGroupId
	}
	return 0
}

func (m *MplsTeAttributeSetPathOption) GetIsPcebDjSourceConfigured() bool {
	if m != nil {
		return m.IsPcebDjSourceConfigured
	}
	return false
}

func (m *MplsTeAttributeSetPathOption) GetIsPcebdGroupIdConfigured() bool {
	if m != nil {
		return m.IsPcebdGroupIdConfigured
	}
	return false
}

func (m *MplsTeAttributeSetPathOption) GetPcebdSourceAddress() uint32 {
	if m != nil {
		return m.PcebdSourceAddress
	}
	return 0
}

func (m *MplsTeAttributeSetPathOption) GetPcebdGroupId() uint32 {
	if m != nil {
		return m.PcebdGroupId
	}
	return 0
}

func (m *MplsTeAttributeSetPathOption) GetBfdReversePath() *MplsTeAttributeSetBfdRevPath {
	if m != nil {
		return m.BfdReversePath
	}
	return nil
}

func (m *MplsTeAttributeSetPathOption) GetIsBfdReversePatConfigured() bool {
	if m != nil {
		return m.IsBfdReversePatConfigured
	}
	return false
}

// TE XRO attribute set
type MplsTeAttributeSetXro struct {
	// The XRO specified by this attribute-set
	Xro                  *TeXro   `protobuf:"bytes,1,opt,name=xro" json:"xro,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeAttributeSetXro) Reset()         { *m = MplsTeAttributeSetXro{} }
func (m *MplsTeAttributeSetXro) String() string { return proto.CompactTextString(m) }
func (*MplsTeAttributeSetXro) ProtoMessage()    {}
func (*MplsTeAttributeSetXro) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_attribute_set_ceeb336d731c993d, []int{23}
}
func (m *MplsTeAttributeSetXro) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeAttributeSetXro.Unmarshal(m, b)
}
func (m *MplsTeAttributeSetXro) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeAttributeSetXro.Marshal(b, m, deterministic)
}
func (dst *MplsTeAttributeSetXro) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeAttributeSetXro.Merge(dst, src)
}
func (m *MplsTeAttributeSetXro) XXX_Size() int {
	return xxx_messageInfo_MplsTeAttributeSetXro.Size(m)
}
func (m *MplsTeAttributeSetXro) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeAttributeSetXro.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeAttributeSetXro proto.InternalMessageInfo

func (m *MplsTeAttributeSetXro) GetXro() *TeXro {
	if m != nil {
		return m.Xro
	}
	return nil
}

// TE P2MP-TE Attribute Set
type MplsTeAttributeSetP2MpTe struct {
	// Fast reroute
	FastReroute bool `protobuf:"varint,1,opt,name=fast_reroute,json=fastReroute" json:"fast_reroute,omitempty"`
	// FRR bandwidth protection
	FrrBandwidthProtection bool `protobuf:"varint,2,opt,name=frr_bandwidth_protection,json=frrBandwidthProtection" json:"frr_bandwidth_protection,omitempty"`
	// Setup priority
	SetupPriority uint32 `protobuf:"varint,3,opt,name=setup_priority,json=setupPriority" json:"setup_priority,omitempty"`
	// Hold priority
	HoldPriority uint32 `protobuf:"varint,4,opt,name=hold_priority,json=holdPriority" json:"hold_priority,omitempty"`
	// Is priority configured
	IsPriorityConfigured bool `protobuf:"varint,5,opt,name=is_priority_configured,json=isPriorityConfigured" json:"is_priority_configured,omitempty"`
	// Bandwidth value in kbps
	ConfiguredBandwidth uint32 `protobuf:"varint,6,opt,name=configured_bandwidth,json=configuredBandwidth" json:"configured_bandwidth,omitempty"`
	// DSTE Class
	DsteClassType uint32 `protobuf:"varint,7,opt,name=dste_class_type,json=dsteClassType" json:"dste_class_type,omitempty"`
	// Is bandwidth configured
	IsBandwidthConfigured bool `protobuf:"varint,8,opt,name=is_bandwidth_configured,json=isBandwidthConfigured" json:"is_bandwidth_configured,omitempty"`
	// Tunnel ID
	TunnelId []uint32 `protobuf:"varint,9,rep,packed,name=tunnel_id,json=tunnelId" json:"tunnel_id,omitempty"`
	// Affinity
	Affinity *MplsTeTunnelsAffinityInfo `protobuf:"bytes,10,opt,name=affinity" json:"affinity,omitempty"`
	// Is affinity configured
	IsAffinityConfigured bool     `protobuf:"varint,11,opt,name=is_affinity_configured,json=isAffinityConfigured" json:"is_affinity_configured,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeAttributeSetP2MpTe) Reset()         { *m = MplsTeAttributeSetP2MpTe{} }
func (m *MplsTeAttributeSetP2MpTe) String() string { return proto.CompactTextString(m) }
func (*MplsTeAttributeSetP2MpTe) ProtoMessage()    {}
func (*MplsTeAttributeSetP2MpTe) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_attribute_set_ceeb336d731c993d, []int{24}
}
func (m *MplsTeAttributeSetP2MpTe) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeAttributeSetP2MpTe.Unmarshal(m, b)
}
func (m *MplsTeAttributeSetP2MpTe) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeAttributeSetP2MpTe.Marshal(b, m, deterministic)
}
func (dst *MplsTeAttributeSetP2MpTe) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeAttributeSetP2MpTe.Merge(dst, src)
}
func (m *MplsTeAttributeSetP2MpTe) XXX_Size() int {
	return xxx_messageInfo_MplsTeAttributeSetP2MpTe.Size(m)
}
func (m *MplsTeAttributeSetP2MpTe) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeAttributeSetP2MpTe.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeAttributeSetP2MpTe proto.InternalMessageInfo

func (m *MplsTeAttributeSetP2MpTe) GetFastReroute() bool {
	if m != nil {
		return m.FastReroute
	}
	return false
}

func (m *MplsTeAttributeSetP2MpTe) GetFrrBandwidthProtection() bool {
	if m != nil {
		return m.FrrBandwidthProtection
	}
	return false
}

func (m *MplsTeAttributeSetP2MpTe) GetSetupPriority() uint32 {
	if m != nil {
		return m.SetupPriority
	}
	return 0
}

func (m *MplsTeAttributeSetP2MpTe) GetHoldPriority() uint32 {
	if m != nil {
		return m.HoldPriority
	}
	return 0
}

func (m *MplsTeAttributeSetP2MpTe) GetIsPriorityConfigured() bool {
	if m != nil {
		return m.IsPriorityConfigured
	}
	return false
}

func (m *MplsTeAttributeSetP2MpTe) GetConfiguredBandwidth() uint32 {
	if m != nil {
		return m.ConfiguredBandwidth
	}
	return 0
}

func (m *MplsTeAttributeSetP2MpTe) GetDsteClassType() uint32 {
	if m != nil {
		return m.DsteClassType
	}
	return 0
}

func (m *MplsTeAttributeSetP2MpTe) GetIsBandwidthConfigured() bool {
	if m != nil {
		return m.IsBandwidthConfigured
	}
	return false
}

func (m *MplsTeAttributeSetP2MpTe) GetTunnelId() []uint32 {
	if m != nil {
		return m.TunnelId
	}
	return nil
}

func (m *MplsTeAttributeSetP2MpTe) GetAffinity() *MplsTeTunnelsAffinityInfo {
	if m != nil {
		return m.Affinity
	}
	return nil
}

func (m *MplsTeAttributeSetP2MpTe) GetIsAffinityConfigured() bool {
	if m != nil {
		return m.IsAffinityConfigured
	}
	return false
}

// TE OTN path protection attribute set
type MplsTeAttributeSetApsPp struct {
	// Sub-network Connection Mode
	SncMode string `protobuf:"bytes,1,opt,name=snc_mode,json=sncMode" json:"snc_mode,omitempty"`
	// Sub-network Connection Monitoring Mode
	TcmId uint32 `protobuf:"varint,2,opt,name=tcm_id,json=tcmId" json:"tcm_id,omitempty"`
	// Protection Type
	ProtectionType string `protobuf:"bytes,3,opt,name=protection_type,json=protectionType" json:"protection_type,omitempty"`
	// Protection Restoration Mode
	ProtectionMode string `protobuf:"bytes,4,opt,name=protection_mode,json=protectionMode" json:"protection_mode,omitempty"`
	// Wait to restore time
	WaitToRestoreTime uint32 `protobuf:"varint,5,opt,name=wait_to_restore_time,json=waitToRestoreTime" json:"wait_to_restore_time,omitempty"`
	// Hold-off time
	HoldOffTime uint32 `protobuf:"varint,6,opt,name=hold_off_time,json=holdOffTime" json:"hold_off_time,omitempty"`
	// Revert Schedule
	RevertSchedule *TeRevertSchT `protobuf:"bytes,7,opt,name=revert_schedule,json=revertSchedule" json:"revert_schedule,omitempty"`
	// Path Protection Profile Type
	PathProtProfileType string `protobuf:"bytes,8,opt,name=path_prot_profile_type,json=pathProtProfileType" json:"path_prot_profile_type,omitempty"`
	// Restoration Style
	RestorationStyle     string   `protobuf:"bytes,9,opt,name=restoration_style,json=restorationStyle" json:"restoration_style,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeAttributeSetApsPp) Reset()         { *m = MplsTeAttributeSetApsPp{} }
func (m *MplsTeAttributeSetApsPp) String() string { return proto.CompactTextString(m) }
func (*MplsTeAttributeSetApsPp) ProtoMessage()    {}
func (*MplsTeAttributeSetApsPp) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_attribute_set_ceeb336d731c993d, []int{25}
}
func (m *MplsTeAttributeSetApsPp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeAttributeSetApsPp.Unmarshal(m, b)
}
func (m *MplsTeAttributeSetApsPp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeAttributeSetApsPp.Marshal(b, m, deterministic)
}
func (dst *MplsTeAttributeSetApsPp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeAttributeSetApsPp.Merge(dst, src)
}
func (m *MplsTeAttributeSetApsPp) XXX_Size() int {
	return xxx_messageInfo_MplsTeAttributeSetApsPp.Size(m)
}
func (m *MplsTeAttributeSetApsPp) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeAttributeSetApsPp.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeAttributeSetApsPp proto.InternalMessageInfo

func (m *MplsTeAttributeSetApsPp) GetSncMode() string {
	if m != nil {
		return m.SncMode
	}
	return ""
}

func (m *MplsTeAttributeSetApsPp) GetTcmId() uint32 {
	if m != nil {
		return m.TcmId
	}
	return 0
}

func (m *MplsTeAttributeSetApsPp) GetProtectionType() string {
	if m != nil {
		return m.ProtectionType
	}
	return ""
}

func (m *MplsTeAttributeSetApsPp) GetProtectionMode() string {
	if m != nil {
		return m.ProtectionMode
	}
	return ""
}

func (m *MplsTeAttributeSetApsPp) GetWaitToRestoreTime() uint32 {
	if m != nil {
		return m.WaitToRestoreTime
	}
	return 0
}

func (m *MplsTeAttributeSetApsPp) GetHoldOffTime() uint32 {
	if m != nil {
		return m.HoldOffTime
	}
	return 0
}

func (m *MplsTeAttributeSetApsPp) GetRevertSchedule() *TeRevertSchT {
	if m != nil {
		return m.RevertSchedule
	}
	return nil
}

func (m *MplsTeAttributeSetApsPp) GetPathProtProfileType() string {
	if m != nil {
		return m.PathProtProfileType
	}
	return ""
}

func (m *MplsTeAttributeSetApsPp) GetRestorationStyle() string {
	if m != nil {
		return m.RestorationStyle
	}
	return ""
}

// TE segment routing prepend entry
type MplsTeAttributeSetSrPrependEntry struct {
	// Prepend Type
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// Prepend index
	Index uint32 `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
	// Prepend next label
	NextLabel            uint32   `protobuf:"varint,3,opt,name=next_label,json=nextLabel" json:"next_label,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeAttributeSetSrPrependEntry) Reset()         { *m = MplsTeAttributeSetSrPrependEntry{} }
func (m *MplsTeAttributeSetSrPrependEntry) String() string { return proto.CompactTextString(m) }
func (*MplsTeAttributeSetSrPrependEntry) ProtoMessage()    {}
func (*MplsTeAttributeSetSrPrependEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_attribute_set_ceeb336d731c993d, []int{26}
}
func (m *MplsTeAttributeSetSrPrependEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeAttributeSetSrPrependEntry.Unmarshal(m, b)
}
func (m *MplsTeAttributeSetSrPrependEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeAttributeSetSrPrependEntry.Marshal(b, m, deterministic)
}
func (dst *MplsTeAttributeSetSrPrependEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeAttributeSetSrPrependEntry.Merge(dst, src)
}
func (m *MplsTeAttributeSetSrPrependEntry) XXX_Size() int {
	return xxx_messageInfo_MplsTeAttributeSetSrPrependEntry.Size(m)
}
func (m *MplsTeAttributeSetSrPrependEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeAttributeSetSrPrependEntry.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeAttributeSetSrPrependEntry proto.InternalMessageInfo

func (m *MplsTeAttributeSetSrPrependEntry) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *MplsTeAttributeSetSrPrependEntry) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *MplsTeAttributeSetSrPrependEntry) GetNextLabel() uint32 {
	if m != nil {
		return m.NextLabel
	}
	return 0
}

// TE segment routing prepend list
type MplsTeAttributeSetSrPrependList struct {
	// List of prepend entries
	PrependEntries       []*MplsTeAttributeSetSrPrependEntry `protobuf:"bytes,1,rep,name=prepend_entries,json=prependEntries" json:"prepend_entries,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *MplsTeAttributeSetSrPrependList) Reset()         { *m = MplsTeAttributeSetSrPrependList{} }
func (m *MplsTeAttributeSetSrPrependList) String() string { return proto.CompactTextString(m) }
func (*MplsTeAttributeSetSrPrependList) ProtoMessage()    {}
func (*MplsTeAttributeSetSrPrependList) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_attribute_set_ceeb336d731c993d, []int{27}
}
func (m *MplsTeAttributeSetSrPrependList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeAttributeSetSrPrependList.Unmarshal(m, b)
}
func (m *MplsTeAttributeSetSrPrependList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeAttributeSetSrPrependList.Marshal(b, m, deterministic)
}
func (dst *MplsTeAttributeSetSrPrependList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeAttributeSetSrPrependList.Merge(dst, src)
}
func (m *MplsTeAttributeSetSrPrependList) XXX_Size() int {
	return xxx_messageInfo_MplsTeAttributeSetSrPrependList.Size(m)
}
func (m *MplsTeAttributeSetSrPrependList) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeAttributeSetSrPrependList.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeAttributeSetSrPrependList proto.InternalMessageInfo

func (m *MplsTeAttributeSetSrPrependList) GetPrependEntries() []*MplsTeAttributeSetSrPrependEntry {
	if m != nil {
		return m.PrependEntries
	}
	return nil
}

// TE P2P-TE Attribute Set
type MplsTeAttributeSetP2PTe struct {
	// Tunnel ID
	TunnelId []uint32 `protobuf:"varint,1,rep,packed,name=tunnel_id,json=tunnelId" json:"tunnel_id,omitempty"`
	// Affinity
	Affinity *MplsTeTunnelsAffinityInfo `protobuf:"bytes,2,opt,name=affinity" json:"affinity,omitempty"`
	// Is affinity configured
	IsAffinityConfigured bool `protobuf:"varint,3,opt,name=is_affinity_configured,json=isAffinityConfigured" json:"is_affinity_configured,omitempty"`
	// Path selection segment-routing type
	PathSelectionSegmentRoutingAdjacencyProtection string `protobuf:"bytes,4,opt,name=path_selection_segment_routing_adjacency_protection,json=pathSelectionSegmentRoutingAdjacencyProtection" json:"path_selection_segment_routing_adjacency_protection,omitempty"`
	// Is path selection segment routing configured
	IsPathSelectionSegmentRoutingAdjacencyProtectionConfigured bool `protobuf:"varint,5,opt,name=is_path_selection_segment_routing_adjacency_protection_configured,json=isPathSelectionSegmentRoutingAdjacencyProtectionConfigured" json:"is_path_selection_segment_routing_adjacency_protection_configured,omitempty"`
	// Path invalidation timeout on the tunnel path
	PathInvalidationTimeout uint32 `protobuf:"varint,6,opt,name=path_invalidation_timeout,json=pathInvalidationTimeout" json:"path_invalidation_timeout,omitempty"`
	// Path invalidation action
	PathSelectionInvalidationAction string `protobuf:"bytes,7,opt,name=path_selection_invalidation_action,json=pathSelectionInvalidationAction" json:"path_selection_invalidation_action,omitempty"`
	// Is Path Invalidation timeout configured
	IsPathInvalidationTimeoutConfigured bool `protobuf:"varint,8,opt,name=is_path_invalidation_timeout_configured,json=isPathInvalidationTimeoutConfigured" json:"is_path_invalidation_timeout_configured,omitempty"`
	// Is Path Invalidation action configured
	IsPathInvalidationActionConfigured bool `protobuf:"varint,9,opt,name=is_path_invalidation_action_configured,json=isPathInvalidationActionConfigured" json:"is_path_invalidation_action_configured,omitempty"`
	// Path selection metric type
	PathSelectionMetric string `protobuf:"bytes,10,opt,name=path_selection_metric,json=pathSelectionMetric" json:"path_selection_metric,omitempty"`
	// Is path selection metric configured
	IsPathSelectionMetricConfigured bool `protobuf:"varint,11,opt,name=is_path_selection_metric_configured,json=isPathSelectionMetricConfigured" json:"is_path_selection_metric_configured,omitempty"`
	// Path selection margin
	PathSelectionSegmentRoutingMargin uint32 `protobuf:"varint,12,opt,name=path_selection_segment_routing_margin,json=pathSelectionSegmentRoutingMargin" json:"path_selection_segment_routing_margin,omitempty"`
	// Path selection margin is_relative
	IsPathSelectionSegmentRoutingMarginRelative bool `protobuf:"varint,13,opt,name=is_path_selection_segment_routing_margin_relative,json=isPathSelectionSegmentRoutingMarginRelative" json:"is_path_selection_segment_routing_margin_relative,omitempty"`
	// Is path selection margin configured
	IsPathSelectionSegmentRoutingMarginConfigured bool `protobuf:"varint,14,opt,name=is_path_selection_segment_routing_margin_configured,json=isPathSelectionSegmentRoutingMarginConfigured" json:"is_path_selection_segment_routing_margin_configured,omitempty"`
	// Is path selection segment limit configured
	PathSelectionSegmentRoutingSegmentLimit uint32 `protobuf:"varint,15,opt,name=path_selection_segment_routing_segment_limit,json=pathSelectionSegmentRoutingSegmentLimit" json:"path_selection_segment_routing_segment_limit,omitempty"`
	// Is path selection segment limit configured
	IsPathSelectionSegmentRoutingSegmentLimitConfigured bool `protobuf:"varint,16,opt,name=is_path_selection_segment_routing_segment_limit_configured,json=isPathSelectionSegmentRoutingSegmentLimitConfigured" json:"is_path_selection_segment_routing_segment_limit_configured,omitempty"`
	// Is any of the path selection parameters configured
	IsPathSelectConfigured bool `protobuf:"varint,17,opt,name=is_path_select_configured,json=isPathSelectConfigured" json:"is_path_select_configured,omitempty"`
	// Logging attributes
	Logging *MplsTeLoggingAttributes `protobuf:"bytes,18,opt,name=logging" json:"logging,omitempty"`
	// SR prepend list
	PrependList *MplsTeAttributeSetSrPrependList `protobuf:"bytes,19,opt,name=prepend_list,json=prependList" json:"prepend_list,omitempty"`
	// Is SR prepend list configured
	IsPrependListConfigured bool `protobuf:"varint,20,opt,name=is_prepend_list_configured,json=isPrependListConfigured" json:"is_prepend_list_configured,omitempty"`
	// Is PCE Configured
	IsPceConfigured bool `protobuf:"varint,21,opt,name=is_pce_configured,json=isPceConfigured" json:"is_pce_configured,omitempty"`
	// Is PCE Disjoint Path Source Configured
	IsPceDisjSourceConfigured bool `protobuf:"varint,22,opt,name=is_pce_disj_source_configured,json=isPceDisjSourceConfigured" json:"is_pce_disj_source_configured,omitempty"`
	// Is PCE Disjoint Path Type Configured
	IsPceDisjTypeConfigured bool `protobuf:"varint,23,opt,name=is_pce_disj_type_configured,json=isPceDisjTypeConfigured" json:"is_pce_disj_type_configured,omitempty"`
	// Is PCE Disjoint Path Group ID Configured
	IsPceDisjGroupIdConfigured bool `protobuf:"varint,24,opt,name=is_pce_disj_group_id_configured,json=isPceDisjGroupIdConfigured" json:"is_pce_disj_group_id_configured,omitempty"`
	// PCE Disjoint Path Source Address
	PcedpSourceAddress uint32 `protobuf:"varint,25,opt,name=pcedp_source_address,json=pcedpSourceAddress" json:"pcedp_source_address,omitempty"`
	// PCE Disjoint Path Type
	PcedpType string `protobuf:"bytes,26,opt,name=pcedp_type,json=pcedpType" json:"pcedp_type,omitempty"`
	// PCE Disjoint Path Group ID
	PcedpGroupId uint32 `protobuf:"varint,27,opt,name=pcedp_group_id,json=pcedpGroupId" json:"pcedp_group_id,omitempty"`
	// Is PCE Bidirectional Source Configured
	IsPcebDjSourceConfigured bool `protobuf:"varint,28,opt,name=is_pceb_dj_source_configured,json=isPcebDjSourceConfigured" json:"is_pceb_dj_source_configured,omitempty"`
	// Is PCE Bidirectional Group ID Configured
	IsPcebdGroupIdConfigured bool `protobuf:"varint,29,opt,name=is_pcebd_group_id_configured,json=isPcebdGroupIdConfigured" json:"is_pcebd_group_id_configured,omitempty"`
	// PCE Bidirectional Source Address
	PcebdSourceAddress uint32 `protobuf:"varint,30,opt,name=pcebd_source_address,json=pcebdSourceAddress" json:"pcebd_source_address,omitempty"`
	// PCE Bidirectional Group ID
	PcebdGroupId         uint32   `protobuf:"varint,31,opt,name=pcebd_group_id,json=pcebdGroupId" json:"pcebd_group_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeAttributeSetP2PTe) Reset()         { *m = MplsTeAttributeSetP2PTe{} }
func (m *MplsTeAttributeSetP2PTe) String() string { return proto.CompactTextString(m) }
func (*MplsTeAttributeSetP2PTe) ProtoMessage()    {}
func (*MplsTeAttributeSetP2PTe) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_attribute_set_ceeb336d731c993d, []int{28}
}
func (m *MplsTeAttributeSetP2PTe) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeAttributeSetP2PTe.Unmarshal(m, b)
}
func (m *MplsTeAttributeSetP2PTe) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeAttributeSetP2PTe.Marshal(b, m, deterministic)
}
func (dst *MplsTeAttributeSetP2PTe) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeAttributeSetP2PTe.Merge(dst, src)
}
func (m *MplsTeAttributeSetP2PTe) XXX_Size() int {
	return xxx_messageInfo_MplsTeAttributeSetP2PTe.Size(m)
}
func (m *MplsTeAttributeSetP2PTe) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeAttributeSetP2PTe.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeAttributeSetP2PTe proto.InternalMessageInfo

func (m *MplsTeAttributeSetP2PTe) GetTunnelId() []uint32 {
	if m != nil {
		return m.TunnelId
	}
	return nil
}

func (m *MplsTeAttributeSetP2PTe) GetAffinity() *MplsTeTunnelsAffinityInfo {
	if m != nil {
		return m.Affinity
	}
	return nil
}

func (m *MplsTeAttributeSetP2PTe) GetIsAffinityConfigured() bool {
	if m != nil {
		return m.IsAffinityConfigured
	}
	return false
}

func (m *MplsTeAttributeSetP2PTe) GetPathSelectionSegmentRoutingAdjacencyProtection() string {
	if m != nil {
		return m.PathSelectionSegmentRoutingAdjacencyProtection
	}
	return ""
}

func (m *MplsTeAttributeSetP2PTe) GetIsPathSelectionSegmentRoutingAdjacencyProtectionConfigured() bool {
	if m != nil {
		return m.IsPathSelectionSegmentRoutingAdjacencyProtectionConfigured
	}
	return false
}

func (m *MplsTeAttributeSetP2PTe) GetPathInvalidationTimeout() uint32 {
	if m != nil {
		return m.PathInvalidationTimeout
	}
	return 0
}

func (m *MplsTeAttributeSetP2PTe) GetPathSelectionInvalidationAction() string {
	if m != nil {
		return m.PathSelectionInvalidationAction
	}
	return ""
}

func (m *MplsTeAttributeSetP2PTe) GetIsPathInvalidationTimeoutConfigured() bool {
	if m != nil {
		return m.IsPathInvalidationTimeoutConfigured
	}
	return false
}

func (m *MplsTeAttributeSetP2PTe) GetIsPathInvalidationActionConfigured() bool {
	if m != nil {
		return m.IsPathInvalidationActionConfigured
	}
	return false
}

func (m *MplsTeAttributeSetP2PTe) GetPathSelectionMetric() string {
	if m != nil {
		return m.PathSelectionMetric
	}
	return ""
}

func (m *MplsTeAttributeSetP2PTe) GetIsPathSelectionMetricConfigured() bool {
	if m != nil {
		return m.IsPathSelectionMetricConfigured
	}
	return false
}

func (m *MplsTeAttributeSetP2PTe) GetPathSelectionSegmentRoutingMargin() uint32 {
	if m != nil {
		return m.PathSelectionSegmentRoutingMargin
	}
	return 0
}

func (m *MplsTeAttributeSetP2PTe) GetIsPathSelectionSegmentRoutingMarginRelative() bool {
	if m != nil {
		return m.IsPathSelectionSegmentRoutingMarginRelative
	}
	return false
}

func (m *MplsTeAttributeSetP2PTe) GetIsPathSelectionSegmentRoutingMarginConfigured() bool {
	if m != nil {
		return m.IsPathSelectionSegmentRoutingMarginConfigured
	}
	return false
}

func (m *MplsTeAttributeSetP2PTe) GetPathSelectionSegmentRoutingSegmentLimit() uint32 {
	if m != nil {
		return m.PathSelectionSegmentRoutingSegmentLimit
	}
	return 0
}

func (m *MplsTeAttributeSetP2PTe) GetIsPathSelectionSegmentRoutingSegmentLimitConfigured() bool {
	if m != nil {
		return m.IsPathSelectionSegmentRoutingSegmentLimitConfigured
	}
	return false
}

func (m *MplsTeAttributeSetP2PTe) GetIsPathSelectConfigured() bool {
	if m != nil {
		return m.IsPathSelectConfigured
	}
	return false
}

func (m *MplsTeAttributeSetP2PTe) GetLogging() *MplsTeLoggingAttributes {
	if m != nil {
		return m.Logging
	}
	return nil
}

func (m *MplsTeAttributeSetP2PTe) GetPrependList() *MplsTeAttributeSetSrPrependList {
	if m != nil {
		return m.PrependList
	}
	return nil
}

func (m *MplsTeAttributeSetP2PTe) GetIsPrependListConfigured() bool {
	if m != nil {
		return m.IsPrependListConfigured
	}
	return false
}

func (m *MplsTeAttributeSetP2PTe) GetIsPceConfigured() bool {
	if m != nil {
		return m.IsPceConfigured
	}
	return false
}

func (m *MplsTeAttributeSetP2PTe) GetIsPceDisjSourceConfigured() bool {
	if m != nil {
		return m.IsPceDisjSourceConfigured
	}
	return false
}

func (m *MplsTeAttributeSetP2PTe) GetIsPceDisjTypeConfigured() bool {
	if m != nil {
		return m.IsPceDisjTypeConfigured
	}
	return false
}

func (m *MplsTeAttributeSetP2PTe) GetIsPceDisjGroupIdConfigured() bool {
	if m != nil {
		return m.IsPceDisjGroupIdConfigured
	}
	return false
}

func (m *MplsTeAttributeSetP2PTe) GetPcedpSourceAddress() uint32 {
	if m != nil {
		return m.PcedpSourceAddress
	}
	return 0
}

func (m *MplsTeAttributeSetP2PTe) GetPcedpType() string {
	if m != nil {
		return m.PcedpType
	}
	return ""
}

func (m *MplsTeAttributeSetP2PTe) GetPcedpGroupId() uint32 {
	if m != nil {
		return m.PcedpGroupId
	}
	return 0
}

func (m *MplsTeAttributeSetP2PTe) GetIsPcebDjSourceConfigured() bool {
	if m != nil {
		return m.IsPcebDjSourceConfigured
	}
	return false
}

func (m *MplsTeAttributeSetP2PTe) GetIsPcebdGroupIdConfigured() bool {
	if m != nil {
		return m.IsPcebdGroupIdConfigured
	}
	return false
}

func (m *MplsTeAttributeSetP2PTe) GetPcebdSourceAddress() uint32 {
	if m != nil {
		return m.PcebdSourceAddress
	}
	return 0
}

func (m *MplsTeAttributeSetP2PTe) GetPcebdGroupId() uint32 {
	if m != nil {
		return m.PcebdGroupId
	}
	return 0
}

// TE Attribute Set Union
type MplsTeAttributeSetUnion struct {
	TunnelAttributeSetType string `protobuf:"bytes,1,opt,name=tunnel_attribute_set_type,json=tunnelAttributeSetType" json:"tunnel_attribute_set_type,omitempty"`
	// MPLS TE Path Option Attribute Set
	AttributeSetPathOption *MplsTeAttributeSetPathOption `protobuf:"bytes,2,opt,name=attribute_set_path_option,json=attributeSetPathOption" json:"attribute_set_path_option,omitempty"`
	// MPLS TE Auto-backup Attribute Set
	AttributeSetAutobackup *MplsTeAttributeSetAutoBackup `protobuf:"bytes,3,opt,name=attribute_set_autobackup,json=attributeSetAutobackup" json:"attribute_set_autobackup,omitempty"`
	// MPLS TE Auto-mesh Attribute Set
	AttributeSetAutomesh *MplsTeAttributeSetAutoMesh `protobuf:"bytes,4,opt,name=attribute_set_automesh,json=attributeSetAutomesh" json:"attribute_set_automesh,omitempty"`
	// Attribute Set XRO
	AttributeSetXro *MplsTeAttributeSetXro `protobuf:"bytes,5,opt,name=attribute_set_xro,json=attributeSetXro" json:"attribute_set_xro,omitempty"`
	// MPLS TE P2MP-TE Attribute Set
	AttributeSetP2Mpte *MplsTeAttributeSetP2MpTe `protobuf:"bytes,6,opt,name=attribute_set_p2_mpte,json=attributeSetP2Mpte" json:"attribute_set_p2_mpte,omitempty"`
	// Attribute Set OTN APS Path Protection
	AttributeSetApsPp *MplsTeAttributeSetApsPp `protobuf:"bytes,7,opt,name=attribute_set_aps_pp,json=attributeSetApsPp" json:"attribute_set_aps_pp,omitempty"`
	// MPLS TE P2P-TE Attribute Set
	AttributeSetP2PTe    *MplsTeAttributeSetP2PTe `protobuf:"bytes,8,opt,name=attribute_set_p2_p_te,json=attributeSetP2PTe" json:"attribute_set_p2_p_te,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *MplsTeAttributeSetUnion) Reset()         { *m = MplsTeAttributeSetUnion{} }
func (m *MplsTeAttributeSetUnion) String() string { return proto.CompactTextString(m) }
func (*MplsTeAttributeSetUnion) ProtoMessage()    {}
func (*MplsTeAttributeSetUnion) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_attribute_set_ceeb336d731c993d, []int{29}
}
func (m *MplsTeAttributeSetUnion) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeAttributeSetUnion.Unmarshal(m, b)
}
func (m *MplsTeAttributeSetUnion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeAttributeSetUnion.Marshal(b, m, deterministic)
}
func (dst *MplsTeAttributeSetUnion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeAttributeSetUnion.Merge(dst, src)
}
func (m *MplsTeAttributeSetUnion) XXX_Size() int {
	return xxx_messageInfo_MplsTeAttributeSetUnion.Size(m)
}
func (m *MplsTeAttributeSetUnion) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeAttributeSetUnion.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeAttributeSetUnion proto.InternalMessageInfo

func (m *MplsTeAttributeSetUnion) GetTunnelAttributeSetType() string {
	if m != nil {
		return m.TunnelAttributeSetType
	}
	return ""
}

func (m *MplsTeAttributeSetUnion) GetAttributeSetPathOption() *MplsTeAttributeSetPathOption {
	if m != nil {
		return m.AttributeSetPathOption
	}
	return nil
}

func (m *MplsTeAttributeSetUnion) GetAttributeSetAutobackup() *MplsTeAttributeSetAutoBackup {
	if m != nil {
		return m.AttributeSetAutobackup
	}
	return nil
}

func (m *MplsTeAttributeSetUnion) GetAttributeSetAutomesh() *MplsTeAttributeSetAutoMesh {
	if m != nil {
		return m.AttributeSetAutomesh
	}
	return nil
}

func (m *MplsTeAttributeSetUnion) GetAttributeSetXro() *MplsTeAttributeSetXro {
	if m != nil {
		return m.AttributeSetXro
	}
	return nil
}

func (m *MplsTeAttributeSetUnion) GetAttributeSetP2Mpte() *MplsTeAttributeSetP2MpTe {
	if m != nil {
		return m.AttributeSetP2Mpte
	}
	return nil
}

func (m *MplsTeAttributeSetUnion) GetAttributeSetApsPp() *MplsTeAttributeSetApsPp {
	if m != nil {
		return m.AttributeSetApsPp
	}
	return nil
}

func (m *MplsTeAttributeSetUnion) GetAttributeSetP2PTe() *MplsTeAttributeSetP2PTe {
	if m != nil {
		return m.AttributeSetP2PTe
	}
	return nil
}

func init() {
	proto.RegisterType((*MplsTeAttributeSet_KEYS)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.attribute_sets.attribute_set.mpls_te_attribute_set_KEYS")
	proto.RegisterType((*MplsTeAttributeSet)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.attribute_sets.attribute_set.mpls_te_attribute_set")
	proto.RegisterType((*TeLspFecCtypeDataT)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.attribute_sets.attribute_set.te_lsp_fec_ctype_data_t")
	proto.RegisterType((*TeLspFecT)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.attribute_sets.attribute_set.te_lsp_fec_t")
	proto.RegisterType((*AffinityNameBag)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.attribute_sets.attribute_set.affinity_name_bag")
	proto.RegisterType((*MplsTeTunnelsAffinityInfo)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.attribute_sets.attribute_set.mpls_te_tunnels_affinity_info")
	proto.RegisterType((*TeXroSubobjIpv4)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.attribute_sets.attribute_set.te_xro_subobj_ipv4")
	proto.RegisterType((*TeXroSubobjIpv6)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.attribute_sets.attribute_set.te_xro_subobj_ipv6")
	proto.RegisterType((*TeXroSubobjUnnum)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.attribute_sets.attribute_set.te_xro_subobj_unnum")
	proto.RegisterType((*TeXroSubobjAs)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.attribute_sets.attribute_set.te_xro_subobj_as")
	proto.RegisterType((*TeXroSubobjSrlg)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.attribute_sets.attribute_set.te_xro_subobj_srlg")
	proto.RegisterType((*TeXroSubobjP2PLsp)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.attribute_sets.attribute_set.te_xro_subobj_p2p_lsp")
	proto.RegisterType((*TeXroSubobj)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.attribute_sets.attribute_set.te_xro_subobj")
	proto.RegisterType((*TeXro)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.attribute_sets.attribute_set.te_xro")
	proto.RegisterType((*TeRevertSchT)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.attribute_sets.attribute_set.te_revert_sch_t")
	proto.RegisterType((*MplsTeLoggingAttributes)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.attribute_sets.attribute_set.mpls_te_logging_attributes")
	proto.RegisterType((*MplsTeAttributeSetAutoMesh)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.attribute_sets.attribute_set.mpls_te_attribute_set_auto_mesh")
	proto.RegisterType((*MplsTeProtectedIfNameStr)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.attribute_sets.attribute_set.mpls_te_protected_if_name_str")
	proto.RegisterType((*MplsTeAttributeSetSigName)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.attribute_sets.attribute_set.mpls_te_attribute_set_sig_name")
	proto.RegisterType((*MplsTeAttributeSetAutoBackup)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.attribute_sets.attribute_set.mpls_te_attribute_set_auto_backup")
	proto.RegisterType((*MplsTeAttributeSetVersion)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.attribute_sets.attribute_set.mpls_te_attribute_set_version")
	proto.RegisterType((*MplsTeAttributeSetBfdRevPath)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.attribute_sets.attribute_set.mpls_te_attribute_set_bfd_rev_path")
	proto.RegisterType((*MplsTeAttributeSetPathOption)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.attribute_sets.attribute_set.mpls_te_attribute_set_path_option")
	proto.RegisterType((*MplsTeAttributeSetXro)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.attribute_sets.attribute_set.mpls_te_attribute_set_xro")
	proto.RegisterType((*MplsTeAttributeSetP2MpTe)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.attribute_sets.attribute_set.mpls_te_attribute_set_p2mp_te")
	proto.RegisterType((*MplsTeAttributeSetApsPp)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.attribute_sets.attribute_set.mpls_te_attribute_set_aps_pp")
	proto.RegisterType((*MplsTeAttributeSetSrPrependEntry)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.attribute_sets.attribute_set.mpls_te_attribute_set_sr_prepend_entry")
	proto.RegisterType((*MplsTeAttributeSetSrPrependList)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.attribute_sets.attribute_set.mpls_te_attribute_set_sr_prepend_list")
	proto.RegisterType((*MplsTeAttributeSetP2PTe)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.attribute_sets.attribute_set.mpls_te_attribute_set_p2p_te")
	proto.RegisterType((*MplsTeAttributeSetUnion)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.attribute_sets.attribute_set.mpls_te_attribute_set_union")
}

func init() {
	proto.RegisterFile("mpls_te_attribute_set.proto", fileDescriptor_mpls_te_attribute_set_ceeb336d731c993d)
}

var fileDescriptor_mpls_te_attribute_set_ceeb336d731c993d = []byte{
	// 3536 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x3b, 0xc9, 0x72, 0x1c, 0xc7,
	0x95, 0x51, 0x58, 0x1b, 0xaf, 0xd1, 0x58, 0x12, 0x5b, 0x83, 0x3b, 0x9b, 0xc3, 0x65, 0xb4, 0x90,
	0x52, 0x83, 0xc1, 0x91, 0x38, 0x0a, 0xcd, 0x80, 0xdb, 0x0c, 0x42, 0x80, 0xd8, 0x53, 0x80, 0x34,
	0xd2, 0xcc, 0x48, 0x19, 0xd5, 0x55, 0x59, 0x40, 0x92, 0xd5, 0x55, 0xa5, 0xca, 0x6c, 0xa2, 0x31,
	0x31, 0x87, 0xb9, 0x70, 0x62, 0x1c, 0x96, 0x65, 0x85, 0x23, 0x1c, 0x3e, 0xd8, 0x11, 0xf6, 0xc9,
	0x1f, 0xe0, 0x8b, 0xc3, 0x57, 0xdf, 0x74, 0xf0, 0xc9, 0x1f, 0xe0, 0xa3, 0xc3, 0x17, 0x5f, 0x7c,
	0xf3, 0xc9, 0x91, 0x4b, 0x55, 0x65, 0x75, 0x17, 0x1a, 0x5c, 0x00, 0x89, 0x17, 0x12, 0xf5, 0x96,
	0x7c, 0x2f, 0x5f, 0xbe, 0x7c, 0x5b, 0x02, 0x70, 0xba, 0x13, 0x07, 0x0c, 0x73, 0x82, 0x1d, 0xce,
	0x13, 0xda, 0xee, 0x72, 0x82, 0x19, 0xe1, 0xd7, 0xe3, 0x24, 0xe2, 0x11, 0x7a, 0xdf, 0xa5, 0xcc,
	0x8d, 0x30, 0x8d, 0x18, 0xee, 0x25, 0x38, 0xa5, 0x8c, 0x62, 0x92, 0x5c, 0xd7, 0x1f, 0xd7, 0x0b,
	0x6c, 0xac, 0xf8, 0xd9, 0xe8, 0xc1, 0xa9, 0xd2, 0xe5, 0xf1, 0x07, 0xf7, 0x3f, 0xdd, 0x46, 0x6f,
	0x00, 0x2a, 0x42, 0xf9, 0x41, 0x4c, 0xea, 0xd6, 0x05, 0xeb, 0xda, 0x94, 0x3d, 0x97, 0x61, 0xb6,
	0x09, 0xdf, 0x39, 0x88, 0xc9, 0x20, 0x75, 0xe8, 0x74, 0x48, 0x7d, 0x64, 0x90, 0xfa, 0x43, 0xa7,
	0x43, 0x1a, 0xbf, 0x1c, 0x81, 0xa5, 0x52, 0xd1, 0xe8, 0x5d, 0x58, 0xe5, 0xdd, 0x30, 0x24, 0x01,
	0x2e, 0x59, 0xae, 0x29, 0x97, 0x5b, 0x56, 0x04, 0xeb, 0x7d, 0x8b, 0xa2, 0x7b, 0x70, 0xfe, 0x50,
	0x56, 0xec, 0x26, 0xee, 0x5a, 0xb3, 0xbe, 0x76, 0xc1, 0xba, 0x56, 0xb3, 0x4f, 0x97, 0x2f, 0x70,
	0x57, 0x90, 0xa0, 0xef, 0x5b, 0xb0, 0x50, 0xe4, 0xef, 0x86, 0x34, 0x0a, 0xeb, 0x37, 0x2f, 0x58,
	0xd7, 0xaa, 0xcd, 0xff, 0xbc, 0xfe, 0x72, 0x36, 0xbf, 0x5e, 0x6e, 0x70, 0x29, 0xc2, 0x9e, 0x37,
	0xed, 0xf4, 0x91, 0x00, 0x35, 0x7e, 0x61, 0xc1, 0x0a, 0x27, 0x38, 0x60, 0x31, 0xf6, 0x89, 0x8b,
	0x5d, 0x71, 0x06, 0xd8, 0x73, 0xb8, 0x83, 0x39, 0x3a, 0x03, 0x20, 0x61, 0xe6, 0xc1, 0x54, 0x7c,
	0xe2, 0xde, 0x95, 0x07, 0x72, 0x03, 0x16, 0xe3, 0x26, 0x8e, 0x25, 0xab, 0x47, 0x18, 0xa7, 0xa1,
	0xc3, 0xc5, 0x3e, 0xd4, 0x91, 0xcc, 0xc7, 0xcd, 0xd6, 0x26, 0x8b, 0xef, 0xe5, 0x08, 0x74, 0x0b,
	0xea, 0x62, 0x39, 0x83, 0x16, 0xc7, 0x4d, 0xdc, 0x89, 0x31, 0xf5, 0xea, 0xa3, 0xd2, 0x6e, 0x8b,
	0x3e, 0x71, 0x0d, 0x8e, 0x56, 0x73, 0x2b, 0xde, 0xf0, 0x1a, 0xdf, 0x8c, 0xc0, 0xb4, 0xa1, 0x62,
	0xa6, 0x97, 0x00, 0x50, 0x4f, 0xea, 0x55, 0x93, 0x7a, 0x6d, 0xb2, 0x78, 0xc3, 0x43, 0x0d, 0xa8,
	0x49, 0x32, 0x75, 0x52, 0xd4, 0x93, 0x0a, 0xd5, 0xec, 0xaa, 0x4f, 0xdc, 0x1d, 0x09, 0xdb, 0xf0,
	0xd0, 0x1a, 0x2c, 0x0b, 0x1a, 0xd2, 0xe3, 0x24, 0xf4, 0x88, 0x67, 0x10, 0x8f, 0x4a, 0xed, 0x17,
	0x7c, 0xe2, 0xde, 0xd7, 0xc8, 0x8c, 0xe9, 0xac, 0x12, 0xcb, 0xa2, 0x6e, 0xe2, 0x92, 0xfa, 0x98,
	0x24, 0x9c, 0xf2, 0x89, 0xbb, 0x2d, 0x01, 0xe8, 0x7b, 0x16, 0x2c, 0xf6, 0xef, 0x8f, 0x86, 0x7e,
	0x54, 0x1f, 0x97, 0x07, 0xfb, 0xef, 0x2f, 0x7b, 0xb0, 0x87, 0x9c, 0x92, 0x8d, 0x8a, 0x46, 0xdb,
	0x08, 0xfd, 0x08, 0xad, 0xc0, 0xa4, 0xa0, 0x7b, 0x92, 0xf8, 0xf5, 0x09, 0xa9, 0xe7, 0x84, 0x4f,
	0xdc, 0x8f, 0x13, 0xbf, 0xf1, 0xe5, 0x08, 0xcc, 0x3b, 0xbe, 0x4f, 0x43, 0xca, 0x0f, 0x94, 0xdf,
	0xb6, 0x9d, 0x5d, 0x74, 0x15, 0x66, 0xdd, 0x28, 0x64, 0x3c, 0x71, 0x68, 0x68, 0x5c, 0xc3, 0x9a,
	0x3d, 0x93, 0x83, 0xe5, 0x99, 0xff, 0x3d, 0xcc, 0x19, 0x84, 0x4f, 0x9c, 0xa0, 0x4b, 0xb4, 0x79,
	0x8d, 0x05, 0x3e, 0x16, 0x60, 0xf4, 0x1a, 0xcc, 0xfb, 0x51, 0xb2, 0xef, 0x24, 0x1e, 0x4e, 0x88,
	0xaf, 0x69, 0xd5, 0x31, 0xcf, 0x6a, 0x84, 0x4d, 0x7c, 0x45, 0x7b, 0x1b, 0x56, 0x8d, 0x65, 0xb3,
	0x53, 0x51, 0x3c, 0x63, 0x17, 0x46, 0xaf, 0xd5, 0xec, 0x95, 0x9c, 0x20, 0x3d, 0x18, 0xc5, 0xfb,
	0x8f, 0x70, 0x2a, 0x63, 0x18, 0x14, 0x38, 0xae, 0x98, 0x53, 0x8a, 0x07, 0x45, 0xc1, 0x8d, 0x3f,
	0x5a, 0x70, 0x36, 0x3d, 0x09, 0xe5, 0x03, 0x0c, 0x67, 0xe6, 0x11, 0x87, 0x87, 0x2e, 0x41, 0x2d,
	0x03, 0xb4, 0x29, 0x67, 0xda, 0x30, 0xd3, 0x29, 0xf0, 0x0e, 0xe5, 0xac, 0x40, 0xd4, 0x71, 0xd8,
	0x63, 0x6d, 0x93, 0x8c, 0x68, 0xcb, 0x61, 0x8f, 0xd1, 0xff, 0xc0, 0x9c, 0x30, 0xb8, 0x97, 0x0a,
	0xa0, 0x84, 0xd5, 0x47, 0x2f, 0x8c, 0x5e, 0xab, 0x36, 0xff, 0xed, 0x65, 0x5d, 0x63, 0xe0, 0x44,
	0xed, 0x59, 0x29, 0x6a, 0x3d, 0x93, 0xd4, 0xf8, 0x91, 0x05, 0x88, 0x13, 0xdc, 0x4b, 0x22, 0xcc,
	0xba, 0xed, 0xa8, 0xfd, 0x08, 0xd3, 0xf8, 0xc9, 0x4d, 0x54, 0x87, 0x49, 0xc7, 0xf3, 0x12, 0xc2,
	0x98, 0xbe, 0xdf, 0xe9, 0xa7, 0xf0, 0xf6, 0x38, 0x21, 0x3e, 0xed, 0xe1, 0x80, 0x84, 0x7a, 0x43,
	0x53, 0x0a, 0xb2, 0x49, 0x42, 0x74, 0x06, 0xa6, 0x32, 0x1d, 0xf4, 0xa5, 0xc9, 0x01, 0xe8, 0x32,
	0xcc, 0x90, 0x9e, 0x1b, 0x74, 0x99, 0xb8, 0x04, 0xd2, 0x9f, 0xd4, 0x75, 0xa9, 0x65, 0x50, 0xe1,
	0x4e, 0xe5, 0x4a, 0xdd, 0xfa, 0x8e, 0x95, 0xfa, 0xb9, 0x05, 0x0b, 0x45, 0xa5, 0xba, 0x61, 0xd8,
	0xed, 0xa0, 0x0b, 0x32, 0x0a, 0x25, 0x51, 0x97, 0x93, 0x24, 0x8d, 0x3b, 0x53, 0x36, 0x70, 0x62,
	0x4b, 0xd0, 0x86, 0x87, 0x2e, 0xc2, 0x34, 0x0d, 0x39, 0x49, 0x7c, 0xc7, 0x25, 0x46, 0xe0, 0xc9,
	0x60, 0x1b, 0xde, 0xf1, 0x68, 0x78, 0x03, 0xe6, 0x8a, 0x0a, 0x3a, 0x0c, 0x9d, 0x86, 0x29, 0x87,
	0xe1, 0xb0, 0xdb, 0x69, 0x93, 0x24, 0x0d, 0x89, 0x0e, 0xfb, 0x50, 0x7e, 0x37, 0x76, 0xfa, 0xcd,
	0xcc, 0x92, 0x60, 0x57, 0x04, 0x09, 0xf1, 0x7f, 0x1e, 0x43, 0x27, 0xc4, 0xe7, 0x86, 0x57, 0xa2,
	0xc6, 0x48, 0x99, 0x1a, 0x7f, 0x1d, 0x81, 0xa5, 0xe2, 0xb2, 0x71, 0x53, 0xa6, 0x03, 0xf4, 0x39,
	0x8c, 0xfa, 0xc4, 0x95, 0xab, 0x56, 0x9b, 0x9b, 0xc7, 0x18, 0xf8, 0xb8, 0x2d, 0x16, 0x16, 0x21,
	0x9e, 0xee, 0x86, 0x51, 0x42, 0xd2, 0x1c, 0x20, 0xf4, 0xab, 0xd8, 0x55, 0x05, 0x54, 0x69, 0xe0,
	0x36, 0xac, 0xc6, 0x49, 0xe4, 0x12, 0xc6, 0x68, 0xb8, 0x8b, 0xc3, 0xc8, 0x23, 0x98, 0xf4, 0x5c,
	0x12, 0xcb, 0x1c, 0x35, 0x2a, 0xe9, 0x57, 0x72, 0x82, 0x0f, 0x23, 0x8f, 0xdc, 0x4f, 0xd1, 0xe8,
	0x3d, 0x38, 0x15, 0x93, 0xb0, 0x1b, 0x70, 0xda, 0x71, 0x38, 0xe9, 0x67, 0x1e, 0x93, 0xcc, 0x75,
	0x83, 0x62, 0x80, 0xdb, 0xcc, 0x01, 0x7d, 0xdc, 0xe3, 0x8a, 0xdb, 0xa0, 0x28, 0x72, 0x0f, 0x1a,
	0x7f, 0xa2, 0xcc, 0xf8, 0x5f, 0x4d, 0x40, 0xad, 0x60, 0x7c, 0x84, 0x60, 0xcc, 0xc8, 0xd3, 0xf2,
	0x67, 0x74, 0x00, 0x33, 0xe2, 0x9a, 0x6b, 0x12, 0xe2, 0x72, 0x69, 0xa9, 0x6a, 0xd3, 0x3e, 0x86,
	0x33, 0xe9, 0x0b, 0x25, 0x76, 0x4d, 0xfc, 0xbb, 0x9d, 0x0a, 0xd2, 0xa2, 0x6f, 0x19, 0xa2, 0x47,
	0x4f, 0x48, 0xf4, 0x2d, 0x29, 0xfa, 0x56, 0x2e, 0xfa, 0xff, 0x2c, 0x58, 0x94, 0x77, 0xb6, 0x4d,
	0x12, 0xe2, 0x19, 0x1a, 0x8c, 0x49, 0x0d, 0xb6, 0x8f, 0x57, 0x03, 0x29, 0xc9, 0x5e, 0xc8, 0x05,
	0xe6, 0x8a, 0x30, 0x98, 0x76, 0x98, 0x21, 0x5f, 0x55, 0x02, 0xad, 0xe3, 0x95, 0xef, 0x30, 0xbb,
	0xea, 0xb0, 0x82, 0xe1, 0xe5, 0xb5, 0xce, 0xc5, 0x4e, 0x9c, 0x84, 0xe1, 0x85, 0x0c, 0xbb, 0x26,
	0xfe, 0xcd, 0x45, 0xff, 0x37, 0xd4, 0xc4, 0x85, 0xcc, 0x25, 0x4f, 0x4a, 0xc9, 0x1f, 0x1d, 0xaf,
	0x64, 0x1d, 0x65, 0xec, 0xe9, 0x80, 0xc5, 0x99, 0xec, 0xc6, 0xaf, 0x2c, 0x98, 0x50, 0x74, 0x88,
	0xc3, 0x4c, 0x4e, 0x4e, 0x5c, 0x99, 0xb4, 0x45, 0x9e, 0xdd, 0x3a, 0x56, 0x3d, 0xec, 0x5a, 0x2f,
	0x89, 0x32, 0xf9, 0x0c, 0x35, 0x61, 0xa9, 0xd3, 0xe5, 0x5d, 0x27, 0xc0, 0x1e, 0x7d, 0x42, 0x12,
	0x26, 0xf2, 0xb1, 0x1f, 0x38, 0xbb, 0x3a, 0x38, 0x2d, 0x28, 0xe4, 0xbd, 0x14, 0xf7, 0x20, 0x70,
	0x76, 0x1b, 0xbf, 0xb5, 0x60, 0x56, 0x24, 0x15, 0xf2, 0x84, 0x24, 0x1c, 0x33, 0x77, 0x0f, 0x73,
	0xd4, 0x80, 0x69, 0xe6, 0xee, 0x11, 0xaf, 0x1b, 0x10, 0xd9, 0x93, 0x88, 0xfb, 0x3c, 0x6d, 0x17,
	0x60, 0xa2, 0xe0, 0x48, 0xbf, 0x45, 0x19, 0x98, 0x16, 0x61, 0x19, 0xd1, 0x3d, 0x87, 0x13, 0xf4,
	0x26, 0xa0, 0x8c, 0xc8, 0x4f, 0xc8, 0x17, 0x5d, 0x12, 0xba, 0x07, 0x3a, 0xe9, 0xcc, 0xa7, 0x98,
	0x07, 0x29, 0x02, 0x9d, 0x82, 0x8a, 0xd7, 0x4d, 0x9c, 0x2c, 0xc4, 0xd5, 0xec, 0xec, 0x5b, 0x64,
	0x97, 0x8e, 0xd3, 0xc3, 0x3c, 0x11, 0x45, 0xcb, 0xb8, 0x42, 0x76, 0x9c, 0xde, 0x8e, 0xf8, 0x6e,
	0xfc, 0x65, 0x24, 0x6f, 0xf3, 0x82, 0x68, 0x77, 0x57, 0xc4, 0xdb, 0xcc, 0x6e, 0x32, 0x33, 0x49,
	0xa7, 0xe0, 0x42, 0x4f, 0x4b, 0xda, 0xa2, 0x22, 0x4e, 0x4e, 0x7c, 0x8b, 0x52, 0x9e, 0x35, 0x71,
	0xa0, 0xb1, 0xca, 0x52, 0x15, 0xd6, 0xdc, 0x54, 0xd8, 0x0b, 0x20, 0xce, 0x18, 0x27, 0x3a, 0xed,
	0xea, 0xb0, 0x0d, 0xe2, 0xf0, 0x55, 0xd6, 0x15, 0xfc, 0x9a, 0x22, 0x8a, 0xb9, 0x8e, 0xcc, 0x15,
	0x89, 0x7f, 0x18, 0x73, 0x74, 0x1d, 0x16, 0x64, 0x82, 0x08, 0x59, 0xd7, 0xf7, 0xa9, 0x4b, 0x49,
	0xc8, 0x71, 0x7b, 0x5f, 0x87, 0xe0, 0xf9, 0x80, 0xc5, 0x1b, 0x06, 0xe6, 0xce, 0x3e, 0x7a, 0x0b,
	0x16, 0x05, 0x7d, 0xdb, 0x09, 0xbd, 0x7d, 0xea, 0xf1, 0x3d, 0xec, 0xee, 0x39, 0xe1, 0xae, 0x8a,
	0xc0, 0x15, 0x1b, 0x05, 0x2c, 0xbe, 0x93, 0xa2, 0xee, 0x4a, 0x0c, 0xfa, 0x57, 0xb8, 0x28, 0x38,
	0x62, 0xd7, 0x09, 0x5c, 0xec, 0x3b, 0x34, 0xe8, 0x26, 0xb9, 0x11, 0x48, 0xe8, 0xb4, 0x03, 0xe2,
	0xc9, 0x5b, 0x50, 0xb1, 0xcf, 0x06, 0x2c, 0x6e, 0x09, 0xba, 0x07, 0x8a, 0x6c, 0x53, 0x51, 0xdd,
	0x57, 0x44, 0x42, 0x57, 0x27, 0x08, 0x06, 0x78, 0x2b, 0x4a, 0x57, 0x27, 0x08, 0x8a, 0xf4, 0x8d,
	0x9f, 0x00, 0x9c, 0x2f, 0xef, 0xf5, 0x9c, 0x2e, 0x8f, 0x70, 0x87, 0xb0, 0x3d, 0xf4, 0x36, 0x2c,
	0xba, 0x51, 0xe8, 0xd3, 0xdd, 0xae, 0x88, 0x83, 0xd9, 0xb6, 0x74, 0xba, 0x5f, 0xc8, 0x71, 0xd9,
	0xb6, 0xd0, 0x15, 0x98, 0xf5, 0x18, 0x27, 0xd8, 0x0d, 0x1c, 0xc6, 0xf2, 0xe4, 0x5f, 0xb3, 0x6b,
	0x02, 0x7c, 0x57, 0x40, 0x65, 0x27, 0x70, 0x0b, 0x56, 0x28, 0x33, 0x2d, 0x95, 0xad, 0xa5, 0x4f,
	0x69, 0x89, 0xb2, 0xdc, 0x58, 0x19, 0x52, 0xa4, 0x37, 0x46, 0x78, 0x37, 0xc6, 0x71, 0x42, 0xa3,
	0x84, 0xf2, 0x03, 0xed, 0x6b, 0x35, 0x09, 0x6d, 0x69, 0xa0, 0x70, 0xf0, 0xbd, 0x28, 0xf0, 0x72,
	0x2a, 0xe5, 0x74, 0xd3, 0x02, 0x98, 0x11, 0xdd, 0x84, 0x65, 0xca, 0x32, 0x12, 0x53, 0x05, 0x75,
	0x60, 0x8b, 0x94, 0xa5, 0xb4, 0x86, 0x06, 0x17, 0x61, 0x3a, 0x8e, 0x02, 0xea, 0x1e, 0xa8, 0x3d,
	0xca, 0xd3, 0xa9, 0xd9, 0x55, 0x05, 0x93, 0x1b, 0x14, 0x4a, 0x9a, 0x24, 0x84, 0xd5, 0x2b, 0xb2,
	0x8f, 0xa8, 0x19, 0x44, 0x84, 0x89, 0x12, 0x43, 0xc8, 0x97, 0x30, 0x65, 0x2f, 0x43, 0x85, 0x29,
	0x55, 0x62, 0x50, 0xd6, 0xca, 0xf1, 0x86, 0x16, 0x97, 0xa0, 0x96, 0x76, 0x2b, 0x4a, 0x0d, 0x50,
	0x1b, 0xd4, 0x40, 0xa5, 0xc7, 0x01, 0x54, 0xd2, 0xd2, 0xbe, 0x5e, 0x95, 0xa1, 0xf4, 0xb3, 0xe3,
	0x1a, 0x0f, 0x94, 0x76, 0x3b, 0x76, 0x26, 0x4e, 0xdb, 0x36, 0xc3, 0x1a, 0x1b, 0x9b, 0x4e, 0x6d,
	0xab, 0xbb, 0x8b, 0x3e, 0xdb, 0xfa, 0x0e, 0xe3, 0x38, 0x21, 0xea, 0xc2, 0xd6, 0x54, 0x5d, 0x26,
	0x60, 0xb6, 0x02, 0x09, 0x3f, 0xf7, 0x93, 0x44, 0x55, 0x45, 0x71, 0x12, 0x71, 0xe2, 0xca, 0x88,
	0x33, 0xa3, 0xfc, 0xdc, 0x4f, 0x12, 0x51, 0x0e, 0xb5, 0x32, 0x04, 0x7a, 0x07, 0xea, 0x82, 0x3e,
	0xf7, 0x34, 0x83, 0x69, 0x56, 0x32, 0x2d, 0xfb, 0x49, 0x92, 0xb9, 0x9a, 0xc1, 0x79, 0x11, 0xa6,
	0x13, 0xe2, 0x46, 0xa2, 0x1f, 0x94, 0xca, 0xcc, 0x29, 0x65, 0x14, 0x4c, 0x85, 0x8f, 0x9b, 0xb0,
	0x2c, 0x6f, 0x8b, 0xe9, 0xc7, 0x41, 0x20, 0x32, 0xd7, 0xbc, 0xda, 0xa5, 0xc0, 0x1a, 0x6e, 0x2c,
	0x71, 0xf2, 0xaa, 0x0a, 0x2e, 0xb9, 0x2c, 0x76, 0xc2, 0x30, 0xea, 0x86, 0x2e, 0xa9, 0x23, 0x7d,
	0x55, 0xbb, 0x3c, 0x92, 0xab, 0xaf, 0x6b, 0x84, 0x28, 0x08, 0x59, 0xe4, 0x73, 0x1c, 0x27, 0x84,
	0x74, 0x64, 0x95, 0x67, 0xda, 0x73, 0x41, 0x15, 0x84, 0x82, 0xa2, 0x95, 0x11, 0x18, 0x36, 0xe5,
	0x30, 0xa9, 0x83, 0x42, 0x7d, 0x51, 0xfa, 0xc0, 0x7f, 0x1c, 0x97, 0x0f, 0x0c, 0x06, 0x6b, 0x3b,
	0x15, 0x25, 0x1a, 0x95, 0x3c, 0x5e, 0x2c, 0xa9, 0x46, 0x2b, 0x03, 0x88, 0x3e, 0x2c, 0x88, 0x1c,
	0x0f, 0xb3, 0x3d, 0x27, 0x21, 0xf5, 0x65, 0x85, 0x16, 0x90, 0x6d, 0x01, 0x10, 0x3d, 0x39, 0x65,
	0x38, 0xef, 0x85, 0xda, 0xfb, 0xe6, 0x86, 0x57, 0xd2, 0x9b, 0xb1, 0x91, 0x12, 0xdc, 0xd9, 0x37,
	0xf6, 0xdb, 0x80, 0x9a, 0x08, 0x5e, 0x78, 0x37, 0x89, 0xba, 0xb2, 0xb8, 0xaf, 0xcb, 0xbb, 0x57,
	0x15, 0xc0, 0x7f, 0x11, 0xb0, 0x0d, 0x4f, 0xe4, 0x94, 0x7c, 0x64, 0xb3, 0x2a, 0xf1, 0x15, 0xae,
	0xe7, 0x34, 0x8d, 0x56, 0xde, 0xd3, 0x6b, 0x5f, 0x21, 0x1e, 0xa6, 0xbe, 0x6a, 0x8e, 0x19, 0x4f,
	0xd0, 0x0d, 0x58, 0x30, 0x10, 0xa9, 0x12, 0xba, 0x70, 0x46, 0x19, 0x2a, 0x53, 0xaf, 0xf1, 0x6b,
	0x0b, 0xce, 0x95, 0xc7, 0x5a, 0x46, 0x77, 0xe5, 0xba, 0xa2, 0xfa, 0xce, 0xb2, 0xf5, 0x94, 0x2d,
	0x7f, 0x46, 0xe7, 0xa1, 0xaa, 0x86, 0x45, 0x66, 0x13, 0x05, 0x0a, 0x24, 0x83, 0xe8, 0x3b, 0x50,
	0x2f, 0x51, 0x44, 0x51, 0xab, 0x3c, 0xbd, 0x3c, 0xa8, 0x8d, 0xe4, 0xbc, 0x02, 0xb3, 0x94, 0xe1,
	0x4e, 0x8c, 0x75, 0x67, 0x4c, 0x98, 0x4e, 0x7e, 0x35, 0xca, 0xb6, 0xe2, 0xf5, 0x14, 0xd8, 0xf8,
	0xf3, 0x24, 0x5c, 0x1c, 0x92, 0x25, 0xda, 0x8e, 0xfb, 0xb8, 0x1b, 0xa3, 0x7f, 0x82, 0x33, 0x94,
	0x89, 0xbd, 0x84, 0x4e, 0x10, 0x10, 0x4f, 0x0f, 0x34, 0xf3, 0x13, 0x53, 0x59, 0x7b, 0x95, 0xb2,
	0xed, 0x94, 0x44, 0x8e, 0x33, 0xf3, 0x33, 0x7b, 0x6a, 0xc1, 0x4c, 0x91, 0x5d, 0x37, 0x1a, 0x9f,
	0x9f, 0xcc, 0x38, 0x33, 0x35, 0xbb, 0x5d, 0x63, 0xa6, 0x46, 0x25, 0xd9, 0x65, 0xf4, 0x99, 0xb2,
	0xcb, 0xd8, 0x73, 0x65, 0x97, 0xf1, 0xe7, 0xc8, 0x2e, 0x13, 0xcf, 0x92, 0x5d, 0x26, 0x9f, 0x3b,
	0xbb, 0x54, 0x86, 0x67, 0x17, 0x33, 0x71, 0x4c, 0xbd, 0x2a, 0x89, 0x03, 0x86, 0x27, 0x8e, 0x42,
	0xac, 0xae, 0x0e, 0xc6, 0x6a, 0x23, 0x0e, 0x4e, 0x7f, 0x7b, 0x71, 0xf0, 0x6b, 0x0b, 0x16, 0x4b,
	0xee, 0x28, 0xab, 0xd7, 0x64, 0x4b, 0x71, 0x6c, 0x66, 0x2d, 0x8d, 0x54, 0xf6, 0xc2, 0xe0, 0xf5,
	0x67, 0xc5, 0xe0, 0x37, 0xd3, 0x17, 0xfc, 0x9e, 0x1a, 0x13, 0xcd, 0xe2, 0x9d, 0x91, 0x7d, 0x87,
	0x1a, 0x30, 0xe4, 0x08, 0x63, 0x62, 0x50, 0xcb, 0xa0, 0x32, 0xc2, 0x9c, 0x03, 0xd8, 0x25, 0x21,
	0x49, 0xf2, 0xa1, 0x7e, 0xcd, 0x36, 0x20, 0x22, 0x05, 0x50, 0x86, 0x3d, 0xe2, 0x3b, 0xdd, 0x80,
	0xeb, 0x9a, 0x6f, 0x8a, 0xb2, 0x7b, 0x0a, 0xd0, 0xf0, 0xa1, 0x51, 0xae, 0x46, 0xdb, 0xf7, 0x44,
	0xbf, 0x83, 0x63, 0x87, 0xef, 0x89, 0xad, 0x88, 0xff, 0x0b, 0x0f, 0x0c, 0x02, 0x20, 0x35, 0xb8,
	0x04, 0xb5, 0x36, 0x0d, 0x3d, 0x71, 0x32, 0x81, 0xd3, 0x26, 0x41, 0xda, 0xe4, 0x68, 0xe0, 0xa6,
	0x80, 0x35, 0xbe, 0x99, 0x39, 0x2c, 0xc0, 0xc9, 0x85, 0x23, 0x35, 0x54, 0x79, 0x81, 0x42, 0xf8,
	0x2c, 0x80, 0x1b, 0x31, 0x8e, 0x03, 0xda, 0xa1, 0x3c, 0x1d, 0x35, 0x0a, 0xc8, 0xa6, 0x00, 0x94,
	0xd5, 0xc9, 0xa3, 0x65, 0x75, 0xf2, 0x65, 0x98, 0xc9, 0x8b, 0x0b, 0x73, 0xa4, 0x97, 0x41, 0x8f,
	0x2a, 0xa7, 0xc7, 0x87, 0x95, 0xd3, 0xff, 0x00, 0x75, 0x2a, 0x02, 0x43, 0xaa, 0xe8, 0x60, 0x11,
	0xbc, 0x44, 0xd9, 0xdd, 0x54, 0xeb, 0x43, 0x22, 0xc4, 0xe4, 0xab, 0x12, 0x21, 0x2a, 0x43, 0x22,
	0x44, 0xc1, 0xeb, 0xa7, 0x8a, 0x5e, 0xdf, 0xe7, 0xac, 0x30, 0xe0, 0xac, 0xff, 0x6b, 0xc1, 0xb4,
	0xf6, 0x7f, 0xf5, 0x26, 0x53, 0x3d, 0xde, 0xdb, 0x5b, 0x7a, 0xd3, 0xec, 0xaa, 0xfe, 0x41, 0x3e,
	0xc9, 0xdc, 0x86, 0x55, 0xe9, 0x91, 0x34, 0x7c, 0xe2, 0x04, 0xd4, 0x53, 0xb3, 0x41, 0x4e, 0x3b,
	0x24, 0xea, 0x72, 0x19, 0xd0, 0x6a, 0xf6, 0x8a, 0x20, 0xd8, 0x30, 0xf0, 0x3b, 0x0a, 0x2d, 0xeb,
	0x84, 0x01, 0x5e, 0x47, 0xd5, 0xc0, 0x35, 0xc9, 0xba, 0xdc, 0xcf, 0xba, 0xae, 0x6a, 0xe0, 0x1d,
	0xb8, 0x2a, 0x92, 0xc8, 0x61, 0x82, 0x4d, 0xe3, 0xab, 0x0a, 0xfc, 0x12, 0x65, 0xad, 0x72, 0x2d,
	0x8c, 0xb3, 0xb0, 0xe1, 0x4a, 0xe9, 0xaa, 0x4a, 0x25, 0x73, 0x51, 0x55, 0xa1, 0x37, 0x06, 0x17,
	0x55, 0xfa, 0x19, 0x6b, 0xbe, 0x06, 0xf3, 0x72, 0xc2, 0xe9, 0x11, 0x1c, 0x50, 0xa6, 0xdf, 0x63,
	0xe7, 0xe4, 0x5d, 0x99, 0xd5, 0x88, 0x4d, 0xca, 0xb2, 0x87, 0x58, 0xca, 0xf0, 0x00, 0xb9, 0x29,
	0x58, 0xd5, 0xef, 0xa7, 0x29, 0xbb, 0x5f, 0xe4, 0x2d, 0x4a, 0x14, 0xbb, 0x70, 0x0b, 0x7c, 0xaa,
	0x88, 0x9f, 0xa5, 0xac, 0xe5, 0x9a, 0xb4, 0xff, 0x0c, 0x67, 0x35, 0xad, 0x47, 0xd9, 0x23, 0xfd,
	0x06, 0x38, 0x58, 0xc5, 0xaf, 0x4a, 0xbe, 0x7b, 0x94, 0x3d, 0x52, 0x8f, 0x82, 0xc6, 0x0a, 0xef,
	0xc1, 0x69, 0x73, 0x05, 0xf9, 0x82, 0x67, 0xf0, 0x2f, 0x66, 0x09, 0x5d, 0xf1, 0x8b, 0xa8, 0x60,
	0x70, 0xdf, 0x95, 0x3b, 0xce, 0xb8, 0xd3, 0xda, 0xd8, 0x5c, 0x61, 0x49, 0xae, 0x70, 0x2a, 0x5b,
	0x41, 0xd7, 0xca, 0xc6, 0x22, 0x6f, 0xc1, 0x62, 0xec, 0x12, 0x2f, 0x4e, 0xd5, 0x4f, 0x1f, 0x59,
	0x54, 0xfd, 0x8e, 0x24, 0x4e, 0xe9, 0xbd, 0x6e, 0xbc, 0xb7, 0x48, 0x0e, 0x19, 0xb9, 0x56, 0xd4,
	0x7b, 0x85, 0x84, 0xc8, 0xa8, 0xf5, 0x77, 0x30, 0xa3, 0xd0, 0x46, 0xad, 0x2e, 0x43, 0xb4, 0x84,
	0xa6, 0xc5, 0xfa, 0xfb, 0xb2, 0xba, 0x8c, 0x5d, 0xd2, 0xc6, 0x5e, 0x99, 0xe9, 0x56, 0x55, 0x03,
	0x24, 0x15, 0x6f, 0xdf, 0x1b, 0xb4, 0x5c, 0xce, 0xef, 0x95, 0x6e, 0xfc, 0x94, 0xc9, 0xef, 0x1d,
	0xb6, 0xed, 0xb6, 0xd7, 0xbf, 0xed, 0xd3, 0xd9, 0xb6, 0xdb, 0x5e, 0x71, 0xdb, 0x6a, 0x5f, 0x86,
	0xb8, 0xfa, 0x99, 0x6c, 0x5f, 0x99, 0x04, 0xf4, 0xa5, 0x05, 0x73, 0x3a, 0x9b, 0x91, 0x84, 0x11,
	0x79, 0x1f, 0xea, 0x67, 0x65, 0x2c, 0x6d, 0x9f, 0x4c, 0x60, 0x31, 0x73, 0xa7, 0x3d, 0xd3, 0xf6,
	0x3d, 0x5b, 0x89, 0x16, 0x97, 0x4b, 0xbb, 0x68, 0x9f, 0x42, 0xa6, 0x9d, 0xce, 0xa5, 0x2e, 0x7a,
	0xc7, 0x64, 0xcc, 0x0d, 0xd5, 0xe8, 0xc2, 0x6a, 0xb9, 0xdc, 0x5e, 0x12, 0xa1, 0x4f, 0x60, 0xb4,
	0x97, 0x44, 0xfa, 0x4d, 0xe7, 0xc1, 0xf1, 0x4c, 0x52, 0x6d, 0xb1, 0x64, 0xe3, 0x0f, 0x63, 0x87,
	0x95, 0x2c, 0x71, 0xb3, 0x13, 0x63, 0x4e, 0x06, 0xc6, 0x0a, 0xd6, 0xe0, 0x58, 0x61, 0xd8, 0x98,
	0x60, 0x64, 0xe8, 0x98, 0xe0, 0xbb, 0xef, 0x19, 0x0e, 0xab, 0x4e, 0x26, 0x9e, 0x6b, 0x4c, 0x37,
	0xf9, 0x9c, 0x63, 0xba, 0xca, 0xb0, 0xba, 0x62, 0x68, 0xb6, 0x35, 0x6b, 0x07, 0x78, 0x55, 0x6a,
	0x87, 0xea, 0xe1, 0xb5, 0x43, 0xe3, 0xf7, 0xa3, 0x70, 0xe6, 0x90, 0x2e, 0x38, 0x66, 0x38, 0x8e,
	0xd1, 0x2a, 0x54, 0x58, 0xe8, 0xe2, 0x4e, 0xe4, 0xa5, 0x65, 0xe8, 0x24, 0x0b, 0xdd, 0xad, 0xc8,
	0x23, 0x68, 0x09, 0x26, 0xb8, 0xdb, 0xc9, 0x9f, 0x73, 0xc7, 0xb9, 0xdb, 0xd9, 0xf0, 0xd0, 0x55,
	0x98, 0xcd, 0x3d, 0xcc, 0xec, 0xd8, 0x67, 0x72, 0xb0, 0x3c, 0x81, 0x22, 0xa1, 0x94, 0x30, 0xd6,
	0x4f, 0x28, 0x05, 0xdd, 0x80, 0xc5, 0x7d, 0x87, 0x72, 0xcc, 0x23, 0x9c, 0x10, 0xc6, 0xa3, 0x84,
	0xc8, 0x2c, 0xad, 0x27, 0x9f, 0xf3, 0x02, 0xb7, 0x13, 0xd9, 0x0a, 0x23, 0x52, 0x32, 0x6a, 0x68,
	0x8f, 0x8c, 0x7c, 0x5f, 0x51, 0xea, 0x5e, 0x53, 0x00, 0x1f, 0xfa, 0xbe, 0xa4, 0xe9, 0xc1, 0x6c,
	0xfe, 0xb8, 0x20, 0x07, 0xfe, 0xba, 0xda, 0x7b, 0x78, 0x0c, 0x37, 0xd8, 0x7c, 0xb6, 0xb0, 0x67,
	0xd4, 0xd7, 0xb6, 0x16, 0x83, 0xd6, 0x40, 0xd6, 0x24, 0xf2, 0x1e, 0x8a, 0x7f, 0x7c, 0x1a, 0xe8,
	0x76, 0xa3, 0xa2, 0x7e, 0xc5, 0x46, 0x60, 0xc5, 0x35, 0x6c, 0x29, 0x9c, 0x34, 0xd6, 0xeb, 0x30,
	0xaf, 0xf6, 0xae, 0xea, 0x09, 0xc6, 0x0f, 0x02, 0x22, 0x1b, 0xd8, 0x29, 0x7b, 0xce, 0x40, 0x6c,
	0x0b, 0x78, 0xe3, 0x0b, 0xb8, 0x72, 0xc8, 0x74, 0x20, 0xc1, 0x71, 0x42, 0x62, 0x12, 0x7a, 0x98,
	0x84, 0x3c, 0x39, 0x28, 0x7d, 0x1a, 0x5d, 0x84, 0x71, 0x1a, 0x7a, 0xa4, 0x97, 0x1e, 0xab, 0xfc,
	0x10, 0x09, 0x2f, 0x24, 0x3d, 0xae, 0x1b, 0x0e, 0x15, 0x08, 0xa6, 0x04, 0x44, 0x75, 0x1b, 0xbf,
	0xb1, 0xe0, 0xf2, 0x91, 0x32, 0x45, 0x3d, 0x82, 0x7e, 0x68, 0x89, 0x73, 0xcf, 0x95, 0xa0, 0x24,
	0x7d, 0x85, 0xf2, 0x4f, 0x68, 0x24, 0xd2, 0xb7, 0x69, 0xe1, 0x5f, 0xf2, 0xf3, 0xbe, 0x92, 0xde,
	0xf8, 0x1d, 0x3a, 0xec, 0x12, 0xc4, 0x4d, 0x19, 0x65, 0x0b, 0x77, 0xde, 0x1a, 0x72, 0xe7, 0x47,
	0x5e, 0x95, 0x3b, 0x3f, 0x3a, 0xa4, 0x5f, 0x78, 0x0c, 0x6b, 0xd2, 0xff, 0x18, 0x09, 0xf4, 0xdd,
	0x63, 0x64, 0xb7, 0x43, 0x42, 0x2e, 0x27, 0x0c, 0xb2, 0xdd, 0xf7, 0x1e, 0x39, 0x2e, 0x09, 0xdd,
	0x03, 0x33, 0x57, 0xa8, 0xbb, 0x79, 0x5d, 0xb0, 0x6e, 0xa7, 0x9c, 0xdb, 0x8a, 0xd1, 0x56, 0x7c,
	0xeb, 0x29, 0x9b, 0x91, 0x43, 0x9e, 0x5a, 0xb0, 0x9e, 0x56, 0xc4, 0xcf, 0x27, 0x70, 0x30, 0x47,
	0xdc, 0x56, 0xc5, 0xf2, 0xb3, 0x4b, 0x37, 0x36, 0x3d, 0xb4, 0xc9, 0x98, 0x18, 0xde, 0x64, 0x7c,
	0x00, 0x8d, 0x3e, 0xfd, 0xcb, 0xda, 0x8d, 0x49, 0x69, 0x9f, 0xf3, 0x05, 0xfb, 0xbc, 0x5c, 0xdf,
	0x51, 0x39, 0x89, 0xbe, 0x63, 0xea, 0x99, 0xfb, 0x8e, 0x26, 0x2c, 0xf5, 0x6d, 0xbb, 0x43, 0x78,
	0x42, 0x5d, 0x99, 0xd9, 0x74, 0x98, 0xca, 0x76, 0xba, 0x25, 0x51, 0x68, 0x13, 0x2e, 0x0d, 0x9e,
	0xb6, 0x62, 0x1b, 0x4c, 0x49, 0xe7, 0xfb, 0xce, 0x53, 0xad, 0x61, 0x68, 0xd0, 0x82, 0xcb, 0x47,
	0x38, 0x4e, 0xc7, 0x49, 0x76, 0x69, 0xa8, 0xbb, 0xc4, 0x8b, 0x43, 0x7c, 0x73, 0x4b, 0x12, 0x22,
	0x1f, 0xde, 0x3e, 0xda, 0x1b, 0xd5, 0xa2, 0x38, 0x21, 0x81, 0xc3, 0xe9, 0x93, 0xf4, 0xad, 0xe6,
	0xf5, 0xa1, 0xde, 0xa7, 0xd6, 0xb7, 0x35, 0x0b, 0x7a, 0x04, 0x6b, 0xcf, 0x2c, 0x67, 0xa0, 0xd3,
	0x7c, 0xf3, 0x19, 0x24, 0x19, 0x56, 0xfa, 0x0c, 0xde, 0x38, 0x42, 0x50, 0xfa, 0xad, 0x26, 0x36,
	0xb3, 0xd2, 0x58, 0x57, 0x87, 0x18, 0x4b, 0x7f, 0xa9, 0x79, 0xce, 0x3e, 0xdc, 0x3e, 0x7a, 0x2b,
	0x05, 0x09, 0xe6, 0x8e, 0xd4, 0xd3, 0xd2, 0xda, 0xd0, 0x1d, 0x99, 0xe2, 0x8c, 0x7d, 0xbd, 0xab,
	0xc6, 0xbc, 0xb9, 0xe0, 0xc1, 0x2e, 0x76, 0xd9, 0x5c, 0xb7, 0xfc, 0x65, 0x08, 0x7d, 0x7b, 0x13,
	0xd1, 0xff, 0xb7, 0x60, 0xda, 0x4c, 0x75, 0xb2, 0xf5, 0xad, 0x36, 0xc9, 0x89, 0xa7, 0x35, 0x21,
	0xcc, 0xae, 0xea, 0x2f, 0xd1, 0xcf, 0xeb, 0x77, 0x26, 0x13, 0x5f, 0xde, 0x52, 0xe7, 0x2c, 0x47,
	0xb5, 0xff, 0x4b, 0x2f, 0xd8, 0xfe, 0x2f, 0xbf, 0x64, 0xfb, 0xbf, 0xf2, 0xd2, 0xed, 0x7f, 0xfd,
	0x85, 0xdb, 0xff, 0xd5, 0x67, 0x6c, 0xff, 0x4f, 0x1d, 0xdd, 0xfe, 0x9f, 0x7e, 0x81, 0xf6, 0xff,
	0xcc, 0x4b, 0xb6, 0xff, 0x67, 0x5f, 0xb0, 0xfd, 0x3f, 0xf7, 0x1c, 0xed, 0xff, 0xf9, 0xc1, 0xf6,
	0xbf, 0xf1, 0xa7, 0xca, 0x21, 0x7f, 0x3c, 0xa1, 0x7e, 0xd9, 0xfe, 0xd0, 0x3f, 0x34, 0x30, 0x2a,
	0xd1, 0x92, 0x3f, 0x34, 0x90, 0x86, 0xfd, 0x99, 0x05, 0xab, 0x87, 0x0e, 0xb3, 0x75, 0xf9, 0xe5,
	0x9c, 0xcc, 0x7d, 0x33, 0x04, 0xd9, 0xcb, 0xe6, 0x9f, 0x0b, 0x88, 0x08, 0xf4, 0x50, 0x4d, 0xd3,
	0x7f, 0x6a, 0x41, 0x7d, 0xf0, 0x31, 0x51, 0xbd, 0x25, 0xea, 0xdf, 0xf2, 0x3b, 0x21, 0xed, 0x8c,
	0x47, 0xcb, 0xa2, 0x76, 0xeb, 0x99, 0x02, 0xe8, 0xc7, 0x16, 0x2c, 0x0f, 0x72, 0x75, 0x08, 0xdb,
	0xd3, 0xbf, 0xff, 0x87, 0x4f, 0x50, 0x37, 0x21, 0xc6, 0x5e, 0xec, 0xd7, 0x4c, 0xfe, 0x32, 0xce,
	0x53, 0x0b, 0xe6, 0x07, 0xc6, 0x2a, 0xfa, 0x57, 0x02, 0x3f, 0x3d, 0x19, 0x95, 0x7a, 0x49, 0x64,
	0xcf, 0x9a, 0xca, 0x7c, 0x92, 0x44, 0xe8, 0x6b, 0x0b, 0x96, 0xfa, 0xeb, 0x7f, 0xdc, 0x89, 0x39,
	0xd1, 0xbf, 0x27, 0x78, 0x42, 0x43, 0x71, 0x3d, 0xcb, 0xb1, 0x51, 0xc1, 0xa9, 0x9a, 0x5b, 0x31,
	0x27, 0xe8, 0x07, 0x16, 0x2c, 0x96, 0xf5, 0xe5, 0xba, 0x57, 0xfd, 0xaf, 0x13, 0x3a, 0x30, 0x29,
	0xa3, 0xf8, 0x47, 0x31, 0xeb, 0x31, 0x6b, 0xc5, 0xe8, 0xab, 0x32, 0x13, 0x09, 0xed, 0x65, 0xb1,
	0x7a, 0x62, 0x0a, 0xa9, 0x3e, 0xac, 0xa8, 0x50, 0xab, 0xd9, 0xda, 0x21, 0xed, 0x09, 0xf9, 0xf7,
	0x58, 0x6b, 0x7f, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x6b, 0x45, 0x63, 0xc0, 0xae, 0x35, 0x00, 0x00,
}
