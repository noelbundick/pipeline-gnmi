// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mpls_te_fastreroute_protection_bag.proto

package cisco_ios_xr_mpls_te_oper_mpls_te_fast_reroute_protections_protection

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// MPLS TE Fast Reroute Protected LSP Information
type MplsTeFastrerouteProtectionBag_KEYS struct {
	SourceAddress        string   `protobuf:"bytes,1,opt,name=source_address,json=sourceAddress" json:"source_address,omitempty"`
	DestinationAddress   string   `protobuf:"bytes,2,opt,name=destination_address,json=destinationAddress" json:"destination_address,omitempty"`
	TunnelId             uint32   `protobuf:"varint,3,opt,name=tunnel_id,json=tunnelId" json:"tunnel_id,omitempty"`
	ExtendedTunnelId     string   `protobuf:"bytes,4,opt,name=extended_tunnel_id,json=extendedTunnelId" json:"extended_tunnel_id,omitempty"`
	LspId                uint32   `protobuf:"varint,5,opt,name=lsp_id,json=lspId" json:"lsp_id,omitempty"`
	SubGroupId           uint32   `protobuf:"varint,6,opt,name=sub_group_id,json=subGroupId" json:"sub_group_id,omitempty"`
	SubGroupOriginator   string   `protobuf:"bytes,7,opt,name=sub_group_originator,json=subGroupOriginator" json:"sub_group_originator,omitempty"`
	P2MpId               uint32   `protobuf:"varint,8,opt,name=p2_mp_id,json=p2MpId" json:"p2_mp_id,omitempty"`
	SessionType          uint32   `protobuf:"varint,9,opt,name=session_type,json=sessionType" json:"session_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeFastrerouteProtectionBag_KEYS) Reset()         { *m = MplsTeFastrerouteProtectionBag_KEYS{} }
func (m *MplsTeFastrerouteProtectionBag_KEYS) String() string { return proto.CompactTextString(m) }
func (*MplsTeFastrerouteProtectionBag_KEYS) ProtoMessage()    {}
func (*MplsTeFastrerouteProtectionBag_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_fastreroute_protection_bag_1d142d9dcb44da50, []int{0}
}
func (m *MplsTeFastrerouteProtectionBag_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeFastrerouteProtectionBag_KEYS.Unmarshal(m, b)
}
func (m *MplsTeFastrerouteProtectionBag_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeFastrerouteProtectionBag_KEYS.Marshal(b, m, deterministic)
}
func (dst *MplsTeFastrerouteProtectionBag_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeFastrerouteProtectionBag_KEYS.Merge(dst, src)
}
func (m *MplsTeFastrerouteProtectionBag_KEYS) XXX_Size() int {
	return xxx_messageInfo_MplsTeFastrerouteProtectionBag_KEYS.Size(m)
}
func (m *MplsTeFastrerouteProtectionBag_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeFastrerouteProtectionBag_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeFastrerouteProtectionBag_KEYS proto.InternalMessageInfo

func (m *MplsTeFastrerouteProtectionBag_KEYS) GetSourceAddress() string {
	if m != nil {
		return m.SourceAddress
	}
	return ""
}

func (m *MplsTeFastrerouteProtectionBag_KEYS) GetDestinationAddress() string {
	if m != nil {
		return m.DestinationAddress
	}
	return ""
}

func (m *MplsTeFastrerouteProtectionBag_KEYS) GetTunnelId() uint32 {
	if m != nil {
		return m.TunnelId
	}
	return 0
}

func (m *MplsTeFastrerouteProtectionBag_KEYS) GetExtendedTunnelId() string {
	if m != nil {
		return m.ExtendedTunnelId
	}
	return ""
}

func (m *MplsTeFastrerouteProtectionBag_KEYS) GetLspId() uint32 {
	if m != nil {
		return m.LspId
	}
	return 0
}

func (m *MplsTeFastrerouteProtectionBag_KEYS) GetSubGroupId() uint32 {
	if m != nil {
		return m.SubGroupId
	}
	return 0
}

func (m *MplsTeFastrerouteProtectionBag_KEYS) GetSubGroupOriginator() string {
	if m != nil {
		return m.SubGroupOriginator
	}
	return ""
}

func (m *MplsTeFastrerouteProtectionBag_KEYS) GetP2MpId() uint32 {
	if m != nil {
		return m.P2MpId
	}
	return 0
}

func (m *MplsTeFastrerouteProtectionBag_KEYS) GetSessionType() uint32 {
	if m != nil {
		return m.SessionType
	}
	return 0
}

type MplsTeFastrerouteProtectionBag struct {
	// Source
	SourceAddress string `protobuf:"bytes,50,opt,name=source_address,json=sourceAddress" json:"source_address,omitempty"`
	// Destination
	DestinationAddress string `protobuf:"bytes,51,opt,name=destination_address,json=destinationAddress" json:"destination_address,omitempty"`
	// Tunnel ID
	TunnelId uint32 `protobuf:"varint,52,opt,name=tunnel_id,json=tunnelId" json:"tunnel_id,omitempty"`
	// Extended Tunnel ID
	ExtendedTunnelId string `protobuf:"bytes,53,opt,name=extended_tunnel_id,json=extendedTunnelId" json:"extended_tunnel_id,omitempty"`
	// Tunnel Name
	TunnelName string `protobuf:"bytes,54,opt,name=tunnel_name,json=tunnelName" json:"tunnel_name,omitempty"`
	// Tunnel instance
	TunnelInstance uint32 `protobuf:"varint,55,opt,name=tunnel_instance,json=tunnelInstance" json:"tunnel_instance,omitempty"`
	// Role of LSP
	Role string `protobuf:"bytes,56,opt,name=role" json:"role,omitempty"`
	// Tunnel Admin status
	AdminStatus string `protobuf:"bytes,57,opt,name=admin_status,json=adminStatus" json:"admin_status,omitempty"`
	// Tunnel operational status
	OperationStatus string `protobuf:"bytes,58,opt,name=operation_status,json=operationStatus" json:"operation_status,omitempty"`
	// Indicates whether signalled
	IsSignalled bool `protobuf:"varint,59,opt,name=is_signalled,json=isSignalled" json:"is_signalled,omitempty"`
	// TRUE if frr protection is on
	IsFrrRequested bool `protobuf:"varint,60,opt,name=is_frr_requested,json=isFrrRequested" json:"is_frr_requested,omitempty"`
	// Indicates outbound FRR state
	OutboundFrrState string `protobuf:"bytes,61,opt,name=outbound_frr_state,json=outboundFrrState" json:"outbound_frr_state,omitempty"`
	// Indicates inbound FRR state
	InboundFrrState string `protobuf:"bytes,62,opt,name=inbound_frr_state,json=inboundFrrState" json:"inbound_frr_state,omitempty"`
	// Output intface of the LSP
	OutputInterfaceLsp string `protobuf:"bytes,63,opt,name=output_interface_lsp,json=outputInterfaceLsp" json:"output_interface_lsp,omitempty"`
	// Output label
	OutputLabel uint32 `protobuf:"varint,64,opt,name=output_label,json=outputLabel" json:"output_label,omitempty"`
	// Next hop
	NextHopAddress string `protobuf:"bytes,65,opt,name=next_hop_address,json=nextHopAddress" json:"next_hop_address,omitempty"`
	// FRR output tunnel intface
	FrrOutputTunnelInterface string `protobuf:"bytes,66,opt,name=frr_output_tunnel_interface,json=frrOutputTunnelInterface" json:"frr_output_tunnel_interface,omitempty"`
	// FRR output label
	FrrOutputLabel uint32 `protobuf:"varint,67,opt,name=frr_output_label,json=frrOutputLabel" json:"frr_output_label,omitempty"`
	// Backup status
	BackupStatus string `protobuf:"bytes,68,opt,name=backup_status,json=backupStatus" json:"backup_status,omitempty"`
	// Bandwidth pool type
	BandwidthPoolType string `protobuf:"bytes,69,opt,name=bandwidth_pool_type,json=bandwidthPoolType" json:"bandwidth_pool_type,omitempty"`
	// Bandwidth limit type
	BandwidthLimitType string `protobuf:"bytes,70,opt,name=bandwidth_limit_type,json=bandwidthLimitType" json:"bandwidth_limit_type,omitempty"`
	// Input intface of the LSP
	OriginalInputInterface string `protobuf:"bytes,71,opt,name=original_input_interface,json=originalInputInterface" json:"original_input_interface,omitempty"`
	// Input label
	InputLabel uint32 `protobuf:"varint,72,opt,name=input_label,json=inputLabel" json:"input_label,omitempty"`
	// Previous hop
	PreviousHopAddress string `protobuf:"bytes,73,opt,name=previous_hop_address,json=previousHopAddress" json:"previous_hop_address,omitempty"`
	// Backup bandwidth
	BackupBandwidth uint32 `protobuf:"varint,74,opt,name=backup_bandwidth,json=backupBandwidth" json:"backup_bandwidth,omitempty"`
	// Output interface of bkup tunnel
	FrrOutputInterface string `protobuf:"bytes,75,opt,name=frr_output_interface,json=frrOutputInterface" json:"frr_output_interface,omitempty"`
	// S2L Nexthop of the backup tunnel
	BackupNextHopAddress string `protobuf:"bytes,76,opt,name=backup_next_hop_address,json=backupNextHopAddress" json:"backup_next_hop_address,omitempty"`
	// LSP bandwidth type
	LspBandwidthType string `protobuf:"bytes,77,opt,name=lsp_bandwidth_type,json=lspBandwidthType" json:"lsp_bandwidth_type,omitempty"`
	// Outgoing i/f Sharing type
	SharingType string `protobuf:"bytes,78,opt,name=sharing_type,json=sharingType" json:"sharing_type,omitempty"`
	// Is P2P or P2MP Tunnel
	IsP2MpTunnel bool `protobuf:"varint,79,opt,name=is_p2_mp_tunnel,json=isP2MpTunnel" json:"is_p2_mp_tunnel,omitempty"`
	// S2L Sub-Group Originator ID
	SubGroupOriginalId string `protobuf:"bytes,80,opt,name=sub_group_original_id,json=subGroupOriginalId" json:"sub_group_original_id,omitempty"`
	// S2L Sub-Group ID
	SubGroupId uint32 `protobuf:"varint,81,opt,name=sub_group_id,json=subGroupId" json:"sub_group_id,omitempty"`
	// S2L P2MP ID
	P2MpId               uint32   `protobuf:"varint,82,opt,name=p2_mp_id,json=p2MpId" json:"p2_mp_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeFastrerouteProtectionBag) Reset()         { *m = MplsTeFastrerouteProtectionBag{} }
func (m *MplsTeFastrerouteProtectionBag) String() string { return proto.CompactTextString(m) }
func (*MplsTeFastrerouteProtectionBag) ProtoMessage()    {}
func (*MplsTeFastrerouteProtectionBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_fastreroute_protection_bag_1d142d9dcb44da50, []int{1}
}
func (m *MplsTeFastrerouteProtectionBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeFastrerouteProtectionBag.Unmarshal(m, b)
}
func (m *MplsTeFastrerouteProtectionBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeFastrerouteProtectionBag.Marshal(b, m, deterministic)
}
func (dst *MplsTeFastrerouteProtectionBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeFastrerouteProtectionBag.Merge(dst, src)
}
func (m *MplsTeFastrerouteProtectionBag) XXX_Size() int {
	return xxx_messageInfo_MplsTeFastrerouteProtectionBag.Size(m)
}
func (m *MplsTeFastrerouteProtectionBag) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeFastrerouteProtectionBag.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeFastrerouteProtectionBag proto.InternalMessageInfo

func (m *MplsTeFastrerouteProtectionBag) GetSourceAddress() string {
	if m != nil {
		return m.SourceAddress
	}
	return ""
}

func (m *MplsTeFastrerouteProtectionBag) GetDestinationAddress() string {
	if m != nil {
		return m.DestinationAddress
	}
	return ""
}

func (m *MplsTeFastrerouteProtectionBag) GetTunnelId() uint32 {
	if m != nil {
		return m.TunnelId
	}
	return 0
}

func (m *MplsTeFastrerouteProtectionBag) GetExtendedTunnelId() string {
	if m != nil {
		return m.ExtendedTunnelId
	}
	return ""
}

func (m *MplsTeFastrerouteProtectionBag) GetTunnelName() string {
	if m != nil {
		return m.TunnelName
	}
	return ""
}

func (m *MplsTeFastrerouteProtectionBag) GetTunnelInstance() uint32 {
	if m != nil {
		return m.TunnelInstance
	}
	return 0
}

func (m *MplsTeFastrerouteProtectionBag) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (m *MplsTeFastrerouteProtectionBag) GetAdminStatus() string {
	if m != nil {
		return m.AdminStatus
	}
	return ""
}

func (m *MplsTeFastrerouteProtectionBag) GetOperationStatus() string {
	if m != nil {
		return m.OperationStatus
	}
	return ""
}

func (m *MplsTeFastrerouteProtectionBag) GetIsSignalled() bool {
	if m != nil {
		return m.IsSignalled
	}
	return false
}

func (m *MplsTeFastrerouteProtectionBag) GetIsFrrRequested() bool {
	if m != nil {
		return m.IsFrrRequested
	}
	return false
}

func (m *MplsTeFastrerouteProtectionBag) GetOutboundFrrState() string {
	if m != nil {
		return m.OutboundFrrState
	}
	return ""
}

func (m *MplsTeFastrerouteProtectionBag) GetInboundFrrState() string {
	if m != nil {
		return m.InboundFrrState
	}
	return ""
}

func (m *MplsTeFastrerouteProtectionBag) GetOutputInterfaceLsp() string {
	if m != nil {
		return m.OutputInterfaceLsp
	}
	return ""
}

func (m *MplsTeFastrerouteProtectionBag) GetOutputLabel() uint32 {
	if m != nil {
		return m.OutputLabel
	}
	return 0
}

func (m *MplsTeFastrerouteProtectionBag) GetNextHopAddress() string {
	if m != nil {
		return m.NextHopAddress
	}
	return ""
}

func (m *MplsTeFastrerouteProtectionBag) GetFrrOutputTunnelInterface() string {
	if m != nil {
		return m.FrrOutputTunnelInterface
	}
	return ""
}

func (m *MplsTeFastrerouteProtectionBag) GetFrrOutputLabel() uint32 {
	if m != nil {
		return m.FrrOutputLabel
	}
	return 0
}

func (m *MplsTeFastrerouteProtectionBag) GetBackupStatus() string {
	if m != nil {
		return m.BackupStatus
	}
	return ""
}

func (m *MplsTeFastrerouteProtectionBag) GetBandwidthPoolType() string {
	if m != nil {
		return m.BandwidthPoolType
	}
	return ""
}

func (m *MplsTeFastrerouteProtectionBag) GetBandwidthLimitType() string {
	if m != nil {
		return m.BandwidthLimitType
	}
	return ""
}

func (m *MplsTeFastrerouteProtectionBag) GetOriginalInputInterface() string {
	if m != nil {
		return m.OriginalInputInterface
	}
	return ""
}

func (m *MplsTeFastrerouteProtectionBag) GetInputLabel() uint32 {
	if m != nil {
		return m.InputLabel
	}
	return 0
}

func (m *MplsTeFastrerouteProtectionBag) GetPreviousHopAddress() string {
	if m != nil {
		return m.PreviousHopAddress
	}
	return ""
}

func (m *MplsTeFastrerouteProtectionBag) GetBackupBandwidth() uint32 {
	if m != nil {
		return m.BackupBandwidth
	}
	return 0
}

func (m *MplsTeFastrerouteProtectionBag) GetFrrOutputInterface() string {
	if m != nil {
		return m.FrrOutputInterface
	}
	return ""
}

func (m *MplsTeFastrerouteProtectionBag) GetBackupNextHopAddress() string {
	if m != nil {
		return m.BackupNextHopAddress
	}
	return ""
}

func (m *MplsTeFastrerouteProtectionBag) GetLspBandwidthType() string {
	if m != nil {
		return m.LspBandwidthType
	}
	return ""
}

func (m *MplsTeFastrerouteProtectionBag) GetSharingType() string {
	if m != nil {
		return m.SharingType
	}
	return ""
}

func (m *MplsTeFastrerouteProtectionBag) GetIsP2MpTunnel() bool {
	if m != nil {
		return m.IsP2MpTunnel
	}
	return false
}

func (m *MplsTeFastrerouteProtectionBag) GetSubGroupOriginalId() string {
	if m != nil {
		return m.SubGroupOriginalId
	}
	return ""
}

func (m *MplsTeFastrerouteProtectionBag) GetSubGroupId() uint32 {
	if m != nil {
		return m.SubGroupId
	}
	return 0
}

func (m *MplsTeFastrerouteProtectionBag) GetP2MpId() uint32 {
	if m != nil {
		return m.P2MpId
	}
	return 0
}

func init() {
	proto.RegisterType((*MplsTeFastrerouteProtectionBag_KEYS)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.fast_reroute.protections.protection.mpls_te_fastreroute_protection_bag_KEYS")
	proto.RegisterType((*MplsTeFastrerouteProtectionBag)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.fast_reroute.protections.protection.mpls_te_fastreroute_protection_bag")
}

func init() {
	proto.RegisterFile("mpls_te_fastreroute_protection_bag.proto", fileDescriptor_mpls_te_fastreroute_protection_bag_1d142d9dcb44da50)
}

var fileDescriptor_mpls_te_fastreroute_protection_bag_1d142d9dcb44da50 = []byte{
	// 835 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0xdb, 0x72, 0x1c, 0x35,
	0x10, 0x2d, 0x87, 0xc4, 0xd8, 0xbd, 0xeb, 0x4b, 0x14, 0x07, 0x54, 0x95, 0x07, 0x1c, 0x53, 0xa9,
	0x6c, 0xa8, 0xd4, 0x62, 0x1c, 0x02, 0xe1, 0x12, 0x20, 0x01, 0x3b, 0x59, 0xe2, 0x1b, 0xeb, 0xbc,
	0xf0, 0xa4, 0x9a, 0xdd, 0x91, 0xd7, 0x2a, 0x66, 0x25, 0x21, 0x69, 0xc0, 0xf9, 0x0c, 0xfe, 0x95,
	0x0f, 0xa0, 0xd4, 0x2d, 0xcd, 0x8c, 0xb1, 0xa9, 0x84, 0x37, 0xef, 0x39, 0xa7, 0x8f, 0x5a, 0x67,
	0x5a, 0x6d, 0x18, 0xcc, 0x6d, 0xe5, 0x45, 0x90, 0xe2, 0xb4, 0xf0, 0xc1, 0x49, 0x67, 0xea, 0x20,
	0x85, 0x75, 0x26, 0xc8, 0x69, 0x50, 0x46, 0x8b, 0x49, 0x31, 0x1b, 0xc6, 0x9f, 0x86, 0xed, 0x4e,
	0x95, 0x9f, 0x1a, 0xa1, 0x8c, 0x17, 0xe7, 0x4e, 0xe4, 0x32, 0x63, 0xa5, 0x1b, 0xa6, 0x1f, 0xc3,
	0xe8, 0x21, 0x92, 0xc9, 0xb0, 0x35, 0xf1, 0x9d, 0xbf, 0xb7, 0xfe, 0xbe, 0x06, 0xf7, 0xdf, 0x7e,
	0xa6, 0x78, 0xb5, 0xfb, 0xeb, 0x09, 0xbb, 0x07, 0xab, 0xde, 0xd4, 0x6e, 0x2a, 0x45, 0x51, 0x96,
	0x4e, 0x7a, 0xcf, 0x17, 0x36, 0x17, 0x06, 0xcb, 0xe3, 0x15, 0x42, 0x9f, 0x11, 0xc8, 0x3e, 0x85,
	0x5b, 0xa5, 0xf4, 0x41, 0xe9, 0x02, 0xcb, 0xb3, 0xf6, 0x1a, 0x6a, 0x59, 0x87, 0xca, 0x05, 0x77,
	0x60, 0x39, 0xd4, 0x5a, 0xcb, 0x4a, 0xa8, 0x92, 0xbf, 0xb7, 0xb9, 0x30, 0x58, 0x19, 0x2f, 0x11,
	0x30, 0x2a, 0xd9, 0x43, 0x60, 0xf2, 0x3c, 0x48, 0x5d, 0xca, 0x52, 0xb4, 0xaa, 0xeb, 0x68, 0xb6,
	0x9e, 0x99, 0xd7, 0x59, 0x7d, 0x1b, 0x16, 0x2b, 0x6f, 0xa3, 0xe2, 0x06, 0xfa, 0xdc, 0xa8, 0xbc,
	0x1d, 0x95, 0x6c, 0x13, 0xfa, 0xbe, 0x9e, 0x88, 0x99, 0x33, 0x35, 0x92, 0x8b, 0x48, 0x82, 0xaf,
	0x27, 0x2f, 0x22, 0x34, 0x2a, 0xd9, 0x36, 0x6c, 0xb4, 0x0a, 0xe3, 0xd4, 0x2c, 0xf6, 0x68, 0x1c,
	0x7f, 0x9f, 0xba, 0xce, 0xca, 0xa3, 0x86, 0x61, 0x1c, 0x96, 0xec, 0x8e, 0x98, 0xa3, 0xdf, 0x12,
	0xfa, 0x2d, 0xda, 0x9d, 0x83, 0xe8, 0x75, 0x17, 0xfa, 0x5e, 0x7a, 0x1f, 0x2f, 0x1f, 0xde, 0x58,
	0xc9, 0x97, 0x91, 0xed, 0x25, 0xec, 0xf5, 0x1b, 0x2b, 0xb7, 0xfe, 0xea, 0xc1, 0xd6, 0xdb, 0x63,
	0xbf, 0x22, 0xf1, 0x9d, 0xff, 0x91, 0xf8, 0xa3, 0x77, 0x4b, 0xfc, 0xf3, 0x77, 0x4a, 0xfc, 0xf1,
	0x7f, 0x24, 0xfe, 0x11, 0xf4, 0x92, 0x48, 0x17, 0x73, 0xc9, 0xbf, 0x40, 0x19, 0x10, 0x74, 0x58,
	0xcc, 0x25, 0xbb, 0x0f, 0x6b, 0xd9, 0x45, 0xfb, 0x50, 0xe8, 0xa9, 0xe4, 0x5f, 0xe2, 0x89, 0xab,
	0xe9, 0xc4, 0x84, 0x32, 0x06, 0xd7, 0x9d, 0xa9, 0x24, 0x7f, 0x82, 0x16, 0xf8, 0x77, 0x8c, 0xb2,
	0x28, 0xe7, 0x4a, 0x0b, 0x1f, 0x8a, 0x50, 0x7b, 0xfe, 0x15, 0x72, 0x3d, 0xc4, 0x4e, 0x10, 0x62,
	0x0f, 0x60, 0x3d, 0x4e, 0x3d, 0x5d, 0x3d, 0xc9, 0xbe, 0x46, 0xd9, 0x5a, 0x83, 0x27, 0xe9, 0x5d,
	0xe8, 0x2b, 0x2f, 0xbc, 0x9a, 0xe9, 0xa2, 0xaa, 0x64, 0xc9, 0xbf, 0xd9, 0x5c, 0x18, 0x2c, 0x8d,
	0x7b, 0xca, 0x9f, 0x64, 0x88, 0x0d, 0x60, 0x5d, 0x79, 0x71, 0xea, 0x9c, 0x70, 0xf2, 0xf7, 0x5a,
	0xfa, 0x20, 0x4b, 0xfe, 0x2d, 0xca, 0x56, 0x95, 0xdf, 0x73, 0x6e, 0x9c, 0xd1, 0x18, 0x93, 0xa9,
	0xc3, 0xc4, 0xd4, 0xba, 0x44, 0x7d, 0x3c, 0x5a, 0xf2, 0xa7, 0x14, 0x53, 0x66, 0xf6, 0x9c, 0x8b,
	0x67, 0x4b, 0xf6, 0x09, 0xdc, 0x54, 0xfa, 0xdf, 0xe2, 0xef, 0xa8, 0xcd, 0x44, 0x34, 0xda, 0x6d,
	0xd8, 0x30, 0x75, 0xb0, 0x75, 0x10, 0x4a, 0x07, 0xe9, 0x4e, 0x8b, 0xa9, 0x14, 0x95, 0xb7, 0xfc,
	0x7b, 0xfa, 0x9e, 0xc4, 0x8d, 0x32, 0xb5, 0xef, 0x6d, 0xbc, 0x58, 0xaa, 0xa8, 0x8a, 0x89, 0xac,
	0xf8, 0x0f, 0x34, 0x71, 0x84, 0xed, 0x47, 0x28, 0x5e, 0x4c, 0xcb, 0xf3, 0x20, 0xce, 0x8c, 0x6d,
	0x06, 0xe4, 0x19, 0x1a, 0xae, 0x46, 0xfc, 0xa5, 0xb1, 0x79, 0x38, 0x9e, 0xc2, 0x9d, 0xd8, 0x62,
	0x32, 0x6c, 0xbe, 0x5d, 0x3a, 0x8e, 0x3f, 0xc7, 0x22, 0x7e, 0xea, 0xdc, 0x11, 0x2a, 0xd2, 0x24,
	0x64, 0x3e, 0x1e, 0xd4, 0x29, 0xa7, 0x7e, 0x7e, 0xa4, 0x0f, 0xde, 0xd4, 0x50, 0x4b, 0x1f, 0xc3,
	0xca, 0xa4, 0x98, 0xfe, 0x56, 0xdb, 0xfc, 0xd9, 0x7e, 0x42, 0xeb, 0x3e, 0x81, 0xe9, 0x9b, 0x0d,
	0xe1, 0xd6, 0xa4, 0xd0, 0xe5, 0x9f, 0xaa, 0x0c, 0x67, 0xc2, 0x1a, 0x53, 0xd1, 0x9b, 0xda, 0x45,
	0xe9, 0xcd, 0x86, 0x3a, 0x36, 0xa6, 0x8a, 0x2f, 0x2b, 0x86, 0xd7, 0xea, 0x2b, 0x35, 0x57, 0x81,
	0x0a, 0xf6, 0x28, 0xbc, 0x86, 0xdb, 0x8f, 0x14, 0x56, 0x3c, 0x01, 0x9e, 0x1e, 0x7c, 0xbc, 0xe6,
	0x85, 0xd8, 0xf9, 0x0b, 0xac, 0xfa, 0x20, 0xf3, 0x23, 0xdd, 0x4d, 0x3e, 0xce, 0x3e, 0x15, 0xd0,
	0x2d, 0x5f, 0xd2, 0x56, 0x41, 0x88, 0x6e, 0xb8, 0x0d, 0x1b, 0xd6, 0xc9, 0x3f, 0x94, 0xa9, 0xfd,
	0x85, 0xe0, 0x47, 0xd4, 0x4c, 0xe6, 0x3a, 0xe1, 0x3f, 0x80, 0xf5, 0x94, 0x49, 0xd3, 0x29, 0xff,
	0x19, 0x7d, 0xd7, 0x08, 0x7f, 0x9e, 0xe1, 0x68, 0xde, 0x09, 0xba, 0xed, 0xf9, 0x15, 0x99, 0x37,
	0x61, 0xb7, 0xfd, 0x3e, 0x86, 0x0f, 0x93, 0xf9, 0xa5, 0x51, 0xd8, 0xc7, 0xa2, 0x0d, 0xa2, 0x0f,
	0x2f, 0x0e, 0xc4, 0x43, 0x60, 0x71, 0xa9, 0xb6, 0xb1, 0x62, 0xa0, 0x07, 0x34, 0xe9, 0x95, 0x6f,
	0x5b, 0xc2, 0x38, 0xe3, 0xf6, 0x3b, 0x2b, 0x9c, 0xd2, 0x33, 0xd2, 0x1d, 0xd2, 0x93, 0x4d, 0x18,
	0x4a, 0xee, 0xc1, 0x9a, 0xf2, 0x82, 0xb6, 0x27, 0xcd, 0x17, 0x3f, 0xc2, 0x37, 0xd6, 0x57, 0xfe,
	0x78, 0xe7, 0xc0, 0xd2, 0x48, 0xb1, 0xcf, 0xe0, 0xf6, 0xa5, 0x9d, 0x8c, 0xbb, 0xe8, 0xf8, 0xca,
	0xa5, 0x5c, 0x5d, 0xb1, 0xe8, 0x7f, 0xb9, 0xb4, 0xe8, 0xbb, 0x6b, 0x7b, 0xdc, 0x5d, 0xdb, 0x93,
	0x45, 0xfc, 0xc7, 0xfa, 0xe8, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xdf, 0x42, 0xbf, 0xfb, 0x84,
	0x07, 0x00, 0x00,
}
