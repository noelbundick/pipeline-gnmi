// Code generated by protoc-gen-go. DO NOT EDIT.
// source: te_fib_nh_route_bag.proto

package cisco_ios_xr_mpls_te_oper_mpls_te_fib_next_hop_routes_fib_next_hop_route

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TeFibNhRouteBag_KEYS struct {
	PrefixAddress        string   `protobuf:"bytes,1,opt,name=prefix_address,json=prefixAddress" json:"prefix_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeFibNhRouteBag_KEYS) Reset()         { *m = TeFibNhRouteBag_KEYS{} }
func (m *TeFibNhRouteBag_KEYS) String() string { return proto.CompactTextString(m) }
func (*TeFibNhRouteBag_KEYS) ProtoMessage()    {}
func (*TeFibNhRouteBag_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_te_fib_nh_route_bag_28afacef71497309, []int{0}
}
func (m *TeFibNhRouteBag_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeFibNhRouteBag_KEYS.Unmarshal(m, b)
}
func (m *TeFibNhRouteBag_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeFibNhRouteBag_KEYS.Marshal(b, m, deterministic)
}
func (dst *TeFibNhRouteBag_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeFibNhRouteBag_KEYS.Merge(dst, src)
}
func (m *TeFibNhRouteBag_KEYS) XXX_Size() int {
	return xxx_messageInfo_TeFibNhRouteBag_KEYS.Size(m)
}
func (m *TeFibNhRouteBag_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_TeFibNhRouteBag_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_TeFibNhRouteBag_KEYS proto.InternalMessageInfo

func (m *TeFibNhRouteBag_KEYS) GetPrefixAddress() string {
	if m != nil {
		return m.PrefixAddress
	}
	return ""
}

type TeFibNhRouteBag struct {
	// Prefix Address
	PrefixAddr string `protobuf:"bytes,50,opt,name=prefix_addr,json=prefixAddr" json:"prefix_addr,omitempty"`
	// Create Time
	CreateTime uint32 `protobuf:"varint,51,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	// Last Used Time
	LastUsedTime uint32 `protobuf:"varint,52,opt,name=last_used_time,json=lastUsedTime" json:"last_used_time,omitempty"`
	// Last Update Time
	LastUpdateTime uint32 `protobuf:"varint,53,opt,name=last_update_time,json=lastUpdateTime" json:"last_update_time,omitempty"`
	// Expire Time
	ExpireTime uint32 `protobuf:"varint,54,opt,name=expire_time,json=expireTime" json:"expire_time,omitempty"`
	// Is Registered
	IsRegistered bool `protobuf:"varint,55,opt,name=is_registered,json=isRegistered" json:"is_registered,omitempty"`
	// Is Notified
	IsNotified bool `protobuf:"varint,56,opt,name=is_notified,json=isNotified" json:"is_notified,omitempty"`
	// Is Stale
	IsStale bool `protobuf:"varint,57,opt,name=is_stale,json=isStale" json:"is_stale,omitempty"`
	// Next Hop Paths
	NextHopPaths         []*TeFibNhPathBag `protobuf:"bytes,58,rep,name=next_hop_paths,json=nextHopPaths" json:"next_hop_paths,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TeFibNhRouteBag) Reset()         { *m = TeFibNhRouteBag{} }
func (m *TeFibNhRouteBag) String() string { return proto.CompactTextString(m) }
func (*TeFibNhRouteBag) ProtoMessage()    {}
func (*TeFibNhRouteBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_te_fib_nh_route_bag_28afacef71497309, []int{1}
}
func (m *TeFibNhRouteBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeFibNhRouteBag.Unmarshal(m, b)
}
func (m *TeFibNhRouteBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeFibNhRouteBag.Marshal(b, m, deterministic)
}
func (dst *TeFibNhRouteBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeFibNhRouteBag.Merge(dst, src)
}
func (m *TeFibNhRouteBag) XXX_Size() int {
	return xxx_messageInfo_TeFibNhRouteBag.Size(m)
}
func (m *TeFibNhRouteBag) XXX_DiscardUnknown() {
	xxx_messageInfo_TeFibNhRouteBag.DiscardUnknown(m)
}

var xxx_messageInfo_TeFibNhRouteBag proto.InternalMessageInfo

func (m *TeFibNhRouteBag) GetPrefixAddr() string {
	if m != nil {
		return m.PrefixAddr
	}
	return ""
}

func (m *TeFibNhRouteBag) GetCreateTime() uint32 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *TeFibNhRouteBag) GetLastUsedTime() uint32 {
	if m != nil {
		return m.LastUsedTime
	}
	return 0
}

func (m *TeFibNhRouteBag) GetLastUpdateTime() uint32 {
	if m != nil {
		return m.LastUpdateTime
	}
	return 0
}

func (m *TeFibNhRouteBag) GetExpireTime() uint32 {
	if m != nil {
		return m.ExpireTime
	}
	return 0
}

func (m *TeFibNhRouteBag) GetIsRegistered() bool {
	if m != nil {
		return m.IsRegistered
	}
	return false
}

func (m *TeFibNhRouteBag) GetIsNotified() bool {
	if m != nil {
		return m.IsNotified
	}
	return false
}

func (m *TeFibNhRouteBag) GetIsStale() bool {
	if m != nil {
		return m.IsStale
	}
	return false
}

func (m *TeFibNhRouteBag) GetNextHopPaths() []*TeFibNhPathBag {
	if m != nil {
		return m.NextHopPaths
	}
	return nil
}

type TeFibNhPathBag struct {
	// Outgoing Interface
	Interface string `protobuf:"bytes,1,opt,name=interface" json:"interface,omitempty"`
	// Next Hop Address
	NextHopAddress string `protobuf:"bytes,2,opt,name=next_hop_address,json=nextHopAddress" json:"next_hop_address,omitempty"`
	// Outgoing Label Stack
	LabelStack           []uint32 `protobuf:"varint,3,rep,packed,name=label_stack,json=labelStack" json:"label_stack,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeFibNhPathBag) Reset()         { *m = TeFibNhPathBag{} }
func (m *TeFibNhPathBag) String() string { return proto.CompactTextString(m) }
func (*TeFibNhPathBag) ProtoMessage()    {}
func (*TeFibNhPathBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_te_fib_nh_route_bag_28afacef71497309, []int{2}
}
func (m *TeFibNhPathBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeFibNhPathBag.Unmarshal(m, b)
}
func (m *TeFibNhPathBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeFibNhPathBag.Marshal(b, m, deterministic)
}
func (dst *TeFibNhPathBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeFibNhPathBag.Merge(dst, src)
}
func (m *TeFibNhPathBag) XXX_Size() int {
	return xxx_messageInfo_TeFibNhPathBag.Size(m)
}
func (m *TeFibNhPathBag) XXX_DiscardUnknown() {
	xxx_messageInfo_TeFibNhPathBag.DiscardUnknown(m)
}

var xxx_messageInfo_TeFibNhPathBag proto.InternalMessageInfo

func (m *TeFibNhPathBag) GetInterface() string {
	if m != nil {
		return m.Interface
	}
	return ""
}

func (m *TeFibNhPathBag) GetNextHopAddress() string {
	if m != nil {
		return m.NextHopAddress
	}
	return ""
}

func (m *TeFibNhPathBag) GetLabelStack() []uint32 {
	if m != nil {
		return m.LabelStack
	}
	return nil
}

func init() {
	proto.RegisterType((*TeFibNhRouteBag_KEYS)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.fib_next_hop_routes.fib_next_hop_route.te_fib_nh_route_bag_KEYS")
	proto.RegisterType((*TeFibNhRouteBag)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.fib_next_hop_routes.fib_next_hop_route.te_fib_nh_route_bag")
	proto.RegisterType((*TeFibNhPathBag)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.fib_next_hop_routes.fib_next_hop_route.te_fib_nh_path_bag")
}

func init() {
	proto.RegisterFile("te_fib_nh_route_bag.proto", fileDescriptor_te_fib_nh_route_bag_28afacef71497309)
}

var fileDescriptor_te_fib_nh_route_bag_28afacef71497309 = []byte{
	// 391 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0x4d, 0x8b, 0x13, 0x41,
	0x10, 0x86, 0x19, 0x03, 0xba, 0x5b, 0xf9, 0x40, 0xda, 0x4b, 0x2f, 0x08, 0x3b, 0x44, 0x85, 0x39,
	0xcd, 0x61, 0xd7, 0xef, 0xdb, 0x1e, 0x84, 0x05, 0x41, 0x64, 0xe2, 0x1e, 0x04, 0xa1, 0xe8, 0xcc,
	0x54, 0x36, 0x85, 0x93, 0x74, 0xd3, 0xd5, 0x81, 0x5c, 0xbc, 0xf8, 0x83, 0xfc, 0x8d, 0xd2, 0xdd,
	0x63, 0x22, 0x98, 0xa3, 0xc7, 0x7e, 0xfa, 0x79, 0xab, 0xa0, 0xaa, 0xe0, 0x22, 0x10, 0xae, 0x78,
	0x89, 0xdb, 0x35, 0x7a, 0xbb, 0x0b, 0x84, 0x4b, 0x73, 0x5f, 0x3b, 0x6f, 0x83, 0x55, 0xb7, 0x2d,
	0x4b, 0x6b, 0x91, 0xad, 0xe0, 0xde, 0xe3, 0xc6, 0xf5, 0x82, 0x81, 0xd0, 0x3a, 0xf2, 0xf5, 0xf0,
	0xa8, 0x53, 0x92, 0xf6, 0x01, 0xd7, 0xd6, 0xe5, 0xbc, 0x9c, 0x60, 0xf3, 0x1b, 0xd0, 0x27, 0xda,
	0xe0, 0xc7, 0x0f, 0x5f, 0x17, 0xea, 0x05, 0xcc, 0x9c, 0xa7, 0x15, 0xef, 0xd1, 0x74, 0x9d, 0x27,
	0x11, 0x5d, 0x94, 0x45, 0x75, 0xde, 0x4c, 0x33, 0xbd, 0xc9, 0x70, 0xfe, 0x6b, 0x04, 0x4f, 0x4e,
	0xd4, 0x50, 0x97, 0x30, 0xfe, 0x2b, 0xae, 0xaf, 0x52, 0x16, 0x8e, 0xd9, 0x28, 0xb4, 0x9e, 0x4c,
	0x20, 0x0c, 0xbc, 0x21, 0x7d, 0x5d, 0x16, 0xd5, 0xb4, 0x81, 0x8c, 0xbe, 0xf0, 0x86, 0xd4, 0x73,
	0x98, 0xf5, 0x46, 0x02, 0xee, 0x84, 0xba, 0xec, 0xbc, 0x4c, 0xce, 0x24, 0xd2, 0x3b, 0xa1, 0x2e,
	0x59, 0x15, 0x3c, 0xce, 0x96, 0xeb, 0x0e, 0xb5, 0x5e, 0x25, 0x2f, 0xa5, 0xef, 0x12, 0x4e, 0xe6,
	0x25, 0x8c, 0x69, 0xef, 0xd8, 0x0f, 0xd2, 0xeb, 0xdc, 0x30, 0xa3, 0x24, 0x3c, 0x83, 0x29, 0x0b,
	0x7a, 0xba, 0x67, 0x09, 0xe4, 0xa9, 0xd3, 0x6f, 0xca, 0xa2, 0x3a, 0x6b, 0x26, 0x2c, 0xcd, 0x81,
	0xc5, 0x2a, 0x2c, 0xb8, 0xb5, 0x81, 0x57, 0x4c, 0x9d, 0x7e, 0x9b, 0x14, 0x60, 0xf9, 0x34, 0x10,
	0x75, 0x01, 0x67, 0x2c, 0x28, 0xc1, 0xf4, 0xa4, 0xdf, 0xa5, 0xdf, 0x47, 0x2c, 0x8b, 0xf8, 0x54,
	0x3f, 0x0b, 0x98, 0x1d, 0x36, 0xe0, 0x4c, 0x58, 0x8b, 0x7e, 0x5f, 0x8e, 0xaa, 0xf1, 0xd5, 0xb7,
	0xfa, 0x7f, 0xad, 0xb4, 0x3e, 0xee, 0x22, 0x36, 0x88, 0xab, 0x68, 0x26, 0x51, 0xb9, 0xb5, 0xee,
	0x73, 0xec, 0x38, 0xff, 0x01, 0xea, 0x5f, 0x47, 0x3d, 0x85, 0x73, 0xde, 0x06, 0xf2, 0x2b, 0xd3,
	0xd2, 0xb0, 0xe8, 0x23, 0x88, 0x43, 0x3e, 0xb4, 0xf9, 0x73, 0x0d, 0x0f, 0x92, 0x34, 0x1b, 0x6a,
	0x0f, 0xe7, 0x10, 0xc7, 0xd3, 0x9b, 0x25, 0xf5, 0x71, 0x00, 0xed, 0x77, 0x3d, 0x2a, 0x47, 0x71,
	0xc8, 0x09, 0x2d, 0x22, 0x59, 0x3e, 0x4c, 0x37, 0x7c, 0xfd, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x05,
	0xcb, 0xf1, 0x0f, 0xe0, 0x02, 0x00, 0x00,
}
