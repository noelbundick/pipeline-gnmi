// Code generated by protoc-gen-go. DO NOT EDIT.
// source: te_sh_igp.proto

package cisco_ios_xr_mpls_te_oper_mpls_te_igp_area_briefs_igp_area_brief

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// An IGP instance
type TeShIgp_KEYS struct {
	Protocol             string   `protobuf:"bytes,1,opt,name=protocol" json:"protocol,omitempty"`
	ProcessTag           string   `protobuf:"bytes,2,opt,name=process_tag,json=processTag" json:"process_tag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeShIgp_KEYS) Reset()         { *m = TeShIgp_KEYS{} }
func (m *TeShIgp_KEYS) String() string { return proto.CompactTextString(m) }
func (*TeShIgp_KEYS) ProtoMessage()    {}
func (*TeShIgp_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_te_sh_igp_b8bf701cb2d16d4e, []int{0}
}
func (m *TeShIgp_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeShIgp_KEYS.Unmarshal(m, b)
}
func (m *TeShIgp_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeShIgp_KEYS.Marshal(b, m, deterministic)
}
func (dst *TeShIgp_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeShIgp_KEYS.Merge(dst, src)
}
func (m *TeShIgp_KEYS) XXX_Size() int {
	return xxx_messageInfo_TeShIgp_KEYS.Size(m)
}
func (m *TeShIgp_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_TeShIgp_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_TeShIgp_KEYS proto.InternalMessageInfo

func (m *TeShIgp_KEYS) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *TeShIgp_KEYS) GetProcessTag() string {
	if m != nil {
		return m.ProcessTag
	}
	return ""
}

type TeShIgp struct {
	// IGP type
	IgpType string `protobuf:"bytes,50,opt,name=igp_type,json=igpType" json:"igp_type,omitempty"`
	//  The IGP instance name
	InstanceName string `protobuf:"bytes,51,opt,name=instance_name,json=instanceName" json:"instance_name,omitempty"`
	//  The IGP instance's system/router-id; interpret appropriately depending on IGP type
	IgpSystemId string `protobuf:"bytes,52,opt,name=igp_system_id,json=igpSystemId" json:"igp_system_id,omitempty"`
	// Configured TE router-id
	ConfiguredTeRouterId string `protobuf:"bytes,53,opt,name=configured_te_router_id,json=configuredTeRouterId" json:"configured_te_router_id,omitempty"`
	// Global router-id
	GlobalRouterId string `protobuf:"bytes,54,opt,name=global_router_id,json=globalRouterId" json:"global_router_id,omitempty"`
	// Secondary router-ids
	SecondaryRouterId [][]byte `protobuf:"bytes,55,rep,name=secondary_router_id,json=secondaryRouterId,proto3" json:"secondary_router_id,omitempty"`
	// Global router-id for GMPLS (optical TE)
	GloballRouterIdOptical string `protobuf:"bytes,56,opt,name=globall_router_id_optical,json=globallRouterIdOptical" json:"globall_router_id_optical,omitempty"`
	// TE router-id in use
	InUseTeRouterId string `protobuf:"bytes,57,opt,name=in_use_te_router_id,json=inUseTeRouterId" json:"in_use_te_router_id,omitempty"`
	// Flag to indicate whether the IGP connection is open or not
	IsConnectionUp bool `protobuf:"varint,58,opt,name=is_connection_up,json=isConnectionUp" json:"is_connection_up,omitempty"`
	// Number of times IGP connection has gone up
	ConnectionUpCount uint32 `protobuf:"varint,59,opt,name=connection_up_count,json=connectionUpCount" json:"connection_up_count,omitempty"`
	// Number of times IGP connection has gone down
	ConnectionDownCount uint32 `protobuf:"varint,60,opt,name=connection_down_count,json=connectionDownCount" json:"connection_down_count,omitempty"`
	// IGP area information
	AreaList             []*TeShIgpArea `protobuf:"bytes,61,rep,name=area_list,json=areaList" json:"area_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *TeShIgp) Reset()         { *m = TeShIgp{} }
func (m *TeShIgp) String() string { return proto.CompactTextString(m) }
func (*TeShIgp) ProtoMessage()    {}
func (*TeShIgp) Descriptor() ([]byte, []int) {
	return fileDescriptor_te_sh_igp_b8bf701cb2d16d4e, []int{1}
}
func (m *TeShIgp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeShIgp.Unmarshal(m, b)
}
func (m *TeShIgp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeShIgp.Marshal(b, m, deterministic)
}
func (dst *TeShIgp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeShIgp.Merge(dst, src)
}
func (m *TeShIgp) XXX_Size() int {
	return xxx_messageInfo_TeShIgp.Size(m)
}
func (m *TeShIgp) XXX_DiscardUnknown() {
	xxx_messageInfo_TeShIgp.DiscardUnknown(m)
}

var xxx_messageInfo_TeShIgp proto.InternalMessageInfo

func (m *TeShIgp) GetIgpType() string {
	if m != nil {
		return m.IgpType
	}
	return ""
}

func (m *TeShIgp) GetInstanceName() string {
	if m != nil {
		return m.InstanceName
	}
	return ""
}

func (m *TeShIgp) GetIgpSystemId() string {
	if m != nil {
		return m.IgpSystemId
	}
	return ""
}

func (m *TeShIgp) GetConfiguredTeRouterId() string {
	if m != nil {
		return m.ConfiguredTeRouterId
	}
	return ""
}

func (m *TeShIgp) GetGlobalRouterId() string {
	if m != nil {
		return m.GlobalRouterId
	}
	return ""
}

func (m *TeShIgp) GetSecondaryRouterId() [][]byte {
	if m != nil {
		return m.SecondaryRouterId
	}
	return nil
}

func (m *TeShIgp) GetGloballRouterIdOptical() string {
	if m != nil {
		return m.GloballRouterIdOptical
	}
	return ""
}

func (m *TeShIgp) GetInUseTeRouterId() string {
	if m != nil {
		return m.InUseTeRouterId
	}
	return ""
}

func (m *TeShIgp) GetIsConnectionUp() bool {
	if m != nil {
		return m.IsConnectionUp
	}
	return false
}

func (m *TeShIgp) GetConnectionUpCount() uint32 {
	if m != nil {
		return m.ConnectionUpCount
	}
	return 0
}

func (m *TeShIgp) GetConnectionDownCount() uint32 {
	if m != nil {
		return m.ConnectionDownCount
	}
	return 0
}

func (m *TeShIgp) GetAreaList() []*TeShIgpArea {
	if m != nil {
		return m.AreaList
	}
	return nil
}

// Statistics for an IGP-area
type TeShIgpAreaStats struct {
	// Number of adjacency request messages sent
	AreaAdjacencyRequestMessages uint32 `protobuf:"varint,1,opt,name=area_adjacency_request_messages,json=areaAdjacencyRequestMessages" json:"area_adjacency_request_messages,omitempty"`
	// Number of adjacency announcement messages received
	AreaAdjacencyAnnounceMessages uint32 `protobuf:"varint,2,opt,name=area_adjacency_announce_messages,json=areaAdjacencyAnnounceMessages" json:"area_adjacency_announce_messages,omitempty"`
	// Number of local LSA floods sent
	AreaFloodMessages uint32 `protobuf:"varint,3,opt,name=area_flood_messages,json=areaFloodMessages" json:"area_flood_messages,omitempty"`
	// Number of LSA announcement messages received
	AreaLsaAnnounceMessages uint32 `protobuf:"varint,4,opt,name=area_lsa_announce_messages,json=areaLsaAnnounceMessages" json:"area_lsa_announce_messages,omitempty"`
	// Number of LSA fragment announcement messages received
	AreaLsaFragmentAnnounceMessages uint32 `protobuf:"varint,5,opt,name=area_lsa_fragment_announce_messages,json=areaLsaFragmentAnnounceMessages" json:"area_lsa_fragment_announce_messages,omitempty"`
	// Number of LSA delete messages received
	AreaLsaDeleteMessages uint32 `protobuf:"varint,6,opt,name=area_lsa_delete_messages,json=areaLsaDeleteMessages" json:"area_lsa_delete_messages,omitempty"`
	// Number of LSA fragment delete messages received
	AreaLsaFragmentDeleteMessages uint32 `protobuf:"varint,7,opt,name=area_lsa_fragment_delete_messages,json=areaLsaFragmentDeleteMessages" json:"area_lsa_fragment_delete_messages,omitempty"`
	// Number of tunnel announcement messages sent
	AreaTunnelAnnounceMessages uint32   `protobuf:"varint,8,opt,name=area_tunnel_announce_messages,json=areaTunnelAnnounceMessages" json:"area_tunnel_announce_messages,omitempty"`
	XXX_NoUnkeyedLiteral       struct{} `json:"-"`
	XXX_unrecognized           []byte   `json:"-"`
	XXX_sizecache              int32    `json:"-"`
}

func (m *TeShIgpAreaStats) Reset()         { *m = TeShIgpAreaStats{} }
func (m *TeShIgpAreaStats) String() string { return proto.CompactTextString(m) }
func (*TeShIgpAreaStats) ProtoMessage()    {}
func (*TeShIgpAreaStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_te_sh_igp_b8bf701cb2d16d4e, []int{2}
}
func (m *TeShIgpAreaStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeShIgpAreaStats.Unmarshal(m, b)
}
func (m *TeShIgpAreaStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeShIgpAreaStats.Marshal(b, m, deterministic)
}
func (dst *TeShIgpAreaStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeShIgpAreaStats.Merge(dst, src)
}
func (m *TeShIgpAreaStats) XXX_Size() int {
	return xxx_messageInfo_TeShIgpAreaStats.Size(m)
}
func (m *TeShIgpAreaStats) XXX_DiscardUnknown() {
	xxx_messageInfo_TeShIgpAreaStats.DiscardUnknown(m)
}

var xxx_messageInfo_TeShIgpAreaStats proto.InternalMessageInfo

func (m *TeShIgpAreaStats) GetAreaAdjacencyRequestMessages() uint32 {
	if m != nil {
		return m.AreaAdjacencyRequestMessages
	}
	return 0
}

func (m *TeShIgpAreaStats) GetAreaAdjacencyAnnounceMessages() uint32 {
	if m != nil {
		return m.AreaAdjacencyAnnounceMessages
	}
	return 0
}

func (m *TeShIgpAreaStats) GetAreaFloodMessages() uint32 {
	if m != nil {
		return m.AreaFloodMessages
	}
	return 0
}

func (m *TeShIgpAreaStats) GetAreaLsaAnnounceMessages() uint32 {
	if m != nil {
		return m.AreaLsaAnnounceMessages
	}
	return 0
}

func (m *TeShIgpAreaStats) GetAreaLsaFragmentAnnounceMessages() uint32 {
	if m != nil {
		return m.AreaLsaFragmentAnnounceMessages
	}
	return 0
}

func (m *TeShIgpAreaStats) GetAreaLsaDeleteMessages() uint32 {
	if m != nil {
		return m.AreaLsaDeleteMessages
	}
	return 0
}

func (m *TeShIgpAreaStats) GetAreaLsaFragmentDeleteMessages() uint32 {
	if m != nil {
		return m.AreaLsaFragmentDeleteMessages
	}
	return 0
}

func (m *TeShIgpAreaStats) GetAreaTunnelAnnounceMessages() uint32 {
	if m != nil {
		return m.AreaTunnelAnnounceMessages
	}
	return 0
}

// Data relating to an active IGP area
type TeShIgpAreaActive struct {
	// Number of interfaces running over this area
	InterfacesCount uint32 `protobuf:"varint,1,opt,name=interfaces_count,json=interfacesCount" json:"interfaces_count,omitempty"`
	// Flag to indicate IDT for link adjacencies was received
	LinkIdtReceived bool `protobuf:"varint,2,opt,name=link_idt_received,json=linkIdtReceived" json:"link_idt_received,omitempty"`
	// Flag to indicate IDT topology was received
	TopologyIdtReceived bool `protobuf:"varint,3,opt,name=topology_idt_received,json=topologyIdtReceived" json:"topology_idt_received,omitempty"`
	// Flag to indicate if the area is SR strict
	SrStrict bool `protobuf:"varint,4,opt,name=sr_strict,json=srStrict" json:"sr_strict,omitempty"`
	// Number of p2p tunnel heads whose path was calculated over this area
	P2PHeadsCount uint32 `protobuf:"varint,5,opt,name=p2_p_heads_count,json=p2PHeadsCount" json:"p2_p_heads_count,omitempty"`
	// Number of p2p tunnel heads which have been autoroute-announced into this area
	P2PAutorouteAnnouncedCount uint32 `protobuf:"varint,6,opt,name=p2_p_autoroute_announced_count,json=p2PAutorouteAnnouncedCount" json:"p2_p_autoroute_announced_count,omitempty"`
	// Number of p2p tunnel heads which have been announced as forwarding adjacencies in this area
	P2PForwardingAdjacencyCount uint32 `protobuf:"varint,7,opt,name=p2_p_forwarding_adjacency_count,json=p2PForwardingAdjacencyCount" json:"p2_p_forwarding_adjacency_count,omitempty"`
	// Number of P2MP destinations whose path was calculated over this area
	P2MpDestinationCount uint32 `protobuf:"varint,8,opt,name=p2_mp_destination_count,json=p2MpDestinationCount" json:"p2_mp_destination_count,omitempty"`
	// Number of tunnels with a loose hop ERO expanded in this area
	TunnelLooseHops uint32 `protobuf:"varint,9,opt,name=tunnel_loose_hops,json=tunnelLooseHops" json:"tunnel_loose_hops,omitempty"`
	// Area communication statistics
	AreaStatistics       *TeShIgpAreaStats `protobuf:"bytes,10,opt,name=area_statistics,json=areaStatistics" json:"area_statistics,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TeShIgpAreaActive) Reset()         { *m = TeShIgpAreaActive{} }
func (m *TeShIgpAreaActive) String() string { return proto.CompactTextString(m) }
func (*TeShIgpAreaActive) ProtoMessage()    {}
func (*TeShIgpAreaActive) Descriptor() ([]byte, []int) {
	return fileDescriptor_te_sh_igp_b8bf701cb2d16d4e, []int{3}
}
func (m *TeShIgpAreaActive) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeShIgpAreaActive.Unmarshal(m, b)
}
func (m *TeShIgpAreaActive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeShIgpAreaActive.Marshal(b, m, deterministic)
}
func (dst *TeShIgpAreaActive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeShIgpAreaActive.Merge(dst, src)
}
func (m *TeShIgpAreaActive) XXX_Size() int {
	return xxx_messageInfo_TeShIgpAreaActive.Size(m)
}
func (m *TeShIgpAreaActive) XXX_DiscardUnknown() {
	xxx_messageInfo_TeShIgpAreaActive.DiscardUnknown(m)
}

var xxx_messageInfo_TeShIgpAreaActive proto.InternalMessageInfo

func (m *TeShIgpAreaActive) GetInterfacesCount() uint32 {
	if m != nil {
		return m.InterfacesCount
	}
	return 0
}

func (m *TeShIgpAreaActive) GetLinkIdtReceived() bool {
	if m != nil {
		return m.LinkIdtReceived
	}
	return false
}

func (m *TeShIgpAreaActive) GetTopologyIdtReceived() bool {
	if m != nil {
		return m.TopologyIdtReceived
	}
	return false
}

func (m *TeShIgpAreaActive) GetSrStrict() bool {
	if m != nil {
		return m.SrStrict
	}
	return false
}

func (m *TeShIgpAreaActive) GetP2PHeadsCount() uint32 {
	if m != nil {
		return m.P2PHeadsCount
	}
	return 0
}

func (m *TeShIgpAreaActive) GetP2PAutorouteAnnouncedCount() uint32 {
	if m != nil {
		return m.P2PAutorouteAnnouncedCount
	}
	return 0
}

func (m *TeShIgpAreaActive) GetP2PForwardingAdjacencyCount() uint32 {
	if m != nil {
		return m.P2PForwardingAdjacencyCount
	}
	return 0
}

func (m *TeShIgpAreaActive) GetP2MpDestinationCount() uint32 {
	if m != nil {
		return m.P2MpDestinationCount
	}
	return 0
}

func (m *TeShIgpAreaActive) GetTunnelLooseHops() uint32 {
	if m != nil {
		return m.TunnelLooseHops
	}
	return 0
}

func (m *TeShIgpAreaActive) GetAreaStatistics() *TeShIgpAreaStats {
	if m != nil {
		return m.AreaStatistics
	}
	return nil
}

// An IGP area
type TeShIgpArea struct {
	// Internal area index
	AreaIndex uint32 `protobuf:"varint,1,opt,name=area_index,json=areaIndex" json:"area_index,omitempty"`
	// Area number
	AreaNumber uint32 `protobuf:"varint,2,opt,name=area_number,json=areaNumber" json:"area_number,omitempty"`
	// IGP Area Format
	AreaFormat string `protobuf:"bytes,3,opt,name=area_format,json=areaFormat" json:"area_format,omitempty"`
	// Indicates whether or not the area is correctly configured under the IGP submode to run TE
	IsConfigReady bool `protobuf:"varint,4,opt,name=is_config_ready,json=isConfigReady" json:"is_config_ready,omitempty"`
	// Data which applies only to an active area
	ActiveData           *TeShIgpAreaActive `protobuf:"bytes,5,opt,name=active_data,json=activeData" json:"active_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *TeShIgpArea) Reset()         { *m = TeShIgpArea{} }
func (m *TeShIgpArea) String() string { return proto.CompactTextString(m) }
func (*TeShIgpArea) ProtoMessage()    {}
func (*TeShIgpArea) Descriptor() ([]byte, []int) {
	return fileDescriptor_te_sh_igp_b8bf701cb2d16d4e, []int{4}
}
func (m *TeShIgpArea) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeShIgpArea.Unmarshal(m, b)
}
func (m *TeShIgpArea) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeShIgpArea.Marshal(b, m, deterministic)
}
func (dst *TeShIgpArea) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeShIgpArea.Merge(dst, src)
}
func (m *TeShIgpArea) XXX_Size() int {
	return xxx_messageInfo_TeShIgpArea.Size(m)
}
func (m *TeShIgpArea) XXX_DiscardUnknown() {
	xxx_messageInfo_TeShIgpArea.DiscardUnknown(m)
}

var xxx_messageInfo_TeShIgpArea proto.InternalMessageInfo

func (m *TeShIgpArea) GetAreaIndex() uint32 {
	if m != nil {
		return m.AreaIndex
	}
	return 0
}

func (m *TeShIgpArea) GetAreaNumber() uint32 {
	if m != nil {
		return m.AreaNumber
	}
	return 0
}

func (m *TeShIgpArea) GetAreaFormat() string {
	if m != nil {
		return m.AreaFormat
	}
	return ""
}

func (m *TeShIgpArea) GetIsConfigReady() bool {
	if m != nil {
		return m.IsConfigReady
	}
	return false
}

func (m *TeShIgpArea) GetActiveData() *TeShIgpAreaActive {
	if m != nil {
		return m.ActiveData
	}
	return nil
}

func init() {
	proto.RegisterType((*TeShIgp_KEYS)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.igp_area_briefs.igp_area_brief.te_sh_igp_KEYS")
	proto.RegisterType((*TeShIgp)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.igp_area_briefs.igp_area_brief.te_sh_igp")
	proto.RegisterType((*TeShIgpAreaStats)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.igp_area_briefs.igp_area_brief.te_sh_igp_area_stats")
	proto.RegisterType((*TeShIgpAreaActive)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.igp_area_briefs.igp_area_brief.te_sh_igp_area_active")
	proto.RegisterType((*TeShIgpArea)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.igp_area_briefs.igp_area_brief.te_sh_igp_area")
}

func init() { proto.RegisterFile("te_sh_igp.proto", fileDescriptor_te_sh_igp_b8bf701cb2d16d4e) }

var fileDescriptor_te_sh_igp_b8bf701cb2d16d4e = []byte{
	// 971 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xdd, 0x72, 0x1b, 0x35,
	0x14, 0x9e, 0xfc, 0xd0, 0xda, 0x72, 0x1d, 0x27, 0x9b, 0x84, 0x6c, 0x53, 0x4a, 0x8c, 0x3b, 0x03,
	0x86, 0x61, 0x7c, 0xb1, 0x25, 0x94, 0x52, 0x98, 0x21, 0xd4, 0x0d, 0xc9, 0x90, 0x94, 0xcc, 0x26,
	0x85, 0xe1, 0x4a, 0xa3, 0xec, 0x1e, 0x6f, 0x04, 0x6b, 0x49, 0x48, 0xda, 0x26, 0xbe, 0xe2, 0x21,
	0x78, 0x08, 0xde, 0x88, 0x47, 0xe0, 0x39, 0x18, 0x1d, 0xad, 0xd7, 0x6b, 0x27, 0x77, 0xf4, 0x26,
	0x89, 0xce, 0xf7, 0x23, 0xe9, 0x9c, 0xa3, 0xb3, 0x21, 0x1d, 0x0b, 0xd4, 0x5c, 0x51, 0x9e, 0xa9,
	0x81, 0xd2, 0xd2, 0xca, 0xe0, 0xbb, 0x84, 0x9b, 0x44, 0x52, 0x2e, 0x0d, 0xbd, 0xd1, 0x74, 0xac,
	0x72, 0x43, 0x2d, 0x50, 0xa9, 0x40, 0x0f, 0xca, 0xc5, 0x80, 0x67, 0x8a, 0x32, 0x0d, 0x8c, 0x5e,
	0x6a, 0x0e, 0x23, 0xb3, 0xb0, 0xee, 0x9d, 0x92, 0xb5, 0xca, 0x94, 0xfe, 0xf8, 0xea, 0xd7, 0xf3,
	0x60, 0x97, 0x34, 0xd0, 0x3c, 0x91, 0x79, 0xb8, 0xd4, 0x5d, 0xea, 0x37, 0xe3, 0x6a, 0x1d, 0xec,
	0x91, 0x96, 0xd2, 0x32, 0x01, 0x63, 0xa8, 0x65, 0x59, 0xb8, 0x8c, 0x30, 0x29, 0x43, 0x17, 0x2c,
	0xeb, 0xfd, 0xbb, 0x4a, 0x9a, 0x95, 0x5f, 0xf0, 0x90, 0x34, 0x9c, 0xad, 0x9d, 0x28, 0x08, 0x23,
	0xe4, 0xde, 0xe7, 0x99, 0xba, 0x98, 0x28, 0x08, 0x9e, 0x90, 0x36, 0x17, 0xc6, 0x32, 0x91, 0x00,
	0x15, 0x6c, 0x0c, 0xe1, 0x53, 0xc4, 0x1f, 0x4c, 0x83, 0xaf, 0xd9, 0x18, 0x82, 0x1e, 0x69, 0x3b,
	0xbd, 0x99, 0x18, 0x0b, 0x63, 0xca, 0xd3, 0xf0, 0x0b, 0x24, 0xb5, 0x78, 0xa6, 0xce, 0x31, 0x76,
	0x9c, 0x06, 0xfb, 0x64, 0x27, 0x91, 0x62, 0xc4, 0xb3, 0x42, 0x43, 0xea, 0x6e, 0xaf, 0x65, 0x61,
	0x41, 0x3b, 0xf6, 0x3e, 0xb2, 0xb7, 0x66, 0xf0, 0x05, 0xc4, 0x08, 0x1e, 0xa7, 0x41, 0x9f, 0xac,
	0x67, 0xb9, 0xbc, 0x64, 0x79, 0x8d, 0xff, 0x25, 0xf2, 0xd7, 0x7c, 0xbc, 0x62, 0x0e, 0xc8, 0xa6,
	0x81, 0x44, 0x8a, 0x94, 0xe9, 0x49, 0x8d, 0xfc, 0xac, 0xbb, 0xd2, 0x7f, 0x10, 0x6f, 0x54, 0x50,
	0xc5, 0x7f, 0x4e, 0x1e, 0x7a, 0x87, 0x9a, 0x35, 0x95, 0xca, 0xf2, 0x84, 0xe5, 0xe1, 0x57, 0xb8,
	0xc5, 0xfb, 0x25, 0x61, 0xaa, 0xf9, 0xc9, 0xa3, 0xc1, 0xe7, 0x64, 0x93, 0x0b, 0x5a, 0x18, 0x98,
	0xbf, 0xc7, 0x73, 0x14, 0x75, 0xb8, 0x78, 0x63, 0x60, 0xfe, 0x0a, 0xdc, 0xd0, 0x44, 0x0a, 0x01,
	0x89, 0xe5, 0x52, 0xd0, 0x42, 0x85, 0x5f, 0x77, 0x97, 0xfa, 0x8d, 0x78, 0x8d, 0x9b, 0x97, 0x55,
	0xf8, 0x8d, 0x72, 0x57, 0x98, 0xa3, 0xd1, 0x44, 0x16, 0xc2, 0x86, 0x2f, 0xba, 0x4b, 0xfd, 0x76,
	0xbc, 0x91, 0xd4, 0xa8, 0x2f, 0x1d, 0x10, 0x44, 0x64, 0xbb, 0xc6, 0x4f, 0xe5, 0xb5, 0x28, 0x15,
	0xdf, 0xa0, 0xa2, 0x66, 0x36, 0x94, 0xd7, 0xc2, 0x6b, 0xc6, 0xa4, 0x89, 0x6d, 0x95, 0x73, 0x63,
	0xc3, 0x6f, 0xbb, 0x2b, 0xfd, 0x56, 0x74, 0x36, 0xf8, 0xbf, 0xed, 0x39, 0x98, 0xf5, 0xa6, 0x0b,
	0xc6, 0x0d, 0xf7, 0xf3, 0x84, 0x1b, 0xdb, 0xfb, 0x7b, 0x95, 0x6c, 0xcd, 0x83, 0xd4, 0x58, 0x66,
	0x4d, 0xf0, 0x8a, 0xec, 0xe1, 0x8a, 0xa5, 0xbf, 0xb1, 0x04, 0x44, 0x32, 0xa1, 0x1a, 0xfe, 0x28,
	0xc0, 0x58, 0x3a, 0x06, 0x63, 0x58, 0x06, 0x06, 0xbb, 0xba, 0x1d, 0x7f, 0xe0, 0x68, 0x07, 0x53,
	0x56, 0xec, 0x49, 0xa7, 0x25, 0x27, 0xf8, 0x81, 0x74, 0x17, 0x6c, 0x98, 0x10, 0xb2, 0x70, 0xed,
	0x5a, 0xf9, 0x2c, 0xa3, 0xcf, 0xe3, 0x39, 0x9f, 0x83, 0x92, 0x55, 0x19, 0x0d, 0xc8, 0x26, 0x1a,
	0x8d, 0x72, 0x29, 0xd3, 0x99, 0x76, 0xc5, 0xe7, 0xde, 0x41, 0x87, 0x0e, 0xa9, 0xf8, 0x2f, 0xc8,
	0xae, 0xcf, 0xa3, 0x61, 0x77, 0x6c, 0xb9, 0x8a, 0xb2, 0x1d, 0x4c, 0x83, 0x61, 0xb7, 0x36, 0x3b,
	0x21, 0x4f, 0x2a, 0xf1, 0x48, 0xb3, 0x6c, 0x0c, 0xc2, 0xde, 0xe1, 0xf2, 0x1e, 0xba, 0xec, 0x95,
	0x2e, 0x87, 0x25, 0xf1, 0x96, 0xdb, 0x33, 0x12, 0x56, 0x6e, 0x29, 0xe4, 0x60, 0x6b, 0x16, 0xf7,
	0xd0, 0x62, 0xbb, 0xb4, 0x18, 0x22, 0x5a, 0x09, 0x8f, 0xc8, 0x47, 0xb7, 0x8f, 0xb1, 0xe8, 0x70,
	0x7f, 0x96, 0xbd, 0xda, 0x21, 0x16, 0x9c, 0x0e, 0x08, 0x12, 0xa8, 0x2d, 0x84, 0x80, 0xfc, 0x8e,
	0xab, 0x34, 0xd0, 0x05, 0x53, 0x76, 0x81, 0x9c, 0xc5, 0x5b, 0xf4, 0xfe, 0x59, 0x25, 0xdb, 0x0b,
	0x9d, 0xc2, 0x12, 0xcb, 0xdf, 0x42, 0xf0, 0x29, 0x59, 0xe7, 0xc2, 0x82, 0x1e, 0xb1, 0x04, 0x4c,
	0xd9, 0xe1, 0xbe, 0x37, 0x3a, 0xb3, 0xb8, 0xef, 0xee, 0xcf, 0xc8, 0x46, 0xce, 0xc5, 0xef, 0x94,
	0xa7, 0x96, 0x6a, 0x48, 0x80, 0xbf, 0x85, 0x14, 0xeb, 0xdf, 0x88, 0x3b, 0x0e, 0x38, 0x4e, 0x6d,
	0x5c, 0x86, 0xdd, 0xeb, 0xb1, 0x52, 0xc9, 0x5c, 0x66, 0x93, 0x79, 0xfe, 0x0a, 0xf2, 0x37, 0xa7,
	0x60, 0x5d, 0xf3, 0x88, 0x34, 0x8d, 0xa6, 0xc6, 0x6a, 0x9e, 0x58, 0x2c, 0x72, 0x23, 0x6e, 0x18,
	0x7d, 0x8e, 0xeb, 0xe0, 0x13, 0xb2, 0xae, 0x22, 0xaa, 0xe8, 0x15, 0xb0, 0x74, 0x7a, 0x4e, 0x5f,
	0xc2, 0xb6, 0x8a, 0xce, 0x8e, 0x5c, 0xd4, 0x9f, 0xf2, 0x7b, 0xf2, 0x21, 0x12, 0x59, 0x61, 0x25,
	0x8e, 0x8f, 0x2a, 0x61, 0x69, 0x29, 0xf3, 0x65, 0xdb, 0x55, 0xd1, 0xd9, 0xc1, 0x94, 0x33, 0x4d,
	0x58, 0xea, 0x3d, 0x86, 0x64, 0x0f, 0x3d, 0x46, 0x52, 0x5f, 0x33, 0x9d, 0x72, 0x91, 0xd5, 0xde,
	0x80, 0x37, 0xf1, 0x95, 0x7b, 0xa4, 0xa2, 0xb3, 0xc3, 0x8a, 0x54, 0x3d, 0x00, 0xef, 0xb2, 0x4f,
	0x76, 0x54, 0x44, 0xc7, 0x8a, 0xa6, 0x60, 0x2c, 0x17, 0x0c, 0x07, 0x89, 0x57, 0xfb, 0x8a, 0x6d,
	0xa9, 0xe8, 0x54, 0x0d, 0x67, 0x60, 0x95, 0xe6, 0xb2, 0xd2, 0xb9, 0x94, 0x06, 0xe8, 0x95, 0x54,
	0x26, 0x6c, 0xfa, 0x92, 0x78, 0xe0, 0xc4, 0xc5, 0x8f, 0xa4, 0x32, 0xc1, 0x9f, 0xa4, 0x53, 0x3d,
	0x7b, 0x6e, 0x2c, 0x4f, 0x4c, 0x48, 0xba, 0x4b, 0xfd, 0x56, 0xf4, 0xf3, 0xbb, 0x1e, 0x3b, 0x7e,
	0xb2, 0xc4, 0x6b, 0xee, 0xef, 0xf3, 0x6a, 0xb7, 0xde, 0x5f, 0xcb, 0xf5, 0x6f, 0xa7, 0x03, 0x83,
	0xc7, 0x84, 0xa0, 0x80, 0x8b, 0x14, 0x6e, 0xca, 0x5e, 0xc2, 0xb1, 0x78, 0xec, 0x02, 0xee, 0xf3,
	0x89, 0xb0, 0x28, 0xc6, 0x97, 0xa0, 0xcb, 0xf9, 0x81, 0x8a, 0xd7, 0x18, 0xa9, 0x08, 0x23, 0xa9,
	0xc7, 0xcc, 0x62, 0xc3, 0x34, 0x3d, 0xe1, 0x10, 0x23, 0xc1, 0xc7, 0xa4, 0xe3, 0x67, 0xfe, 0x88,
	0x67, 0x54, 0x03, 0x4b, 0x27, 0x65, 0xb7, 0xb4, 0x71, 0xe4, 0x8f, 0x78, 0x16, 0xbb, 0x60, 0x70,
	0x43, 0x5a, 0xbe, 0xc9, 0x69, 0xca, 0x2c, 0xc3, 0x6e, 0x69, 0x45, 0xbf, 0xbc, 0xf3, 0xc4, 0xf8,
	0x3d, 0x62, 0xe2, 0x7f, 0x0f, 0x99, 0x65, 0x97, 0xf7, 0xf0, 0x9f, 0x85, 0xa7, 0xff, 0x05, 0x00,
	0x00, 0xff, 0xff, 0xb9, 0x67, 0x49, 0x1e, 0xac, 0x08, 0x00, 0x00,
}
