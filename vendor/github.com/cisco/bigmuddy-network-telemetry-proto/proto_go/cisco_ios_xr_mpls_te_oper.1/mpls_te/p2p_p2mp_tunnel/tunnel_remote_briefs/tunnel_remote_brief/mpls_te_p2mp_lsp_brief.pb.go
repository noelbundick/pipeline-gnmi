// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mpls_te_p2mp_lsp_brief.proto

package cisco_ios_xr_mpls_te_oper_mpls_te_p2p_p2mp_tunnel_tunnel_remote_briefs_tunnel_remote_brief

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// A P2MP LSP
type MplsTeP2MpLspBrief_KEYS struct {
	LspId                uint32   `protobuf:"varint,1,opt,name=lsp_id,json=lspId" json:"lsp_id,omitempty"`
	TunnelId             uint32   `protobuf:"varint,2,opt,name=tunnel_id,json=tunnelId" json:"tunnel_id,omitempty"`
	ExtendedTunnelId     string   `protobuf:"bytes,3,opt,name=extended_tunnel_id,json=extendedTunnelId" json:"extended_tunnel_id,omitempty"`
	SourceAddress        string   `protobuf:"bytes,4,opt,name=source_address,json=sourceAddress" json:"source_address,omitempty"`
	CType                string   `protobuf:"bytes,5,opt,name=c_type,json=cType" json:"c_type,omitempty"`
	DestinationAddress   string   `protobuf:"bytes,6,opt,name=destination_address,json=destinationAddress" json:"destination_address,omitempty"`
	P2MpId               uint32   `protobuf:"varint,7,opt,name=p2_mp_id,json=p2MpId" json:"p2_mp_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeP2MpLspBrief_KEYS) Reset()         { *m = MplsTeP2MpLspBrief_KEYS{} }
func (m *MplsTeP2MpLspBrief_KEYS) String() string { return proto.CompactTextString(m) }
func (*MplsTeP2MpLspBrief_KEYS) ProtoMessage()    {}
func (*MplsTeP2MpLspBrief_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_brief_113a9eaece176ad7, []int{0}
}
func (m *MplsTeP2MpLspBrief_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeP2MpLspBrief_KEYS.Unmarshal(m, b)
}
func (m *MplsTeP2MpLspBrief_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeP2MpLspBrief_KEYS.Marshal(b, m, deterministic)
}
func (dst *MplsTeP2MpLspBrief_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeP2MpLspBrief_KEYS.Merge(dst, src)
}
func (m *MplsTeP2MpLspBrief_KEYS) XXX_Size() int {
	return xxx_messageInfo_MplsTeP2MpLspBrief_KEYS.Size(m)
}
func (m *MplsTeP2MpLspBrief_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeP2MpLspBrief_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeP2MpLspBrief_KEYS proto.InternalMessageInfo

func (m *MplsTeP2MpLspBrief_KEYS) GetLspId() uint32 {
	if m != nil {
		return m.LspId
	}
	return 0
}

func (m *MplsTeP2MpLspBrief_KEYS) GetTunnelId() uint32 {
	if m != nil {
		return m.TunnelId
	}
	return 0
}

func (m *MplsTeP2MpLspBrief_KEYS) GetExtendedTunnelId() string {
	if m != nil {
		return m.ExtendedTunnelId
	}
	return ""
}

func (m *MplsTeP2MpLspBrief_KEYS) GetSourceAddress() string {
	if m != nil {
		return m.SourceAddress
	}
	return ""
}

func (m *MplsTeP2MpLspBrief_KEYS) GetCType() string {
	if m != nil {
		return m.CType
	}
	return ""
}

func (m *MplsTeP2MpLspBrief_KEYS) GetDestinationAddress() string {
	if m != nil {
		return m.DestinationAddress
	}
	return ""
}

func (m *MplsTeP2MpLspBrief_KEYS) GetP2MpId() uint32 {
	if m != nil {
		return m.P2MpId
	}
	return 0
}

type MplsTeP2MpLspBrief struct {
	// Signaled Name
	SignaledName string `protobuf:"bytes,50,opt,name=signaled_name,json=signaledName" json:"signaled_name,omitempty"`
	// FEC for the LSP
	LspFec *TeLspFecT `protobuf:"bytes,51,opt,name=lsp_fec,json=lspFec" json:"lsp_fec,omitempty"`
	// array of S2L structures
	S2LList []*MplsTeP2MpS2LBrief `protobuf:"bytes,52,rep,name=s2_l_list,json=s2LList" json:"s2_l_list,omitempty"`
	// Time in seconds since the LSP was up
	Uptime               uint32   `protobuf:"varint,53,opt,name=uptime" json:"uptime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeP2MpLspBrief) Reset()         { *m = MplsTeP2MpLspBrief{} }
func (m *MplsTeP2MpLspBrief) String() string { return proto.CompactTextString(m) }
func (*MplsTeP2MpLspBrief) ProtoMessage()    {}
func (*MplsTeP2MpLspBrief) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_brief_113a9eaece176ad7, []int{1}
}
func (m *MplsTeP2MpLspBrief) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeP2MpLspBrief.Unmarshal(m, b)
}
func (m *MplsTeP2MpLspBrief) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeP2MpLspBrief.Marshal(b, m, deterministic)
}
func (dst *MplsTeP2MpLspBrief) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeP2MpLspBrief.Merge(dst, src)
}
func (m *MplsTeP2MpLspBrief) XXX_Size() int {
	return xxx_messageInfo_MplsTeP2MpLspBrief.Size(m)
}
func (m *MplsTeP2MpLspBrief) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeP2MpLspBrief.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeP2MpLspBrief proto.InternalMessageInfo

func (m *MplsTeP2MpLspBrief) GetSignaledName() string {
	if m != nil {
		return m.SignaledName
	}
	return ""
}

func (m *MplsTeP2MpLspBrief) GetLspFec() *TeLspFecT {
	if m != nil {
		return m.LspFec
	}
	return nil
}

func (m *MplsTeP2MpLspBrief) GetS2LList() []*MplsTeP2MpS2LBrief {
	if m != nil {
		return m.S2LList
	}
	return nil
}

func (m *MplsTeP2MpLspBrief) GetUptime() uint32 {
	if m != nil {
		return m.Uptime
	}
	return 0
}

// A sub-LSP FEC
type TeS2LFecT struct {
	// sub-LSP subgroup ID
	S2LFecSubgroupId uint32 `protobuf:"varint,1,opt,name=s2_l_fec_subgroup_id,json=s2LFecSubgroupId" json:"s2_l_fec_subgroup_id,omitempty"`
	// LSP ID
	S2LFecLspId uint32 `protobuf:"varint,2,opt,name=s2_l_fec_lsp_id,json=s2LFecLspId" json:"s2_l_fec_lsp_id,omitempty"`
	// Tunnel ID
	S2LFecTunnelId uint32 `protobuf:"varint,3,opt,name=s2_l_fec_tunnel_id,json=s2LFecTunnelId" json:"s2_l_fec_tunnel_id,omitempty"`
	// Extended tunnel ID
	S2LFecExtendedTunnelId string `protobuf:"bytes,4,opt,name=s2_l_fec_extended_tunnel_id,json=s2LFecExtendedTunnelId" json:"s2_l_fec_extended_tunnel_id,omitempty"`
	// LSP source address
	S2LFecSource string `protobuf:"bytes,5,opt,name=s2_l_fec_source,json=s2LFecSource" json:"s2_l_fec_source,omitempty"`
	// sub-LSP destination address
	S2LFecDest string `protobuf:"bytes,6,opt,name=s2_l_fec_dest,json=s2LFecDest" json:"s2_l_fec_dest,omitempty"`
	// P2MP ID
	S2LFecP2MpId uint32 `protobuf:"varint,7,opt,name=s2_l_fec_p2_mp_id,json=s2LFecP2MpId" json:"s2_l_fec_p2_mp_id,omitempty"`
	// Subgroup Originator
	S2LFecSubgroupOriginator string `protobuf:"bytes,8,opt,name=s2_l_fec_subgroup_originator,json=s2LFecSubgroupOriginator" json:"s2_l_fec_subgroup_originator,omitempty"`
	// Session identifier (ctype)
	S2LFecCType string `protobuf:"bytes,9,opt,name=s2_l_fec_c_type,json=s2LFecCType" json:"s2_l_fec_c_type,omitempty"`
	// VRF; currently only for GMPLS tunnels
	S2LFecVrf            string   `protobuf:"bytes,10,opt,name=s2_l_fec_vrf,json=s2LFecVrf" json:"s2_l_fec_vrf,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeS2LFecT) Reset()         { *m = TeS2LFecT{} }
func (m *TeS2LFecT) String() string { return proto.CompactTextString(m) }
func (*TeS2LFecT) ProtoMessage()    {}
func (*TeS2LFecT) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_brief_113a9eaece176ad7, []int{2}
}
func (m *TeS2LFecT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeS2LFecT.Unmarshal(m, b)
}
func (m *TeS2LFecT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeS2LFecT.Marshal(b, m, deterministic)
}
func (dst *TeS2LFecT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeS2LFecT.Merge(dst, src)
}
func (m *TeS2LFecT) XXX_Size() int {
	return xxx_messageInfo_TeS2LFecT.Size(m)
}
func (m *TeS2LFecT) XXX_DiscardUnknown() {
	xxx_messageInfo_TeS2LFecT.DiscardUnknown(m)
}

var xxx_messageInfo_TeS2LFecT proto.InternalMessageInfo

func (m *TeS2LFecT) GetS2LFecSubgroupId() uint32 {
	if m != nil {
		return m.S2LFecSubgroupId
	}
	return 0
}

func (m *TeS2LFecT) GetS2LFecLspId() uint32 {
	if m != nil {
		return m.S2LFecLspId
	}
	return 0
}

func (m *TeS2LFecT) GetS2LFecTunnelId() uint32 {
	if m != nil {
		return m.S2LFecTunnelId
	}
	return 0
}

func (m *TeS2LFecT) GetS2LFecExtendedTunnelId() string {
	if m != nil {
		return m.S2LFecExtendedTunnelId
	}
	return ""
}

func (m *TeS2LFecT) GetS2LFecSource() string {
	if m != nil {
		return m.S2LFecSource
	}
	return ""
}

func (m *TeS2LFecT) GetS2LFecDest() string {
	if m != nil {
		return m.S2LFecDest
	}
	return ""
}

func (m *TeS2LFecT) GetS2LFecP2MpId() uint32 {
	if m != nil {
		return m.S2LFecP2MpId
	}
	return 0
}

func (m *TeS2LFecT) GetS2LFecSubgroupOriginator() string {
	if m != nil {
		return m.S2LFecSubgroupOriginator
	}
	return ""
}

func (m *TeS2LFecT) GetS2LFecCType() string {
	if m != nil {
		return m.S2LFecCType
	}
	return ""
}

func (m *TeS2LFecT) GetS2LFecVrf() string {
	if m != nil {
		return m.S2LFecVrf
	}
	return ""
}

// C-type-specific LSP FEC data
type TeLspFecCtypeDataT struct {
	FecCType string `protobuf:"bytes,1,opt,name=fec_c_type,json=fecCType" json:"fec_c_type,omitempty"`
	// P2P LSP destination
	P2PLspDestination string `protobuf:"bytes,2,opt,name=p2_p_lsp_destination,json=p2PLspDestination" json:"p2_p_lsp_destination,omitempty"`
	// P2MP ID
	FecDestinationP2MpId uint32   `protobuf:"varint,3,opt,name=fec_destination_p2_mp_id,json=fecDestinationP2MpId" json:"fec_destination_p2_mp_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeLspFecCtypeDataT) Reset()         { *m = TeLspFecCtypeDataT{} }
func (m *TeLspFecCtypeDataT) String() string { return proto.CompactTextString(m) }
func (*TeLspFecCtypeDataT) ProtoMessage()    {}
func (*TeLspFecCtypeDataT) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_brief_113a9eaece176ad7, []int{3}
}
func (m *TeLspFecCtypeDataT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeLspFecCtypeDataT.Unmarshal(m, b)
}
func (m *TeLspFecCtypeDataT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeLspFecCtypeDataT.Marshal(b, m, deterministic)
}
func (dst *TeLspFecCtypeDataT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeLspFecCtypeDataT.Merge(dst, src)
}
func (m *TeLspFecCtypeDataT) XXX_Size() int {
	return xxx_messageInfo_TeLspFecCtypeDataT.Size(m)
}
func (m *TeLspFecCtypeDataT) XXX_DiscardUnknown() {
	xxx_messageInfo_TeLspFecCtypeDataT.DiscardUnknown(m)
}

var xxx_messageInfo_TeLspFecCtypeDataT proto.InternalMessageInfo

func (m *TeLspFecCtypeDataT) GetFecCType() string {
	if m != nil {
		return m.FecCType
	}
	return ""
}

func (m *TeLspFecCtypeDataT) GetP2PLspDestination() string {
	if m != nil {
		return m.P2PLspDestination
	}
	return ""
}

func (m *TeLspFecCtypeDataT) GetFecDestinationP2MpId() uint32 {
	if m != nil {
		return m.FecDestinationP2MpId
	}
	return 0
}

// A LSP FEC
type TeLspFecT struct {
	// LSP ID
	FecLspId uint32 `protobuf:"varint,1,opt,name=fec_lsp_id,json=fecLspId" json:"fec_lsp_id,omitempty"`
	// Tunnel ID
	FecTunnelId uint32 `protobuf:"varint,2,opt,name=fec_tunnel_id,json=fecTunnelId" json:"fec_tunnel_id,omitempty"`
	// Extended tunnel ID
	FecExtendedTunnelId string `protobuf:"bytes,3,opt,name=fec_extended_tunnel_id,json=fecExtendedTunnelId" json:"fec_extended_tunnel_id,omitempty"`
	// Tunnel source address
	FecSource string `protobuf:"bytes,4,opt,name=fec_source,json=fecSource" json:"fec_source,omitempty"`
	// Destination or P2MP ID
	FecDestinationInfo *TeLspFecCtypeDataT `protobuf:"bytes,5,opt,name=fec_destination_info,json=fecDestinationInfo" json:"fec_destination_info,omitempty"`
	// VRF; currently only for GMPLS tunnels
	FecVrf               string   `protobuf:"bytes,6,opt,name=fec_vrf,json=fecVrf" json:"fec_vrf,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeLspFecT) Reset()         { *m = TeLspFecT{} }
func (m *TeLspFecT) String() string { return proto.CompactTextString(m) }
func (*TeLspFecT) ProtoMessage()    {}
func (*TeLspFecT) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_brief_113a9eaece176ad7, []int{4}
}
func (m *TeLspFecT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeLspFecT.Unmarshal(m, b)
}
func (m *TeLspFecT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeLspFecT.Marshal(b, m, deterministic)
}
func (dst *TeLspFecT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeLspFecT.Merge(dst, src)
}
func (m *TeLspFecT) XXX_Size() int {
	return xxx_messageInfo_TeLspFecT.Size(m)
}
func (m *TeLspFecT) XXX_DiscardUnknown() {
	xxx_messageInfo_TeLspFecT.DiscardUnknown(m)
}

var xxx_messageInfo_TeLspFecT proto.InternalMessageInfo

func (m *TeLspFecT) GetFecLspId() uint32 {
	if m != nil {
		return m.FecLspId
	}
	return 0
}

func (m *TeLspFecT) GetFecTunnelId() uint32 {
	if m != nil {
		return m.FecTunnelId
	}
	return 0
}

func (m *TeLspFecT) GetFecExtendedTunnelId() string {
	if m != nil {
		return m.FecExtendedTunnelId
	}
	return ""
}

func (m *TeLspFecT) GetFecSource() string {
	if m != nil {
		return m.FecSource
	}
	return ""
}

func (m *TeLspFecT) GetFecDestinationInfo() *TeLspFecCtypeDataT {
	if m != nil {
		return m.FecDestinationInfo
	}
	return nil
}

func (m *TeLspFecT) GetFecVrf() string {
	if m != nil {
		return m.FecVrf
	}
	return ""
}

// A P2MP S2L
type MplsTeP2MpS2LBrief struct {
	// FEC for the S2L
	S2LFec *TeS2LFecT `protobuf:"bytes,1,opt,name=s2_l_fec,json=s2LFec" json:"s2_l_fec,omitempty"`
	// Time in seconds since the S2L was up
	Uptime uint32 `protobuf:"varint,2,opt,name=uptime" json:"uptime,omitempty"`
	// Egress Interface
	EgressInterface string `protobuf:"bytes,3,opt,name=egress_interface,json=egressInterface" json:"egress_interface,omitempty"`
	// Ingress Interface
	IngressInterface string `protobuf:"bytes,4,opt,name=ingress_interface,json=ingressInterface" json:"ingress_interface,omitempty"`
	// Role of S2L
	Role string `protobuf:"bytes,5,opt,name=role" json:"role,omitempty"`
	// Oper state of S2L
	OperState            bool     `protobuf:"varint,6,opt,name=oper_state,json=operState" json:"oper_state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeP2MpS2LBrief) Reset()         { *m = MplsTeP2MpS2LBrief{} }
func (m *MplsTeP2MpS2LBrief) String() string { return proto.CompactTextString(m) }
func (*MplsTeP2MpS2LBrief) ProtoMessage()    {}
func (*MplsTeP2MpS2LBrief) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_brief_113a9eaece176ad7, []int{5}
}
func (m *MplsTeP2MpS2LBrief) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeP2MpS2LBrief.Unmarshal(m, b)
}
func (m *MplsTeP2MpS2LBrief) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeP2MpS2LBrief.Marshal(b, m, deterministic)
}
func (dst *MplsTeP2MpS2LBrief) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeP2MpS2LBrief.Merge(dst, src)
}
func (m *MplsTeP2MpS2LBrief) XXX_Size() int {
	return xxx_messageInfo_MplsTeP2MpS2LBrief.Size(m)
}
func (m *MplsTeP2MpS2LBrief) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeP2MpS2LBrief.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeP2MpS2LBrief proto.InternalMessageInfo

func (m *MplsTeP2MpS2LBrief) GetS2LFec() *TeS2LFecT {
	if m != nil {
		return m.S2LFec
	}
	return nil
}

func (m *MplsTeP2MpS2LBrief) GetUptime() uint32 {
	if m != nil {
		return m.Uptime
	}
	return 0
}

func (m *MplsTeP2MpS2LBrief) GetEgressInterface() string {
	if m != nil {
		return m.EgressInterface
	}
	return ""
}

func (m *MplsTeP2MpS2LBrief) GetIngressInterface() string {
	if m != nil {
		return m.IngressInterface
	}
	return ""
}

func (m *MplsTeP2MpS2LBrief) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (m *MplsTeP2MpS2LBrief) GetOperState() bool {
	if m != nil {
		return m.OperState
	}
	return false
}

func init() {
	proto.RegisterType((*MplsTeP2MpLspBrief_KEYS)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remote_briefs.tunnel_remote_brief.mpls_te_p2mp_lsp_brief_KEYS")
	proto.RegisterType((*MplsTeP2MpLspBrief)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remote_briefs.tunnel_remote_brief.mpls_te_p2mp_lsp_brief")
	proto.RegisterType((*TeS2LFecT)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remote_briefs.tunnel_remote_brief.te_s2l_fec_t")
	proto.RegisterType((*TeLspFecCtypeDataT)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remote_briefs.tunnel_remote_brief.te_lsp_fec_ctype_data_t")
	proto.RegisterType((*TeLspFecT)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remote_briefs.tunnel_remote_brief.te_lsp_fec_t")
	proto.RegisterType((*MplsTeP2MpS2LBrief)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remote_briefs.tunnel_remote_brief.mpls_te_p2mp_s2l_brief")
}

func init() {
	proto.RegisterFile("mpls_te_p2mp_lsp_brief.proto", fileDescriptor_mpls_te_p2mp_lsp_brief_113a9eaece176ad7)
}

var fileDescriptor_mpls_te_p2mp_lsp_brief_113a9eaece176ad7 = []byte{
	// 798 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x95, 0xcf, 0x6e, 0xd3, 0x4a,
	0x14, 0xc6, 0xe5, 0xb4, 0x4d, 0xe2, 0x93, 0xa4, 0x4d, 0xa7, 0xb9, 0xa9, 0xa5, 0xf6, 0xea, 0xe6,
	0xe6, 0x5e, 0x44, 0xf8, 0xa3, 0x54, 0x72, 0x81, 0x0d, 0x12, 0x12, 0xa2, 0xad, 0x14, 0x11, 0xa0,
	0x72, 0x2b, 0x24, 0xd8, 0x8c, 0x5c, 0x7b, 0x1c, 0x2c, 0x39, 0xf6, 0xc8, 0x33, 0x41, 0xed, 0x12,
	0x56, 0xac, 0x78, 0x06, 0x36, 0xbc, 0x07, 0x3b, 0x9e, 0x84, 0x0d, 0x4f, 0x81, 0x3c, 0x67, 0xec,
	0x38, 0x69, 0x58, 0x96, 0x55, 0xe2, 0x73, 0xbe, 0x39, 0x3e, 0xf3, 0xcd, 0x6f, 0x8e, 0x61, 0x7f,
	0xca, 0x23, 0x41, 0x25, 0xa3, 0xdc, 0x9e, 0x72, 0x1a, 0x09, 0x4e, 0x2f, 0xd2, 0x90, 0x05, 0x43,
	0x9e, 0x26, 0x32, 0x21, 0x6f, 0xbd, 0x50, 0x78, 0x09, 0x0d, 0x13, 0x41, 0x2f, 0x53, 0x9a, 0x4b,
	0x13, 0xce, 0xd2, 0xa1, 0x7e, 0x18, 0x72, 0x9b, 0xe3, 0x5a, 0x39, 0x8b, 0x63, 0x16, 0x0d, 0xf1,
	0x87, 0xa6, 0x6c, 0x9a, 0x48, 0x86, 0xc5, 0xc4, 0xaa, 0x60, 0xff, 0x53, 0x05, 0xf6, 0x56, 0xbf,
	0x9c, 0x3e, 0x3f, 0x7e, 0x73, 0x46, 0xfe, 0x82, 0x6a, 0x16, 0x09, 0x7d, 0xcb, 0xe8, 0x19, 0x83,
	0x96, 0xb3, 0x11, 0x09, 0x3e, 0xf2, 0xc9, 0x1e, 0x98, 0xba, 0x5a, 0xe8, 0x5b, 0x15, 0x95, 0xa9,
	0x63, 0x60, 0xe4, 0x93, 0xfb, 0x40, 0xd8, 0xa5, 0x64, 0xb1, 0xcf, 0x7c, 0x3a, 0x57, 0xad, 0xf5,
	0x8c, 0x81, 0xe9, 0xb4, 0xf3, 0xcc, 0x79, 0xae, 0xbe, 0x05, 0x9b, 0x22, 0x99, 0xa5, 0x1e, 0xa3,
	0xae, 0xef, 0xa7, 0x4c, 0x08, 0x6b, 0x5d, 0x29, 0x5b, 0x18, 0x7d, 0x8a, 0xc1, 0xac, 0x11, 0x8f,
	0xca, 0x2b, 0xce, 0xac, 0x0d, 0x95, 0xde, 0xf0, 0xce, 0xaf, 0x38, 0x23, 0x07, 0xb0, 0xe3, 0x33,
	0x21, 0xc3, 0xd8, 0x95, 0x61, 0x12, 0x17, 0x25, 0xaa, 0x4a, 0x43, 0x4a, 0xa9, 0xbc, 0x8e, 0x05,
	0x75, 0x6e, 0xd3, 0xa9, 0xda, 0x52, 0x4d, 0x35, 0x5e, 0xe5, 0xf6, 0x0b, 0x3e, 0xf2, 0xfb, 0x3f,
	0x2b, 0xd0, 0x5d, 0x6d, 0x05, 0xf9, 0x0f, 0x5a, 0x22, 0x9c, 0xc4, 0x6e, 0xc4, 0x7c, 0x1a, 0xbb,
	0x53, 0x66, 0xd9, 0xaa, 0x7e, 0x33, 0x0f, 0xbe, 0x74, 0xa7, 0x8c, 0x7c, 0x30, 0xa0, 0x96, 0x2d,
	0x09, 0x98, 0x67, 0x1d, 0xf6, 0x8c, 0x41, 0xc3, 0x7e, 0x37, 0xbc, 0xb9, 0x93, 0x1b, 0x4a, 0x46,
	0xf5, 0xdb, 0xa8, 0x74, 0xb2, 0x43, 0x3a, 0x61, 0x1e, 0xf9, 0x6c, 0x80, 0x29, 0x6c, 0x1a, 0xd1,
	0x28, 0x14, 0xd2, 0x7a, 0xd0, 0x5b, 0x1b, 0x34, 0xec, 0xf4, 0x26, 0xbb, 0x58, 0x30, 0x4c, 0xd8,
	0x11, 0x86, 0x9d, 0x9a, 0xb0, 0xc7, 0xe3, 0x50, 0x48, 0xd2, 0x85, 0xea, 0x8c, 0xcb, 0x70, 0xca,
	0xac, 0x87, 0x68, 0x36, 0x3e, 0xf5, 0xbf, 0xaf, 0x41, 0x53, 0x32, 0xb5, 0x42, 0xed, 0x80, 0x0c,
	0xa1, 0xa3, 0x1a, 0xcf, 0x9e, 0xc4, 0xec, 0x62, 0x92, 0x26, 0xb3, 0x12, 0x76, 0x6d, 0x61, 0x8f,
	0x4f, 0x98, 0x77, 0xa6, 0x13, 0x23, 0x9f, 0xfc, 0x0f, 0x5b, 0x85, 0x5e, 0x13, 0x8a, 0x1c, 0x36,
	0x50, 0x3a, 0x56, 0x9c, 0xde, 0x05, 0x52, 0xa8, 0x16, 0x51, 0x6c, 0x39, 0x9b, 0x28, 0x2c, 0x40,
	0x7c, 0x0c, 0x7b, 0x85, 0x76, 0x05, 0xbf, 0x48, 0x65, 0x17, 0x17, 0x1d, 0x5f, 0xa7, 0x78, 0xde,
	0x0e, 0x82, 0xab, 0x39, 0x6d, 0xea, 0xce, 0x55, 0x8c, 0xfc, 0x0b, 0xad, 0x42, 0x96, 0xc1, 0xa9,
	0x41, 0x05, 0x14, 0x1d, 0x31, 0x21, 0xc9, 0x6d, 0xd8, 0x2e, 0x24, 0x4b, 0xa4, 0xea, 0x5a, 0xa7,
	0x8a, 0x57, 0xf2, 0x04, 0xf6, 0xaf, 0x3b, 0x96, 0xa4, 0xe1, 0x24, 0x23, 0x3e, 0x49, 0xad, 0xba,
	0x2a, 0x6d, 0x2d, 0x3a, 0xf7, 0xaa, 0xc8, 0x2f, 0x38, 0xa8, 0xaf, 0x96, 0xa9, 0x96, 0x68, 0x07,
	0x9f, 0xa9, 0x0b, 0xf6, 0x0f, 0x34, 0x0b, 0xd5, 0xfb, 0x34, 0xb0, 0x40, 0x49, 0x4c, 0x94, 0xbc,
	0x4e, 0x83, 0xfe, 0x17, 0x03, 0x76, 0x4b, 0x2c, 0x7a, 0x59, 0x21, 0xea, 0xbb, 0xd2, 0xa5, 0x92,
	0xec, 0x03, 0x94, 0xaa, 0x1b, 0x6a, 0x69, 0x3d, 0xc8, 0x4b, 0x1f, 0x40, 0x87, 0xdb, 0x14, 0xef,
	0x59, 0xe9, 0xa6, 0xaa, 0x73, 0x34, 0x9d, 0x6d, 0x6e, 0x9f, 0x8e, 0x05, 0x3f, 0x9a, 0x27, 0xc8,
	0x23, 0xb0, 0x72, 0xe3, 0xf2, 0x0b, 0x5f, 0x38, 0x84, 0x67, 0xda, 0x09, 0xd0, 0x45, 0x9d, 0x46,
	0xa7, 0xfa, 0x3f, 0x2a, 0x0a, 0xb6, 0xe2, 0xba, 0xe4, 0x7d, 0x2d, 0x4c, 0xb6, 0xac, 0x2f, 0x84,
	0xa6, 0x0f, 0xad, 0x45, 0x5e, 0x34, 0x58, 0x41, 0x09, 0x96, 0x43, 0xe8, 0xfe, 0x86, 0x13, 0x9c,
	0x73, 0x3b, 0xc1, 0x0a, 0x48, 0xfe, 0xc6, 0xd7, 0x6a, 0x3e, 0x10, 0x28, 0x33, 0x28, 0xe0, 0xf8,
	0x6a, 0x40, 0x67, 0x79, 0x7f, 0x61, 0x1c, 0x24, 0x8a, 0xa4, 0x86, 0x2d, 0xfe, 0xd0, 0x34, 0x29,
	0x9f, 0xa0, 0x43, 0x16, 0x0d, 0x1d, 0xc5, 0x41, 0x42, 0x76, 0xa1, 0x96, 0xd3, 0x80, 0xf8, 0x56,
	0x03, 0x44, 0xe1, 0xdb, 0xf2, 0x04, 0x2d, 0x06, 0x02, 0xf9, 0x68, 0x40, 0x3d, 0xe7, 0x48, 0x19,
	0x7e, 0xf3, 0xd3, 0xb1, 0x98, 0x2d, 0x4e, 0x15, 0x69, 0x2d, 0x0d, 0xa3, 0x4a, 0x79, 0x18, 0x91,
	0x3b, 0xd0, 0x66, 0x93, 0xec, 0xeb, 0x40, 0xc3, 0x58, 0xb2, 0x34, 0x70, 0x3d, 0xa6, 0x8f, 0x71,
	0x0b, 0xe3, 0xa3, 0x3c, 0x4c, 0xee, 0xc1, 0x76, 0x18, 0x2f, 0x6b, 0xf1, 0x24, 0xdb, 0x3a, 0x31,
	0x17, 0x13, 0x58, 0x4f, 0x93, 0x28, 0x9f, 0x04, 0xea, 0x7f, 0xc6, 0x40, 0xb6, 0x43, 0x2a, 0xa4,
	0x2b, 0x99, 0xf2, 0xaf, 0xee, 0x98, 0x59, 0xe4, 0x2c, 0x0b, 0x5c, 0x54, 0xd5, 0x27, 0xff, 0xf0,
	0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0x92, 0xe3, 0x9c, 0xd6, 0x12, 0x08, 0x00, 0x00,
}
