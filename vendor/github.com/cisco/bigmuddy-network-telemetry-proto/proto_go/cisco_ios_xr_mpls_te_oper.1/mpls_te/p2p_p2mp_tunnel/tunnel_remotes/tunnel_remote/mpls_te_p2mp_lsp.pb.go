// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mpls_te_p2mp_lsp.proto

package cisco_ios_xr_mpls_te_oper_mpls_te_p2p_p2mp_tunnel_tunnel_remotes_tunnel_remote

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// A P2MP LSP
type MplsTeP2MpLsp_KEYS struct {
	LspId                uint32   `protobuf:"varint,1,opt,name=lsp_id,json=lspId" json:"lsp_id,omitempty"`
	TunnelId             uint32   `protobuf:"varint,2,opt,name=tunnel_id,json=tunnelId" json:"tunnel_id,omitempty"`
	ExtendedTunnelId     string   `protobuf:"bytes,3,opt,name=extended_tunnel_id,json=extendedTunnelId" json:"extended_tunnel_id,omitempty"`
	SourceAddress        string   `protobuf:"bytes,4,opt,name=source_address,json=sourceAddress" json:"source_address,omitempty"`
	CType                string   `protobuf:"bytes,5,opt,name=c_type,json=cType" json:"c_type,omitempty"`
	DestinationAddress   string   `protobuf:"bytes,6,opt,name=destination_address,json=destinationAddress" json:"destination_address,omitempty"`
	P2MpId               uint32   `protobuf:"varint,7,opt,name=p2_mp_id,json=p2MpId" json:"p2_mp_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeP2MpLsp_KEYS) Reset()         { *m = MplsTeP2MpLsp_KEYS{} }
func (m *MplsTeP2MpLsp_KEYS) String() string { return proto.CompactTextString(m) }
func (*MplsTeP2MpLsp_KEYS) ProtoMessage()    {}
func (*MplsTeP2MpLsp_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{0}
}
func (m *MplsTeP2MpLsp_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeP2MpLsp_KEYS.Unmarshal(m, b)
}
func (m *MplsTeP2MpLsp_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeP2MpLsp_KEYS.Marshal(b, m, deterministic)
}
func (dst *MplsTeP2MpLsp_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeP2MpLsp_KEYS.Merge(dst, src)
}
func (m *MplsTeP2MpLsp_KEYS) XXX_Size() int {
	return xxx_messageInfo_MplsTeP2MpLsp_KEYS.Size(m)
}
func (m *MplsTeP2MpLsp_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeP2MpLsp_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeP2MpLsp_KEYS proto.InternalMessageInfo

func (m *MplsTeP2MpLsp_KEYS) GetLspId() uint32 {
	if m != nil {
		return m.LspId
	}
	return 0
}

func (m *MplsTeP2MpLsp_KEYS) GetTunnelId() uint32 {
	if m != nil {
		return m.TunnelId
	}
	return 0
}

func (m *MplsTeP2MpLsp_KEYS) GetExtendedTunnelId() string {
	if m != nil {
		return m.ExtendedTunnelId
	}
	return ""
}

func (m *MplsTeP2MpLsp_KEYS) GetSourceAddress() string {
	if m != nil {
		return m.SourceAddress
	}
	return ""
}

func (m *MplsTeP2MpLsp_KEYS) GetCType() string {
	if m != nil {
		return m.CType
	}
	return ""
}

func (m *MplsTeP2MpLsp_KEYS) GetDestinationAddress() string {
	if m != nil {
		return m.DestinationAddress
	}
	return ""
}

func (m *MplsTeP2MpLsp_KEYS) GetP2MpId() uint32 {
	if m != nil {
		return m.P2MpId
	}
	return 0
}

type MplsTeP2MpLsp struct {
	// Signaled Name
	SignaledName string `protobuf:"bytes,50,opt,name=signaled_name,json=signaledName" json:"signaled_name,omitempty"`
	// P2MP LSP has FRR Failed
	IsFrrFailed bool `protobuf:"varint,51,opt,name=is_frr_failed,json=isFrrFailed" json:"is_frr_failed,omitempty"`
	// P2MP LSP FRR active reason
	FrrActiveReason uint32 `protobuf:"varint,52,opt,name=frr_active_reason,json=frrActiveReason" json:"frr_active_reason,omitempty"`
	// P2MP LSP Bandwidth
	LspBandwidth uint32 `protobuf:"varint,53,opt,name=lsp_bandwidth,json=lspBandwidth" json:"lsp_bandwidth,omitempty"`
	// LSP setup priority
	LspSetupPriority uint32 `protobuf:"varint,54,opt,name=lsp_setup_priority,json=lspSetupPriority" json:"lsp_setup_priority,omitempty"`
	// LSP hold priority
	LspHoldPriority uint32 `protobuf:"varint,55,opt,name=lsp_hold_priority,json=lspHoldPriority" json:"lsp_hold_priority,omitempty"`
	// The LSP bandwidth type
	LspBandwidthType string `protobuf:"bytes,56,opt,name=lsp_bandwidth_type,json=lspBandwidthType" json:"lsp_bandwidth_type,omitempty"`
	// Do the class type and priority match a DSTE class
	DsteClassMatch bool `protobuf:"varint,57,opt,name=dste_class_match,json=dsteClassMatch" json:"dste_class_match,omitempty"`
	// Matching DSTE class index
	DsteClassIndex uint32 `protobuf:"varint,58,opt,name=dste_class_index,json=dsteClassIndex" json:"dste_class_index,omitempty"`
	// FEC for the LSP
	LspFec *TeLspFecT `protobuf:"bytes,59,opt,name=lsp_fec,json=lspFec" json:"lsp_fec,omitempty"`
	// The type of this LSP
	Type string `protobuf:"bytes,60,opt,name=type" json:"type,omitempty"`
	// array of S2L structures
	S2LList []*MplsTeP2MpS2L `protobuf:"bytes,61,rep,name=s2_l_list,json=s2LList" json:"s2_l_list,omitempty"`
	// Time in seconds since the tunnel was up
	Uptime uint32 `protobuf:"varint,62,opt,name=uptime" json:"uptime,omitempty"`
	// Number of connected S2Ls
	S2LsUp uint32 `protobuf:"varint,63,opt,name=s2_ls_up,json=s2LsUp" json:"s2_ls_up,omitempty"`
	// Number of proceeding S2Ls
	S2LsProceeding uint32 `protobuf:"varint,64,opt,name=s2_ls_proceeding,json=s2LsProceeding" json:"s2_ls_proceeding,omitempty"`
	// Number of down S2Ls
	S2LsDown uint32 `protobuf:"varint,65,opt,name=s2_ls_down,json=s2LsDown" json:"s2_ls_down,omitempty"`
	// Reason for re-optimization
	ReoptimizeReason string `protobuf:"bytes,66,opt,name=reoptimize_reason,json=reoptimizeReason" json:"reoptimize_reason,omitempty"`
	// Re-optimize trigger
	ReoptimizeTrigger string `protobuf:"bytes,67,opt,name=reoptimize_trigger,json=reoptimizeTrigger" json:"reoptimize_trigger,omitempty"`
	// Time in seconds left to take next action if any
	TimerLeft uint32 `protobuf:"varint,68,opt,name=timer_left,json=timerLeft" json:"timer_left,omitempty"`
	// True for passive tunnel
	IsPassive bool `protobuf:"varint,69,opt,name=is_passive,json=isPassive" json:"is_passive,omitempty"`
	// True for tunnel head
	IsInterface bool `protobuf:"varint,70,opt,name=is_interface,json=isInterface" json:"is_interface,omitempty"`
	// Time in seconds since the last path change
	LastPathChange uint32 `protobuf:"varint,71,opt,name=last_path_change,json=lastPathChange" json:"last_path_change,omitempty"`
	// Persistent forwarding statistics for number of bytes. Clear counters will not reset the counter
	PersistentBytes uint64 `protobuf:"varint,72,opt,name=persistent_bytes,json=persistentBytes" json:"persistent_bytes,omitempty"`
	// Persistent forwarding statistics for Number of packets. Clear counters will not reset the counter
	PersistentPackets    uint64   `protobuf:"varint,73,opt,name=persistent_packets,json=persistentPackets" json:"persistent_packets,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeP2MpLsp) Reset()         { *m = MplsTeP2MpLsp{} }
func (m *MplsTeP2MpLsp) String() string { return proto.CompactTextString(m) }
func (*MplsTeP2MpLsp) ProtoMessage()    {}
func (*MplsTeP2MpLsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{1}
}
func (m *MplsTeP2MpLsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeP2MpLsp.Unmarshal(m, b)
}
func (m *MplsTeP2MpLsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeP2MpLsp.Marshal(b, m, deterministic)
}
func (dst *MplsTeP2MpLsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeP2MpLsp.Merge(dst, src)
}
func (m *MplsTeP2MpLsp) XXX_Size() int {
	return xxx_messageInfo_MplsTeP2MpLsp.Size(m)
}
func (m *MplsTeP2MpLsp) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeP2MpLsp.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeP2MpLsp proto.InternalMessageInfo

func (m *MplsTeP2MpLsp) GetSignaledName() string {
	if m != nil {
		return m.SignaledName
	}
	return ""
}

func (m *MplsTeP2MpLsp) GetIsFrrFailed() bool {
	if m != nil {
		return m.IsFrrFailed
	}
	return false
}

func (m *MplsTeP2MpLsp) GetFrrActiveReason() uint32 {
	if m != nil {
		return m.FrrActiveReason
	}
	return 0
}

func (m *MplsTeP2MpLsp) GetLspBandwidth() uint32 {
	if m != nil {
		return m.LspBandwidth
	}
	return 0
}

func (m *MplsTeP2MpLsp) GetLspSetupPriority() uint32 {
	if m != nil {
		return m.LspSetupPriority
	}
	return 0
}

func (m *MplsTeP2MpLsp) GetLspHoldPriority() uint32 {
	if m != nil {
		return m.LspHoldPriority
	}
	return 0
}

func (m *MplsTeP2MpLsp) GetLspBandwidthType() string {
	if m != nil {
		return m.LspBandwidthType
	}
	return ""
}

func (m *MplsTeP2MpLsp) GetDsteClassMatch() bool {
	if m != nil {
		return m.DsteClassMatch
	}
	return false
}

func (m *MplsTeP2MpLsp) GetDsteClassIndex() uint32 {
	if m != nil {
		return m.DsteClassIndex
	}
	return 0
}

func (m *MplsTeP2MpLsp) GetLspFec() *TeLspFecT {
	if m != nil {
		return m.LspFec
	}
	return nil
}

func (m *MplsTeP2MpLsp) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *MplsTeP2MpLsp) GetS2LList() []*MplsTeP2MpS2L {
	if m != nil {
		return m.S2LList
	}
	return nil
}

func (m *MplsTeP2MpLsp) GetUptime() uint32 {
	if m != nil {
		return m.Uptime
	}
	return 0
}

func (m *MplsTeP2MpLsp) GetS2LsUp() uint32 {
	if m != nil {
		return m.S2LsUp
	}
	return 0
}

func (m *MplsTeP2MpLsp) GetS2LsProceeding() uint32 {
	if m != nil {
		return m.S2LsProceeding
	}
	return 0
}

func (m *MplsTeP2MpLsp) GetS2LsDown() uint32 {
	if m != nil {
		return m.S2LsDown
	}
	return 0
}

func (m *MplsTeP2MpLsp) GetReoptimizeReason() string {
	if m != nil {
		return m.ReoptimizeReason
	}
	return ""
}

func (m *MplsTeP2MpLsp) GetReoptimizeTrigger() string {
	if m != nil {
		return m.ReoptimizeTrigger
	}
	return ""
}

func (m *MplsTeP2MpLsp) GetTimerLeft() uint32 {
	if m != nil {
		return m.TimerLeft
	}
	return 0
}

func (m *MplsTeP2MpLsp) GetIsPassive() bool {
	if m != nil {
		return m.IsPassive
	}
	return false
}

func (m *MplsTeP2MpLsp) GetIsInterface() bool {
	if m != nil {
		return m.IsInterface
	}
	return false
}

func (m *MplsTeP2MpLsp) GetLastPathChange() uint32 {
	if m != nil {
		return m.LastPathChange
	}
	return 0
}

func (m *MplsTeP2MpLsp) GetPersistentBytes() uint64 {
	if m != nil {
		return m.PersistentBytes
	}
	return 0
}

func (m *MplsTeP2MpLsp) GetPersistentPackets() uint64 {
	if m != nil {
		return m.PersistentPackets
	}
	return 0
}

// The value of the counter
type RsvpNgApiStatsEntryBag struct {
	// Count
	Count                uint64   `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RsvpNgApiStatsEntryBag) Reset()         { *m = RsvpNgApiStatsEntryBag{} }
func (m *RsvpNgApiStatsEntryBag) String() string { return proto.CompactTextString(m) }
func (*RsvpNgApiStatsEntryBag) ProtoMessage()    {}
func (*RsvpNgApiStatsEntryBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{2}
}
func (m *RsvpNgApiStatsEntryBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpNgApiStatsEntryBag.Unmarshal(m, b)
}
func (m *RsvpNgApiStatsEntryBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpNgApiStatsEntryBag.Marshal(b, m, deterministic)
}
func (dst *RsvpNgApiStatsEntryBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpNgApiStatsEntryBag.Merge(dst, src)
}
func (m *RsvpNgApiStatsEntryBag) XXX_Size() int {
	return xxx_messageInfo_RsvpNgApiStatsEntryBag.Size(m)
}
func (m *RsvpNgApiStatsEntryBag) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpNgApiStatsEntryBag.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpNgApiStatsEntryBag proto.InternalMessageInfo

func (m *RsvpNgApiStatsEntryBag) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

// Collection of stats for a given event type
type RsvpNgApiStatsBag struct {
	// The CTX event of the stats
	CtxEventType string `protobuf:"bytes,1,opt,name=ctx_event_type,json=ctxEventType" json:"ctx_event_type,omitempty"`
	// The ctrl event of the stats
	CtrlEventType string `protobuf:"bytes,2,opt,name=ctrl_event_type,json=ctrlEventType" json:"ctrl_event_type,omitempty"`
	// Number of scheduled events
	Scheduled *RsvpNgApiStatsEntryBag `protobuf:"bytes,3,opt,name=scheduled" json:"scheduled,omitempty"`
	// Number of transmitted events
	Tx *RsvpNgApiStatsEntryBag `protobuf:"bytes,4,opt,name=tx" json:"tx,omitempty"`
	// Number of received events
	Rx *RsvpNgApiStatsEntryBag `protobuf:"bytes,5,opt,name=rx" json:"rx,omitempty"`
	// Number of dropped Tx events
	DropTx *RsvpNgApiStatsEntryBag `protobuf:"bytes,6,opt,name=drop_tx,json=dropTx" json:"drop_tx,omitempty"`
	// Number of dropped Rx events
	DropRx *RsvpNgApiStatsEntryBag `protobuf:"bytes,7,opt,name=drop_rx,json=dropRx" json:"drop_rx,omitempty"`
	// Number of postponed TX events
	PostponedTx          *RsvpNgApiStatsEntryBag `protobuf:"bytes,8,opt,name=postponed_tx,json=postponedTx" json:"postponed_tx,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *RsvpNgApiStatsBag) Reset()         { *m = RsvpNgApiStatsBag{} }
func (m *RsvpNgApiStatsBag) String() string { return proto.CompactTextString(m) }
func (*RsvpNgApiStatsBag) ProtoMessage()    {}
func (*RsvpNgApiStatsBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{3}
}
func (m *RsvpNgApiStatsBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpNgApiStatsBag.Unmarshal(m, b)
}
func (m *RsvpNgApiStatsBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpNgApiStatsBag.Marshal(b, m, deterministic)
}
func (dst *RsvpNgApiStatsBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpNgApiStatsBag.Merge(dst, src)
}
func (m *RsvpNgApiStatsBag) XXX_Size() int {
	return xxx_messageInfo_RsvpNgApiStatsBag.Size(m)
}
func (m *RsvpNgApiStatsBag) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpNgApiStatsBag.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpNgApiStatsBag proto.InternalMessageInfo

func (m *RsvpNgApiStatsBag) GetCtxEventType() string {
	if m != nil {
		return m.CtxEventType
	}
	return ""
}

func (m *RsvpNgApiStatsBag) GetCtrlEventType() string {
	if m != nil {
		return m.CtrlEventType
	}
	return ""
}

func (m *RsvpNgApiStatsBag) GetScheduled() *RsvpNgApiStatsEntryBag {
	if m != nil {
		return m.Scheduled
	}
	return nil
}

func (m *RsvpNgApiStatsBag) GetTx() *RsvpNgApiStatsEntryBag {
	if m != nil {
		return m.Tx
	}
	return nil
}

func (m *RsvpNgApiStatsBag) GetRx() *RsvpNgApiStatsEntryBag {
	if m != nil {
		return m.Rx
	}
	return nil
}

func (m *RsvpNgApiStatsBag) GetDropTx() *RsvpNgApiStatsEntryBag {
	if m != nil {
		return m.DropTx
	}
	return nil
}

func (m *RsvpNgApiStatsBag) GetDropRx() *RsvpNgApiStatsEntryBag {
	if m != nil {
		return m.DropRx
	}
	return nil
}

func (m *RsvpNgApiStatsBag) GetPostponedTx() *RsvpNgApiStatsEntryBag {
	if m != nil {
		return m.PostponedTx
	}
	return nil
}

// Information about the event for an API CTX
type RsvpNgApiCtxEventBag struct {
	// The event type
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// Producer summary replay ID
	ProducerSummaryReplayId uint64 `protobuf:"varint,2,opt,name=producer_summary_replay_id,json=producerSummaryReplayId" json:"producer_summary_replay_id,omitempty"`
	// TRUE if this event is sent
	IsSent bool `protobuf:"varint,3,opt,name=is_sent,json=isSent" json:"is_sent,omitempty"`
	// Age the event (in sec)
	Age uint32 `protobuf:"varint,4,opt,name=age" json:"age,omitempty"`
	// Reason if thus event is filtered during transmission
	FilterReason         string   `protobuf:"bytes,5,opt,name=filter_reason,json=filterReason" json:"filter_reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RsvpNgApiCtxEventBag) Reset()         { *m = RsvpNgApiCtxEventBag{} }
func (m *RsvpNgApiCtxEventBag) String() string { return proto.CompactTextString(m) }
func (*RsvpNgApiCtxEventBag) ProtoMessage()    {}
func (*RsvpNgApiCtxEventBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{4}
}
func (m *RsvpNgApiCtxEventBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpNgApiCtxEventBag.Unmarshal(m, b)
}
func (m *RsvpNgApiCtxEventBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpNgApiCtxEventBag.Marshal(b, m, deterministic)
}
func (dst *RsvpNgApiCtxEventBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpNgApiCtxEventBag.Merge(dst, src)
}
func (m *RsvpNgApiCtxEventBag) XXX_Size() int {
	return xxx_messageInfo_RsvpNgApiCtxEventBag.Size(m)
}
func (m *RsvpNgApiCtxEventBag) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpNgApiCtxEventBag.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpNgApiCtxEventBag proto.InternalMessageInfo

func (m *RsvpNgApiCtxEventBag) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *RsvpNgApiCtxEventBag) GetProducerSummaryReplayId() uint64 {
	if m != nil {
		return m.ProducerSummaryReplayId
	}
	return 0
}

func (m *RsvpNgApiCtxEventBag) GetIsSent() bool {
	if m != nil {
		return m.IsSent
	}
	return false
}

func (m *RsvpNgApiCtxEventBag) GetAge() uint32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *RsvpNgApiCtxEventBag) GetFilterReason() string {
	if m != nil {
		return m.FilterReason
	}
	return ""
}

// CTX History Buffer
type RsvpNgApiCtxHistory struct {
	// Event Timestamp
	Timestamp uint32 `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	// Event Type
	EventType string `protobuf:"bytes,2,opt,name=event_type,json=eventType" json:"event_type,omitempty"`
	// Event Data
	EventData            []uint32 `protobuf:"varint,3,rep,packed,name=event_data,json=eventData" json:"event_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RsvpNgApiCtxHistory) Reset()         { *m = RsvpNgApiCtxHistory{} }
func (m *RsvpNgApiCtxHistory) String() string { return proto.CompactTextString(m) }
func (*RsvpNgApiCtxHistory) ProtoMessage()    {}
func (*RsvpNgApiCtxHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{5}
}
func (m *RsvpNgApiCtxHistory) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpNgApiCtxHistory.Unmarshal(m, b)
}
func (m *RsvpNgApiCtxHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpNgApiCtxHistory.Marshal(b, m, deterministic)
}
func (dst *RsvpNgApiCtxHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpNgApiCtxHistory.Merge(dst, src)
}
func (m *RsvpNgApiCtxHistory) XXX_Size() int {
	return xxx_messageInfo_RsvpNgApiCtxHistory.Size(m)
}
func (m *RsvpNgApiCtxHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpNgApiCtxHistory.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpNgApiCtxHistory proto.InternalMessageInfo

func (m *RsvpNgApiCtxHistory) GetTimestamp() uint32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *RsvpNgApiCtxHistory) GetEventType() string {
	if m != nil {
		return m.EventType
	}
	return ""
}

func (m *RsvpNgApiCtxHistory) GetEventData() []uint32 {
	if m != nil {
		return m.EventData
	}
	return nil
}

// Bag representing the CTX in the RSVP API
type RsvpNgApiCtxBag struct {
	// Producer summary replay ID
	ProducerSummaryReplayId uint64 `protobuf:"varint,1,opt,name=producer_summary_replay_id,json=producerSummaryReplayId" json:"producer_summary_replay_id,omitempty"`
	// Producer summary replay base ID
	ProducerSummaryReplayBaseId uint32 `protobuf:"varint,2,opt,name=producer_summary_replay_base_id,json=producerSummaryReplayBaseId" json:"producer_summary_replay_base_id,omitempty"`
	// Consumer summary replay ID
	ConsumerSummaryReplayId uint64 `protobuf:"varint,3,opt,name=consumer_summary_replay_id,json=consumerSummaryReplayId" json:"consumer_summary_replay_id,omitempty"`
	// Consumer summary replay base ID
	ConsumerSummaryReplayBaseId uint32 `protobuf:"varint,4,opt,name=consumer_summary_replay_base_id,json=consumerSummaryReplayBaseId" json:"consumer_summary_replay_base_id,omitempty"`
	// Flags
	Flags uint32 `protobuf:"varint,5,opt,name=flags" json:"flags,omitempty"`
	// Origin of this CTX
	Origin string `protobuf:"bytes,6,opt,name=origin" json:"origin,omitempty"`
	// Statistics
	Statistics []*RsvpNgApiStatsBag `protobuf:"bytes,7,rep,name=statistics" json:"statistics,omitempty"`
	// Events
	Events []*RsvpNgApiCtxEventBag `protobuf:"bytes,8,rep,name=events" json:"events,omitempty"`
	// History
	History []*RsvpNgApiCtxHistory `protobuf:"bytes,9,rep,name=history" json:"history,omitempty"`
	// Slave Producer summary replay ID
	SlaveProducerSummaryReplayId uint64 `protobuf:"varint,10,opt,name=slave_producer_summary_replay_id,json=slaveProducerSummaryReplayId" json:"slave_producer_summary_replay_id,omitempty"`
	// Slave Consumer summary replay ID
	SlaveConsumerSummaryReplayId uint64   `protobuf:"varint,11,opt,name=slave_consumer_summary_replay_id,json=slaveConsumerSummaryReplayId" json:"slave_consumer_summary_replay_id,omitempty"`
	XXX_NoUnkeyedLiteral         struct{} `json:"-"`
	XXX_unrecognized             []byte   `json:"-"`
	XXX_sizecache                int32    `json:"-"`
}

func (m *RsvpNgApiCtxBag) Reset()         { *m = RsvpNgApiCtxBag{} }
func (m *RsvpNgApiCtxBag) String() string { return proto.CompactTextString(m) }
func (*RsvpNgApiCtxBag) ProtoMessage()    {}
func (*RsvpNgApiCtxBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{6}
}
func (m *RsvpNgApiCtxBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpNgApiCtxBag.Unmarshal(m, b)
}
func (m *RsvpNgApiCtxBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpNgApiCtxBag.Marshal(b, m, deterministic)
}
func (dst *RsvpNgApiCtxBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpNgApiCtxBag.Merge(dst, src)
}
func (m *RsvpNgApiCtxBag) XXX_Size() int {
	return xxx_messageInfo_RsvpNgApiCtxBag.Size(m)
}
func (m *RsvpNgApiCtxBag) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpNgApiCtxBag.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpNgApiCtxBag proto.InternalMessageInfo

func (m *RsvpNgApiCtxBag) GetProducerSummaryReplayId() uint64 {
	if m != nil {
		return m.ProducerSummaryReplayId
	}
	return 0
}

func (m *RsvpNgApiCtxBag) GetProducerSummaryReplayBaseId() uint32 {
	if m != nil {
		return m.ProducerSummaryReplayBaseId
	}
	return 0
}

func (m *RsvpNgApiCtxBag) GetConsumerSummaryReplayId() uint64 {
	if m != nil {
		return m.ConsumerSummaryReplayId
	}
	return 0
}

func (m *RsvpNgApiCtxBag) GetConsumerSummaryReplayBaseId() uint32 {
	if m != nil {
		return m.ConsumerSummaryReplayBaseId
	}
	return 0
}

func (m *RsvpNgApiCtxBag) GetFlags() uint32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *RsvpNgApiCtxBag) GetOrigin() string {
	if m != nil {
		return m.Origin
	}
	return ""
}

func (m *RsvpNgApiCtxBag) GetStatistics() []*RsvpNgApiStatsBag {
	if m != nil {
		return m.Statistics
	}
	return nil
}

func (m *RsvpNgApiCtxBag) GetEvents() []*RsvpNgApiCtxEventBag {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *RsvpNgApiCtxBag) GetHistory() []*RsvpNgApiCtxHistory {
	if m != nil {
		return m.History
	}
	return nil
}

func (m *RsvpNgApiCtxBag) GetSlaveProducerSummaryReplayId() uint64 {
	if m != nil {
		return m.SlaveProducerSummaryReplayId
	}
	return 0
}

func (m *RsvpNgApiCtxBag) GetSlaveConsumerSummaryReplayId() uint64 {
	if m != nil {
		return m.SlaveConsumerSummaryReplayId
	}
	return 0
}

// RSVP ERO IPV4 subobject
type RsvpMgmtEroIpv4Subobj struct {
	// ERO Entry Is Strict
	IsStrictRoute bool `protobuf:"varint,1,opt,name=is_strict_route,json=isStrictRoute" json:"is_strict_route,omitempty"`
	// The ERO IPV4 Address
	EroAddress string `protobuf:"bytes,2,opt,name=ero_address,json=eroAddress" json:"ero_address,omitempty"`
	// ERO Prefix Length
	PrefixLength         uint32   `protobuf:"varint,3,opt,name=prefix_length,json=prefixLength" json:"prefix_length,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RsvpMgmtEroIpv4Subobj) Reset()         { *m = RsvpMgmtEroIpv4Subobj{} }
func (m *RsvpMgmtEroIpv4Subobj) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtEroIpv4Subobj) ProtoMessage()    {}
func (*RsvpMgmtEroIpv4Subobj) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{7}
}
func (m *RsvpMgmtEroIpv4Subobj) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtEroIpv4Subobj.Unmarshal(m, b)
}
func (m *RsvpMgmtEroIpv4Subobj) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtEroIpv4Subobj.Marshal(b, m, deterministic)
}
func (dst *RsvpMgmtEroIpv4Subobj) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtEroIpv4Subobj.Merge(dst, src)
}
func (m *RsvpMgmtEroIpv4Subobj) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtEroIpv4Subobj.Size(m)
}
func (m *RsvpMgmtEroIpv4Subobj) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtEroIpv4Subobj.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtEroIpv4Subobj proto.InternalMessageInfo

func (m *RsvpMgmtEroIpv4Subobj) GetIsStrictRoute() bool {
	if m != nil {
		return m.IsStrictRoute
	}
	return false
}

func (m *RsvpMgmtEroIpv4Subobj) GetEroAddress() string {
	if m != nil {
		return m.EroAddress
	}
	return ""
}

func (m *RsvpMgmtEroIpv4Subobj) GetPrefixLength() uint32 {
	if m != nil {
		return m.PrefixLength
	}
	return 0
}

// RSVP ERO UNNUM subobject
type RsvpMgmtEroUnnumSubobj struct {
	// ERO Entry Is Strict
	IsStrictRoute bool `protobuf:"varint,1,opt,name=is_strict_route,json=isStrictRoute" json:"is_strict_route,omitempty"`
	// The Interface ID in ERO
	EroInterfaceId uint32 `protobuf:"varint,2,opt,name=ero_interface_id,json=eroInterfaceId" json:"ero_interface_id,omitempty"`
	// The Router ID in ERO
	EroRouterId string `protobuf:"bytes,3,opt,name=ero_router_id,json=eroRouterId" json:"ero_router_id,omitempty"`
	// Status of ERO
	Status               string   `protobuf:"bytes,4,opt,name=status" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RsvpMgmtEroUnnumSubobj) Reset()         { *m = RsvpMgmtEroUnnumSubobj{} }
func (m *RsvpMgmtEroUnnumSubobj) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtEroUnnumSubobj) ProtoMessage()    {}
func (*RsvpMgmtEroUnnumSubobj) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{8}
}
func (m *RsvpMgmtEroUnnumSubobj) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtEroUnnumSubobj.Unmarshal(m, b)
}
func (m *RsvpMgmtEroUnnumSubobj) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtEroUnnumSubobj.Marshal(b, m, deterministic)
}
func (dst *RsvpMgmtEroUnnumSubobj) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtEroUnnumSubobj.Merge(dst, src)
}
func (m *RsvpMgmtEroUnnumSubobj) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtEroUnnumSubobj.Size(m)
}
func (m *RsvpMgmtEroUnnumSubobj) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtEroUnnumSubobj.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtEroUnnumSubobj proto.InternalMessageInfo

func (m *RsvpMgmtEroUnnumSubobj) GetIsStrictRoute() bool {
	if m != nil {
		return m.IsStrictRoute
	}
	return false
}

func (m *RsvpMgmtEroUnnumSubobj) GetEroInterfaceId() uint32 {
	if m != nil {
		return m.EroInterfaceId
	}
	return 0
}

func (m *RsvpMgmtEroUnnumSubobj) GetEroRouterId() string {
	if m != nil {
		return m.EroRouterId
	}
	return ""
}

func (m *RsvpMgmtEroUnnumSubobj) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

// Union of the different RSVP ERO types
type RsvpMgmtEroSubobj struct {
	EroType string `protobuf:"bytes,1,opt,name=ero_type,json=eroType" json:"ero_type,omitempty"`
	// IPV4 ERO Sub Object
	Ipv4EroSubObject *RsvpMgmtEroIpv4Subobj `protobuf:"bytes,2,opt,name=ipv4_ero_sub_object,json=ipv4EroSubObject" json:"ipv4_ero_sub_object,omitempty"`
	// Unnumbered ERO Sub Object
	UnnumberedEroSubObject *RsvpMgmtEroUnnumSubobj `protobuf:"bytes,3,opt,name=unnumbered_ero_sub_object,json=unnumberedEroSubObject" json:"unnumbered_ero_sub_object,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}                `json:"-"`
	XXX_unrecognized       []byte                  `json:"-"`
	XXX_sizecache          int32                   `json:"-"`
}

func (m *RsvpMgmtEroSubobj) Reset()         { *m = RsvpMgmtEroSubobj{} }
func (m *RsvpMgmtEroSubobj) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtEroSubobj) ProtoMessage()    {}
func (*RsvpMgmtEroSubobj) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{9}
}
func (m *RsvpMgmtEroSubobj) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtEroSubobj.Unmarshal(m, b)
}
func (m *RsvpMgmtEroSubobj) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtEroSubobj.Marshal(b, m, deterministic)
}
func (dst *RsvpMgmtEroSubobj) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtEroSubobj.Merge(dst, src)
}
func (m *RsvpMgmtEroSubobj) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtEroSubobj.Size(m)
}
func (m *RsvpMgmtEroSubobj) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtEroSubobj.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtEroSubobj proto.InternalMessageInfo

func (m *RsvpMgmtEroSubobj) GetEroType() string {
	if m != nil {
		return m.EroType
	}
	return ""
}

func (m *RsvpMgmtEroSubobj) GetIpv4EroSubObject() *RsvpMgmtEroIpv4Subobj {
	if m != nil {
		return m.Ipv4EroSubObject
	}
	return nil
}

func (m *RsvpMgmtEroSubobj) GetUnnumberedEroSubObject() *RsvpMgmtEroUnnumSubobj {
	if m != nil {
		return m.UnnumberedEroSubObject
	}
	return nil
}

// RSVP RRO IPV4 Subobject Flags
type RsvpMgmtRroIpv4SubobjFlags struct {
	// Local Protection Available
	IsProtectionAvailable bool `protobuf:"varint,1,opt,name=is_protection_available,json=isProtectionAvailable" json:"is_protection_available,omitempty"`
	// Local Protection In Use
	IsProtectionInUse bool `protobuf:"varint,2,opt,name=is_protection_in_use,json=isProtectionInUse" json:"is_protection_in_use,omitempty"`
	// Bandwidth Protection Available
	IsBandwidthProtected bool `protobuf:"varint,3,opt,name=is_bandwidth_protected,json=isBandwidthProtected" json:"is_bandwidth_protected,omitempty"`
	// Node Protection Available
	IsNodeProtectionAvailable bool `protobuf:"varint,4,opt,name=is_node_protection_available,json=isNodeProtectionAvailable" json:"is_node_protection_available,omitempty"`
	// Node ID In Use
	IsNodeId             bool     `protobuf:"varint,5,opt,name=is_node_id,json=isNodeId" json:"is_node_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RsvpMgmtRroIpv4SubobjFlags) Reset()         { *m = RsvpMgmtRroIpv4SubobjFlags{} }
func (m *RsvpMgmtRroIpv4SubobjFlags) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtRroIpv4SubobjFlags) ProtoMessage()    {}
func (*RsvpMgmtRroIpv4SubobjFlags) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{10}
}
func (m *RsvpMgmtRroIpv4SubobjFlags) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtRroIpv4SubobjFlags.Unmarshal(m, b)
}
func (m *RsvpMgmtRroIpv4SubobjFlags) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtRroIpv4SubobjFlags.Marshal(b, m, deterministic)
}
func (dst *RsvpMgmtRroIpv4SubobjFlags) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtRroIpv4SubobjFlags.Merge(dst, src)
}
func (m *RsvpMgmtRroIpv4SubobjFlags) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtRroIpv4SubobjFlags.Size(m)
}
func (m *RsvpMgmtRroIpv4SubobjFlags) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtRroIpv4SubobjFlags.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtRroIpv4SubobjFlags proto.InternalMessageInfo

func (m *RsvpMgmtRroIpv4SubobjFlags) GetIsProtectionAvailable() bool {
	if m != nil {
		return m.IsProtectionAvailable
	}
	return false
}

func (m *RsvpMgmtRroIpv4SubobjFlags) GetIsProtectionInUse() bool {
	if m != nil {
		return m.IsProtectionInUse
	}
	return false
}

func (m *RsvpMgmtRroIpv4SubobjFlags) GetIsBandwidthProtected() bool {
	if m != nil {
		return m.IsBandwidthProtected
	}
	return false
}

func (m *RsvpMgmtRroIpv4SubobjFlags) GetIsNodeProtectionAvailable() bool {
	if m != nil {
		return m.IsNodeProtectionAvailable
	}
	return false
}

func (m *RsvpMgmtRroIpv4SubobjFlags) GetIsNodeId() bool {
	if m != nil {
		return m.IsNodeId
	}
	return false
}

// RSVP RRO Label Subobject Flags
type RsvpMgmtRroLabelSubobjFlags struct {
	// Label is Global across all interfaces
	IsGlobalLabel        bool     `protobuf:"varint,1,opt,name=is_global_label,json=isGlobalLabel" json:"is_global_label,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RsvpMgmtRroLabelSubobjFlags) Reset()         { *m = RsvpMgmtRroLabelSubobjFlags{} }
func (m *RsvpMgmtRroLabelSubobjFlags) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtRroLabelSubobjFlags) ProtoMessage()    {}
func (*RsvpMgmtRroLabelSubobjFlags) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{11}
}
func (m *RsvpMgmtRroLabelSubobjFlags) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtRroLabelSubobjFlags.Unmarshal(m, b)
}
func (m *RsvpMgmtRroLabelSubobjFlags) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtRroLabelSubobjFlags.Marshal(b, m, deterministic)
}
func (dst *RsvpMgmtRroLabelSubobjFlags) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtRroLabelSubobjFlags.Merge(dst, src)
}
func (m *RsvpMgmtRroLabelSubobjFlags) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtRroLabelSubobjFlags.Size(m)
}
func (m *RsvpMgmtRroLabelSubobjFlags) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtRroLabelSubobjFlags.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtRroLabelSubobjFlags proto.InternalMessageInfo

func (m *RsvpMgmtRroLabelSubobjFlags) GetIsGlobalLabel() bool {
	if m != nil {
		return m.IsGlobalLabel
	}
	return false
}

// RSVP RRO UNNUMBERED Subobject Flags
type RsvpMgmtRroUnnumberedSubobjFlags struct {
	// Local Protection Available
	IsProtectionAvailable bool `protobuf:"varint,1,opt,name=is_protection_available,json=isProtectionAvailable" json:"is_protection_available,omitempty"`
	// Local Protection In Use
	IsProtectionInUse bool `protobuf:"varint,2,opt,name=is_protection_in_use,json=isProtectionInUse" json:"is_protection_in_use,omitempty"`
	// Bandwidth Protection Available
	IsBandwidthProtected bool `protobuf:"varint,3,opt,name=is_bandwidth_protected,json=isBandwidthProtected" json:"is_bandwidth_protected,omitempty"`
	// Node Protection Available
	IsNodeProtectionAvailable bool `protobuf:"varint,4,opt,name=is_node_protection_available,json=isNodeProtectionAvailable" json:"is_node_protection_available,omitempty"`
	// Node ID In Use
	IsNodeId             bool     `protobuf:"varint,5,opt,name=is_node_id,json=isNodeId" json:"is_node_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RsvpMgmtRroUnnumberedSubobjFlags) Reset()         { *m = RsvpMgmtRroUnnumberedSubobjFlags{} }
func (m *RsvpMgmtRroUnnumberedSubobjFlags) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtRroUnnumberedSubobjFlags) ProtoMessage()    {}
func (*RsvpMgmtRroUnnumberedSubobjFlags) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{12}
}
func (m *RsvpMgmtRroUnnumberedSubobjFlags) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtRroUnnumberedSubobjFlags.Unmarshal(m, b)
}
func (m *RsvpMgmtRroUnnumberedSubobjFlags) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtRroUnnumberedSubobjFlags.Marshal(b, m, deterministic)
}
func (dst *RsvpMgmtRroUnnumberedSubobjFlags) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtRroUnnumberedSubobjFlags.Merge(dst, src)
}
func (m *RsvpMgmtRroUnnumberedSubobjFlags) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtRroUnnumberedSubobjFlags.Size(m)
}
func (m *RsvpMgmtRroUnnumberedSubobjFlags) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtRroUnnumberedSubobjFlags.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtRroUnnumberedSubobjFlags proto.InternalMessageInfo

func (m *RsvpMgmtRroUnnumberedSubobjFlags) GetIsProtectionAvailable() bool {
	if m != nil {
		return m.IsProtectionAvailable
	}
	return false
}

func (m *RsvpMgmtRroUnnumberedSubobjFlags) GetIsProtectionInUse() bool {
	if m != nil {
		return m.IsProtectionInUse
	}
	return false
}

func (m *RsvpMgmtRroUnnumberedSubobjFlags) GetIsBandwidthProtected() bool {
	if m != nil {
		return m.IsBandwidthProtected
	}
	return false
}

func (m *RsvpMgmtRroUnnumberedSubobjFlags) GetIsNodeProtectionAvailable() bool {
	if m != nil {
		return m.IsNodeProtectionAvailable
	}
	return false
}

func (m *RsvpMgmtRroUnnumberedSubobjFlags) GetIsNodeId() bool {
	if m != nil {
		return m.IsNodeId
	}
	return false
}

// RSVP RRO IPV4 subobject
type RsvpMgmtRroIpv4Subobj struct {
	// The RRO IPV4 Subobject Flags
	Flags *RsvpMgmtRroIpv4SubobjFlags `protobuf:"bytes,1,opt,name=flags" json:"flags,omitempty"`
	// The RRO IPV4 Address
	RroAddress           string   `protobuf:"bytes,2,opt,name=rro_address,json=rroAddress" json:"rro_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RsvpMgmtRroIpv4Subobj) Reset()         { *m = RsvpMgmtRroIpv4Subobj{} }
func (m *RsvpMgmtRroIpv4Subobj) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtRroIpv4Subobj) ProtoMessage()    {}
func (*RsvpMgmtRroIpv4Subobj) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{13}
}
func (m *RsvpMgmtRroIpv4Subobj) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtRroIpv4Subobj.Unmarshal(m, b)
}
func (m *RsvpMgmtRroIpv4Subobj) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtRroIpv4Subobj.Marshal(b, m, deterministic)
}
func (dst *RsvpMgmtRroIpv4Subobj) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtRroIpv4Subobj.Merge(dst, src)
}
func (m *RsvpMgmtRroIpv4Subobj) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtRroIpv4Subobj.Size(m)
}
func (m *RsvpMgmtRroIpv4Subobj) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtRroIpv4Subobj.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtRroIpv4Subobj proto.InternalMessageInfo

func (m *RsvpMgmtRroIpv4Subobj) GetFlags() *RsvpMgmtRroIpv4SubobjFlags {
	if m != nil {
		return m.Flags
	}
	return nil
}

func (m *RsvpMgmtRroIpv4Subobj) GetRroAddress() string {
	if m != nil {
		return m.RroAddress
	}
	return ""
}

// RSVP RRO Label subobject
type RsvpMgmtRroLabelSubobj struct {
	// The RRO Subobject Label Flags
	Flags *RsvpMgmtRroLabelSubobjFlags `protobuf:"bytes,1,opt,name=flags" json:"flags,omitempty"`
	// The RRO Subobject Label Value
	Label uint32 `protobuf:"varint,2,opt,name=label" json:"label,omitempty"`
	// Is the RRO Subobject Label Variable Length
	IsLabelVariableLength bool `protobuf:"varint,3,opt,name=is_label_variable_length,json=isLabelVariableLength" json:"is_label_variable_length,omitempty"`
	// The RRO Subobject Variable Length Label
	VariableLengthLabel  []uint32 `protobuf:"varint,4,rep,packed,name=variable_length_label,json=variableLengthLabel" json:"variable_length_label,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RsvpMgmtRroLabelSubobj) Reset()         { *m = RsvpMgmtRroLabelSubobj{} }
func (m *RsvpMgmtRroLabelSubobj) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtRroLabelSubobj) ProtoMessage()    {}
func (*RsvpMgmtRroLabelSubobj) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{14}
}
func (m *RsvpMgmtRroLabelSubobj) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtRroLabelSubobj.Unmarshal(m, b)
}
func (m *RsvpMgmtRroLabelSubobj) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtRroLabelSubobj.Marshal(b, m, deterministic)
}
func (dst *RsvpMgmtRroLabelSubobj) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtRroLabelSubobj.Merge(dst, src)
}
func (m *RsvpMgmtRroLabelSubobj) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtRroLabelSubobj.Size(m)
}
func (m *RsvpMgmtRroLabelSubobj) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtRroLabelSubobj.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtRroLabelSubobj proto.InternalMessageInfo

func (m *RsvpMgmtRroLabelSubobj) GetFlags() *RsvpMgmtRroLabelSubobjFlags {
	if m != nil {
		return m.Flags
	}
	return nil
}

func (m *RsvpMgmtRroLabelSubobj) GetLabel() uint32 {
	if m != nil {
		return m.Label
	}
	return 0
}

func (m *RsvpMgmtRroLabelSubobj) GetIsLabelVariableLength() bool {
	if m != nil {
		return m.IsLabelVariableLength
	}
	return false
}

func (m *RsvpMgmtRroLabelSubobj) GetVariableLengthLabel() []uint32 {
	if m != nil {
		return m.VariableLengthLabel
	}
	return nil
}

// RSVP RRO Unnumbered subobject
type RsvpMgmtRroUnnumberedSubobj struct {
	// The RRO Subobject Unnumbered Flags
	Flags *RsvpMgmtRroUnnumberedSubobjFlags `protobuf:"bytes,1,opt,name=flags" json:"flags,omitempty"`
	// The RRO Interface Address
	InterfaceAddress string `protobuf:"bytes,2,opt,name=interface_address,json=interfaceAddress" json:"interface_address,omitempty"`
	// The RRO Interface ID
	InterfaceId          uint32   `protobuf:"varint,3,opt,name=interface_id,json=interfaceId" json:"interface_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RsvpMgmtRroUnnumberedSubobj) Reset()         { *m = RsvpMgmtRroUnnumberedSubobj{} }
func (m *RsvpMgmtRroUnnumberedSubobj) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtRroUnnumberedSubobj) ProtoMessage()    {}
func (*RsvpMgmtRroUnnumberedSubobj) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{15}
}
func (m *RsvpMgmtRroUnnumberedSubobj) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtRroUnnumberedSubobj.Unmarshal(m, b)
}
func (m *RsvpMgmtRroUnnumberedSubobj) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtRroUnnumberedSubobj.Marshal(b, m, deterministic)
}
func (dst *RsvpMgmtRroUnnumberedSubobj) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtRroUnnumberedSubobj.Merge(dst, src)
}
func (m *RsvpMgmtRroUnnumberedSubobj) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtRroUnnumberedSubobj.Size(m)
}
func (m *RsvpMgmtRroUnnumberedSubobj) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtRroUnnumberedSubobj.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtRroUnnumberedSubobj proto.InternalMessageInfo

func (m *RsvpMgmtRroUnnumberedSubobj) GetFlags() *RsvpMgmtRroUnnumberedSubobjFlags {
	if m != nil {
		return m.Flags
	}
	return nil
}

func (m *RsvpMgmtRroUnnumberedSubobj) GetInterfaceAddress() string {
	if m != nil {
		return m.InterfaceAddress
	}
	return ""
}

func (m *RsvpMgmtRroUnnumberedSubobj) GetInterfaceId() uint32 {
	if m != nil {
		return m.InterfaceId
	}
	return 0
}

// RSVP RRO SRLG subobject
type RsvpMgmtRroSrlgSubobj struct {
	// The RRO Subobject SRLGs
	SrlGs                []uint32 `protobuf:"varint,1,rep,packed,name=srl_gs,json=srlGs" json:"srl_gs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RsvpMgmtRroSrlgSubobj) Reset()         { *m = RsvpMgmtRroSrlgSubobj{} }
func (m *RsvpMgmtRroSrlgSubobj) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtRroSrlgSubobj) ProtoMessage()    {}
func (*RsvpMgmtRroSrlgSubobj) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{16}
}
func (m *RsvpMgmtRroSrlgSubobj) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtRroSrlgSubobj.Unmarshal(m, b)
}
func (m *RsvpMgmtRroSrlgSubobj) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtRroSrlgSubobj.Marshal(b, m, deterministic)
}
func (dst *RsvpMgmtRroSrlgSubobj) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtRroSrlgSubobj.Merge(dst, src)
}
func (m *RsvpMgmtRroSrlgSubobj) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtRroSrlgSubobj.Size(m)
}
func (m *RsvpMgmtRroSrlgSubobj) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtRroSrlgSubobj.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtRroSrlgSubobj proto.InternalMessageInfo

func (m *RsvpMgmtRroSrlgSubobj) GetSrlGs() []uint32 {
	if m != nil {
		return m.SrlGs
	}
	return nil
}

// Union of the different RSVP RRO types
type RsvpMgmtRroSubobj struct {
	RroType string `protobuf:"bytes,1,opt,name=rro_type,json=rroType" json:"rro_type,omitempty"`
	// IPV4 RRO Sub Object
	Ipv4RroSubObject *RsvpMgmtRroIpv4Subobj `protobuf:"bytes,2,opt,name=ipv4_rro_sub_object,json=ipv4RroSubObject" json:"ipv4_rro_sub_object,omitempty"`
	// Label RRO Sub Object
	LabelRroSubObject *RsvpMgmtRroLabelSubobj `protobuf:"bytes,3,opt,name=label_rro_sub_object,json=labelRroSubObject" json:"label_rro_sub_object,omitempty"`
	// Unnumbered RRO Sub Object
	UnnumberedRroSubObject *RsvpMgmtRroUnnumberedSubobj `protobuf:"bytes,4,opt,name=unnumbered_rro_sub_object,json=unnumberedRroSubObject" json:"unnumbered_rro_sub_object,omitempty"`
	// SRLG RRO Sub Object
	SrlgRroSubObject     *RsvpMgmtRroSrlgSubobj `protobuf:"bytes,5,opt,name=srlg_rro_sub_object,json=srlgRroSubObject" json:"srlg_rro_sub_object,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *RsvpMgmtRroSubobj) Reset()         { *m = RsvpMgmtRroSubobj{} }
func (m *RsvpMgmtRroSubobj) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtRroSubobj) ProtoMessage()    {}
func (*RsvpMgmtRroSubobj) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{17}
}
func (m *RsvpMgmtRroSubobj) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtRroSubobj.Unmarshal(m, b)
}
func (m *RsvpMgmtRroSubobj) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtRroSubobj.Marshal(b, m, deterministic)
}
func (dst *RsvpMgmtRroSubobj) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtRroSubobj.Merge(dst, src)
}
func (m *RsvpMgmtRroSubobj) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtRroSubobj.Size(m)
}
func (m *RsvpMgmtRroSubobj) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtRroSubobj.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtRroSubobj proto.InternalMessageInfo

func (m *RsvpMgmtRroSubobj) GetRroType() string {
	if m != nil {
		return m.RroType
	}
	return ""
}

func (m *RsvpMgmtRroSubobj) GetIpv4RroSubObject() *RsvpMgmtRroIpv4Subobj {
	if m != nil {
		return m.Ipv4RroSubObject
	}
	return nil
}

func (m *RsvpMgmtRroSubobj) GetLabelRroSubObject() *RsvpMgmtRroLabelSubobj {
	if m != nil {
		return m.LabelRroSubObject
	}
	return nil
}

func (m *RsvpMgmtRroSubobj) GetUnnumberedRroSubObject() *RsvpMgmtRroUnnumberedSubobj {
	if m != nil {
		return m.UnnumberedRroSubObject
	}
	return nil
}

func (m *RsvpMgmtRroSubobj) GetSrlgRroSubObject() *RsvpMgmtRroSrlgSubobj {
	if m != nil {
		return m.SrlgRroSubObject
	}
	return nil
}

// A sub-LSP FEC
type TeS2LFecT struct {
	// sub-LSP subgroup ID
	S2LFecSubgroupId uint32 `protobuf:"varint,1,opt,name=s2_l_fec_subgroup_id,json=s2LFecSubgroupId" json:"s2_l_fec_subgroup_id,omitempty"`
	// LSP ID
	S2LFecLspId uint32 `protobuf:"varint,2,opt,name=s2_l_fec_lsp_id,json=s2LFecLspId" json:"s2_l_fec_lsp_id,omitempty"`
	// Tunnel ID
	S2LFecTunnelId uint32 `protobuf:"varint,3,opt,name=s2_l_fec_tunnel_id,json=s2LFecTunnelId" json:"s2_l_fec_tunnel_id,omitempty"`
	// Extended tunnel ID
	S2LFecExtendedTunnelId string `protobuf:"bytes,4,opt,name=s2_l_fec_extended_tunnel_id,json=s2LFecExtendedTunnelId" json:"s2_l_fec_extended_tunnel_id,omitempty"`
	// LSP source address
	S2LFecSource string `protobuf:"bytes,5,opt,name=s2_l_fec_source,json=s2LFecSource" json:"s2_l_fec_source,omitempty"`
	// sub-LSP destination address
	S2LFecDest string `protobuf:"bytes,6,opt,name=s2_l_fec_dest,json=s2LFecDest" json:"s2_l_fec_dest,omitempty"`
	// P2MP ID
	S2LFecP2MpId uint32 `protobuf:"varint,7,opt,name=s2_l_fec_p2_mp_id,json=s2LFecP2MpId" json:"s2_l_fec_p2_mp_id,omitempty"`
	// Subgroup Originator
	S2LFecSubgroupOriginator string `protobuf:"bytes,8,opt,name=s2_l_fec_subgroup_originator,json=s2LFecSubgroupOriginator" json:"s2_l_fec_subgroup_originator,omitempty"`
	// Session identifier (ctype)
	S2LFecCType string `protobuf:"bytes,9,opt,name=s2_l_fec_c_type,json=s2LFecCType" json:"s2_l_fec_c_type,omitempty"`
	// VRF; currently only for GMPLS tunnels
	S2LFecVrf            string   `protobuf:"bytes,10,opt,name=s2_l_fec_vrf,json=s2LFecVrf" json:"s2_l_fec_vrf,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeS2LFecT) Reset()         { *m = TeS2LFecT{} }
func (m *TeS2LFecT) String() string { return proto.CompactTextString(m) }
func (*TeS2LFecT) ProtoMessage()    {}
func (*TeS2LFecT) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{18}
}
func (m *TeS2LFecT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeS2LFecT.Unmarshal(m, b)
}
func (m *TeS2LFecT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeS2LFecT.Marshal(b, m, deterministic)
}
func (dst *TeS2LFecT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeS2LFecT.Merge(dst, src)
}
func (m *TeS2LFecT) XXX_Size() int {
	return xxx_messageInfo_TeS2LFecT.Size(m)
}
func (m *TeS2LFecT) XXX_DiscardUnknown() {
	xxx_messageInfo_TeS2LFecT.DiscardUnknown(m)
}

var xxx_messageInfo_TeS2LFecT proto.InternalMessageInfo

func (m *TeS2LFecT) GetS2LFecSubgroupId() uint32 {
	if m != nil {
		return m.S2LFecSubgroupId
	}
	return 0
}

func (m *TeS2LFecT) GetS2LFecLspId() uint32 {
	if m != nil {
		return m.S2LFecLspId
	}
	return 0
}

func (m *TeS2LFecT) GetS2LFecTunnelId() uint32 {
	if m != nil {
		return m.S2LFecTunnelId
	}
	return 0
}

func (m *TeS2LFecT) GetS2LFecExtendedTunnelId() string {
	if m != nil {
		return m.S2LFecExtendedTunnelId
	}
	return ""
}

func (m *TeS2LFecT) GetS2LFecSource() string {
	if m != nil {
		return m.S2LFecSource
	}
	return ""
}

func (m *TeS2LFecT) GetS2LFecDest() string {
	if m != nil {
		return m.S2LFecDest
	}
	return ""
}

func (m *TeS2LFecT) GetS2LFecP2MpId() uint32 {
	if m != nil {
		return m.S2LFecP2MpId
	}
	return 0
}

func (m *TeS2LFecT) GetS2LFecSubgroupOriginator() string {
	if m != nil {
		return m.S2LFecSubgroupOriginator
	}
	return ""
}

func (m *TeS2LFecT) GetS2LFecCType() string {
	if m != nil {
		return m.S2LFecCType
	}
	return ""
}

func (m *TeS2LFecT) GetS2LFecVrf() string {
	if m != nil {
		return m.S2LFecVrf
	}
	return ""
}

// TE IPv4 unnumbered address type
type TeAddrTypeIpv4Unnum struct {
	// IPv4 router ID
	RouterId string `protobuf:"bytes,1,opt,name=router_id,json=routerId" json:"router_id,omitempty"`
	// Interface index
	InterfaceIndex       uint32   `protobuf:"varint,2,opt,name=interface_index,json=interfaceIndex" json:"interface_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeAddrTypeIpv4Unnum) Reset()         { *m = TeAddrTypeIpv4Unnum{} }
func (m *TeAddrTypeIpv4Unnum) String() string { return proto.CompactTextString(m) }
func (*TeAddrTypeIpv4Unnum) ProtoMessage()    {}
func (*TeAddrTypeIpv4Unnum) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{19}
}
func (m *TeAddrTypeIpv4Unnum) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeAddrTypeIpv4Unnum.Unmarshal(m, b)
}
func (m *TeAddrTypeIpv4Unnum) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeAddrTypeIpv4Unnum.Marshal(b, m, deterministic)
}
func (dst *TeAddrTypeIpv4Unnum) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeAddrTypeIpv4Unnum.Merge(dst, src)
}
func (m *TeAddrTypeIpv4Unnum) XXX_Size() int {
	return xxx_messageInfo_TeAddrTypeIpv4Unnum.Size(m)
}
func (m *TeAddrTypeIpv4Unnum) XXX_DiscardUnknown() {
	xxx_messageInfo_TeAddrTypeIpv4Unnum.DiscardUnknown(m)
}

var xxx_messageInfo_TeAddrTypeIpv4Unnum proto.InternalMessageInfo

func (m *TeAddrTypeIpv4Unnum) GetRouterId() string {
	if m != nil {
		return m.RouterId
	}
	return ""
}

func (m *TeAddrTypeIpv4Unnum) GetInterfaceIndex() uint32 {
	if m != nil {
		return m.InterfaceIndex
	}
	return 0
}

type Addr struct {
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// IPv4 address
	Ipv4Address string `protobuf:"bytes,2,opt,name=ipv4_address,json=ipv4Address" json:"ipv4_address,omitempty"`
	// IPv4 unnumbered address
	Ipv4UnnumberedAddress *TeAddrTypeIpv4Unnum `protobuf:"bytes,3,opt,name=ipv4_unnumbered_address,json=ipv4UnnumberedAddress" json:"ipv4_unnumbered_address,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}             `json:"-"`
	XXX_unrecognized      []byte               `json:"-"`
	XXX_sizecache         int32                `json:"-"`
}

func (m *Addr) Reset()         { *m = Addr{} }
func (m *Addr) String() string { return proto.CompactTextString(m) }
func (*Addr) ProtoMessage()    {}
func (*Addr) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{20}
}
func (m *Addr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Addr.Unmarshal(m, b)
}
func (m *Addr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Addr.Marshal(b, m, deterministic)
}
func (dst *Addr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Addr.Merge(dst, src)
}
func (m *Addr) XXX_Size() int {
	return xxx_messageInfo_Addr.Size(m)
}
func (m *Addr) XXX_DiscardUnknown() {
	xxx_messageInfo_Addr.DiscardUnknown(m)
}

var xxx_messageInfo_Addr proto.InternalMessageInfo

func (m *Addr) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Addr) GetIpv4Address() string {
	if m != nil {
		return m.Ipv4Address
	}
	return ""
}

func (m *Addr) GetIpv4UnnumberedAddress() *TeAddrTypeIpv4Unnum {
	if m != nil {
		return m.Ipv4UnnumberedAddress
	}
	return nil
}

type TeAddrT_ struct {
	// TE Address
	TeAddr               *Addr    `protobuf:"bytes,1,opt,name=te_addr,json=teAddr" json:"te_addr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeAddrT_) Reset()         { *m = TeAddrT_{} }
func (m *TeAddrT_) String() string { return proto.CompactTextString(m) }
func (*TeAddrT_) ProtoMessage()    {}
func (*TeAddrT_) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{21}
}
func (m *TeAddrT_) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeAddrT_.Unmarshal(m, b)
}
func (m *TeAddrT_) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeAddrT_.Marshal(b, m, deterministic)
}
func (dst *TeAddrT_) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeAddrT_.Merge(dst, src)
}
func (m *TeAddrT_) XXX_Size() int {
	return xxx_messageInfo_TeAddrT_.Size(m)
}
func (m *TeAddrT_) XXX_DiscardUnknown() {
	xxx_messageInfo_TeAddrT_.DiscardUnknown(m)
}

var xxx_messageInfo_TeAddrT_ proto.InternalMessageInfo

func (m *TeAddrT_) GetTeAddr() *Addr {
	if m != nil {
		return m.TeAddr
	}
	return nil
}

// C-type-specific LSP FEC data
type TeLspFecCtypeDataT struct {
	FecCType string `protobuf:"bytes,1,opt,name=fec_c_type,json=fecCType" json:"fec_c_type,omitempty"`
	// P2P LSP destination
	P2PLspDestination string `protobuf:"bytes,2,opt,name=p2_p_lsp_destination,json=p2PLspDestination" json:"p2_p_lsp_destination,omitempty"`
	// P2MP ID
	FecDestinationP2MpId uint32   `protobuf:"varint,3,opt,name=fec_destination_p2_mp_id,json=fecDestinationP2MpId" json:"fec_destination_p2_mp_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeLspFecCtypeDataT) Reset()         { *m = TeLspFecCtypeDataT{} }
func (m *TeLspFecCtypeDataT) String() string { return proto.CompactTextString(m) }
func (*TeLspFecCtypeDataT) ProtoMessage()    {}
func (*TeLspFecCtypeDataT) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{22}
}
func (m *TeLspFecCtypeDataT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeLspFecCtypeDataT.Unmarshal(m, b)
}
func (m *TeLspFecCtypeDataT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeLspFecCtypeDataT.Marshal(b, m, deterministic)
}
func (dst *TeLspFecCtypeDataT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeLspFecCtypeDataT.Merge(dst, src)
}
func (m *TeLspFecCtypeDataT) XXX_Size() int {
	return xxx_messageInfo_TeLspFecCtypeDataT.Size(m)
}
func (m *TeLspFecCtypeDataT) XXX_DiscardUnknown() {
	xxx_messageInfo_TeLspFecCtypeDataT.DiscardUnknown(m)
}

var xxx_messageInfo_TeLspFecCtypeDataT proto.InternalMessageInfo

func (m *TeLspFecCtypeDataT) GetFecCType() string {
	if m != nil {
		return m.FecCType
	}
	return ""
}

func (m *TeLspFecCtypeDataT) GetP2PLspDestination() string {
	if m != nil {
		return m.P2PLspDestination
	}
	return ""
}

func (m *TeLspFecCtypeDataT) GetFecDestinationP2MpId() uint32 {
	if m != nil {
		return m.FecDestinationP2MpId
	}
	return 0
}

// A LSP FEC
type TeLspFecT struct {
	// LSP ID
	FecLspId uint32 `protobuf:"varint,1,opt,name=fec_lsp_id,json=fecLspId" json:"fec_lsp_id,omitempty"`
	// Tunnel ID
	FecTunnelId uint32 `protobuf:"varint,2,opt,name=fec_tunnel_id,json=fecTunnelId" json:"fec_tunnel_id,omitempty"`
	// Extended tunnel ID
	FecExtendedTunnelId string `protobuf:"bytes,3,opt,name=fec_extended_tunnel_id,json=fecExtendedTunnelId" json:"fec_extended_tunnel_id,omitempty"`
	// Tunnel source address
	FecSource string `protobuf:"bytes,4,opt,name=fec_source,json=fecSource" json:"fec_source,omitempty"`
	// Destination or P2MP ID
	FecDestinationInfo *TeLspFecCtypeDataT `protobuf:"bytes,5,opt,name=fec_destination_info,json=fecDestinationInfo" json:"fec_destination_info,omitempty"`
	// VRF; currently only for GMPLS tunnels
	FecVrf               string   `protobuf:"bytes,6,opt,name=fec_vrf,json=fecVrf" json:"fec_vrf,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeLspFecT) Reset()         { *m = TeLspFecT{} }
func (m *TeLspFecT) String() string { return proto.CompactTextString(m) }
func (*TeLspFecT) ProtoMessage()    {}
func (*TeLspFecT) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{23}
}
func (m *TeLspFecT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeLspFecT.Unmarshal(m, b)
}
func (m *TeLspFecT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeLspFecT.Marshal(b, m, deterministic)
}
func (dst *TeLspFecT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeLspFecT.Merge(dst, src)
}
func (m *TeLspFecT) XXX_Size() int {
	return xxx_messageInfo_TeLspFecT.Size(m)
}
func (m *TeLspFecT) XXX_DiscardUnknown() {
	xxx_messageInfo_TeLspFecT.DiscardUnknown(m)
}

var xxx_messageInfo_TeLspFecT proto.InternalMessageInfo

func (m *TeLspFecT) GetFecLspId() uint32 {
	if m != nil {
		return m.FecLspId
	}
	return 0
}

func (m *TeLspFecT) GetFecTunnelId() uint32 {
	if m != nil {
		return m.FecTunnelId
	}
	return 0
}

func (m *TeLspFecT) GetFecExtendedTunnelId() string {
	if m != nil {
		return m.FecExtendedTunnelId
	}
	return ""
}

func (m *TeLspFecT) GetFecSource() string {
	if m != nil {
		return m.FecSource
	}
	return ""
}

func (m *TeLspFecT) GetFecDestinationInfo() *TeLspFecCtypeDataT {
	if m != nil {
		return m.FecDestinationInfo
	}
	return nil
}

func (m *TeLspFecT) GetFecVrf() string {
	if m != nil {
		return m.FecVrf
	}
	return ""
}

// Affinity name constraints
type AffinityNameBag struct {
	// Constraint type
	ConstraintType uint32 `protobuf:"varint,1,opt,name=constraint_type,json=constraintType" json:"constraint_type,omitempty"`
	// Deprecated
	ConstraintValue uint32 `protobuf:"varint,2,opt,name=constraint_value,json=constraintValue" json:"constraint_value,omitempty"`
	// Deprecated
	ForwardRefValue uint32 `protobuf:"varint,3,opt,name=forward_ref_value,json=forwardRefValue" json:"forward_ref_value,omitempty"`
	// Constraint value
	ConstraintExtendedValue []uint32 `protobuf:"varint,4,rep,packed,name=constraint_extended_value,json=constraintExtendedValue" json:"constraint_extended_value,omitempty"`
	// Reference bits for undefined affinity names
	ExtendedForwardRefValue []uint32 `protobuf:"varint,5,rep,packed,name=extended_forward_ref_value,json=extendedForwardRefValue" json:"extended_forward_ref_value,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *AffinityNameBag) Reset()         { *m = AffinityNameBag{} }
func (m *AffinityNameBag) String() string { return proto.CompactTextString(m) }
func (*AffinityNameBag) ProtoMessage()    {}
func (*AffinityNameBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{24}
}
func (m *AffinityNameBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AffinityNameBag.Unmarshal(m, b)
}
func (m *AffinityNameBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AffinityNameBag.Marshal(b, m, deterministic)
}
func (dst *AffinityNameBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AffinityNameBag.Merge(dst, src)
}
func (m *AffinityNameBag) XXX_Size() int {
	return xxx_messageInfo_AffinityNameBag.Size(m)
}
func (m *AffinityNameBag) XXX_DiscardUnknown() {
	xxx_messageInfo_AffinityNameBag.DiscardUnknown(m)
}

var xxx_messageInfo_AffinityNameBag proto.InternalMessageInfo

func (m *AffinityNameBag) GetConstraintType() uint32 {
	if m != nil {
		return m.ConstraintType
	}
	return 0
}

func (m *AffinityNameBag) GetConstraintValue() uint32 {
	if m != nil {
		return m.ConstraintValue
	}
	return 0
}

func (m *AffinityNameBag) GetForwardRefValue() uint32 {
	if m != nil {
		return m.ForwardRefValue
	}
	return 0
}

func (m *AffinityNameBag) GetConstraintExtendedValue() []uint32 {
	if m != nil {
		return m.ConstraintExtendedValue
	}
	return nil
}

func (m *AffinityNameBag) GetExtendedForwardRefValue() []uint32 {
	if m != nil {
		return m.ExtendedForwardRefValue
	}
	return nil
}

// MPLS TE tunnel Affinity information
type MplsTeTunnelsAffinityInfo struct {
	// The affinity bits (colors)
	AffinityBits uint32 `protobuf:"varint,1,opt,name=affinity_bits,json=affinityBits" json:"affinity_bits,omitempty"`
	// The affinity mask (colors)
	AffinityMask uint32 `protobuf:"varint,2,opt,name=affinity_mask,json=affinityMask" json:"affinity_mask,omitempty"`
	// Array of name based constratints currently applied to the tunnel
	NamedAffinities      []*AffinityNameBag `protobuf:"bytes,3,rep,name=named_affinities,json=namedAffinities" json:"named_affinities,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *MplsTeTunnelsAffinityInfo) Reset()         { *m = MplsTeTunnelsAffinityInfo{} }
func (m *MplsTeTunnelsAffinityInfo) String() string { return proto.CompactTextString(m) }
func (*MplsTeTunnelsAffinityInfo) ProtoMessage()    {}
func (*MplsTeTunnelsAffinityInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{25}
}
func (m *MplsTeTunnelsAffinityInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeTunnelsAffinityInfo.Unmarshal(m, b)
}
func (m *MplsTeTunnelsAffinityInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeTunnelsAffinityInfo.Marshal(b, m, deterministic)
}
func (dst *MplsTeTunnelsAffinityInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeTunnelsAffinityInfo.Merge(dst, src)
}
func (m *MplsTeTunnelsAffinityInfo) XXX_Size() int {
	return xxx_messageInfo_MplsTeTunnelsAffinityInfo.Size(m)
}
func (m *MplsTeTunnelsAffinityInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeTunnelsAffinityInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeTunnelsAffinityInfo proto.InternalMessageInfo

func (m *MplsTeTunnelsAffinityInfo) GetAffinityBits() uint32 {
	if m != nil {
		return m.AffinityBits
	}
	return 0
}

func (m *MplsTeTunnelsAffinityInfo) GetAffinityMask() uint32 {
	if m != nil {
		return m.AffinityMask
	}
	return 0
}

func (m *MplsTeTunnelsAffinityInfo) GetNamedAffinities() []*AffinityNameBag {
	if m != nil {
		return m.NamedAffinities
	}
	return nil
}

// Information about the Shared Risk Link Group
type MplsSrlgInfo struct {
	// SRLG number
	SharedRiskGroup uint32 `protobuf:"varint,1,opt,name=shared_risk_group,json=sharedRiskGroup" json:"shared_risk_group,omitempty"`
	// SRLG name
	SrlgName             string   `protobuf:"bytes,2,opt,name=srlg_name,json=srlgName" json:"srlg_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsSrlgInfo) Reset()         { *m = MplsSrlgInfo{} }
func (m *MplsSrlgInfo) String() string { return proto.CompactTextString(m) }
func (*MplsSrlgInfo) ProtoMessage()    {}
func (*MplsSrlgInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{26}
}
func (m *MplsSrlgInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsSrlgInfo.Unmarshal(m, b)
}
func (m *MplsSrlgInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsSrlgInfo.Marshal(b, m, deterministic)
}
func (dst *MplsSrlgInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsSrlgInfo.Merge(dst, src)
}
func (m *MplsSrlgInfo) XXX_Size() int {
	return xxx_messageInfo_MplsSrlgInfo.Size(m)
}
func (m *MplsSrlgInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsSrlgInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MplsSrlgInfo proto.InternalMessageInfo

func (m *MplsSrlgInfo) GetSharedRiskGroup() uint32 {
	if m != nil {
		return m.SharedRiskGroup
	}
	return 0
}

func (m *MplsSrlgInfo) GetSrlgName() string {
	if m != nil {
		return m.SrlgName
	}
	return ""
}

// XRO IPv4 sub-object
type TeXroSubobjIpv4 struct {
	// IPv4 address
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	// Prefix length
	PrefixLen uint32 `protobuf:"varint,2,opt,name=prefix_len,json=prefixLen" json:"prefix_len,omitempty"`
	// Attribute
	Attribute string `protobuf:"bytes,3,opt,name=attribute" json:"attribute,omitempty"`
	// Exclusion Type
	ExclusionType        string   `protobuf:"bytes,4,opt,name=exclusion_type,json=exclusionType" json:"exclusion_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeXroSubobjIpv4) Reset()         { *m = TeXroSubobjIpv4{} }
func (m *TeXroSubobjIpv4) String() string { return proto.CompactTextString(m) }
func (*TeXroSubobjIpv4) ProtoMessage()    {}
func (*TeXroSubobjIpv4) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{27}
}
func (m *TeXroSubobjIpv4) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeXroSubobjIpv4.Unmarshal(m, b)
}
func (m *TeXroSubobjIpv4) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeXroSubobjIpv4.Marshal(b, m, deterministic)
}
func (dst *TeXroSubobjIpv4) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeXroSubobjIpv4.Merge(dst, src)
}
func (m *TeXroSubobjIpv4) XXX_Size() int {
	return xxx_messageInfo_TeXroSubobjIpv4.Size(m)
}
func (m *TeXroSubobjIpv4) XXX_DiscardUnknown() {
	xxx_messageInfo_TeXroSubobjIpv4.DiscardUnknown(m)
}

var xxx_messageInfo_TeXroSubobjIpv4 proto.InternalMessageInfo

func (m *TeXroSubobjIpv4) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *TeXroSubobjIpv4) GetPrefixLen() uint32 {
	if m != nil {
		return m.PrefixLen
	}
	return 0
}

func (m *TeXroSubobjIpv4) GetAttribute() string {
	if m != nil {
		return m.Attribute
	}
	return ""
}

func (m *TeXroSubobjIpv4) GetExclusionType() string {
	if m != nil {
		return m.ExclusionType
	}
	return ""
}

// XRO IPv6 sub-object
type TeXroSubobjIpv6 struct {
	// IPv6 address
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	// Prefix length
	PrefixLen uint32 `protobuf:"varint,2,opt,name=prefix_len,json=prefixLen" json:"prefix_len,omitempty"`
	// Attribute
	Attribute string `protobuf:"bytes,3,opt,name=attribute" json:"attribute,omitempty"`
	// Exclusion Type
	ExclusionType        string   `protobuf:"bytes,4,opt,name=exclusion_type,json=exclusionType" json:"exclusion_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeXroSubobjIpv6) Reset()         { *m = TeXroSubobjIpv6{} }
func (m *TeXroSubobjIpv6) String() string { return proto.CompactTextString(m) }
func (*TeXroSubobjIpv6) ProtoMessage()    {}
func (*TeXroSubobjIpv6) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{28}
}
func (m *TeXroSubobjIpv6) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeXroSubobjIpv6.Unmarshal(m, b)
}
func (m *TeXroSubobjIpv6) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeXroSubobjIpv6.Marshal(b, m, deterministic)
}
func (dst *TeXroSubobjIpv6) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeXroSubobjIpv6.Merge(dst, src)
}
func (m *TeXroSubobjIpv6) XXX_Size() int {
	return xxx_messageInfo_TeXroSubobjIpv6.Size(m)
}
func (m *TeXroSubobjIpv6) XXX_DiscardUnknown() {
	xxx_messageInfo_TeXroSubobjIpv6.DiscardUnknown(m)
}

var xxx_messageInfo_TeXroSubobjIpv6 proto.InternalMessageInfo

func (m *TeXroSubobjIpv6) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *TeXroSubobjIpv6) GetPrefixLen() uint32 {
	if m != nil {
		return m.PrefixLen
	}
	return 0
}

func (m *TeXroSubobjIpv6) GetAttribute() string {
	if m != nil {
		return m.Attribute
	}
	return ""
}

func (m *TeXroSubobjIpv6) GetExclusionType() string {
	if m != nil {
		return m.ExclusionType
	}
	return ""
}

// XRO unnumbered sub-object
type TeXroSubobjUnnum struct {
	// TE router-id
	TeRouterId string `protobuf:"bytes,1,opt,name=te_router_id,json=teRouterId" json:"te_router_id,omitempty"`
	// Interface ID
	InterfaceId uint32 `protobuf:"varint,2,opt,name=interface_id,json=interfaceId" json:"interface_id,omitempty"`
	// Attribute
	Attribute string `protobuf:"bytes,3,opt,name=attribute" json:"attribute,omitempty"`
	// Exclusion Type
	ExclusionType        string   `protobuf:"bytes,4,opt,name=exclusion_type,json=exclusionType" json:"exclusion_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeXroSubobjUnnum) Reset()         { *m = TeXroSubobjUnnum{} }
func (m *TeXroSubobjUnnum) String() string { return proto.CompactTextString(m) }
func (*TeXroSubobjUnnum) ProtoMessage()    {}
func (*TeXroSubobjUnnum) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{29}
}
func (m *TeXroSubobjUnnum) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeXroSubobjUnnum.Unmarshal(m, b)
}
func (m *TeXroSubobjUnnum) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeXroSubobjUnnum.Marshal(b, m, deterministic)
}
func (dst *TeXroSubobjUnnum) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeXroSubobjUnnum.Merge(dst, src)
}
func (m *TeXroSubobjUnnum) XXX_Size() int {
	return xxx_messageInfo_TeXroSubobjUnnum.Size(m)
}
func (m *TeXroSubobjUnnum) XXX_DiscardUnknown() {
	xxx_messageInfo_TeXroSubobjUnnum.DiscardUnknown(m)
}

var xxx_messageInfo_TeXroSubobjUnnum proto.InternalMessageInfo

func (m *TeXroSubobjUnnum) GetTeRouterId() string {
	if m != nil {
		return m.TeRouterId
	}
	return ""
}

func (m *TeXroSubobjUnnum) GetInterfaceId() uint32 {
	if m != nil {
		return m.InterfaceId
	}
	return 0
}

func (m *TeXroSubobjUnnum) GetAttribute() string {
	if m != nil {
		return m.Attribute
	}
	return ""
}

func (m *TeXroSubobjUnnum) GetExclusionType() string {
	if m != nil {
		return m.ExclusionType
	}
	return ""
}

// XRO AS sub-object
type TeXroSubobjAs struct {
	// Autonomous System number
	AsNumber             uint32   `protobuf:"varint,1,opt,name=as_number,json=asNumber" json:"as_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeXroSubobjAs) Reset()         { *m = TeXroSubobjAs{} }
func (m *TeXroSubobjAs) String() string { return proto.CompactTextString(m) }
func (*TeXroSubobjAs) ProtoMessage()    {}
func (*TeXroSubobjAs) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{30}
}
func (m *TeXroSubobjAs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeXroSubobjAs.Unmarshal(m, b)
}
func (m *TeXroSubobjAs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeXroSubobjAs.Marshal(b, m, deterministic)
}
func (dst *TeXroSubobjAs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeXroSubobjAs.Merge(dst, src)
}
func (m *TeXroSubobjAs) XXX_Size() int {
	return xxx_messageInfo_TeXroSubobjAs.Size(m)
}
func (m *TeXroSubobjAs) XXX_DiscardUnknown() {
	xxx_messageInfo_TeXroSubobjAs.DiscardUnknown(m)
}

var xxx_messageInfo_TeXroSubobjAs proto.InternalMessageInfo

func (m *TeXroSubobjAs) GetAsNumber() uint32 {
	if m != nil {
		return m.AsNumber
	}
	return 0
}

// XRO SRLG sub-object
type TeXroSubobjSrlg struct {
	// SRLG ID
	SrlgId uint32 `protobuf:"varint,1,opt,name=srlg_id,json=srlgId" json:"srlg_id,omitempty"`
	// Exclusion Type
	ExclusionType        string   `protobuf:"bytes,2,opt,name=exclusion_type,json=exclusionType" json:"exclusion_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeXroSubobjSrlg) Reset()         { *m = TeXroSubobjSrlg{} }
func (m *TeXroSubobjSrlg) String() string { return proto.CompactTextString(m) }
func (*TeXroSubobjSrlg) ProtoMessage()    {}
func (*TeXroSubobjSrlg) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{31}
}
func (m *TeXroSubobjSrlg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeXroSubobjSrlg.Unmarshal(m, b)
}
func (m *TeXroSubobjSrlg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeXroSubobjSrlg.Marshal(b, m, deterministic)
}
func (dst *TeXroSubobjSrlg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeXroSubobjSrlg.Merge(dst, src)
}
func (m *TeXroSubobjSrlg) XXX_Size() int {
	return xxx_messageInfo_TeXroSubobjSrlg.Size(m)
}
func (m *TeXroSubobjSrlg) XXX_DiscardUnknown() {
	xxx_messageInfo_TeXroSubobjSrlg.DiscardUnknown(m)
}

var xxx_messageInfo_TeXroSubobjSrlg proto.InternalMessageInfo

func (m *TeXroSubobjSrlg) GetSrlgId() uint32 {
	if m != nil {
		return m.SrlgId
	}
	return 0
}

func (m *TeXroSubobjSrlg) GetExclusionType() string {
	if m != nil {
		return m.ExclusionType
	}
	return ""
}

// XRO point-to-point LSP sub-object
type TeXroSubobjP2PLsp struct {
	// LSP FEC
	Fec *TeLspFecT `protobuf:"bytes,1,opt,name=fec" json:"fec,omitempty"`
	// Flag to indicate whether or not the lsp-id in the FEC is to be ignored
	IgnoreLspId bool `protobuf:"varint,2,opt,name=ignore_lsp_id,json=ignoreLspId" json:"ignore_lsp_id,omitempty"`
	// Processing-node exception flag
	ProcessingNodeException bool `protobuf:"varint,3,opt,name=processing_node_exception,json=processingNodeException" json:"processing_node_exception,omitempty"`
	// Penultimate-node exception flag
	PenultimateNodeException bool `protobuf:"varint,4,opt,name=penultimate_node_exception,json=penultimateNodeException" json:"penultimate_node_exception,omitempty"`
	// Destination-node exception flag
	DestinationNodeException bool `protobuf:"varint,5,opt,name=destination_node_exception,json=destinationNodeException" json:"destination_node_exception,omitempty"`
	// Exclusion Type
	ExclusionType        string   `protobuf:"bytes,6,opt,name=exclusion_type,json=exclusionType" json:"exclusion_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeXroSubobjP2PLsp) Reset()         { *m = TeXroSubobjP2PLsp{} }
func (m *TeXroSubobjP2PLsp) String() string { return proto.CompactTextString(m) }
func (*TeXroSubobjP2PLsp) ProtoMessage()    {}
func (*TeXroSubobjP2PLsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{32}
}
func (m *TeXroSubobjP2PLsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeXroSubobjP2PLsp.Unmarshal(m, b)
}
func (m *TeXroSubobjP2PLsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeXroSubobjP2PLsp.Marshal(b, m, deterministic)
}
func (dst *TeXroSubobjP2PLsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeXroSubobjP2PLsp.Merge(dst, src)
}
func (m *TeXroSubobjP2PLsp) XXX_Size() int {
	return xxx_messageInfo_TeXroSubobjP2PLsp.Size(m)
}
func (m *TeXroSubobjP2PLsp) XXX_DiscardUnknown() {
	xxx_messageInfo_TeXroSubobjP2PLsp.DiscardUnknown(m)
}

var xxx_messageInfo_TeXroSubobjP2PLsp proto.InternalMessageInfo

func (m *TeXroSubobjP2PLsp) GetFec() *TeLspFecT {
	if m != nil {
		return m.Fec
	}
	return nil
}

func (m *TeXroSubobjP2PLsp) GetIgnoreLspId() bool {
	if m != nil {
		return m.IgnoreLspId
	}
	return false
}

func (m *TeXroSubobjP2PLsp) GetProcessingNodeException() bool {
	if m != nil {
		return m.ProcessingNodeException
	}
	return false
}

func (m *TeXroSubobjP2PLsp) GetPenultimateNodeException() bool {
	if m != nil {
		return m.PenultimateNodeException
	}
	return false
}

func (m *TeXroSubobjP2PLsp) GetDestinationNodeException() bool {
	if m != nil {
		return m.DestinationNodeException
	}
	return false
}

func (m *TeXroSubobjP2PLsp) GetExclusionType() string {
	if m != nil {
		return m.ExclusionType
	}
	return ""
}

// XRO sub-object union
type TeXroSubobj struct {
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// IPv4 sub-object
	Ipv4Subobject *TeXroSubobjIpv4 `protobuf:"bytes,2,opt,name=ipv4_subobject,json=ipv4Subobject" json:"ipv4_subobject,omitempty"`
	// IPv6 sub-object
	Ipv6Subobject *TeXroSubobjIpv6 `protobuf:"bytes,3,opt,name=ipv6_subobject,json=ipv6Subobject" json:"ipv6_subobject,omitempty"`
	// Unnumbered sub-object
	UnnumberedSubobject *TeXroSubobjUnnum `protobuf:"bytes,4,opt,name=unnumbered_subobject,json=unnumberedSubobject" json:"unnumbered_subobject,omitempty"`
	// AS sub-object
	AsSubobject *TeXroSubobjAs `protobuf:"bytes,5,opt,name=as_subobject,json=asSubobject" json:"as_subobject,omitempty"`
	// SRLG sub-object
	SrlgSubobject *TeXroSubobjSrlg `protobuf:"bytes,6,opt,name=srlg_subobject,json=srlgSubobject" json:"srlg_subobject,omitempty"`
	// P2P LSP sub-object
	LspSubobject         *TeXroSubobjP2PLsp `protobuf:"bytes,7,opt,name=lsp_subobject,json=lspSubobject" json:"lsp_subobject,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *TeXroSubobj) Reset()         { *m = TeXroSubobj{} }
func (m *TeXroSubobj) String() string { return proto.CompactTextString(m) }
func (*TeXroSubobj) ProtoMessage()    {}
func (*TeXroSubobj) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{33}
}
func (m *TeXroSubobj) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeXroSubobj.Unmarshal(m, b)
}
func (m *TeXroSubobj) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeXroSubobj.Marshal(b, m, deterministic)
}
func (dst *TeXroSubobj) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeXroSubobj.Merge(dst, src)
}
func (m *TeXroSubobj) XXX_Size() int {
	return xxx_messageInfo_TeXroSubobj.Size(m)
}
func (m *TeXroSubobj) XXX_DiscardUnknown() {
	xxx_messageInfo_TeXroSubobj.DiscardUnknown(m)
}

var xxx_messageInfo_TeXroSubobj proto.InternalMessageInfo

func (m *TeXroSubobj) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *TeXroSubobj) GetIpv4Subobject() *TeXroSubobjIpv4 {
	if m != nil {
		return m.Ipv4Subobject
	}
	return nil
}

func (m *TeXroSubobj) GetIpv6Subobject() *TeXroSubobjIpv6 {
	if m != nil {
		return m.Ipv6Subobject
	}
	return nil
}

func (m *TeXroSubobj) GetUnnumberedSubobject() *TeXroSubobjUnnum {
	if m != nil {
		return m.UnnumberedSubobject
	}
	return nil
}

func (m *TeXroSubobj) GetAsSubobject() *TeXroSubobjAs {
	if m != nil {
		return m.AsSubobject
	}
	return nil
}

func (m *TeXroSubobj) GetSrlgSubobject() *TeXroSubobjSrlg {
	if m != nil {
		return m.SrlgSubobject
	}
	return nil
}

func (m *TeXroSubobj) GetLspSubobject() *TeXroSubobjP2PLsp {
	if m != nil {
		return m.LspSubobject
	}
	return nil
}

// XRO object
type TeXro struct {
	// List of XRO sub-objects
	XroSubobjects []*TeXroSubobj `protobuf:"bytes,1,rep,name=xro_subobjects,json=xroSubobjects" json:"xro_subobjects,omitempty"`
	// Mutual Diversity Flag
	MutualDiversityFlag  bool     `protobuf:"varint,2,opt,name=mutual_diversity_flag,json=mutualDiversityFlag" json:"mutual_diversity_flag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeXro) Reset()         { *m = TeXro{} }
func (m *TeXro) String() string { return proto.CompactTextString(m) }
func (*TeXro) ProtoMessage()    {}
func (*TeXro) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{34}
}
func (m *TeXro) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeXro.Unmarshal(m, b)
}
func (m *TeXro) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeXro.Marshal(b, m, deterministic)
}
func (dst *TeXro) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeXro.Merge(dst, src)
}
func (m *TeXro) XXX_Size() int {
	return xxx_messageInfo_TeXro.Size(m)
}
func (m *TeXro) XXX_DiscardUnknown() {
	xxx_messageInfo_TeXro.DiscardUnknown(m)
}

var xxx_messageInfo_TeXro proto.InternalMessageInfo

func (m *TeXro) GetXroSubobjects() []*TeXroSubobj {
	if m != nil {
		return m.XroSubobjects
	}
	return nil
}

func (m *TeXro) GetMutualDiversityFlag() bool {
	if m != nil {
		return m.MutualDiversityFlag
	}
	return false
}

// Revert Schedule protection attribute set
type TeRevertSchT struct {
	// Schedule name identifier
	Schedulename []byte `protobuf:"bytes,1,opt,name=schedulename,proto3" json:"schedulename,omitempty"`
	// Schedule time for reversion
	ScheduleDate uint32 `protobuf:"varint,2,opt,name=schedule_date,json=scheduleDate" json:"schedule_date,omitempty"`
	// Schedule frequency for reversion
	ScheduleFrequency string `protobuf:"bytes,3,opt,name=schedule_frequency,json=scheduleFrequency" json:"schedule_frequency,omitempty"`
	// Duration for scheduled reversion
	Duration uint32 `protobuf:"varint,4,opt,name=duration" json:"duration,omitempty"`
	// Max tries for scheduled reversion
	MaxTries             uint32   `protobuf:"varint,5,opt,name=max_tries,json=maxTries" json:"max_tries,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeRevertSchT) Reset()         { *m = TeRevertSchT{} }
func (m *TeRevertSchT) String() string { return proto.CompactTextString(m) }
func (*TeRevertSchT) ProtoMessage()    {}
func (*TeRevertSchT) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{35}
}
func (m *TeRevertSchT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeRevertSchT.Unmarshal(m, b)
}
func (m *TeRevertSchT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeRevertSchT.Marshal(b, m, deterministic)
}
func (dst *TeRevertSchT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeRevertSchT.Merge(dst, src)
}
func (m *TeRevertSchT) XXX_Size() int {
	return xxx_messageInfo_TeRevertSchT.Size(m)
}
func (m *TeRevertSchT) XXX_DiscardUnknown() {
	xxx_messageInfo_TeRevertSchT.DiscardUnknown(m)
}

var xxx_messageInfo_TeRevertSchT proto.InternalMessageInfo

func (m *TeRevertSchT) GetSchedulename() []byte {
	if m != nil {
		return m.Schedulename
	}
	return nil
}

func (m *TeRevertSchT) GetScheduleDate() uint32 {
	if m != nil {
		return m.ScheduleDate
	}
	return 0
}

func (m *TeRevertSchT) GetScheduleFrequency() string {
	if m != nil {
		return m.ScheduleFrequency
	}
	return ""
}

func (m *TeRevertSchT) GetDuration() uint32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *TeRevertSchT) GetMaxTries() uint32 {
	if m != nil {
		return m.MaxTries
	}
	return 0
}

// HASI ID Event
type HasiIdEvent struct {
	// LocalID
	LocalId uint64 `protobuf:"varint,1,opt,name=local_id,json=localId" json:"local_id,omitempty"`
	// RemoteID
	RemoreId uint64 `protobuf:"varint,2,opt,name=remore_id,json=remoreId" json:"remore_id,omitempty"`
	// Time
	Time uint32 `protobuf:"varint,3,opt,name=time" json:"time,omitempty"`
	// Count
	Count                uint64   `protobuf:"varint,4,opt,name=count" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HasiIdEvent) Reset()         { *m = HasiIdEvent{} }
func (m *HasiIdEvent) String() string { return proto.CompactTextString(m) }
func (*HasiIdEvent) ProtoMessage()    {}
func (*HasiIdEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{36}
}
func (m *HasiIdEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HasiIdEvent.Unmarshal(m, b)
}
func (m *HasiIdEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HasiIdEvent.Marshal(b, m, deterministic)
}
func (dst *HasiIdEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HasiIdEvent.Merge(dst, src)
}
func (m *HasiIdEvent) XXX_Size() int {
	return xxx_messageInfo_HasiIdEvent.Size(m)
}
func (m *HasiIdEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_HasiIdEvent.DiscardUnknown(m)
}

var xxx_messageInfo_HasiIdEvent proto.InternalMessageInfo

func (m *HasiIdEvent) GetLocalId() uint64 {
	if m != nil {
		return m.LocalId
	}
	return 0
}

func (m *HasiIdEvent) GetRemoreId() uint64 {
	if m != nil {
		return m.RemoreId
	}
	return 0
}

func (m *HasiIdEvent) GetTime() uint32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *HasiIdEvent) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

// HASI Slave Object ID events
type HasiSObjIdEvents struct {
	// Create
	Create *HasiIdEvent `protobuf:"bytes,1,opt,name=create" json:"create,omitempty"`
	// Updates
	Updates *HasiIdEvent `protobuf:"bytes,2,opt,name=updates" json:"updates,omitempty"`
	// ApplicationSyncs
	ApplicationSyncs *HasiIdEvent `protobuf:"bytes,3,opt,name=application_syncs,json=applicationSyncs" json:"application_syncs,omitempty"`
	// ApplicationNaks
	ApplicationNaks *HasiIdEvent `protobuf:"bytes,4,opt,name=application_naks,json=applicationNaks" json:"application_naks,omitempty"`
	// SummaryReplaySyncs
	SummaryReplaySyncs *HasiIdEvent `protobuf:"bytes,5,opt,name=summary_replay_syncs,json=summaryReplaySyncs" json:"summary_replay_syncs,omitempty"`
	// SummaryReplayNaks
	SummaryReplayNaks *HasiIdEvent `protobuf:"bytes,6,opt,name=summary_replay_naks,json=summaryReplayNaks" json:"summary_replay_naks,omitempty"`
	// CacheNakRetries
	CacheNakRetries      *HasiIdEvent `protobuf:"bytes,7,opt,name=cache_nak_retries,json=cacheNakRetries" json:"cache_nak_retries,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *HasiSObjIdEvents) Reset()         { *m = HasiSObjIdEvents{} }
func (m *HasiSObjIdEvents) String() string { return proto.CompactTextString(m) }
func (*HasiSObjIdEvents) ProtoMessage()    {}
func (*HasiSObjIdEvents) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{37}
}
func (m *HasiSObjIdEvents) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HasiSObjIdEvents.Unmarshal(m, b)
}
func (m *HasiSObjIdEvents) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HasiSObjIdEvents.Marshal(b, m, deterministic)
}
func (dst *HasiSObjIdEvents) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HasiSObjIdEvents.Merge(dst, src)
}
func (m *HasiSObjIdEvents) XXX_Size() int {
	return xxx_messageInfo_HasiSObjIdEvents.Size(m)
}
func (m *HasiSObjIdEvents) XXX_DiscardUnknown() {
	xxx_messageInfo_HasiSObjIdEvents.DiscardUnknown(m)
}

var xxx_messageInfo_HasiSObjIdEvents proto.InternalMessageInfo

func (m *HasiSObjIdEvents) GetCreate() *HasiIdEvent {
	if m != nil {
		return m.Create
	}
	return nil
}

func (m *HasiSObjIdEvents) GetUpdates() *HasiIdEvent {
	if m != nil {
		return m.Updates
	}
	return nil
}

func (m *HasiSObjIdEvents) GetApplicationSyncs() *HasiIdEvent {
	if m != nil {
		return m.ApplicationSyncs
	}
	return nil
}

func (m *HasiSObjIdEvents) GetApplicationNaks() *HasiIdEvent {
	if m != nil {
		return m.ApplicationNaks
	}
	return nil
}

func (m *HasiSObjIdEvents) GetSummaryReplaySyncs() *HasiIdEvent {
	if m != nil {
		return m.SummaryReplaySyncs
	}
	return nil
}

func (m *HasiSObjIdEvents) GetSummaryReplayNaks() *HasiIdEvent {
	if m != nil {
		return m.SummaryReplayNaks
	}
	return nil
}

func (m *HasiSObjIdEvents) GetCacheNakRetries() *HasiIdEvent {
	if m != nil {
		return m.CacheNakRetries
	}
	return nil
}

// HASI Slave Object Context
type HasiSObjectCtx struct {
	// ObjectSyncID
	ObjectSyncId uint64 `protobuf:"varint,1,opt,name=object_sync_id,json=objectSyncId" json:"object_sync_id,omitempty"`
	// ObjectType
	ObjectType uint32 `protobuf:"varint,2,opt,name=object_type,json=objectType" json:"object_type,omitempty"`
	// ObjectIdEvents
	ObjectIdEvents       *HasiSObjIdEvents `protobuf:"bytes,3,opt,name=object_id_events,json=objectIdEvents" json:"object_id_events,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *HasiSObjectCtx) Reset()         { *m = HasiSObjectCtx{} }
func (m *HasiSObjectCtx) String() string { return proto.CompactTextString(m) }
func (*HasiSObjectCtx) ProtoMessage()    {}
func (*HasiSObjectCtx) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{38}
}
func (m *HasiSObjectCtx) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HasiSObjectCtx.Unmarshal(m, b)
}
func (m *HasiSObjectCtx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HasiSObjectCtx.Marshal(b, m, deterministic)
}
func (dst *HasiSObjectCtx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HasiSObjectCtx.Merge(dst, src)
}
func (m *HasiSObjectCtx) XXX_Size() int {
	return xxx_messageInfo_HasiSObjectCtx.Size(m)
}
func (m *HasiSObjectCtx) XXX_DiscardUnknown() {
	xxx_messageInfo_HasiSObjectCtx.DiscardUnknown(m)
}

var xxx_messageInfo_HasiSObjectCtx proto.InternalMessageInfo

func (m *HasiSObjectCtx) GetObjectSyncId() uint64 {
	if m != nil {
		return m.ObjectSyncId
	}
	return 0
}

func (m *HasiSObjectCtx) GetObjectType() uint32 {
	if m != nil {
		return m.ObjectType
	}
	return 0
}

func (m *HasiSObjectCtx) GetObjectIdEvents() *HasiSObjIdEvents {
	if m != nil {
		return m.ObjectIdEvents
	}
	return nil
}

// HASI Master Slave ID Events
type HasiMIdEvents struct {
	// ApplicationSyncs
	ApplicationSyncs *HasiIdEvent `protobuf:"bytes,1,opt,name=application_syncs,json=applicationSyncs" json:"application_syncs,omitempty"`
	// ImplicitDeletes
	ImplicitDeletes *HasiIdEvent `protobuf:"bytes,2,opt,name=implicit_deletes,json=implicitDeletes" json:"implicit_deletes,omitempty"`
	// ApplicationNaks
	ApplicationNaks *HasiIdEvent `protobuf:"bytes,3,opt,name=application_naks,json=applicationNaks" json:"application_naks,omitempty"`
	// SummaryReplaySyncs
	SummaryReplaySyncs *HasiIdEvent `protobuf:"bytes,4,opt,name=summary_replay_syncs,json=summaryReplaySyncs" json:"summary_replay_syncs,omitempty"`
	// SummaryReplayNaks
	SummaryReplayNaks    *HasiIdEvent `protobuf:"bytes,5,opt,name=summary_replay_naks,json=summaryReplayNaks" json:"summary_replay_naks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *HasiMIdEvents) Reset()         { *m = HasiMIdEvents{} }
func (m *HasiMIdEvents) String() string { return proto.CompactTextString(m) }
func (*HasiMIdEvents) ProtoMessage()    {}
func (*HasiMIdEvents) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{39}
}
func (m *HasiMIdEvents) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HasiMIdEvents.Unmarshal(m, b)
}
func (m *HasiMIdEvents) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HasiMIdEvents.Marshal(b, m, deterministic)
}
func (dst *HasiMIdEvents) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HasiMIdEvents.Merge(dst, src)
}
func (m *HasiMIdEvents) XXX_Size() int {
	return xxx_messageInfo_HasiMIdEvents.Size(m)
}
func (m *HasiMIdEvents) XXX_DiscardUnknown() {
	xxx_messageInfo_HasiMIdEvents.DiscardUnknown(m)
}

var xxx_messageInfo_HasiMIdEvents proto.InternalMessageInfo

func (m *HasiMIdEvents) GetApplicationSyncs() *HasiIdEvent {
	if m != nil {
		return m.ApplicationSyncs
	}
	return nil
}

func (m *HasiMIdEvents) GetImplicitDeletes() *HasiIdEvent {
	if m != nil {
		return m.ImplicitDeletes
	}
	return nil
}

func (m *HasiMIdEvents) GetApplicationNaks() *HasiIdEvent {
	if m != nil {
		return m.ApplicationNaks
	}
	return nil
}

func (m *HasiMIdEvents) GetSummaryReplaySyncs() *HasiIdEvent {
	if m != nil {
		return m.SummaryReplaySyncs
	}
	return nil
}

func (m *HasiMIdEvents) GetSummaryReplayNaks() *HasiIdEvent {
	if m != nil {
		return m.SummaryReplayNaks
	}
	return nil
}

// HASI Master Object Client Info
type HasiMObjectSlaveInfo struct {
	// SlaveId
	SlaveId uint32 `protobuf:"varint,1,opt,name=slave_id,json=slaveId" json:"slave_id,omitempty"`
	// IdEvents
	IdEvents             *HasiMIdEvents `protobuf:"bytes,2,opt,name=id_events,json=idEvents" json:"id_events,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *HasiMObjectSlaveInfo) Reset()         { *m = HasiMObjectSlaveInfo{} }
func (m *HasiMObjectSlaveInfo) String() string { return proto.CompactTextString(m) }
func (*HasiMObjectSlaveInfo) ProtoMessage()    {}
func (*HasiMObjectSlaveInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{40}
}
func (m *HasiMObjectSlaveInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HasiMObjectSlaveInfo.Unmarshal(m, b)
}
func (m *HasiMObjectSlaveInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HasiMObjectSlaveInfo.Marshal(b, m, deterministic)
}
func (dst *HasiMObjectSlaveInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HasiMObjectSlaveInfo.Merge(dst, src)
}
func (m *HasiMObjectSlaveInfo) XXX_Size() int {
	return xxx_messageInfo_HasiMObjectSlaveInfo.Size(m)
}
func (m *HasiMObjectSlaveInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_HasiMObjectSlaveInfo.DiscardUnknown(m)
}

var xxx_messageInfo_HasiMObjectSlaveInfo proto.InternalMessageInfo

func (m *HasiMObjectSlaveInfo) GetSlaveId() uint32 {
	if m != nil {
		return m.SlaveId
	}
	return 0
}

func (m *HasiMObjectSlaveInfo) GetIdEvents() *HasiMIdEvents {
	if m != nil {
		return m.IdEvents
	}
	return nil
}

// HASI Master Object Context
type HasiMObjectCtx struct {
	// ObjectSyncID
	ObjectSyncId uint64 `protobuf:"varint,1,opt,name=object_sync_id,json=objectSyncId" json:"object_sync_id,omitempty"`
	// ObjectType
	ObjectType uint32 `protobuf:"varint,2,opt,name=object_type,json=objectType" json:"object_type,omitempty"`
	// Queue
	Queue uint32 `protobuf:"varint,3,opt,name=queue" json:"queue,omitempty"`
	// CreateID
	CreateId uint64 `protobuf:"varint,4,opt,name=create_id,json=createId" json:"create_id,omitempty"`
	// CreateTime
	CreateTime uint32 `protobuf:"varint,5,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	// UpdateTime
	UpdateTime uint32 `protobuf:"varint,6,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	// DeleteTime
	DeleteTime uint32 `protobuf:"varint,7,opt,name=delete_time,json=deleteTime" json:"delete_time,omitempty"`
	// DeleteContextLength
	DeleteCtxLenght uint32 `protobuf:"varint,8,opt,name=delete_ctx_lenght,json=deleteCtxLenght" json:"delete_ctx_lenght,omitempty"`
	// SlaveInformation
	SlaveInformation []*HasiMObjectSlaveInfo `protobuf:"bytes,9,rep,name=slave_information,json=slaveInformation" json:"slave_information,omitempty"`
	// HasHistory
	HasHistory bool `protobuf:"varint,10,opt,name=has_history,json=hasHistory" json:"has_history,omitempty"`
	// PreActiveHistory
	PreActiveHistory     *HasiSObjIdEvents `protobuf:"bytes,11,opt,name=pre_active_history,json=preActiveHistory" json:"pre_active_history,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *HasiMObjectCtx) Reset()         { *m = HasiMObjectCtx{} }
func (m *HasiMObjectCtx) String() string { return proto.CompactTextString(m) }
func (*HasiMObjectCtx) ProtoMessage()    {}
func (*HasiMObjectCtx) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{41}
}
func (m *HasiMObjectCtx) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HasiMObjectCtx.Unmarshal(m, b)
}
func (m *HasiMObjectCtx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HasiMObjectCtx.Marshal(b, m, deterministic)
}
func (dst *HasiMObjectCtx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HasiMObjectCtx.Merge(dst, src)
}
func (m *HasiMObjectCtx) XXX_Size() int {
	return xxx_messageInfo_HasiMObjectCtx.Size(m)
}
func (m *HasiMObjectCtx) XXX_DiscardUnknown() {
	xxx_messageInfo_HasiMObjectCtx.DiscardUnknown(m)
}

var xxx_messageInfo_HasiMObjectCtx proto.InternalMessageInfo

func (m *HasiMObjectCtx) GetObjectSyncId() uint64 {
	if m != nil {
		return m.ObjectSyncId
	}
	return 0
}

func (m *HasiMObjectCtx) GetObjectType() uint32 {
	if m != nil {
		return m.ObjectType
	}
	return 0
}

func (m *HasiMObjectCtx) GetQueue() uint32 {
	if m != nil {
		return m.Queue
	}
	return 0
}

func (m *HasiMObjectCtx) GetCreateId() uint64 {
	if m != nil {
		return m.CreateId
	}
	return 0
}

func (m *HasiMObjectCtx) GetCreateTime() uint32 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *HasiMObjectCtx) GetUpdateTime() uint32 {
	if m != nil {
		return m.UpdateTime
	}
	return 0
}

func (m *HasiMObjectCtx) GetDeleteTime() uint32 {
	if m != nil {
		return m.DeleteTime
	}
	return 0
}

func (m *HasiMObjectCtx) GetDeleteCtxLenght() uint32 {
	if m != nil {
		return m.DeleteCtxLenght
	}
	return 0
}

func (m *HasiMObjectCtx) GetSlaveInformation() []*HasiMObjectSlaveInfo {
	if m != nil {
		return m.SlaveInformation
	}
	return nil
}

func (m *HasiMObjectCtx) GetHasHistory() bool {
	if m != nil {
		return m.HasHistory
	}
	return false
}

func (m *HasiMObjectCtx) GetPreActiveHistory() *HasiSObjIdEvents {
	if m != nil {
		return m.PreActiveHistory
	}
	return nil
}

type TeServP2MpAutoTun struct {
	// Client Context
	Context uint32 `protobuf:"varint,1,opt,name=context" json:"context,omitempty"`
	// Client
	Client string `protobuf:"bytes,2,opt,name=client" json:"client,omitempty"`
	// Tunnel Source Address
	Source string `protobuf:"bytes,3,opt,name=source" json:"source,omitempty"`
	// Tunnel Attribute Set Name
	AttributeSetName string `protobuf:"bytes,4,opt,name=attribute_set_name,json=attributeSetName" json:"attribute_set_name,omitempty"`
	// Tunnel Attribute Set Resolved
	AttributeSetResloved bool `protobuf:"varint,5,opt,name=attribute_set_resloved,json=attributeSetResloved" json:"attribute_set_resloved,omitempty"`
	// Forwarding info to be sent to LMRIB
	EgressInformation []uint32 `protobuf:"varint,6,rep,packed,name=egress_information,json=egressInformation" json:"egress_information,omitempty"`
	// EgressInfoState
	State uint32 `protobuf:"varint,7,opt,name=state" json:"state,omitempty"`
	// EgressInfoResult
	Result uint32 `protobuf:"varint,8,opt,name=result" json:"result,omitempty"`
	// Time at which it was last updated
	Updated uint64 `protobuf:"varint,9,opt,name=updated" json:"updated,omitempty"`
	// Needs to be replayed
	NeedsReplay          bool     `protobuf:"varint,10,opt,name=needs_replay,json=needsReplay" json:"needs_replay,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeServP2MpAutoTun) Reset()         { *m = TeServP2MpAutoTun{} }
func (m *TeServP2MpAutoTun) String() string { return proto.CompactTextString(m) }
func (*TeServP2MpAutoTun) ProtoMessage()    {}
func (*TeServP2MpAutoTun) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{42}
}
func (m *TeServP2MpAutoTun) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeServP2MpAutoTun.Unmarshal(m, b)
}
func (m *TeServP2MpAutoTun) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeServP2MpAutoTun.Marshal(b, m, deterministic)
}
func (dst *TeServP2MpAutoTun) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeServP2MpAutoTun.Merge(dst, src)
}
func (m *TeServP2MpAutoTun) XXX_Size() int {
	return xxx_messageInfo_TeServP2MpAutoTun.Size(m)
}
func (m *TeServP2MpAutoTun) XXX_DiscardUnknown() {
	xxx_messageInfo_TeServP2MpAutoTun.DiscardUnknown(m)
}

var xxx_messageInfo_TeServP2MpAutoTun proto.InternalMessageInfo

func (m *TeServP2MpAutoTun) GetContext() uint32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *TeServP2MpAutoTun) GetClient() string {
	if m != nil {
		return m.Client
	}
	return ""
}

func (m *TeServP2MpAutoTun) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *TeServP2MpAutoTun) GetAttributeSetName() string {
	if m != nil {
		return m.AttributeSetName
	}
	return ""
}

func (m *TeServP2MpAutoTun) GetAttributeSetResloved() bool {
	if m != nil {
		return m.AttributeSetResloved
	}
	return false
}

func (m *TeServP2MpAutoTun) GetEgressInformation() []uint32 {
	if m != nil {
		return m.EgressInformation
	}
	return nil
}

func (m *TeServP2MpAutoTun) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *TeServP2MpAutoTun) GetResult() uint32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *TeServP2MpAutoTun) GetUpdated() uint64 {
	if m != nil {
		return m.Updated
	}
	return 0
}

func (m *TeServP2MpAutoTun) GetNeedsReplay() bool {
	if m != nil {
		return m.NeedsReplay
	}
	return false
}

type TeServP2PAutoTun struct {
	// Client Context
	Context uint32 `protobuf:"varint,1,opt,name=context" json:"context,omitempty"`
	// Protocol Type
	ProtocolTyoe string `protobuf:"bytes,2,opt,name=protocol_tyoe,json=protocolTyoe" json:"protocol_tyoe,omitempty"`
	// Client Instance Name
	ClientInstanceName string `protobuf:"bytes,3,opt,name=client_instance_name,json=clientInstanceName" json:"client_instance_name,omitempty"`
	// Tunnel Destination Address
	Destination string `protobuf:"bytes,4,opt,name=destination" json:"destination,omitempty"`
	// Explicit Path
	ExplicitPath string `protobuf:"bytes,5,opt,name=explicit_path,json=explicitPath" json:"explicit_path,omitempty"`
	// Tunnel Attribute Set Name
	AttributeSetName string `protobuf:"bytes,6,opt,name=attribute_set_name,json=attributeSetName" json:"attribute_set_name,omitempty"`
	// Tunnel Attribute Set Resolved
	AttributeSetResolved bool `protobuf:"varint,7,opt,name=attribute_set_resolved,json=attributeSetResolved" json:"attribute_set_resolved,omitempty"`
	// Time at which it was last updated
	Updated uint64 `protobuf:"varint,8,opt,name=updated" json:"updated,omitempty"`
	// Needs to be replayed
	NeedsReplay bool `protobuf:"varint,9,opt,name=needs_replay,json=needsReplay" json:"needs_replay,omitempty"`
	// IPv6 Caps Requested
	Ipv6CapsRequested bool `protobuf:"varint,10,opt,name=ipv6_caps_requested,json=ipv6CapsRequested" json:"ipv6_caps_requested,omitempty"`
	// IPv6 Caps Enabled
	Ipv6CapsEnabled bool `protobuf:"varint,11,opt,name=ipv6_caps_enabled,json=ipv6CapsEnabled" json:"ipv6_caps_enabled,omitempty"`
	// Backup Tunnel
	BackupTunnel bool `protobuf:"varint,12,opt,name=backup_tunnel,json=backupTunnel" json:"backup_tunnel,omitempty"`
	// Next hop
	NextHop string `protobuf:"bytes,13,opt,name=next_hop,json=nextHop" json:"next_hop,omitempty"`
	// Outgoing Interface Name
	OutgoingInterface string `protobuf:"bytes,14,opt,name=outgoing_interface,json=outgoingInterface" json:"outgoing_interface,omitempty"`
	// Label stack
	LabelStack           []uint32 `protobuf:"varint,15,rep,packed,name=label_stack,json=labelStack" json:"label_stack,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeServP2PAutoTun) Reset()         { *m = TeServP2PAutoTun{} }
func (m *TeServP2PAutoTun) String() string { return proto.CompactTextString(m) }
func (*TeServP2PAutoTun) ProtoMessage()    {}
func (*TeServP2PAutoTun) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{43}
}
func (m *TeServP2PAutoTun) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeServP2PAutoTun.Unmarshal(m, b)
}
func (m *TeServP2PAutoTun) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeServP2PAutoTun.Marshal(b, m, deterministic)
}
func (dst *TeServP2PAutoTun) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeServP2PAutoTun.Merge(dst, src)
}
func (m *TeServP2PAutoTun) XXX_Size() int {
	return xxx_messageInfo_TeServP2PAutoTun.Size(m)
}
func (m *TeServP2PAutoTun) XXX_DiscardUnknown() {
	xxx_messageInfo_TeServP2PAutoTun.DiscardUnknown(m)
}

var xxx_messageInfo_TeServP2PAutoTun proto.InternalMessageInfo

func (m *TeServP2PAutoTun) GetContext() uint32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *TeServP2PAutoTun) GetProtocolTyoe() string {
	if m != nil {
		return m.ProtocolTyoe
	}
	return ""
}

func (m *TeServP2PAutoTun) GetClientInstanceName() string {
	if m != nil {
		return m.ClientInstanceName
	}
	return ""
}

func (m *TeServP2PAutoTun) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

func (m *TeServP2PAutoTun) GetExplicitPath() string {
	if m != nil {
		return m.ExplicitPath
	}
	return ""
}

func (m *TeServP2PAutoTun) GetAttributeSetName() string {
	if m != nil {
		return m.AttributeSetName
	}
	return ""
}

func (m *TeServP2PAutoTun) GetAttributeSetResolved() bool {
	if m != nil {
		return m.AttributeSetResolved
	}
	return false
}

func (m *TeServP2PAutoTun) GetUpdated() uint64 {
	if m != nil {
		return m.Updated
	}
	return 0
}

func (m *TeServP2PAutoTun) GetNeedsReplay() bool {
	if m != nil {
		return m.NeedsReplay
	}
	return false
}

func (m *TeServP2PAutoTun) GetIpv6CapsRequested() bool {
	if m != nil {
		return m.Ipv6CapsRequested
	}
	return false
}

func (m *TeServP2PAutoTun) GetIpv6CapsEnabled() bool {
	if m != nil {
		return m.Ipv6CapsEnabled
	}
	return false
}

func (m *TeServP2PAutoTun) GetBackupTunnel() bool {
	if m != nil {
		return m.BackupTunnel
	}
	return false
}

func (m *TeServP2PAutoTun) GetNextHop() string {
	if m != nil {
		return m.NextHop
	}
	return ""
}

func (m *TeServP2PAutoTun) GetOutgoingInterface() string {
	if m != nil {
		return m.OutgoingInterface
	}
	return ""
}

func (m *TeServP2PAutoTun) GetLabelStack() []uint32 {
	if m != nil {
		return m.LabelStack
	}
	return nil
}

// Egress info
type TeServP2MpEinfo struct {
	// Client
	Client string `protobuf:"bytes,1,opt,name=client" json:"client,omitempty"`
	// State
	State uint32 `protobuf:"varint,2,opt,name=state" json:"state,omitempty"`
	// Result
	Result uint32 `protobuf:"varint,3,opt,name=result" json:"result,omitempty"`
	// Forwarding info to be sent to LMRIB
	EgressInformation []uint32 `protobuf:"varint,4,rep,packed,name=egress_information,json=egressInformation" json:"egress_information,omitempty"`
	// Time at which it was last updated
	Updated uint64 `protobuf:"varint,5,opt,name=updated" json:"updated,omitempty"`
	// Needs to be replayed
	NeedsReplay          bool     `protobuf:"varint,6,opt,name=needs_replay,json=needsReplay" json:"needs_replay,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeServP2MpEinfo) Reset()         { *m = TeServP2MpEinfo{} }
func (m *TeServP2MpEinfo) String() string { return proto.CompactTextString(m) }
func (*TeServP2MpEinfo) ProtoMessage()    {}
func (*TeServP2MpEinfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{44}
}
func (m *TeServP2MpEinfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeServP2MpEinfo.Unmarshal(m, b)
}
func (m *TeServP2MpEinfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeServP2MpEinfo.Marshal(b, m, deterministic)
}
func (dst *TeServP2MpEinfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeServP2MpEinfo.Merge(dst, src)
}
func (m *TeServP2MpEinfo) XXX_Size() int {
	return xxx_messageInfo_TeServP2MpEinfo.Size(m)
}
func (m *TeServP2MpEinfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TeServP2MpEinfo.DiscardUnknown(m)
}

var xxx_messageInfo_TeServP2MpEinfo proto.InternalMessageInfo

func (m *TeServP2MpEinfo) GetClient() string {
	if m != nil {
		return m.Client
	}
	return ""
}

func (m *TeServP2MpEinfo) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *TeServP2MpEinfo) GetResult() uint32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *TeServP2MpEinfo) GetEgressInformation() []uint32 {
	if m != nil {
		return m.EgressInformation
	}
	return nil
}

func (m *TeServP2MpEinfo) GetUpdated() uint64 {
	if m != nil {
		return m.Updated
	}
	return 0
}

func (m *TeServP2MpEinfo) GetNeedsReplay() bool {
	if m != nil {
		return m.NeedsReplay
	}
	return false
}

// FSM events
type MplsTeP2MpFsmEventCounts struct {
	// FSM event counts
	Counts               []uint32 `protobuf:"varint,1,rep,packed,name=counts" json:"counts,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeP2MpFsmEventCounts) Reset()         { *m = MplsTeP2MpFsmEventCounts{} }
func (m *MplsTeP2MpFsmEventCounts) String() string { return proto.CompactTextString(m) }
func (*MplsTeP2MpFsmEventCounts) ProtoMessage()    {}
func (*MplsTeP2MpFsmEventCounts) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{45}
}
func (m *MplsTeP2MpFsmEventCounts) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeP2MpFsmEventCounts.Unmarshal(m, b)
}
func (m *MplsTeP2MpFsmEventCounts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeP2MpFsmEventCounts.Marshal(b, m, deterministic)
}
func (dst *MplsTeP2MpFsmEventCounts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeP2MpFsmEventCounts.Merge(dst, src)
}
func (m *MplsTeP2MpFsmEventCounts) XXX_Size() int {
	return xxx_messageInfo_MplsTeP2MpFsmEventCounts.Size(m)
}
func (m *MplsTeP2MpFsmEventCounts) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeP2MpFsmEventCounts.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeP2MpFsmEventCounts proto.InternalMessageInfo

func (m *MplsTeP2MpFsmEventCounts) GetCounts() []uint32 {
	if m != nil {
		return m.Counts
	}
	return nil
}

// FSM statistics
type MplsTeP2MpFsmEventStat struct {
	// Event time
	EventTime uint32 `protobuf:"varint,1,opt,name=event_time,json=eventTime" json:"event_time,omitempty"`
	// Previous state
	PreviousState string `protobuf:"bytes,2,opt,name=previous_state,json=previousState" json:"previous_state,omitempty"`
	// Next state
	NextState string `protobuf:"bytes,3,opt,name=next_state,json=nextState" json:"next_state,omitempty"`
	// Event ID
	EventId              string   `protobuf:"bytes,4,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeP2MpFsmEventStat) Reset()         { *m = MplsTeP2MpFsmEventStat{} }
func (m *MplsTeP2MpFsmEventStat) String() string { return proto.CompactTextString(m) }
func (*MplsTeP2MpFsmEventStat) ProtoMessage()    {}
func (*MplsTeP2MpFsmEventStat) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{46}
}
func (m *MplsTeP2MpFsmEventStat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeP2MpFsmEventStat.Unmarshal(m, b)
}
func (m *MplsTeP2MpFsmEventStat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeP2MpFsmEventStat.Marshal(b, m, deterministic)
}
func (dst *MplsTeP2MpFsmEventStat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeP2MpFsmEventStat.Merge(dst, src)
}
func (m *MplsTeP2MpFsmEventStat) XXX_Size() int {
	return xxx_messageInfo_MplsTeP2MpFsmEventStat.Size(m)
}
func (m *MplsTeP2MpFsmEventStat) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeP2MpFsmEventStat.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeP2MpFsmEventStat proto.InternalMessageInfo

func (m *MplsTeP2MpFsmEventStat) GetEventTime() uint32 {
	if m != nil {
		return m.EventTime
	}
	return 0
}

func (m *MplsTeP2MpFsmEventStat) GetPreviousState() string {
	if m != nil {
		return m.PreviousState
	}
	return ""
}

func (m *MplsTeP2MpFsmEventStat) GetNextState() string {
	if m != nil {
		return m.NextState
	}
	return ""
}

func (m *MplsTeP2MpFsmEventStat) GetEventId() string {
	if m != nil {
		return m.EventId
	}
	return ""
}

// FSM data
type MplsTeP2MpFsmInfo struct {
	// S2L FSM state
	S2LFsmState string `protobuf:"bytes,1,opt,name=s2_l_fsm_state,json=s2LFsmState" json:"s2_l_fsm_state,omitempty"`
	// S2L Flags
	S2LFlags uint32 `protobuf:"varint,2,opt,name=s2_l_flags,json=s2LFlags" json:"s2_l_flags,omitempty"`
	// Deletion Cause
	DeletionCause string `protobuf:"bytes,3,opt,name=deletion_cause,json=deletionCause" json:"deletion_cause,omitempty"`
	// Deletion Subcause
	DeletionSubcause string `protobuf:"bytes,4,opt,name=deletion_subcause,json=deletionSubcause" json:"deletion_subcause,omitempty"`
	// Number of injected events
	InjectedEvents uint32 `protobuf:"varint,5,opt,name=injected_events,json=injectedEvents" json:"injected_events,omitempty"`
	// Event stats
	EventStatistics []*MplsTeP2MpFsmEventStat `protobuf:"bytes,6,rep,name=event_statistics,json=eventStatistics" json:"event_statistics,omitempty"`
	// Event counts
	EventCounts *MplsTeP2MpFsmEventCounts `protobuf:"bytes,7,opt,name=event_counts,json=eventCounts" json:"event_counts,omitempty"`
	// Path is yet to be received
	PathToBeReceived bool `protobuf:"varint,8,opt,name=path_to_be_received,json=pathToBeReceived" json:"path_to_be_received,omitempty"`
	// Resv is yet to be received
	ReservationToBeReceived bool `protobuf:"varint,9,opt,name=reservation_to_be_received,json=reservationToBeReceived" json:"reservation_to_be_received,omitempty"`
	// Label is yet to be received
	LabelToBeReceived bool `protobuf:"varint,10,opt,name=label_to_be_received,json=labelToBeReceived" json:"label_to_be_received,omitempty"`
	// RW yet to be received
	RewriteToBeReceived bool `protobuf:"varint,11,opt,name=rewrite_to_be_received,json=rewriteToBeReceived" json:"rewrite_to_be_received,omitempty"`
	// Sync-ID is yet to be received from RSVP
	SyncIdFromRsvpToBeReceived bool `protobuf:"varint,12,opt,name=sync_id_from_rsvp_to_be_received,json=syncIdFromRsvpToBeReceived" json:"sync_id_from_rsvp_to_be_received,omitempty"`
	// Sync-ID is yet to be received from MASTER-TE
	SyncIdFromMasterToBeReceived bool `protobuf:"varint,13,opt,name=sync_id_from_master_to_be_received,json=syncIdFromMasterToBeReceived" json:"sync_id_from_master_to_be_received,omitempty"`
	// The outgoing interface for this S2L has gone down
	FrrActivePending bool `protobuf:"varint,14,opt,name=frr_active_pending,json=frrActivePending" json:"frr_active_pending,omitempty"`
	// The S2L properties that are synced do not match the config
	ConfigConsistent bool `protobuf:"varint,15,opt,name=config_consistent,json=configConsistent" json:"config_consistent,omitempty"`
	// TRUE if there is no vifi for this HEAD S2L
	MissingVif bool `protobuf:"varint,16,opt,name=missing_vif,json=missingVif" json:"missing_vif,omitempty"`
	// TRUE if the signaled name in the S2L is different than the vif
	SignameDiff bool `protobuf:"varint,17,opt,name=signame_diff,json=signameDiff" json:"signame_diff,omitempty"`
	// TRUE if the FRR property in the S2L is different than the vif
	FrrDiff bool `protobuf:"varint,18,opt,name=frr_diff,json=frrDiff" json:"frr_diff,omitempty"`
	// TRUE if the FRR Node Protection property in the S2L is different than the vif
	FrrNpDiff bool `protobuf:"varint,19,opt,name=frr_np_diff,json=frrNpDiff" json:"frr_np_diff,omitempty"`
	// TRUE if the FRR Bandwidth Protection property in the S2L is different than the vif
	FrrBwpDiff bool `protobuf:"varint,20,opt,name=frr_bwp_diff,json=frrBwpDiff" json:"frr_bwp_diff,omitempty"`
	// TRUE if the Record Route property in the S2L is different than the vif
	RecordRouteDiff bool `protobuf:"varint,21,opt,name=record_route_diff,json=recordRouteDiff" json:"record_route_diff,omitempty"`
	// TRUE if the soft preemption property in the S2L is different than the vif
	SoftPreemptionDiff   bool     `protobuf:"varint,22,opt,name=soft_preemption_diff,json=softPreemptionDiff" json:"soft_preemption_diff,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeP2MpFsmInfo) Reset()         { *m = MplsTeP2MpFsmInfo{} }
func (m *MplsTeP2MpFsmInfo) String() string { return proto.CompactTextString(m) }
func (*MplsTeP2MpFsmInfo) ProtoMessage()    {}
func (*MplsTeP2MpFsmInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{47}
}
func (m *MplsTeP2MpFsmInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeP2MpFsmInfo.Unmarshal(m, b)
}
func (m *MplsTeP2MpFsmInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeP2MpFsmInfo.Marshal(b, m, deterministic)
}
func (dst *MplsTeP2MpFsmInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeP2MpFsmInfo.Merge(dst, src)
}
func (m *MplsTeP2MpFsmInfo) XXX_Size() int {
	return xxx_messageInfo_MplsTeP2MpFsmInfo.Size(m)
}
func (m *MplsTeP2MpFsmInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeP2MpFsmInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeP2MpFsmInfo proto.InternalMessageInfo

func (m *MplsTeP2MpFsmInfo) GetS2LFsmState() string {
	if m != nil {
		return m.S2LFsmState
	}
	return ""
}

func (m *MplsTeP2MpFsmInfo) GetS2LFlags() uint32 {
	if m != nil {
		return m.S2LFlags
	}
	return 0
}

func (m *MplsTeP2MpFsmInfo) GetDeletionCause() string {
	if m != nil {
		return m.DeletionCause
	}
	return ""
}

func (m *MplsTeP2MpFsmInfo) GetDeletionSubcause() string {
	if m != nil {
		return m.DeletionSubcause
	}
	return ""
}

func (m *MplsTeP2MpFsmInfo) GetInjectedEvents() uint32 {
	if m != nil {
		return m.InjectedEvents
	}
	return 0
}

func (m *MplsTeP2MpFsmInfo) GetEventStatistics() []*MplsTeP2MpFsmEventStat {
	if m != nil {
		return m.EventStatistics
	}
	return nil
}

func (m *MplsTeP2MpFsmInfo) GetEventCounts() *MplsTeP2MpFsmEventCounts {
	if m != nil {
		return m.EventCounts
	}
	return nil
}

func (m *MplsTeP2MpFsmInfo) GetPathToBeReceived() bool {
	if m != nil {
		return m.PathToBeReceived
	}
	return false
}

func (m *MplsTeP2MpFsmInfo) GetReservationToBeReceived() bool {
	if m != nil {
		return m.ReservationToBeReceived
	}
	return false
}

func (m *MplsTeP2MpFsmInfo) GetLabelToBeReceived() bool {
	if m != nil {
		return m.LabelToBeReceived
	}
	return false
}

func (m *MplsTeP2MpFsmInfo) GetRewriteToBeReceived() bool {
	if m != nil {
		return m.RewriteToBeReceived
	}
	return false
}

func (m *MplsTeP2MpFsmInfo) GetSyncIdFromRsvpToBeReceived() bool {
	if m != nil {
		return m.SyncIdFromRsvpToBeReceived
	}
	return false
}

func (m *MplsTeP2MpFsmInfo) GetSyncIdFromMasterToBeReceived() bool {
	if m != nil {
		return m.SyncIdFromMasterToBeReceived
	}
	return false
}

func (m *MplsTeP2MpFsmInfo) GetFrrActivePending() bool {
	if m != nil {
		return m.FrrActivePending
	}
	return false
}

func (m *MplsTeP2MpFsmInfo) GetConfigConsistent() bool {
	if m != nil {
		return m.ConfigConsistent
	}
	return false
}

func (m *MplsTeP2MpFsmInfo) GetMissingVif() bool {
	if m != nil {
		return m.MissingVif
	}
	return false
}

func (m *MplsTeP2MpFsmInfo) GetSignameDiff() bool {
	if m != nil {
		return m.SignameDiff
	}
	return false
}

func (m *MplsTeP2MpFsmInfo) GetFrrDiff() bool {
	if m != nil {
		return m.FrrDiff
	}
	return false
}

func (m *MplsTeP2MpFsmInfo) GetFrrNpDiff() bool {
	if m != nil {
		return m.FrrNpDiff
	}
	return false
}

func (m *MplsTeP2MpFsmInfo) GetFrrBwpDiff() bool {
	if m != nil {
		return m.FrrBwpDiff
	}
	return false
}

func (m *MplsTeP2MpFsmInfo) GetRecordRouteDiff() bool {
	if m != nil {
		return m.RecordRouteDiff
	}
	return false
}

func (m *MplsTeP2MpFsmInfo) GetSoftPreemptionDiff() bool {
	if m != nil {
		return m.SoftPreemptionDiff
	}
	return false
}

type TeServP2MpEinfos struct {
	// P2MP Services Info Array
	ServiceInfos         []*TeServP2MpEinfo `protobuf:"bytes,1,rep,name=service_infos,json=serviceInfos" json:"service_infos,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *TeServP2MpEinfos) Reset()         { *m = TeServP2MpEinfos{} }
func (m *TeServP2MpEinfos) String() string { return proto.CompactTextString(m) }
func (*TeServP2MpEinfos) ProtoMessage()    {}
func (*TeServP2MpEinfos) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{48}
}
func (m *TeServP2MpEinfos) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeServP2MpEinfos.Unmarshal(m, b)
}
func (m *TeServP2MpEinfos) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeServP2MpEinfos.Marshal(b, m, deterministic)
}
func (dst *TeServP2MpEinfos) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeServP2MpEinfos.Merge(dst, src)
}
func (m *TeServP2MpEinfos) XXX_Size() int {
	return xxx_messageInfo_TeServP2MpEinfos.Size(m)
}
func (m *TeServP2MpEinfos) XXX_DiscardUnknown() {
	xxx_messageInfo_TeServP2MpEinfos.DiscardUnknown(m)
}

var xxx_messageInfo_TeServP2MpEinfos proto.InternalMessageInfo

func (m *TeServP2MpEinfos) GetServiceInfos() []*TeServP2MpEinfo {
	if m != nil {
		return m.ServiceInfos
	}
	return nil
}

// Endpoint Services Information
type TeServiceInfo struct {
	ServiceType string `protobuf:"bytes,1,opt,name=service_type,json=serviceType" json:"service_type,omitempty"`
	// VIF Egress-Info
	VifEgressInfo *TeServP2MpEinfos `protobuf:"bytes,2,opt,name=vif_egress_info,json=vifEgressInfo" json:"vif_egress_info,omitempty"`
	// S2L Egress-Info
	S2LEgressInfo *TeServP2MpEinfos `protobuf:"bytes,3,opt,name=s2_l_egress_info,json=s2LEgressInfo" json:"s2_l_egress_info,omitempty"`
	// VIF Auto-Tunnel Info
	VifAutoTunnelInfo *TeServP2MpAutoTun `protobuf:"bytes,4,opt,name=vif_auto_tunnel_info,json=vifAutoTunnelInfo" json:"vif_auto_tunnel_info,omitempty"`
	// VIF P2P Auto-Tunnel Info
	VifAutoTunnelP2PInfo *TeServP2PAutoTun `protobuf:"bytes,5,opt,name=vif_auto_tunnel_p2_p_info,json=vifAutoTunnelP2PInfo" json:"vif_auto_tunnel_p2_p_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TeServiceInfo) Reset()         { *m = TeServiceInfo{} }
func (m *TeServiceInfo) String() string { return proto.CompactTextString(m) }
func (*TeServiceInfo) ProtoMessage()    {}
func (*TeServiceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{49}
}
func (m *TeServiceInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeServiceInfo.Unmarshal(m, b)
}
func (m *TeServiceInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeServiceInfo.Marshal(b, m, deterministic)
}
func (dst *TeServiceInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeServiceInfo.Merge(dst, src)
}
func (m *TeServiceInfo) XXX_Size() int {
	return xxx_messageInfo_TeServiceInfo.Size(m)
}
func (m *TeServiceInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TeServiceInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TeServiceInfo proto.InternalMessageInfo

func (m *TeServiceInfo) GetServiceType() string {
	if m != nil {
		return m.ServiceType
	}
	return ""
}

func (m *TeServiceInfo) GetVifEgressInfo() *TeServP2MpEinfos {
	if m != nil {
		return m.VifEgressInfo
	}
	return nil
}

func (m *TeServiceInfo) GetS2LEgressInfo() *TeServP2MpEinfos {
	if m != nil {
		return m.S2LEgressInfo
	}
	return nil
}

func (m *TeServiceInfo) GetVifAutoTunnelInfo() *TeServP2MpAutoTun {
	if m != nil {
		return m.VifAutoTunnelInfo
	}
	return nil
}

func (m *TeServiceInfo) GetVifAutoTunnelP2PInfo() *TeServP2PAutoTun {
	if m != nil {
		return m.VifAutoTunnelP2PInfo
	}
	return nil
}

// ODU flex info for CBR framing type
type TeOduFlexCbrInfo struct {
	// Bit rate in kbit/s
	BitRate uint32 `protobuf:"varint,1,opt,name=bit_rate,json=bitRate" json:"bit_rate,omitempty"`
	// Tolerance
	Tolerance            uint32   `protobuf:"varint,2,opt,name=tolerance" json:"tolerance,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeOduFlexCbrInfo) Reset()         { *m = TeOduFlexCbrInfo{} }
func (m *TeOduFlexCbrInfo) String() string { return proto.CompactTextString(m) }
func (*TeOduFlexCbrInfo) ProtoMessage()    {}
func (*TeOduFlexCbrInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{50}
}
func (m *TeOduFlexCbrInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeOduFlexCbrInfo.Unmarshal(m, b)
}
func (m *TeOduFlexCbrInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeOduFlexCbrInfo.Marshal(b, m, deterministic)
}
func (dst *TeOduFlexCbrInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeOduFlexCbrInfo.Merge(dst, src)
}
func (m *TeOduFlexCbrInfo) XXX_Size() int {
	return xxx_messageInfo_TeOduFlexCbrInfo.Size(m)
}
func (m *TeOduFlexCbrInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TeOduFlexCbrInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TeOduFlexCbrInfo proto.InternalMessageInfo

func (m *TeOduFlexCbrInfo) GetBitRate() uint32 {
	if m != nil {
		return m.BitRate
	}
	return 0
}

func (m *TeOduFlexCbrInfo) GetTolerance() uint32 {
	if m != nil {
		return m.Tolerance
	}
	return 0
}

// ODU flex info for resizable GFP-F framing type
type TeOduFlexGfpFResInfo struct {
	// Bit rate in kbit/s
	BitRate              uint32   `protobuf:"varint,1,opt,name=bit_rate,json=bitRate" json:"bit_rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeOduFlexGfpFResInfo) Reset()         { *m = TeOduFlexGfpFResInfo{} }
func (m *TeOduFlexGfpFResInfo) String() string { return proto.CompactTextString(m) }
func (*TeOduFlexGfpFResInfo) ProtoMessage()    {}
func (*TeOduFlexGfpFResInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{51}
}
func (m *TeOduFlexGfpFResInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeOduFlexGfpFResInfo.Unmarshal(m, b)
}
func (m *TeOduFlexGfpFResInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeOduFlexGfpFResInfo.Marshal(b, m, deterministic)
}
func (dst *TeOduFlexGfpFResInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeOduFlexGfpFResInfo.Merge(dst, src)
}
func (m *TeOduFlexGfpFResInfo) XXX_Size() int {
	return xxx_messageInfo_TeOduFlexGfpFResInfo.Size(m)
}
func (m *TeOduFlexGfpFResInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TeOduFlexGfpFResInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TeOduFlexGfpFResInfo proto.InternalMessageInfo

func (m *TeOduFlexGfpFResInfo) GetBitRate() uint32 {
	if m != nil {
		return m.BitRate
	}
	return 0
}

// ODU flex info for non-resizable GFP-F framing type
type TeOduFlexGfpFNonResInfo struct {
	// Bit rate in kbit/s
	BitRate              uint32   `protobuf:"varint,1,opt,name=bit_rate,json=bitRate" json:"bit_rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeOduFlexGfpFNonResInfo) Reset()         { *m = TeOduFlexGfpFNonResInfo{} }
func (m *TeOduFlexGfpFNonResInfo) String() string { return proto.CompactTextString(m) }
func (*TeOduFlexGfpFNonResInfo) ProtoMessage()    {}
func (*TeOduFlexGfpFNonResInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{52}
}
func (m *TeOduFlexGfpFNonResInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeOduFlexGfpFNonResInfo.Unmarshal(m, b)
}
func (m *TeOduFlexGfpFNonResInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeOduFlexGfpFNonResInfo.Marshal(b, m, deterministic)
}
func (dst *TeOduFlexGfpFNonResInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeOduFlexGfpFNonResInfo.Merge(dst, src)
}
func (m *TeOduFlexGfpFNonResInfo) XXX_Size() int {
	return xxx_messageInfo_TeOduFlexGfpFNonResInfo.Size(m)
}
func (m *TeOduFlexGfpFNonResInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TeOduFlexGfpFNonResInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TeOduFlexGfpFNonResInfo proto.InternalMessageInfo

func (m *TeOduFlexGfpFNonResInfo) GetBitRate() uint32 {
	if m != nil {
		return m.BitRate
	}
	return 0
}

// ODU bandwidth union
type TeOduV3Bw struct {
	OduLevel string `protobuf:"bytes,1,opt,name=odu_level,json=oduLevel" json:"odu_level,omitempty"`
	// Odu flex CBR info
	OduFlexCbr *TeOduFlexCbrInfo `protobuf:"bytes,2,opt,name=odu_flex_cbr,json=oduFlexCbr" json:"odu_flex_cbr,omitempty"`
	// Odu flex GFP-F resizable info
	OduFlexGfpFRes *TeOduFlexGfpFResInfo `protobuf:"bytes,3,opt,name=odu_flex_gfp_f_res,json=oduFlexGfpFRes" json:"odu_flex_gfp_f_res,omitempty"`
	// Odu flex GFP-F non-resizable info
	OduFlexGfpFNonRes    *TeOduFlexGfpFNonResInfo `protobuf:"bytes,4,opt,name=odu_flex_gfp_f_non_res,json=oduFlexGfpFNonRes" json:"odu_flex_gfp_f_non_res,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *TeOduV3Bw) Reset()         { *m = TeOduV3Bw{} }
func (m *TeOduV3Bw) String() string { return proto.CompactTextString(m) }
func (*TeOduV3Bw) ProtoMessage()    {}
func (*TeOduV3Bw) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{53}
}
func (m *TeOduV3Bw) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeOduV3Bw.Unmarshal(m, b)
}
func (m *TeOduV3Bw) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeOduV3Bw.Marshal(b, m, deterministic)
}
func (dst *TeOduV3Bw) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeOduV3Bw.Merge(dst, src)
}
func (m *TeOduV3Bw) XXX_Size() int {
	return xxx_messageInfo_TeOduV3Bw.Size(m)
}
func (m *TeOduV3Bw) XXX_DiscardUnknown() {
	xxx_messageInfo_TeOduV3Bw.DiscardUnknown(m)
}

var xxx_messageInfo_TeOduV3Bw proto.InternalMessageInfo

func (m *TeOduV3Bw) GetOduLevel() string {
	if m != nil {
		return m.OduLevel
	}
	return ""
}

func (m *TeOduV3Bw) GetOduFlexCbr() *TeOduFlexCbrInfo {
	if m != nil {
		return m.OduFlexCbr
	}
	return nil
}

func (m *TeOduV3Bw) GetOduFlexGfpFRes() *TeOduFlexGfpFResInfo {
	if m != nil {
		return m.OduFlexGfpFRes
	}
	return nil
}

func (m *TeOduV3Bw) GetOduFlexGfpFNonRes() *TeOduFlexGfpFNonResInfo {
	if m != nil {
		return m.OduFlexGfpFNonRes
	}
	return nil
}

// TE Logging Attributes
type MplsTeLoggingAttributes struct {
	// LSP State logging: TRUE - enabled, FALSE - disabled
	LspState bool `protobuf:"varint,1,opt,name=lsp_state,json=lspState" json:"lsp_state,omitempty"`
	// S2L State logging: TRUE - enabled, FALSE - disabled
	S2LState bool `protobuf:"varint,2,opt,name=s2_l_state,json=s2LState" json:"s2_l_state,omitempty"`
	// LSP re-route logging: TRUE - enabled, FALSE - disabled
	LspReRoute bool `protobuf:"varint,3,opt,name=lsp_re_route,json=lspReRoute" json:"lsp_re_route,omitempty"`
	// LSP re-optimization logging: TRUE - enabled, FALSE - disabled
	LspReOpt bool `protobuf:"varint,4,opt,name=lsp_re_opt,json=lspReOpt" json:"lsp_re_opt,omitempty"`
	// LSP insufficient bandwidth logging: TRUE - enabled, FALSE - disabled
	LspInsufficientBw bool `protobuf:"varint,5,opt,name=lsp_insufficient_bw,json=lspInsufficientBw" json:"lsp_insufficient_bw,omitempty"`
	// LSP bandwidth change logging: TRUE - enabled, FALSE - disabled
	LspBandwidthChange bool `protobuf:"varint,6,opt,name=lsp_bandwidth_change,json=lspBandwidthChange" json:"lsp_bandwidth_change,omitempty"`
	// LSP pcalc failure logging: TRUE - enabled, FALSE - disabled
	LspPcalcFailureLoggingEnabled bool `protobuf:"varint,7,opt,name=lsp_pcalc_failure_logging_enabled,json=lspPcalcFailureLoggingEnabled" json:"lsp_pcalc_failure_logging_enabled,omitempty"`
	// All logging option: TRUE - enabled, FALSE - disabled
	AllLoggingEnabled    bool     `protobuf:"varint,8,opt,name=all_logging_enabled,json=allLoggingEnabled" json:"all_logging_enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeLoggingAttributes) Reset()         { *m = MplsTeLoggingAttributes{} }
func (m *MplsTeLoggingAttributes) String() string { return proto.CompactTextString(m) }
func (*MplsTeLoggingAttributes) ProtoMessage()    {}
func (*MplsTeLoggingAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{54}
}
func (m *MplsTeLoggingAttributes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeLoggingAttributes.Unmarshal(m, b)
}
func (m *MplsTeLoggingAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeLoggingAttributes.Marshal(b, m, deterministic)
}
func (dst *MplsTeLoggingAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeLoggingAttributes.Merge(dst, src)
}
func (m *MplsTeLoggingAttributes) XXX_Size() int {
	return xxx_messageInfo_MplsTeLoggingAttributes.Size(m)
}
func (m *MplsTeLoggingAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeLoggingAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeLoggingAttributes proto.InternalMessageInfo

func (m *MplsTeLoggingAttributes) GetLspState() bool {
	if m != nil {
		return m.LspState
	}
	return false
}

func (m *MplsTeLoggingAttributes) GetS2LState() bool {
	if m != nil {
		return m.S2LState
	}
	return false
}

func (m *MplsTeLoggingAttributes) GetLspReRoute() bool {
	if m != nil {
		return m.LspReRoute
	}
	return false
}

func (m *MplsTeLoggingAttributes) GetLspReOpt() bool {
	if m != nil {
		return m.LspReOpt
	}
	return false
}

func (m *MplsTeLoggingAttributes) GetLspInsufficientBw() bool {
	if m != nil {
		return m.LspInsufficientBw
	}
	return false
}

func (m *MplsTeLoggingAttributes) GetLspBandwidthChange() bool {
	if m != nil {
		return m.LspBandwidthChange
	}
	return false
}

func (m *MplsTeLoggingAttributes) GetLspPcalcFailureLoggingEnabled() bool {
	if m != nil {
		return m.LspPcalcFailureLoggingEnabled
	}
	return false
}

func (m *MplsTeLoggingAttributes) GetAllLoggingEnabled() bool {
	if m != nil {
		return m.AllLoggingEnabled
	}
	return false
}

// TE Auto-mesh Attribute Set
type MplsTeAttributeSetAutoMesh struct {
	// Bandwidth value in kbps
	ConfiguredBandwidth uint32 `protobuf:"varint,1,opt,name=configured_bandwidth,json=configuredBandwidth" json:"configured_bandwidth,omitempty"`
	// DSTE Class
	DsteClassType uint32 `protobuf:"varint,2,opt,name=dste_class_type,json=dsteClassType" json:"dste_class_type,omitempty"`
	// Is bandwidth configured
	IsBandwidthConfigured bool `protobuf:"varint,3,opt,name=is_bandwidth_configured,json=isBandwidthConfigured" json:"is_bandwidth_configured,omitempty"`
	// Setup priority
	SetupPriority uint32 `protobuf:"varint,4,opt,name=setup_priority,json=setupPriority" json:"setup_priority,omitempty"`
	// Hold priority
	HoldPriority uint32 `protobuf:"varint,5,opt,name=hold_priority,json=holdPriority" json:"hold_priority,omitempty"`
	// Is priority configured
	IsPriorityConfigured bool `protobuf:"varint,6,opt,name=is_priority_configured,json=isPriorityConfigured" json:"is_priority_configured,omitempty"`
	// deprecated
	PolicyClass uint32 `protobuf:"varint,7,opt,name=policy_class,json=policyClass" json:"policy_class,omitempty"`
	// PBTS policy classes
	PolicyClasses []uint32 `protobuf:"varint,8,rep,packed,name=policy_classes,json=policyClasses" json:"policy_classes,omitempty"`
	// Is policy class configured
	IsPolicyclassConfigured bool `protobuf:"varint,9,opt,name=is_policyclass_configured,json=isPolicyclassConfigured" json:"is_policyclass_configured,omitempty"`
	// Forward class
	ForwardClass uint32 `protobuf:"varint,10,opt,name=forward_class,json=forwardClass" json:"forward_class,omitempty"`
	// Affinity
	Affinity *MplsTeTunnelsAffinityInfo `protobuf:"bytes,11,opt,name=affinity" json:"affinity,omitempty"`
	// Is affinity configured
	IsAffinityConfigured bool `protobuf:"varint,12,opt,name=is_affinity_configured,json=isAffinityConfigured" json:"is_affinity_configured,omitempty"`
	// Fast reroute
	FastReroute bool `protobuf:"varint,13,opt,name=fast_reroute,json=fastReroute" json:"fast_reroute,omitempty"`
	// FRR Node protection
	FrrNodeProtection bool `protobuf:"varint,14,opt,name=frr_node_protection,json=frrNodeProtection" json:"frr_node_protection,omitempty"`
	// FRR bandwidth protection
	FrrBandwidthProtection bool `protobuf:"varint,15,opt,name=frr_bandwidth_protection,json=frrBandwidthProtection" json:"frr_bandwidth_protection,omitempty"`
	// Record route
	RecordRoute bool `protobuf:"varint,16,opt,name=record_route,json=recordRoute" json:"record_route,omitempty"`
	// Auto bandwidth collect only
	AutoBandwidthCollect bool `protobuf:"varint,17,opt,name=auto_bandwidth_collect,json=autoBandwidthCollect" json:"auto_bandwidth_collect,omitempty"`
	// Announce auto route to IGP
	AutoRouteAnnounce bool `protobuf:"varint,18,opt,name=auto_route_announce,json=autoRouteAnnounce" json:"auto_route_announce,omitempty"`
	// Soft preemption is configured
	SoftPreemptionConfigured bool `protobuf:"varint,19,opt,name=soft_preemption_configured,json=softPreemptionConfigured" json:"soft_preemption_configured,omitempty"`
	// Logging attributes
	Logging *MplsTeLoggingAttributes `protobuf:"bytes,20,opt,name=logging" json:"logging,omitempty"`
	// IM bandwidth
	Bandwidth uint32 `protobuf:"varint,21,opt,name=bandwidth" json:"bandwidth,omitempty"`
	// Load-Share
	LoadShare uint32 `protobuf:"varint,22,opt,name=load_share,json=loadShare" json:"load_share,omitempty"`
	// Is Interface BW configured
	IsInterfaceBwConfigured bool `protobuf:"varint,23,opt,name=is_interface_bw_configured,json=isInterfaceBwConfigured" json:"is_interface_bw_configured,omitempty"`
	// Meshgroup ID
	MeshGroupId []uint32 `protobuf:"varint,24,rep,packed,name=mesh_group_id,json=meshGroupId" json:"mesh_group_id,omitempty"`
	// Tunnel ID
	TunnelId             []uint32 `protobuf:"varint,25,rep,packed,name=tunnel_id,json=tunnelId" json:"tunnel_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeAttributeSetAutoMesh) Reset()         { *m = MplsTeAttributeSetAutoMesh{} }
func (m *MplsTeAttributeSetAutoMesh) String() string { return proto.CompactTextString(m) }
func (*MplsTeAttributeSetAutoMesh) ProtoMessage()    {}
func (*MplsTeAttributeSetAutoMesh) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{55}
}
func (m *MplsTeAttributeSetAutoMesh) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeAttributeSetAutoMesh.Unmarshal(m, b)
}
func (m *MplsTeAttributeSetAutoMesh) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeAttributeSetAutoMesh.Marshal(b, m, deterministic)
}
func (dst *MplsTeAttributeSetAutoMesh) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeAttributeSetAutoMesh.Merge(dst, src)
}
func (m *MplsTeAttributeSetAutoMesh) XXX_Size() int {
	return xxx_messageInfo_MplsTeAttributeSetAutoMesh.Size(m)
}
func (m *MplsTeAttributeSetAutoMesh) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeAttributeSetAutoMesh.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeAttributeSetAutoMesh proto.InternalMessageInfo

func (m *MplsTeAttributeSetAutoMesh) GetConfiguredBandwidth() uint32 {
	if m != nil {
		return m.ConfiguredBandwidth
	}
	return 0
}

func (m *MplsTeAttributeSetAutoMesh) GetDsteClassType() uint32 {
	if m != nil {
		return m.DsteClassType
	}
	return 0
}

func (m *MplsTeAttributeSetAutoMesh) GetIsBandwidthConfigured() bool {
	if m != nil {
		return m.IsBandwidthConfigured
	}
	return false
}

func (m *MplsTeAttributeSetAutoMesh) GetSetupPriority() uint32 {
	if m != nil {
		return m.SetupPriority
	}
	return 0
}

func (m *MplsTeAttributeSetAutoMesh) GetHoldPriority() uint32 {
	if m != nil {
		return m.HoldPriority
	}
	return 0
}

func (m *MplsTeAttributeSetAutoMesh) GetIsPriorityConfigured() bool {
	if m != nil {
		return m.IsPriorityConfigured
	}
	return false
}

func (m *MplsTeAttributeSetAutoMesh) GetPolicyClass() uint32 {
	if m != nil {
		return m.PolicyClass
	}
	return 0
}

func (m *MplsTeAttributeSetAutoMesh) GetPolicyClasses() []uint32 {
	if m != nil {
		return m.PolicyClasses
	}
	return nil
}

func (m *MplsTeAttributeSetAutoMesh) GetIsPolicyclassConfigured() bool {
	if m != nil {
		return m.IsPolicyclassConfigured
	}
	return false
}

func (m *MplsTeAttributeSetAutoMesh) GetForwardClass() uint32 {
	if m != nil {
		return m.ForwardClass
	}
	return 0
}

func (m *MplsTeAttributeSetAutoMesh) GetAffinity() *MplsTeTunnelsAffinityInfo {
	if m != nil {
		return m.Affinity
	}
	return nil
}

func (m *MplsTeAttributeSetAutoMesh) GetIsAffinityConfigured() bool {
	if m != nil {
		return m.IsAffinityConfigured
	}
	return false
}

func (m *MplsTeAttributeSetAutoMesh) GetFastReroute() bool {
	if m != nil {
		return m.FastReroute
	}
	return false
}

func (m *MplsTeAttributeSetAutoMesh) GetFrrNodeProtection() bool {
	if m != nil {
		return m.FrrNodeProtection
	}
	return false
}

func (m *MplsTeAttributeSetAutoMesh) GetFrrBandwidthProtection() bool {
	if m != nil {
		return m.FrrBandwidthProtection
	}
	return false
}

func (m *MplsTeAttributeSetAutoMesh) GetRecordRoute() bool {
	if m != nil {
		return m.RecordRoute
	}
	return false
}

func (m *MplsTeAttributeSetAutoMesh) GetAutoBandwidthCollect() bool {
	if m != nil {
		return m.AutoBandwidthCollect
	}
	return false
}

func (m *MplsTeAttributeSetAutoMesh) GetAutoRouteAnnounce() bool {
	if m != nil {
		return m.AutoRouteAnnounce
	}
	return false
}

func (m *MplsTeAttributeSetAutoMesh) GetSoftPreemptionConfigured() bool {
	if m != nil {
		return m.SoftPreemptionConfigured
	}
	return false
}

func (m *MplsTeAttributeSetAutoMesh) GetLogging() *MplsTeLoggingAttributes {
	if m != nil {
		return m.Logging
	}
	return nil
}

func (m *MplsTeAttributeSetAutoMesh) GetBandwidth() uint32 {
	if m != nil {
		return m.Bandwidth
	}
	return 0
}

func (m *MplsTeAttributeSetAutoMesh) GetLoadShare() uint32 {
	if m != nil {
		return m.LoadShare
	}
	return 0
}

func (m *MplsTeAttributeSetAutoMesh) GetIsInterfaceBwConfigured() bool {
	if m != nil {
		return m.IsInterfaceBwConfigured
	}
	return false
}

func (m *MplsTeAttributeSetAutoMesh) GetMeshGroupId() []uint32 {
	if m != nil {
		return m.MeshGroupId
	}
	return nil
}

func (m *MplsTeAttributeSetAutoMesh) GetTunnelId() []uint32 {
	if m != nil {
		return m.TunnelId
	}
	return nil
}

// TE Protected Interface Name String
type MplsTeProtectedIfNameStr struct {
	// Protected Interface Name
	ProtectedInterface   string   `protobuf:"bytes,1,opt,name=protected_interface,json=protectedInterface" json:"protected_interface,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeProtectedIfNameStr) Reset()         { *m = MplsTeProtectedIfNameStr{} }
func (m *MplsTeProtectedIfNameStr) String() string { return proto.CompactTextString(m) }
func (*MplsTeProtectedIfNameStr) ProtoMessage()    {}
func (*MplsTeProtectedIfNameStr) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{56}
}
func (m *MplsTeProtectedIfNameStr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeProtectedIfNameStr.Unmarshal(m, b)
}
func (m *MplsTeProtectedIfNameStr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeProtectedIfNameStr.Marshal(b, m, deterministic)
}
func (dst *MplsTeProtectedIfNameStr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeProtectedIfNameStr.Merge(dst, src)
}
func (m *MplsTeProtectedIfNameStr) XXX_Size() int {
	return xxx_messageInfo_MplsTeProtectedIfNameStr.Size(m)
}
func (m *MplsTeProtectedIfNameStr) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeProtectedIfNameStr.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeProtectedIfNameStr proto.InternalMessageInfo

func (m *MplsTeProtectedIfNameStr) GetProtectedInterface() string {
	if m != nil {
		return m.ProtectedInterface
	}
	return ""
}

// Attribute set signalled name
type MplsTeAttributeSetSigName struct {
	// Signalled name
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Source address or name
	SourceType string `protobuf:"bytes,2,opt,name=source_type,json=sourceType" json:"source_type,omitempty"`
	// Protected interface address or name
	ProtectedInterfaceType string `protobuf:"bytes,3,opt,name=protected_interface_type,json=protectedInterfaceType" json:"protected_interface_type,omitempty"`
	// MP address appended
	IsMpAddresses        bool     `protobuf:"varint,4,opt,name=is_mp_addresses,json=isMpAddresses" json:"is_mp_addresses,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeAttributeSetSigName) Reset()         { *m = MplsTeAttributeSetSigName{} }
func (m *MplsTeAttributeSetSigName) String() string { return proto.CompactTextString(m) }
func (*MplsTeAttributeSetSigName) ProtoMessage()    {}
func (*MplsTeAttributeSetSigName) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{57}
}
func (m *MplsTeAttributeSetSigName) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeAttributeSetSigName.Unmarshal(m, b)
}
func (m *MplsTeAttributeSetSigName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeAttributeSetSigName.Marshal(b, m, deterministic)
}
func (dst *MplsTeAttributeSetSigName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeAttributeSetSigName.Merge(dst, src)
}
func (m *MplsTeAttributeSetSigName) XXX_Size() int {
	return xxx_messageInfo_MplsTeAttributeSetSigName.Size(m)
}
func (m *MplsTeAttributeSetSigName) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeAttributeSetSigName.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeAttributeSetSigName proto.InternalMessageInfo

func (m *MplsTeAttributeSetSigName) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MplsTeAttributeSetSigName) GetSourceType() string {
	if m != nil {
		return m.SourceType
	}
	return ""
}

func (m *MplsTeAttributeSetSigName) GetProtectedInterfaceType() string {
	if m != nil {
		return m.ProtectedInterfaceType
	}
	return ""
}

func (m *MplsTeAttributeSetSigName) GetIsMpAddresses() bool {
	if m != nil {
		return m.IsMpAddresses
	}
	return false
}

// TE Auto-backup Attribute Set
type MplsTeAttributeSetAutoBackup struct {
	// Is signalled name configured
	IsSignalledNameConfigured bool `protobuf:"varint,1,opt,name=is_signalled_name_configured,json=isSignalledNameConfigured" json:"is_signalled_name_configured,omitempty"`
	// Signalled name
	SignalledName *MplsTeAttributeSetSigName `protobuf:"bytes,2,opt,name=signalled_name,json=signalledName" json:"signalled_name,omitempty"`
	// Setup priority
	SetupPriority uint32 `protobuf:"varint,3,opt,name=setup_priority,json=setupPriority" json:"setup_priority,omitempty"`
	// Hold priority
	HoldPriority uint32 `protobuf:"varint,4,opt,name=hold_priority,json=holdPriority" json:"hold_priority,omitempty"`
	// Is priority configured
	IsPriorityConfigured bool `protobuf:"varint,5,opt,name=is_priority_configured,json=isPriorityConfigured" json:"is_priority_configured,omitempty"`
	// deprecated
	PolicyClass uint32 `protobuf:"varint,6,opt,name=policy_class,json=policyClass" json:"policy_class,omitempty"`
	// PBTS policy classes
	PolicyClasses []uint32 `protobuf:"varint,7,rep,packed,name=policy_classes,json=policyClasses" json:"policy_classes,omitempty"`
	// Is policy class configured
	IsPolicyclassConfigured bool `protobuf:"varint,8,opt,name=is_policyclass_configured,json=isPolicyclassConfigured" json:"is_policyclass_configured,omitempty"`
	// Affinity
	Affinity *MplsTeTunnelsAffinityInfo `protobuf:"bytes,9,opt,name=affinity" json:"affinity,omitempty"`
	// Is affinity configured
	IsAffinityConfigured bool `protobuf:"varint,10,opt,name=is_affinity_configured,json=isAffinityConfigured" json:"is_affinity_configured,omitempty"`
	// Record route
	RecordRoute bool `protobuf:"varint,11,opt,name=record_route,json=recordRoute" json:"record_route,omitempty"`
	// Logging attributes
	Logging *MplsTeLoggingAttributes `protobuf:"bytes,12,opt,name=logging" json:"logging,omitempty"`
	// Array of Protected Interface Names
	ProtectedInterfaces []*MplsTeProtectedIfNameStr `protobuf:"bytes,13,rep,name=protected_interfaces,json=protectedInterfaces" json:"protected_interfaces,omitempty"`
	// Tunnel ID
	TunnelId             []uint32 `protobuf:"varint,14,rep,packed,name=tunnel_id,json=tunnelId" json:"tunnel_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeAttributeSetAutoBackup) Reset()         { *m = MplsTeAttributeSetAutoBackup{} }
func (m *MplsTeAttributeSetAutoBackup) String() string { return proto.CompactTextString(m) }
func (*MplsTeAttributeSetAutoBackup) ProtoMessage()    {}
func (*MplsTeAttributeSetAutoBackup) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{58}
}
func (m *MplsTeAttributeSetAutoBackup) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeAttributeSetAutoBackup.Unmarshal(m, b)
}
func (m *MplsTeAttributeSetAutoBackup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeAttributeSetAutoBackup.Marshal(b, m, deterministic)
}
func (dst *MplsTeAttributeSetAutoBackup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeAttributeSetAutoBackup.Merge(dst, src)
}
func (m *MplsTeAttributeSetAutoBackup) XXX_Size() int {
	return xxx_messageInfo_MplsTeAttributeSetAutoBackup.Size(m)
}
func (m *MplsTeAttributeSetAutoBackup) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeAttributeSetAutoBackup.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeAttributeSetAutoBackup proto.InternalMessageInfo

func (m *MplsTeAttributeSetAutoBackup) GetIsSignalledNameConfigured() bool {
	if m != nil {
		return m.IsSignalledNameConfigured
	}
	return false
}

func (m *MplsTeAttributeSetAutoBackup) GetSignalledName() *MplsTeAttributeSetSigName {
	if m != nil {
		return m.SignalledName
	}
	return nil
}

func (m *MplsTeAttributeSetAutoBackup) GetSetupPriority() uint32 {
	if m != nil {
		return m.SetupPriority
	}
	return 0
}

func (m *MplsTeAttributeSetAutoBackup) GetHoldPriority() uint32 {
	if m != nil {
		return m.HoldPriority
	}
	return 0
}

func (m *MplsTeAttributeSetAutoBackup) GetIsPriorityConfigured() bool {
	if m != nil {
		return m.IsPriorityConfigured
	}
	return false
}

func (m *MplsTeAttributeSetAutoBackup) GetPolicyClass() uint32 {
	if m != nil {
		return m.PolicyClass
	}
	return 0
}

func (m *MplsTeAttributeSetAutoBackup) GetPolicyClasses() []uint32 {
	if m != nil {
		return m.PolicyClasses
	}
	return nil
}

func (m *MplsTeAttributeSetAutoBackup) GetIsPolicyclassConfigured() bool {
	if m != nil {
		return m.IsPolicyclassConfigured
	}
	return false
}

func (m *MplsTeAttributeSetAutoBackup) GetAffinity() *MplsTeTunnelsAffinityInfo {
	if m != nil {
		return m.Affinity
	}
	return nil
}

func (m *MplsTeAttributeSetAutoBackup) GetIsAffinityConfigured() bool {
	if m != nil {
		return m.IsAffinityConfigured
	}
	return false
}

func (m *MplsTeAttributeSetAutoBackup) GetRecordRoute() bool {
	if m != nil {
		return m.RecordRoute
	}
	return false
}

func (m *MplsTeAttributeSetAutoBackup) GetLogging() *MplsTeLoggingAttributes {
	if m != nil {
		return m.Logging
	}
	return nil
}

func (m *MplsTeAttributeSetAutoBackup) GetProtectedInterfaces() []*MplsTeProtectedIfNameStr {
	if m != nil {
		return m.ProtectedInterfaces
	}
	return nil
}

func (m *MplsTeAttributeSetAutoBackup) GetTunnelId() []uint32 {
	if m != nil {
		return m.TunnelId
	}
	return nil
}

// TE attribute set versioning info
type MplsTeAttributeSetVersion struct {
	// Attribute Type
	AttributeType string `protobuf:"bytes,1,opt,name=attribute_type,json=attributeType" json:"attribute_type,omitempty"`
	// Generation
	Generation uint32 `protobuf:"varint,2,opt,name=generation" json:"generation,omitempty"`
	// Is default
	IsDefault            bool     `protobuf:"varint,3,opt,name=is_default,json=isDefault" json:"is_default,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeAttributeSetVersion) Reset()         { *m = MplsTeAttributeSetVersion{} }
func (m *MplsTeAttributeSetVersion) String() string { return proto.CompactTextString(m) }
func (*MplsTeAttributeSetVersion) ProtoMessage()    {}
func (*MplsTeAttributeSetVersion) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{59}
}
func (m *MplsTeAttributeSetVersion) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeAttributeSetVersion.Unmarshal(m, b)
}
func (m *MplsTeAttributeSetVersion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeAttributeSetVersion.Marshal(b, m, deterministic)
}
func (dst *MplsTeAttributeSetVersion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeAttributeSetVersion.Merge(dst, src)
}
func (m *MplsTeAttributeSetVersion) XXX_Size() int {
	return xxx_messageInfo_MplsTeAttributeSetVersion.Size(m)
}
func (m *MplsTeAttributeSetVersion) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeAttributeSetVersion.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeAttributeSetVersion proto.InternalMessageInfo

func (m *MplsTeAttributeSetVersion) GetAttributeType() string {
	if m != nil {
		return m.AttributeType
	}
	return ""
}

func (m *MplsTeAttributeSetVersion) GetGeneration() uint32 {
	if m != nil {
		return m.Generation
	}
	return 0
}

func (m *MplsTeAttributeSetVersion) GetIsDefault() bool {
	if m != nil {
		return m.IsDefault
	}
	return false
}

// TE segment routing path list
type MplsTeAttributeSetBfdRevPath struct {
	// BFD reverse path type
	PathType string `protobuf:"bytes,1,opt,name=path_type,json=pathType" json:"path_type,omitempty"`
	// BFD reverse path binding label
	BindingLabel         uint32   `protobuf:"varint,2,opt,name=binding_label,json=bindingLabel" json:"binding_label,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeAttributeSetBfdRevPath) Reset()         { *m = MplsTeAttributeSetBfdRevPath{} }
func (m *MplsTeAttributeSetBfdRevPath) String() string { return proto.CompactTextString(m) }
func (*MplsTeAttributeSetBfdRevPath) ProtoMessage()    {}
func (*MplsTeAttributeSetBfdRevPath) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{60}
}
func (m *MplsTeAttributeSetBfdRevPath) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeAttributeSetBfdRevPath.Unmarshal(m, b)
}
func (m *MplsTeAttributeSetBfdRevPath) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeAttributeSetBfdRevPath.Marshal(b, m, deterministic)
}
func (dst *MplsTeAttributeSetBfdRevPath) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeAttributeSetBfdRevPath.Merge(dst, src)
}
func (m *MplsTeAttributeSetBfdRevPath) XXX_Size() int {
	return xxx_messageInfo_MplsTeAttributeSetBfdRevPath.Size(m)
}
func (m *MplsTeAttributeSetBfdRevPath) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeAttributeSetBfdRevPath.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeAttributeSetBfdRevPath proto.InternalMessageInfo

func (m *MplsTeAttributeSetBfdRevPath) GetPathType() string {
	if m != nil {
		return m.PathType
	}
	return ""
}

func (m *MplsTeAttributeSetBfdRevPath) GetBindingLabel() uint32 {
	if m != nil {
		return m.BindingLabel
	}
	return 0
}

// TE Path Option Attribute Set
type MplsTeAttributeSetPathOption struct {
	// Bandwidth value in kbps
	ConfiguredBandwidth uint32 `protobuf:"varint,1,opt,name=configured_bandwidth,json=configuredBandwidth" json:"configured_bandwidth,omitempty"`
	// Cost limit on the tunnel path
	CostLimit uint32 `protobuf:"varint,2,opt,name=cost_limit,json=costLimit" json:"cost_limit,omitempty"`
	// DSTE Class
	DsteClassType uint32 `protobuf:"varint,3,opt,name=dste_class_type,json=dsteClassType" json:"dste_class_type,omitempty"`
	// The bandwidth type
	BandwidthType string `protobuf:"bytes,4,opt,name=bandwidth_type,json=bandwidthType" json:"bandwidth_type,omitempty"`
	// Is bandwidth configured
	IsBandwidthConfigured bool `protobuf:"varint,5,opt,name=is_bandwidth_configured,json=isBandwidthConfigured" json:"is_bandwidth_configured,omitempty"`
	// Is Cost Limit configured
	IsCostLimitConfigured bool `protobuf:"varint,6,opt,name=is_cost_limit_configured,json=isCostLimitConfigured" json:"is_cost_limit_configured,omitempty"`
	// Affinity
	Affinity *MplsTeTunnelsAffinityInfo `protobuf:"bytes,7,opt,name=affinity" json:"affinity,omitempty"`
	// Is affinity configured
	IsAffinityConfigured bool `protobuf:"varint,8,opt,name=is_affinity_configured,json=isAffinityConfigured" json:"is_affinity_configured,omitempty"`
	// Tunnel ID
	TunnelId []uint32 `protobuf:"varint,9,rep,packed,name=tunnel_id,json=tunnelId" json:"tunnel_id,omitempty"`
	// Generation
	Generation uint32 `protobuf:"varint,10,opt,name=generation" json:"generation,omitempty"`
	// Version Info
	VersionInfo []*MplsTeAttributeSetVersion `protobuf:"bytes,11,rep,name=version_info,json=versionInfo" json:"version_info,omitempty"`
	// Path invalidation interval on the tunnel path
	PathInvalidationTimeout uint32 `protobuf:"varint,12,opt,name=path_invalidation_timeout,json=pathInvalidationTimeout" json:"path_invalidation_timeout,omitempty"`
	// Path invalidation action
	PathInvalidationAction uint32 `protobuf:"varint,13,opt,name=path_invalidation_action,json=pathInvalidationAction" json:"path_invalidation_action,omitempty"`
	// Is path invalidation timeout configured
	IsPathInvalidationTimeoutConfigured bool `protobuf:"varint,14,opt,name=is_path_invalidation_timeout_configured,json=isPathInvalidationTimeoutConfigured" json:"is_path_invalidation_timeout_configured,omitempty"`
	// Is path invalidation action configured
	IsPathInvalidationActionConfigured bool `protobuf:"varint,15,opt,name=is_path_invalidation_action_configured,json=isPathInvalidationActionConfigured" json:"is_path_invalidation_action_configured,omitempty"`
	// Exclude list name
	ExcludeListName string `protobuf:"bytes,16,opt,name=exclude_list_name,json=excludeListName" json:"exclude_list_name,omitempty"`
	// Is exclude list name configured
	IsExcludeListNameConfigured bool `protobuf:"varint,17,opt,name=is_exclude_list_name_configured,json=isExcludeListNameConfigured" json:"is_exclude_list_name_configured,omitempty"`
	// Is PCE Configured
	IsPceConfigured bool `protobuf:"varint,18,opt,name=is_pce_configured,json=isPceConfigured" json:"is_pce_configured,omitempty"`
	// Is PCE Disjoint Path Source Configured
	IsPceDisjSourceConfigured bool `protobuf:"varint,19,opt,name=is_pce_disj_source_configured,json=isPceDisjSourceConfigured" json:"is_pce_disj_source_configured,omitempty"`
	// Is PCE Disjoint Path Type Configured
	IsPceDisjTypeConfigured bool `protobuf:"varint,20,opt,name=is_pce_disj_type_configured,json=isPceDisjTypeConfigured" json:"is_pce_disj_type_configured,omitempty"`
	// Is PCE Disjoint Path Group ID Configured
	IsPceDisjGroupIdConfigured bool `protobuf:"varint,21,opt,name=is_pce_disj_group_id_configured,json=isPceDisjGroupIdConfigured" json:"is_pce_disj_group_id_configured,omitempty"`
	// PCE Disjoint Path Source Address
	PcedpSourceAddress uint32 `protobuf:"varint,22,opt,name=pcedp_source_address,json=pcedpSourceAddress" json:"pcedp_source_address,omitempty"`
	// PCE Disjoint Path Type
	PcedpType string `protobuf:"bytes,23,opt,name=pcedp_type,json=pcedpType" json:"pcedp_type,omitempty"`
	// PCE Disjoint Path Group ID
	PcedpGroupId uint32 `protobuf:"varint,24,opt,name=pcedp_group_id,json=pcedpGroupId" json:"pcedp_group_id,omitempty"`
	// Is PCE Bidirectional Source Configured
	IsPcebDjSourceConfigured bool `protobuf:"varint,25,opt,name=is_pceb_dj_source_configured,json=isPcebDjSourceConfigured" json:"is_pceb_dj_source_configured,omitempty"`
	// Is PCE Bidirectional Group ID Configured
	IsPcebdGroupIdConfigured bool `protobuf:"varint,26,opt,name=is_pcebd_group_id_configured,json=isPcebdGroupIdConfigured" json:"is_pcebd_group_id_configured,omitempty"`
	// PCE Bidirectional Source Address
	PcebdSourceAddress uint32 `protobuf:"varint,27,opt,name=pcebd_source_address,json=pcebdSourceAddress" json:"pcebd_source_address,omitempty"`
	// PCE Bidirectional Group ID
	PcebdGroupId uint32 `protobuf:"varint,28,opt,name=pcebd_group_id,json=pcebdGroupId" json:"pcebd_group_id,omitempty"`
	// BFD reverse path
	BfdReversePath *MplsTeAttributeSetBfdRevPath `protobuf:"bytes,29,opt,name=bfd_reverse_path,json=bfdReversePath" json:"bfd_reverse_path,omitempty"`
	// Is BFD reverse path configured
	IsBfdReversePatConfigured bool     `protobuf:"varint,30,opt,name=is_bfd_reverse_pat_configured,json=isBfdReversePatConfigured" json:"is_bfd_reverse_pat_configured,omitempty"`
	XXX_NoUnkeyedLiteral      struct{} `json:"-"`
	XXX_unrecognized          []byte   `json:"-"`
	XXX_sizecache             int32    `json:"-"`
}

func (m *MplsTeAttributeSetPathOption) Reset()         { *m = MplsTeAttributeSetPathOption{} }
func (m *MplsTeAttributeSetPathOption) String() string { return proto.CompactTextString(m) }
func (*MplsTeAttributeSetPathOption) ProtoMessage()    {}
func (*MplsTeAttributeSetPathOption) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{61}
}
func (m *MplsTeAttributeSetPathOption) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeAttributeSetPathOption.Unmarshal(m, b)
}
func (m *MplsTeAttributeSetPathOption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeAttributeSetPathOption.Marshal(b, m, deterministic)
}
func (dst *MplsTeAttributeSetPathOption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeAttributeSetPathOption.Merge(dst, src)
}
func (m *MplsTeAttributeSetPathOption) XXX_Size() int {
	return xxx_messageInfo_MplsTeAttributeSetPathOption.Size(m)
}
func (m *MplsTeAttributeSetPathOption) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeAttributeSetPathOption.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeAttributeSetPathOption proto.InternalMessageInfo

func (m *MplsTeAttributeSetPathOption) GetConfiguredBandwidth() uint32 {
	if m != nil {
		return m.ConfiguredBandwidth
	}
	return 0
}

func (m *MplsTeAttributeSetPathOption) GetCostLimit() uint32 {
	if m != nil {
		return m.CostLimit
	}
	return 0
}

func (m *MplsTeAttributeSetPathOption) GetDsteClassType() uint32 {
	if m != nil {
		return m.DsteClassType
	}
	return 0
}

func (m *MplsTeAttributeSetPathOption) GetBandwidthType() string {
	if m != nil {
		return m.BandwidthType
	}
	return ""
}

func (m *MplsTeAttributeSetPathOption) GetIsBandwidthConfigured() bool {
	if m != nil {
		return m.IsBandwidthConfigured
	}
	return false
}

func (m *MplsTeAttributeSetPathOption) GetIsCostLimitConfigured() bool {
	if m != nil {
		return m.IsCostLimitConfigured
	}
	return false
}

func (m *MplsTeAttributeSetPathOption) GetAffinity() *MplsTeTunnelsAffinityInfo {
	if m != nil {
		return m.Affinity
	}
	return nil
}

func (m *MplsTeAttributeSetPathOption) GetIsAffinityConfigured() bool {
	if m != nil {
		return m.IsAffinityConfigured
	}
	return false
}

func (m *MplsTeAttributeSetPathOption) GetTunnelId() []uint32 {
	if m != nil {
		return m.TunnelId
	}
	return nil
}

func (m *MplsTeAttributeSetPathOption) GetGeneration() uint32 {
	if m != nil {
		return m.Generation
	}
	return 0
}

func (m *MplsTeAttributeSetPathOption) GetVersionInfo() []*MplsTeAttributeSetVersion {
	if m != nil {
		return m.VersionInfo
	}
	return nil
}

func (m *MplsTeAttributeSetPathOption) GetPathInvalidationTimeout() uint32 {
	if m != nil {
		return m.PathInvalidationTimeout
	}
	return 0
}

func (m *MplsTeAttributeSetPathOption) GetPathInvalidationAction() uint32 {
	if m != nil {
		return m.PathInvalidationAction
	}
	return 0
}

func (m *MplsTeAttributeSetPathOption) GetIsPathInvalidationTimeoutConfigured() bool {
	if m != nil {
		return m.IsPathInvalidationTimeoutConfigured
	}
	return false
}

func (m *MplsTeAttributeSetPathOption) GetIsPathInvalidationActionConfigured() bool {
	if m != nil {
		return m.IsPathInvalidationActionConfigured
	}
	return false
}

func (m *MplsTeAttributeSetPathOption) GetExcludeListName() string {
	if m != nil {
		return m.ExcludeListName
	}
	return ""
}

func (m *MplsTeAttributeSetPathOption) GetIsExcludeListNameConfigured() bool {
	if m != nil {
		return m.IsExcludeListNameConfigured
	}
	return false
}

func (m *MplsTeAttributeSetPathOption) GetIsPceConfigured() bool {
	if m != nil {
		return m.IsPceConfigured
	}
	return false
}

func (m *MplsTeAttributeSetPathOption) GetIsPceDisjSourceConfigured() bool {
	if m != nil {
		return m.IsPceDisjSourceConfigured
	}
	return false
}

func (m *MplsTeAttributeSetPathOption) GetIsPceDisjTypeConfigured() bool {
	if m != nil {
		return m.IsPceDisjTypeConfigured
	}
	return false
}

func (m *MplsTeAttributeSetPathOption) GetIsPceDisjGroupIdConfigured() bool {
	if m != nil {
		return m.IsPceDisjGroupIdConfigured
	}
	return false
}

func (m *MplsTeAttributeSetPathOption) GetPcedpSourceAddress() uint32 {
	if m != nil {
		return m.PcedpSourceAddress
	}
	return 0
}

func (m *MplsTeAttributeSetPathOption) GetPcedpType() string {
	if m != nil {
		return m.PcedpType
	}
	return ""
}

func (m *MplsTeAttributeSetPathOption) GetPcedpGroupId() uint32 {
	if m != nil {
		return m.PcedpGroupId
	}
	return 0
}

func (m *MplsTeAttributeSetPathOption) GetIsPcebDjSourceConfigured() bool {
	if m != nil {
		return m.IsPcebDjSourceConfigured
	}
	return false
}

func (m *MplsTeAttributeSetPathOption) GetIsPcebdGroupIdConfigured() bool {
	if m != nil {
		return m.IsPcebdGroupIdConfigured
	}
	return false
}

func (m *MplsTeAttributeSetPathOption) GetPcebdSourceAddress() uint32 {
	if m != nil {
		return m.PcebdSourceAddress
	}
	return 0
}

func (m *MplsTeAttributeSetPathOption) GetPcebdGroupId() uint32 {
	if m != nil {
		return m.PcebdGroupId
	}
	return 0
}

func (m *MplsTeAttributeSetPathOption) GetBfdReversePath() *MplsTeAttributeSetBfdRevPath {
	if m != nil {
		return m.BfdReversePath
	}
	return nil
}

func (m *MplsTeAttributeSetPathOption) GetIsBfdReversePatConfigured() bool {
	if m != nil {
		return m.IsBfdReversePatConfigured
	}
	return false
}

// TE XRO attribute set
type MplsTeAttributeSetXro struct {
	// The XRO specified by this attribute-set
	Xro                  *TeXro   `protobuf:"bytes,1,opt,name=xro" json:"xro,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeAttributeSetXro) Reset()         { *m = MplsTeAttributeSetXro{} }
func (m *MplsTeAttributeSetXro) String() string { return proto.CompactTextString(m) }
func (*MplsTeAttributeSetXro) ProtoMessage()    {}
func (*MplsTeAttributeSetXro) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{62}
}
func (m *MplsTeAttributeSetXro) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeAttributeSetXro.Unmarshal(m, b)
}
func (m *MplsTeAttributeSetXro) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeAttributeSetXro.Marshal(b, m, deterministic)
}
func (dst *MplsTeAttributeSetXro) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeAttributeSetXro.Merge(dst, src)
}
func (m *MplsTeAttributeSetXro) XXX_Size() int {
	return xxx_messageInfo_MplsTeAttributeSetXro.Size(m)
}
func (m *MplsTeAttributeSetXro) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeAttributeSetXro.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeAttributeSetXro proto.InternalMessageInfo

func (m *MplsTeAttributeSetXro) GetXro() *TeXro {
	if m != nil {
		return m.Xro
	}
	return nil
}

// TE P2MP-TE Attribute Set
type MplsTeAttributeSetP2MpTe struct {
	// Fast reroute
	FastReroute bool `protobuf:"varint,1,opt,name=fast_reroute,json=fastReroute" json:"fast_reroute,omitempty"`
	// FRR bandwidth protection
	FrrBandwidthProtection bool `protobuf:"varint,2,opt,name=frr_bandwidth_protection,json=frrBandwidthProtection" json:"frr_bandwidth_protection,omitempty"`
	// Setup priority
	SetupPriority uint32 `protobuf:"varint,3,opt,name=setup_priority,json=setupPriority" json:"setup_priority,omitempty"`
	// Hold priority
	HoldPriority uint32 `protobuf:"varint,4,opt,name=hold_priority,json=holdPriority" json:"hold_priority,omitempty"`
	// Is priority configured
	IsPriorityConfigured bool `protobuf:"varint,5,opt,name=is_priority_configured,json=isPriorityConfigured" json:"is_priority_configured,omitempty"`
	// Bandwidth value in kbps
	ConfiguredBandwidth uint32 `protobuf:"varint,6,opt,name=configured_bandwidth,json=configuredBandwidth" json:"configured_bandwidth,omitempty"`
	// DSTE Class
	DsteClassType uint32 `protobuf:"varint,7,opt,name=dste_class_type,json=dsteClassType" json:"dste_class_type,omitempty"`
	// Is bandwidth configured
	IsBandwidthConfigured bool `protobuf:"varint,8,opt,name=is_bandwidth_configured,json=isBandwidthConfigured" json:"is_bandwidth_configured,omitempty"`
	// Tunnel ID
	TunnelId []uint32 `protobuf:"varint,9,rep,packed,name=tunnel_id,json=tunnelId" json:"tunnel_id,omitempty"`
	// Affinity
	Affinity *MplsTeTunnelsAffinityInfo `protobuf:"bytes,10,opt,name=affinity" json:"affinity,omitempty"`
	// Is affinity configured
	IsAffinityConfigured bool     `protobuf:"varint,11,opt,name=is_affinity_configured,json=isAffinityConfigured" json:"is_affinity_configured,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeAttributeSetP2MpTe) Reset()         { *m = MplsTeAttributeSetP2MpTe{} }
func (m *MplsTeAttributeSetP2MpTe) String() string { return proto.CompactTextString(m) }
func (*MplsTeAttributeSetP2MpTe) ProtoMessage()    {}
func (*MplsTeAttributeSetP2MpTe) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{63}
}
func (m *MplsTeAttributeSetP2MpTe) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeAttributeSetP2MpTe.Unmarshal(m, b)
}
func (m *MplsTeAttributeSetP2MpTe) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeAttributeSetP2MpTe.Marshal(b, m, deterministic)
}
func (dst *MplsTeAttributeSetP2MpTe) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeAttributeSetP2MpTe.Merge(dst, src)
}
func (m *MplsTeAttributeSetP2MpTe) XXX_Size() int {
	return xxx_messageInfo_MplsTeAttributeSetP2MpTe.Size(m)
}
func (m *MplsTeAttributeSetP2MpTe) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeAttributeSetP2MpTe.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeAttributeSetP2MpTe proto.InternalMessageInfo

func (m *MplsTeAttributeSetP2MpTe) GetFastReroute() bool {
	if m != nil {
		return m.FastReroute
	}
	return false
}

func (m *MplsTeAttributeSetP2MpTe) GetFrrBandwidthProtection() bool {
	if m != nil {
		return m.FrrBandwidthProtection
	}
	return false
}

func (m *MplsTeAttributeSetP2MpTe) GetSetupPriority() uint32 {
	if m != nil {
		return m.SetupPriority
	}
	return 0
}

func (m *MplsTeAttributeSetP2MpTe) GetHoldPriority() uint32 {
	if m != nil {
		return m.HoldPriority
	}
	return 0
}

func (m *MplsTeAttributeSetP2MpTe) GetIsPriorityConfigured() bool {
	if m != nil {
		return m.IsPriorityConfigured
	}
	return false
}

func (m *MplsTeAttributeSetP2MpTe) GetConfiguredBandwidth() uint32 {
	if m != nil {
		return m.ConfiguredBandwidth
	}
	return 0
}

func (m *MplsTeAttributeSetP2MpTe) GetDsteClassType() uint32 {
	if m != nil {
		return m.DsteClassType
	}
	return 0
}

func (m *MplsTeAttributeSetP2MpTe) GetIsBandwidthConfigured() bool {
	if m != nil {
		return m.IsBandwidthConfigured
	}
	return false
}

func (m *MplsTeAttributeSetP2MpTe) GetTunnelId() []uint32 {
	if m != nil {
		return m.TunnelId
	}
	return nil
}

func (m *MplsTeAttributeSetP2MpTe) GetAffinity() *MplsTeTunnelsAffinityInfo {
	if m != nil {
		return m.Affinity
	}
	return nil
}

func (m *MplsTeAttributeSetP2MpTe) GetIsAffinityConfigured() bool {
	if m != nil {
		return m.IsAffinityConfigured
	}
	return false
}

// TE OTN path protection attribute set
type MplsTeAttributeSetApsPp struct {
	// Sub-network Connection Mode
	SncMode string `protobuf:"bytes,1,opt,name=snc_mode,json=sncMode" json:"snc_mode,omitempty"`
	// Sub-network Connection Monitoring Mode
	TcmId uint32 `protobuf:"varint,2,opt,name=tcm_id,json=tcmId" json:"tcm_id,omitempty"`
	// Protection Type
	ProtectionType string `protobuf:"bytes,3,opt,name=protection_type,json=protectionType" json:"protection_type,omitempty"`
	// Protection Restoration Mode
	ProtectionMode string `protobuf:"bytes,4,opt,name=protection_mode,json=protectionMode" json:"protection_mode,omitempty"`
	// Wait to restore time
	WaitToRestoreTime uint32 `protobuf:"varint,5,opt,name=wait_to_restore_time,json=waitToRestoreTime" json:"wait_to_restore_time,omitempty"`
	// Hold-off time
	HoldOffTime uint32 `protobuf:"varint,6,opt,name=hold_off_time,json=holdOffTime" json:"hold_off_time,omitempty"`
	// Revert Schedule
	RevertSchedule *TeRevertSchT `protobuf:"bytes,7,opt,name=revert_schedule,json=revertSchedule" json:"revert_schedule,omitempty"`
	// Path Protection Profile Type
	PathProtProfileType string `protobuf:"bytes,8,opt,name=path_prot_profile_type,json=pathProtProfileType" json:"path_prot_profile_type,omitempty"`
	// Restoration Style
	RestorationStyle     string   `protobuf:"bytes,9,opt,name=restoration_style,json=restorationStyle" json:"restoration_style,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeAttributeSetApsPp) Reset()         { *m = MplsTeAttributeSetApsPp{} }
func (m *MplsTeAttributeSetApsPp) String() string { return proto.CompactTextString(m) }
func (*MplsTeAttributeSetApsPp) ProtoMessage()    {}
func (*MplsTeAttributeSetApsPp) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{64}
}
func (m *MplsTeAttributeSetApsPp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeAttributeSetApsPp.Unmarshal(m, b)
}
func (m *MplsTeAttributeSetApsPp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeAttributeSetApsPp.Marshal(b, m, deterministic)
}
func (dst *MplsTeAttributeSetApsPp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeAttributeSetApsPp.Merge(dst, src)
}
func (m *MplsTeAttributeSetApsPp) XXX_Size() int {
	return xxx_messageInfo_MplsTeAttributeSetApsPp.Size(m)
}
func (m *MplsTeAttributeSetApsPp) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeAttributeSetApsPp.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeAttributeSetApsPp proto.InternalMessageInfo

func (m *MplsTeAttributeSetApsPp) GetSncMode() string {
	if m != nil {
		return m.SncMode
	}
	return ""
}

func (m *MplsTeAttributeSetApsPp) GetTcmId() uint32 {
	if m != nil {
		return m.TcmId
	}
	return 0
}

func (m *MplsTeAttributeSetApsPp) GetProtectionType() string {
	if m != nil {
		return m.ProtectionType
	}
	return ""
}

func (m *MplsTeAttributeSetApsPp) GetProtectionMode() string {
	if m != nil {
		return m.ProtectionMode
	}
	return ""
}

func (m *MplsTeAttributeSetApsPp) GetWaitToRestoreTime() uint32 {
	if m != nil {
		return m.WaitToRestoreTime
	}
	return 0
}

func (m *MplsTeAttributeSetApsPp) GetHoldOffTime() uint32 {
	if m != nil {
		return m.HoldOffTime
	}
	return 0
}

func (m *MplsTeAttributeSetApsPp) GetRevertSchedule() *TeRevertSchT {
	if m != nil {
		return m.RevertSchedule
	}
	return nil
}

func (m *MplsTeAttributeSetApsPp) GetPathProtProfileType() string {
	if m != nil {
		return m.PathProtProfileType
	}
	return ""
}

func (m *MplsTeAttributeSetApsPp) GetRestorationStyle() string {
	if m != nil {
		return m.RestorationStyle
	}
	return ""
}

// TE segment routing prepend entry
type MplsTeAttributeSetSrPrependEntry struct {
	// Prepend Type
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// Prepend index
	Index uint32 `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
	// Prepend next label
	NextLabel            uint32   `protobuf:"varint,3,opt,name=next_label,json=nextLabel" json:"next_label,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeAttributeSetSrPrependEntry) Reset()         { *m = MplsTeAttributeSetSrPrependEntry{} }
func (m *MplsTeAttributeSetSrPrependEntry) String() string { return proto.CompactTextString(m) }
func (*MplsTeAttributeSetSrPrependEntry) ProtoMessage()    {}
func (*MplsTeAttributeSetSrPrependEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{65}
}
func (m *MplsTeAttributeSetSrPrependEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeAttributeSetSrPrependEntry.Unmarshal(m, b)
}
func (m *MplsTeAttributeSetSrPrependEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeAttributeSetSrPrependEntry.Marshal(b, m, deterministic)
}
func (dst *MplsTeAttributeSetSrPrependEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeAttributeSetSrPrependEntry.Merge(dst, src)
}
func (m *MplsTeAttributeSetSrPrependEntry) XXX_Size() int {
	return xxx_messageInfo_MplsTeAttributeSetSrPrependEntry.Size(m)
}
func (m *MplsTeAttributeSetSrPrependEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeAttributeSetSrPrependEntry.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeAttributeSetSrPrependEntry proto.InternalMessageInfo

func (m *MplsTeAttributeSetSrPrependEntry) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *MplsTeAttributeSetSrPrependEntry) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *MplsTeAttributeSetSrPrependEntry) GetNextLabel() uint32 {
	if m != nil {
		return m.NextLabel
	}
	return 0
}

// TE segment routing prepend list
type MplsTeAttributeSetSrPrependList struct {
	// List of prepend entries
	PrependEntries       []*MplsTeAttributeSetSrPrependEntry `protobuf:"bytes,1,rep,name=prepend_entries,json=prependEntries" json:"prepend_entries,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *MplsTeAttributeSetSrPrependList) Reset()         { *m = MplsTeAttributeSetSrPrependList{} }
func (m *MplsTeAttributeSetSrPrependList) String() string { return proto.CompactTextString(m) }
func (*MplsTeAttributeSetSrPrependList) ProtoMessage()    {}
func (*MplsTeAttributeSetSrPrependList) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{66}
}
func (m *MplsTeAttributeSetSrPrependList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeAttributeSetSrPrependList.Unmarshal(m, b)
}
func (m *MplsTeAttributeSetSrPrependList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeAttributeSetSrPrependList.Marshal(b, m, deterministic)
}
func (dst *MplsTeAttributeSetSrPrependList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeAttributeSetSrPrependList.Merge(dst, src)
}
func (m *MplsTeAttributeSetSrPrependList) XXX_Size() int {
	return xxx_messageInfo_MplsTeAttributeSetSrPrependList.Size(m)
}
func (m *MplsTeAttributeSetSrPrependList) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeAttributeSetSrPrependList.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeAttributeSetSrPrependList proto.InternalMessageInfo

func (m *MplsTeAttributeSetSrPrependList) GetPrependEntries() []*MplsTeAttributeSetSrPrependEntry {
	if m != nil {
		return m.PrependEntries
	}
	return nil
}

// TE P2P-TE Attribute Set
type MplsTeAttributeSetP2PTe struct {
	// Tunnel ID
	TunnelId []uint32 `protobuf:"varint,1,rep,packed,name=tunnel_id,json=tunnelId" json:"tunnel_id,omitempty"`
	// Affinity
	Affinity *MplsTeTunnelsAffinityInfo `protobuf:"bytes,2,opt,name=affinity" json:"affinity,omitempty"`
	// Is affinity configured
	IsAffinityConfigured bool `protobuf:"varint,3,opt,name=is_affinity_configured,json=isAffinityConfigured" json:"is_affinity_configured,omitempty"`
	// Path selection segment-routing type
	PathSelectionSegmentRoutingAdjacencyProtection string `protobuf:"bytes,4,opt,name=path_selection_segment_routing_adjacency_protection,json=pathSelectionSegmentRoutingAdjacencyProtection" json:"path_selection_segment_routing_adjacency_protection,omitempty"`
	// Is path selection segment routing configured
	IsPathSelectionSegmentRoutingAdjacencyProtectionConfigured bool `protobuf:"varint,5,opt,name=is_path_selection_segment_routing_adjacency_protection_configured,json=isPathSelectionSegmentRoutingAdjacencyProtectionConfigured" json:"is_path_selection_segment_routing_adjacency_protection_configured,omitempty"`
	// Path invalidation timeout on the tunnel path
	PathInvalidationTimeout uint32 `protobuf:"varint,6,opt,name=path_invalidation_timeout,json=pathInvalidationTimeout" json:"path_invalidation_timeout,omitempty"`
	// Path invalidation action
	PathSelectionInvalidationAction string `protobuf:"bytes,7,opt,name=path_selection_invalidation_action,json=pathSelectionInvalidationAction" json:"path_selection_invalidation_action,omitempty"`
	// Is Path Invalidation timeout configured
	IsPathInvalidationTimeoutConfigured bool `protobuf:"varint,8,opt,name=is_path_invalidation_timeout_configured,json=isPathInvalidationTimeoutConfigured" json:"is_path_invalidation_timeout_configured,omitempty"`
	// Is Path Invalidation action configured
	IsPathInvalidationActionConfigured bool `protobuf:"varint,9,opt,name=is_path_invalidation_action_configured,json=isPathInvalidationActionConfigured" json:"is_path_invalidation_action_configured,omitempty"`
	// Path selection metric type
	PathSelectionMetric string `protobuf:"bytes,10,opt,name=path_selection_metric,json=pathSelectionMetric" json:"path_selection_metric,omitempty"`
	// Is path selection metric configured
	IsPathSelectionMetricConfigured bool `protobuf:"varint,11,opt,name=is_path_selection_metric_configured,json=isPathSelectionMetricConfigured" json:"is_path_selection_metric_configured,omitempty"`
	// Path selection margin
	PathSelectionSegmentRoutingMargin uint32 `protobuf:"varint,12,opt,name=path_selection_segment_routing_margin,json=pathSelectionSegmentRoutingMargin" json:"path_selection_segment_routing_margin,omitempty"`
	// Path selection margin is_relative
	IsPathSelectionSegmentRoutingMarginRelative bool `protobuf:"varint,13,opt,name=is_path_selection_segment_routing_margin_relative,json=isPathSelectionSegmentRoutingMarginRelative" json:"is_path_selection_segment_routing_margin_relative,omitempty"`
	// Is path selection margin configured
	IsPathSelectionSegmentRoutingMarginConfigured bool `protobuf:"varint,14,opt,name=is_path_selection_segment_routing_margin_configured,json=isPathSelectionSegmentRoutingMarginConfigured" json:"is_path_selection_segment_routing_margin_configured,omitempty"`
	// Is path selection segment limit configured
	PathSelectionSegmentRoutingSegmentLimit uint32 `protobuf:"varint,15,opt,name=path_selection_segment_routing_segment_limit,json=pathSelectionSegmentRoutingSegmentLimit" json:"path_selection_segment_routing_segment_limit,omitempty"`
	// Is path selection segment limit configured
	IsPathSelectionSegmentRoutingSegmentLimitConfigured bool `protobuf:"varint,16,opt,name=is_path_selection_segment_routing_segment_limit_configured,json=isPathSelectionSegmentRoutingSegmentLimitConfigured" json:"is_path_selection_segment_routing_segment_limit_configured,omitempty"`
	// Is any of the path selection parameters configured
	IsPathSelectConfigured bool `protobuf:"varint,17,opt,name=is_path_select_configured,json=isPathSelectConfigured" json:"is_path_select_configured,omitempty"`
	// Logging attributes
	Logging *MplsTeLoggingAttributes `protobuf:"bytes,18,opt,name=logging" json:"logging,omitempty"`
	// SR prepend list
	PrependList *MplsTeAttributeSetSrPrependList `protobuf:"bytes,19,opt,name=prepend_list,json=prependList" json:"prepend_list,omitempty"`
	// Is SR prepend list configured
	IsPrependListConfigured bool `protobuf:"varint,20,opt,name=is_prepend_list_configured,json=isPrependListConfigured" json:"is_prepend_list_configured,omitempty"`
	// Is PCE Configured
	IsPceConfigured bool `protobuf:"varint,21,opt,name=is_pce_configured,json=isPceConfigured" json:"is_pce_configured,omitempty"`
	// Is PCE Disjoint Path Source Configured
	IsPceDisjSourceConfigured bool `protobuf:"varint,22,opt,name=is_pce_disj_source_configured,json=isPceDisjSourceConfigured" json:"is_pce_disj_source_configured,omitempty"`
	// Is PCE Disjoint Path Type Configured
	IsPceDisjTypeConfigured bool `protobuf:"varint,23,opt,name=is_pce_disj_type_configured,json=isPceDisjTypeConfigured" json:"is_pce_disj_type_configured,omitempty"`
	// Is PCE Disjoint Path Group ID Configured
	IsPceDisjGroupIdConfigured bool `protobuf:"varint,24,opt,name=is_pce_disj_group_id_configured,json=isPceDisjGroupIdConfigured" json:"is_pce_disj_group_id_configured,omitempty"`
	// PCE Disjoint Path Source Address
	PcedpSourceAddress uint32 `protobuf:"varint,25,opt,name=pcedp_source_address,json=pcedpSourceAddress" json:"pcedp_source_address,omitempty"`
	// PCE Disjoint Path Type
	PcedpType string `protobuf:"bytes,26,opt,name=pcedp_type,json=pcedpType" json:"pcedp_type,omitempty"`
	// PCE Disjoint Path Group ID
	PcedpGroupId uint32 `protobuf:"varint,27,opt,name=pcedp_group_id,json=pcedpGroupId" json:"pcedp_group_id,omitempty"`
	// Is PCE Bidirectional Source Configured
	IsPcebDjSourceConfigured bool `protobuf:"varint,28,opt,name=is_pceb_dj_source_configured,json=isPcebDjSourceConfigured" json:"is_pceb_dj_source_configured,omitempty"`
	// Is PCE Bidirectional Group ID Configured
	IsPcebdGroupIdConfigured bool `protobuf:"varint,29,opt,name=is_pcebd_group_id_configured,json=isPcebdGroupIdConfigured" json:"is_pcebd_group_id_configured,omitempty"`
	// PCE Bidirectional Source Address
	PcebdSourceAddress uint32 `protobuf:"varint,30,opt,name=pcebd_source_address,json=pcebdSourceAddress" json:"pcebd_source_address,omitempty"`
	// PCE Bidirectional Group ID
	PcebdGroupId         uint32   `protobuf:"varint,31,opt,name=pcebd_group_id,json=pcebdGroupId" json:"pcebd_group_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeAttributeSetP2PTe) Reset()         { *m = MplsTeAttributeSetP2PTe{} }
func (m *MplsTeAttributeSetP2PTe) String() string { return proto.CompactTextString(m) }
func (*MplsTeAttributeSetP2PTe) ProtoMessage()    {}
func (*MplsTeAttributeSetP2PTe) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{67}
}
func (m *MplsTeAttributeSetP2PTe) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeAttributeSetP2PTe.Unmarshal(m, b)
}
func (m *MplsTeAttributeSetP2PTe) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeAttributeSetP2PTe.Marshal(b, m, deterministic)
}
func (dst *MplsTeAttributeSetP2PTe) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeAttributeSetP2PTe.Merge(dst, src)
}
func (m *MplsTeAttributeSetP2PTe) XXX_Size() int {
	return xxx_messageInfo_MplsTeAttributeSetP2PTe.Size(m)
}
func (m *MplsTeAttributeSetP2PTe) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeAttributeSetP2PTe.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeAttributeSetP2PTe proto.InternalMessageInfo

func (m *MplsTeAttributeSetP2PTe) GetTunnelId() []uint32 {
	if m != nil {
		return m.TunnelId
	}
	return nil
}

func (m *MplsTeAttributeSetP2PTe) GetAffinity() *MplsTeTunnelsAffinityInfo {
	if m != nil {
		return m.Affinity
	}
	return nil
}

func (m *MplsTeAttributeSetP2PTe) GetIsAffinityConfigured() bool {
	if m != nil {
		return m.IsAffinityConfigured
	}
	return false
}

func (m *MplsTeAttributeSetP2PTe) GetPathSelectionSegmentRoutingAdjacencyProtection() string {
	if m != nil {
		return m.PathSelectionSegmentRoutingAdjacencyProtection
	}
	return ""
}

func (m *MplsTeAttributeSetP2PTe) GetIsPathSelectionSegmentRoutingAdjacencyProtectionConfigured() bool {
	if m != nil {
		return m.IsPathSelectionSegmentRoutingAdjacencyProtectionConfigured
	}
	return false
}

func (m *MplsTeAttributeSetP2PTe) GetPathInvalidationTimeout() uint32 {
	if m != nil {
		return m.PathInvalidationTimeout
	}
	return 0
}

func (m *MplsTeAttributeSetP2PTe) GetPathSelectionInvalidationAction() string {
	if m != nil {
		return m.PathSelectionInvalidationAction
	}
	return ""
}

func (m *MplsTeAttributeSetP2PTe) GetIsPathInvalidationTimeoutConfigured() bool {
	if m != nil {
		return m.IsPathInvalidationTimeoutConfigured
	}
	return false
}

func (m *MplsTeAttributeSetP2PTe) GetIsPathInvalidationActionConfigured() bool {
	if m != nil {
		return m.IsPathInvalidationActionConfigured
	}
	return false
}

func (m *MplsTeAttributeSetP2PTe) GetPathSelectionMetric() string {
	if m != nil {
		return m.PathSelectionMetric
	}
	return ""
}

func (m *MplsTeAttributeSetP2PTe) GetIsPathSelectionMetricConfigured() bool {
	if m != nil {
		return m.IsPathSelectionMetricConfigured
	}
	return false
}

func (m *MplsTeAttributeSetP2PTe) GetPathSelectionSegmentRoutingMargin() uint32 {
	if m != nil {
		return m.PathSelectionSegmentRoutingMargin
	}
	return 0
}

func (m *MplsTeAttributeSetP2PTe) GetIsPathSelectionSegmentRoutingMarginRelative() bool {
	if m != nil {
		return m.IsPathSelectionSegmentRoutingMarginRelative
	}
	return false
}

func (m *MplsTeAttributeSetP2PTe) GetIsPathSelectionSegmentRoutingMarginConfigured() bool {
	if m != nil {
		return m.IsPathSelectionSegmentRoutingMarginConfigured
	}
	return false
}

func (m *MplsTeAttributeSetP2PTe) GetPathSelectionSegmentRoutingSegmentLimit() uint32 {
	if m != nil {
		return m.PathSelectionSegmentRoutingSegmentLimit
	}
	return 0
}

func (m *MplsTeAttributeSetP2PTe) GetIsPathSelectionSegmentRoutingSegmentLimitConfigured() bool {
	if m != nil {
		return m.IsPathSelectionSegmentRoutingSegmentLimitConfigured
	}
	return false
}

func (m *MplsTeAttributeSetP2PTe) GetIsPathSelectConfigured() bool {
	if m != nil {
		return m.IsPathSelectConfigured
	}
	return false
}

func (m *MplsTeAttributeSetP2PTe) GetLogging() *MplsTeLoggingAttributes {
	if m != nil {
		return m.Logging
	}
	return nil
}

func (m *MplsTeAttributeSetP2PTe) GetPrependList() *MplsTeAttributeSetSrPrependList {
	if m != nil {
		return m.PrependList
	}
	return nil
}

func (m *MplsTeAttributeSetP2PTe) GetIsPrependListConfigured() bool {
	if m != nil {
		return m.IsPrependListConfigured
	}
	return false
}

func (m *MplsTeAttributeSetP2PTe) GetIsPceConfigured() bool {
	if m != nil {
		return m.IsPceConfigured
	}
	return false
}

func (m *MplsTeAttributeSetP2PTe) GetIsPceDisjSourceConfigured() bool {
	if m != nil {
		return m.IsPceDisjSourceConfigured
	}
	return false
}

func (m *MplsTeAttributeSetP2PTe) GetIsPceDisjTypeConfigured() bool {
	if m != nil {
		return m.IsPceDisjTypeConfigured
	}
	return false
}

func (m *MplsTeAttributeSetP2PTe) GetIsPceDisjGroupIdConfigured() bool {
	if m != nil {
		return m.IsPceDisjGroupIdConfigured
	}
	return false
}

func (m *MplsTeAttributeSetP2PTe) GetPcedpSourceAddress() uint32 {
	if m != nil {
		return m.PcedpSourceAddress
	}
	return 0
}

func (m *MplsTeAttributeSetP2PTe) GetPcedpType() string {
	if m != nil {
		return m.PcedpType
	}
	return ""
}

func (m *MplsTeAttributeSetP2PTe) GetPcedpGroupId() uint32 {
	if m != nil {
		return m.PcedpGroupId
	}
	return 0
}

func (m *MplsTeAttributeSetP2PTe) GetIsPcebDjSourceConfigured() bool {
	if m != nil {
		return m.IsPcebDjSourceConfigured
	}
	return false
}

func (m *MplsTeAttributeSetP2PTe) GetIsPcebdGroupIdConfigured() bool {
	if m != nil {
		return m.IsPcebdGroupIdConfigured
	}
	return false
}

func (m *MplsTeAttributeSetP2PTe) GetPcebdSourceAddress() uint32 {
	if m != nil {
		return m.PcebdSourceAddress
	}
	return 0
}

func (m *MplsTeAttributeSetP2PTe) GetPcebdGroupId() uint32 {
	if m != nil {
		return m.PcebdGroupId
	}
	return 0
}

// TE Attribute Set Union
type MplsTeAttributeSetUnion struct {
	TunnelAttributeSetType string `protobuf:"bytes,1,opt,name=tunnel_attribute_set_type,json=tunnelAttributeSetType" json:"tunnel_attribute_set_type,omitempty"`
	// MPLS TE Path Option Attribute Set
	AttributeSetPathOption *MplsTeAttributeSetPathOption `protobuf:"bytes,2,opt,name=attribute_set_path_option,json=attributeSetPathOption" json:"attribute_set_path_option,omitempty"`
	// MPLS TE Auto-backup Attribute Set
	AttributeSetAutobackup *MplsTeAttributeSetAutoBackup `protobuf:"bytes,3,opt,name=attribute_set_autobackup,json=attributeSetAutobackup" json:"attribute_set_autobackup,omitempty"`
	// MPLS TE Auto-mesh Attribute Set
	AttributeSetAutomesh *MplsTeAttributeSetAutoMesh `protobuf:"bytes,4,opt,name=attribute_set_automesh,json=attributeSetAutomesh" json:"attribute_set_automesh,omitempty"`
	// Attribute Set XRO
	AttributeSetXro *MplsTeAttributeSetXro `protobuf:"bytes,5,opt,name=attribute_set_xro,json=attributeSetXro" json:"attribute_set_xro,omitempty"`
	// MPLS TE P2MP-TE Attribute Set
	AttributeSetP2Mpte *MplsTeAttributeSetP2MpTe `protobuf:"bytes,6,opt,name=attribute_set_p2_mpte,json=attributeSetP2Mpte" json:"attribute_set_p2_mpte,omitempty"`
	// Attribute Set OTN APS Path Protection
	AttributeSetApsPp *MplsTeAttributeSetApsPp `protobuf:"bytes,7,opt,name=attribute_set_aps_pp,json=attributeSetApsPp" json:"attribute_set_aps_pp,omitempty"`
	// MPLS TE P2P-TE Attribute Set
	AttributeSetP2PTe    *MplsTeAttributeSetP2PTe `protobuf:"bytes,8,opt,name=attribute_set_p2_p_te,json=attributeSetP2PTe" json:"attribute_set_p2_p_te,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *MplsTeAttributeSetUnion) Reset()         { *m = MplsTeAttributeSetUnion{} }
func (m *MplsTeAttributeSetUnion) String() string { return proto.CompactTextString(m) }
func (*MplsTeAttributeSetUnion) ProtoMessage()    {}
func (*MplsTeAttributeSetUnion) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{68}
}
func (m *MplsTeAttributeSetUnion) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeAttributeSetUnion.Unmarshal(m, b)
}
func (m *MplsTeAttributeSetUnion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeAttributeSetUnion.Marshal(b, m, deterministic)
}
func (dst *MplsTeAttributeSetUnion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeAttributeSetUnion.Merge(dst, src)
}
func (m *MplsTeAttributeSetUnion) XXX_Size() int {
	return xxx_messageInfo_MplsTeAttributeSetUnion.Size(m)
}
func (m *MplsTeAttributeSetUnion) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeAttributeSetUnion.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeAttributeSetUnion proto.InternalMessageInfo

func (m *MplsTeAttributeSetUnion) GetTunnelAttributeSetType() string {
	if m != nil {
		return m.TunnelAttributeSetType
	}
	return ""
}

func (m *MplsTeAttributeSetUnion) GetAttributeSetPathOption() *MplsTeAttributeSetPathOption {
	if m != nil {
		return m.AttributeSetPathOption
	}
	return nil
}

func (m *MplsTeAttributeSetUnion) GetAttributeSetAutobackup() *MplsTeAttributeSetAutoBackup {
	if m != nil {
		return m.AttributeSetAutobackup
	}
	return nil
}

func (m *MplsTeAttributeSetUnion) GetAttributeSetAutomesh() *MplsTeAttributeSetAutoMesh {
	if m != nil {
		return m.AttributeSetAutomesh
	}
	return nil
}

func (m *MplsTeAttributeSetUnion) GetAttributeSetXro() *MplsTeAttributeSetXro {
	if m != nil {
		return m.AttributeSetXro
	}
	return nil
}

func (m *MplsTeAttributeSetUnion) GetAttributeSetP2Mpte() *MplsTeAttributeSetP2MpTe {
	if m != nil {
		return m.AttributeSetP2Mpte
	}
	return nil
}

func (m *MplsTeAttributeSetUnion) GetAttributeSetApsPp() *MplsTeAttributeSetApsPp {
	if m != nil {
		return m.AttributeSetApsPp
	}
	return nil
}

func (m *MplsTeAttributeSetUnion) GetAttributeSetP2PTe() *MplsTeAttributeSetP2PTe {
	if m != nil {
		return m.AttributeSetP2PTe
	}
	return nil
}

// TE Attribute Set
type MplsTeAttributeSet struct {
	// Attribute Set Name
	TunnelAttributeSetName string `protobuf:"bytes,1,opt,name=tunnel_attribute_set_name,json=tunnelAttributeSetName" json:"tunnel_attribute_set_name,omitempty"`
	// Attribute Set name CRC32 value
	TunnelAttributeSetNameCrc32 uint32 `protobuf:"varint,2,opt,name=tunnel_attribute_set_name_crc32,json=tunnelAttributeSetNameCrc32" json:"tunnel_attribute_set_name_crc32,omitempty"`
	// Union of Attribute Sets
	AttributeSetUnion    *MplsTeAttributeSetUnion `protobuf:"bytes,3,opt,name=attribute_set_union,json=attributeSetUnion" json:"attribute_set_union,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *MplsTeAttributeSet) Reset()         { *m = MplsTeAttributeSet{} }
func (m *MplsTeAttributeSet) String() string { return proto.CompactTextString(m) }
func (*MplsTeAttributeSet) ProtoMessage()    {}
func (*MplsTeAttributeSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{69}
}
func (m *MplsTeAttributeSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeAttributeSet.Unmarshal(m, b)
}
func (m *MplsTeAttributeSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeAttributeSet.Marshal(b, m, deterministic)
}
func (dst *MplsTeAttributeSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeAttributeSet.Merge(dst, src)
}
func (m *MplsTeAttributeSet) XXX_Size() int {
	return xxx_messageInfo_MplsTeAttributeSet.Size(m)
}
func (m *MplsTeAttributeSet) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeAttributeSet.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeAttributeSet proto.InternalMessageInfo

func (m *MplsTeAttributeSet) GetTunnelAttributeSetName() string {
	if m != nil {
		return m.TunnelAttributeSetName
	}
	return ""
}

func (m *MplsTeAttributeSet) GetTunnelAttributeSetNameCrc32() uint32 {
	if m != nil {
		return m.TunnelAttributeSetNameCrc32
	}
	return 0
}

func (m *MplsTeAttributeSet) GetAttributeSetUnion() *MplsTeAttributeSetUnion {
	if m != nil {
		return m.AttributeSetUnion
	}
	return nil
}

// GMPLS WDM fixed-grid Label
type MplsTeMgmtWdmFixedGridLabel struct {
	// Flag to indicate whether label is set
	LabelSet bool `protobuf:"varint,1,opt,name=label_set,json=labelSet" json:"label_set,omitempty"`
	// Grid
	Grid string `protobuf:"bytes,2,opt,name=grid" json:"grid,omitempty"`
	// Channel spacing
	ChannelSpacing string `protobuf:"bytes,3,opt,name=channel_spacing,json=channelSpacing" json:"channel_spacing,omitempty"`
	// Identifier
	Identifier uint32 `protobuf:"varint,4,opt,name=identifier" json:"identifier,omitempty"`
	// Channel Number
	Channel              int32    `protobuf:"zigzag32,5,opt,name=channel" json:"channel,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeMgmtWdmFixedGridLabel) Reset()         { *m = MplsTeMgmtWdmFixedGridLabel{} }
func (m *MplsTeMgmtWdmFixedGridLabel) String() string { return proto.CompactTextString(m) }
func (*MplsTeMgmtWdmFixedGridLabel) ProtoMessage()    {}
func (*MplsTeMgmtWdmFixedGridLabel) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{70}
}
func (m *MplsTeMgmtWdmFixedGridLabel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeMgmtWdmFixedGridLabel.Unmarshal(m, b)
}
func (m *MplsTeMgmtWdmFixedGridLabel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeMgmtWdmFixedGridLabel.Marshal(b, m, deterministic)
}
func (dst *MplsTeMgmtWdmFixedGridLabel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeMgmtWdmFixedGridLabel.Merge(dst, src)
}
func (m *MplsTeMgmtWdmFixedGridLabel) XXX_Size() int {
	return xxx_messageInfo_MplsTeMgmtWdmFixedGridLabel.Size(m)
}
func (m *MplsTeMgmtWdmFixedGridLabel) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeMgmtWdmFixedGridLabel.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeMgmtWdmFixedGridLabel proto.InternalMessageInfo

func (m *MplsTeMgmtWdmFixedGridLabel) GetLabelSet() bool {
	if m != nil {
		return m.LabelSet
	}
	return false
}

func (m *MplsTeMgmtWdmFixedGridLabel) GetGrid() string {
	if m != nil {
		return m.Grid
	}
	return ""
}

func (m *MplsTeMgmtWdmFixedGridLabel) GetChannelSpacing() string {
	if m != nil {
		return m.ChannelSpacing
	}
	return ""
}

func (m *MplsTeMgmtWdmFixedGridLabel) GetIdentifier() uint32 {
	if m != nil {
		return m.Identifier
	}
	return 0
}

func (m *MplsTeMgmtWdmFixedGridLabel) GetChannel() int32 {
	if m != nil {
		return m.Channel
	}
	return 0
}

// GMPLS G709 OTN fixed-size Label
type MplsTeMgmtG709OtnFixedSizeLabel struct {
	// Tributary time slot
	Tpn uint32 `protobuf:"varint,1,opt,name=tpn" json:"tpn,omitempty"`
	// Bit map length
	BitMapLength uint32 `protobuf:"varint,2,opt,name=bit_map_length,json=bitMapLength" json:"bit_map_length,omitempty"`
	// Bit Map
	BitMap               []uint32 `protobuf:"varint,3,rep,packed,name=bit_map,json=bitMap" json:"bit_map,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeMgmtG709OtnFixedSizeLabel) Reset()         { *m = MplsTeMgmtG709OtnFixedSizeLabel{} }
func (m *MplsTeMgmtG709OtnFixedSizeLabel) String() string { return proto.CompactTextString(m) }
func (*MplsTeMgmtG709OtnFixedSizeLabel) ProtoMessage()    {}
func (*MplsTeMgmtG709OtnFixedSizeLabel) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{71}
}
func (m *MplsTeMgmtG709OtnFixedSizeLabel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeMgmtG709OtnFixedSizeLabel.Unmarshal(m, b)
}
func (m *MplsTeMgmtG709OtnFixedSizeLabel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeMgmtG709OtnFixedSizeLabel.Marshal(b, m, deterministic)
}
func (dst *MplsTeMgmtG709OtnFixedSizeLabel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeMgmtG709OtnFixedSizeLabel.Merge(dst, src)
}
func (m *MplsTeMgmtG709OtnFixedSizeLabel) XXX_Size() int {
	return xxx_messageInfo_MplsTeMgmtG709OtnFixedSizeLabel.Size(m)
}
func (m *MplsTeMgmtG709OtnFixedSizeLabel) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeMgmtG709OtnFixedSizeLabel.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeMgmtG709OtnFixedSizeLabel proto.InternalMessageInfo

func (m *MplsTeMgmtG709OtnFixedSizeLabel) GetTpn() uint32 {
	if m != nil {
		return m.Tpn
	}
	return 0
}

func (m *MplsTeMgmtG709OtnFixedSizeLabel) GetBitMapLength() uint32 {
	if m != nil {
		return m.BitMapLength
	}
	return 0
}

func (m *MplsTeMgmtG709OtnFixedSizeLabel) GetBitMap() []uint32 {
	if m != nil {
		return m.BitMap
	}
	return nil
}

// A GMPLS label
type MplsTeMgmtGmplsLabel struct {
	LabelType string `protobuf:"bytes,1,opt,name=label_type,json=labelType" json:"label_type,omitempty"`
	// Fixed-grid WDM label
	Wdm *MplsTeMgmtWdmFixedGridLabel `protobuf:"bytes,2,opt,name=wdm" json:"wdm,omitempty"`
	// Fixed-size G09 OTN label
	Otn                  *MplsTeMgmtG709OtnFixedSizeLabel `protobuf:"bytes,3,opt,name=otn" json:"otn,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *MplsTeMgmtGmplsLabel) Reset()         { *m = MplsTeMgmtGmplsLabel{} }
func (m *MplsTeMgmtGmplsLabel) String() string { return proto.CompactTextString(m) }
func (*MplsTeMgmtGmplsLabel) ProtoMessage()    {}
func (*MplsTeMgmtGmplsLabel) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{72}
}
func (m *MplsTeMgmtGmplsLabel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeMgmtGmplsLabel.Unmarshal(m, b)
}
func (m *MplsTeMgmtGmplsLabel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeMgmtGmplsLabel.Marshal(b, m, deterministic)
}
func (dst *MplsTeMgmtGmplsLabel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeMgmtGmplsLabel.Merge(dst, src)
}
func (m *MplsTeMgmtGmplsLabel) XXX_Size() int {
	return xxx_messageInfo_MplsTeMgmtGmplsLabel.Size(m)
}
func (m *MplsTeMgmtGmplsLabel) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeMgmtGmplsLabel.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeMgmtGmplsLabel proto.InternalMessageInfo

func (m *MplsTeMgmtGmplsLabel) GetLabelType() string {
	if m != nil {
		return m.LabelType
	}
	return ""
}

func (m *MplsTeMgmtGmplsLabel) GetWdm() *MplsTeMgmtWdmFixedGridLabel {
	if m != nil {
		return m.Wdm
	}
	return nil
}

func (m *MplsTeMgmtGmplsLabel) GetOtn() *MplsTeMgmtG709OtnFixedSizeLabel {
	if m != nil {
		return m.Otn
	}
	return nil
}

// GMPLS Labels
type MplsTeMgmtGmplsLabels struct {
	// Path message (upstream) ingress label
	PathIngressLabel *MplsTeMgmtGmplsLabel `protobuf:"bytes,1,opt,name=path_ingress_label,json=pathIngressLabel" json:"path_ingress_label,omitempty"`
	// Path message (upstream) egress label
	PathEgressLabel *MplsTeMgmtGmplsLabel `protobuf:"bytes,2,opt,name=path_egress_label,json=pathEgressLabel" json:"path_egress_label,omitempty"`
	// Resv message (downstream) ingress label
	ResvIngressLabel *MplsTeMgmtGmplsLabel `protobuf:"bytes,3,opt,name=resv_ingress_label,json=resvIngressLabel" json:"resv_ingress_label,omitempty"`
	// Resv message (downstream) egress label
	ResvEgressLabel      *MplsTeMgmtGmplsLabel `protobuf:"bytes,4,opt,name=resv_egress_label,json=resvEgressLabel" json:"resv_egress_label,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *MplsTeMgmtGmplsLabels) Reset()         { *m = MplsTeMgmtGmplsLabels{} }
func (m *MplsTeMgmtGmplsLabels) String() string { return proto.CompactTextString(m) }
func (*MplsTeMgmtGmplsLabels) ProtoMessage()    {}
func (*MplsTeMgmtGmplsLabels) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{73}
}
func (m *MplsTeMgmtGmplsLabels) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeMgmtGmplsLabels.Unmarshal(m, b)
}
func (m *MplsTeMgmtGmplsLabels) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeMgmtGmplsLabels.Marshal(b, m, deterministic)
}
func (dst *MplsTeMgmtGmplsLabels) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeMgmtGmplsLabels.Merge(dst, src)
}
func (m *MplsTeMgmtGmplsLabels) XXX_Size() int {
	return xxx_messageInfo_MplsTeMgmtGmplsLabels.Size(m)
}
func (m *MplsTeMgmtGmplsLabels) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeMgmtGmplsLabels.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeMgmtGmplsLabels proto.InternalMessageInfo

func (m *MplsTeMgmtGmplsLabels) GetPathIngressLabel() *MplsTeMgmtGmplsLabel {
	if m != nil {
		return m.PathIngressLabel
	}
	return nil
}

func (m *MplsTeMgmtGmplsLabels) GetPathEgressLabel() *MplsTeMgmtGmplsLabel {
	if m != nil {
		return m.PathEgressLabel
	}
	return nil
}

func (m *MplsTeMgmtGmplsLabels) GetResvIngressLabel() *MplsTeMgmtGmplsLabel {
	if m != nil {
		return m.ResvIngressLabel
	}
	return nil
}

func (m *MplsTeMgmtGmplsLabels) GetResvEgressLabel() *MplsTeMgmtGmplsLabel {
	if m != nil {
		return m.ResvEgressLabel
	}
	return nil
}

// OTN S2L's Controllers' information
type MplsTeS2LOtnInfo struct {
	// Incoming Controller
	IncomingController string `protobuf:"bytes,1,opt,name=incoming_controller,json=incomingController" json:"incoming_controller,omitempty"`
	// State of Incoming Controller
	IncomingControllerState string `protobuf:"bytes,2,opt,name=incoming_controller_state,json=incomingControllerState" json:"incoming_controller_state,omitempty"`
	// Incoming Sub Controller
	IncomingSubController string `protobuf:"bytes,3,opt,name=incoming_sub_controller,json=incomingSubController" json:"incoming_sub_controller,omitempty"`
	// State of Incoming Sub Controller
	IncomingSubControllerState string `protobuf:"bytes,4,opt,name=incoming_sub_controller_state,json=incomingSubControllerState" json:"incoming_sub_controller_state,omitempty"`
	// Outgoing Controller
	OutgoingController string `protobuf:"bytes,5,opt,name=outgoing_controller,json=outgoingController" json:"outgoing_controller,omitempty"`
	// State of Outgoing Controller
	OutgoingControllerState string `protobuf:"bytes,6,opt,name=outgoing_controller_state,json=outgoingControllerState" json:"outgoing_controller_state,omitempty"`
	// Outgoing Sub Controller
	OutgoingSubController string `protobuf:"bytes,7,opt,name=outgoing_sub_controller,json=outgoingSubController" json:"outgoing_sub_controller,omitempty"`
	// State of Outgoing Sub Controller
	OutgoingSubControllerState string `protobuf:"bytes,8,opt,name=outgoing_sub_controller_state,json=outgoingSubControllerState" json:"outgoing_sub_controller_state,omitempty"`
	// OTN Bandwidth for s2l
	Bandwidth *TeOduV3Bw `protobuf:"bytes,9,opt,name=bandwidth" json:"bandwidth,omitempty"`
	// Labels
	Labels *MplsTeMgmtGmplsLabels `protobuf:"bytes,10,opt,name=labels" json:"labels,omitempty"`
	// Cross connect id
	CrossConnectId uint32 `protobuf:"varint,11,opt,name=cross_connect_id,json=crossConnectId" json:"cross_connect_id,omitempty"`
	// True if subcontrollers are connected
	IsConnected bool `protobuf:"varint,12,opt,name=is_connected,json=isConnected" json:"is_connected,omitempty"`
	// XC Uptime
	Uptime uint32 `protobuf:"varint,13,opt,name=uptime" json:"uptime,omitempty"`
	// Outgoing Controller Ifhandle
	OutgoingControllerIfhandle string `protobuf:"bytes,14,opt,name=outgoing_controller_ifhandle,json=outgoingControllerIfhandle" json:"outgoing_controller_ifhandle,omitempty"`
	// Outgoing Sub Controller Ifhandle
	OutgoingSubControllerIfhandle string `protobuf:"bytes,15,opt,name=outgoing_sub_controller_ifhandle,json=outgoingSubControllerIfhandle" json:"outgoing_sub_controller_ifhandle,omitempty"`
	// Incoming Controller Ifhandle
	IncomingControllerIfhandle string `protobuf:"bytes,16,opt,name=incoming_controller_ifhandle,json=incomingControllerIfhandle" json:"incoming_controller_ifhandle,omitempty"`
	// Incoming Sub Controller Ifhandle
	IncomingSubControllerIfhandle string `protobuf:"bytes,17,opt,name=incoming_sub_controller_ifhandle,json=incomingSubControllerIfhandle" json:"incoming_sub_controller_ifhandle,omitempty"`
	// Gpid Payload
	Gpid                 uint32   `protobuf:"varint,18,opt,name=gpid" json:"gpid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeS2LOtnInfo) Reset()         { *m = MplsTeS2LOtnInfo{} }
func (m *MplsTeS2LOtnInfo) String() string { return proto.CompactTextString(m) }
func (*MplsTeS2LOtnInfo) ProtoMessage()    {}
func (*MplsTeS2LOtnInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{74}
}
func (m *MplsTeS2LOtnInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeS2LOtnInfo.Unmarshal(m, b)
}
func (m *MplsTeS2LOtnInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeS2LOtnInfo.Marshal(b, m, deterministic)
}
func (dst *MplsTeS2LOtnInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeS2LOtnInfo.Merge(dst, src)
}
func (m *MplsTeS2LOtnInfo) XXX_Size() int {
	return xxx_messageInfo_MplsTeS2LOtnInfo.Size(m)
}
func (m *MplsTeS2LOtnInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeS2LOtnInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeS2LOtnInfo proto.InternalMessageInfo

func (m *MplsTeS2LOtnInfo) GetIncomingController() string {
	if m != nil {
		return m.IncomingController
	}
	return ""
}

func (m *MplsTeS2LOtnInfo) GetIncomingControllerState() string {
	if m != nil {
		return m.IncomingControllerState
	}
	return ""
}

func (m *MplsTeS2LOtnInfo) GetIncomingSubController() string {
	if m != nil {
		return m.IncomingSubController
	}
	return ""
}

func (m *MplsTeS2LOtnInfo) GetIncomingSubControllerState() string {
	if m != nil {
		return m.IncomingSubControllerState
	}
	return ""
}

func (m *MplsTeS2LOtnInfo) GetOutgoingController() string {
	if m != nil {
		return m.OutgoingController
	}
	return ""
}

func (m *MplsTeS2LOtnInfo) GetOutgoingControllerState() string {
	if m != nil {
		return m.OutgoingControllerState
	}
	return ""
}

func (m *MplsTeS2LOtnInfo) GetOutgoingSubController() string {
	if m != nil {
		return m.OutgoingSubController
	}
	return ""
}

func (m *MplsTeS2LOtnInfo) GetOutgoingSubControllerState() string {
	if m != nil {
		return m.OutgoingSubControllerState
	}
	return ""
}

func (m *MplsTeS2LOtnInfo) GetBandwidth() *TeOduV3Bw {
	if m != nil {
		return m.Bandwidth
	}
	return nil
}

func (m *MplsTeS2LOtnInfo) GetLabels() *MplsTeMgmtGmplsLabels {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *MplsTeS2LOtnInfo) GetCrossConnectId() uint32 {
	if m != nil {
		return m.CrossConnectId
	}
	return 0
}

func (m *MplsTeS2LOtnInfo) GetIsConnected() bool {
	if m != nil {
		return m.IsConnected
	}
	return false
}

func (m *MplsTeS2LOtnInfo) GetUptime() uint32 {
	if m != nil {
		return m.Uptime
	}
	return 0
}

func (m *MplsTeS2LOtnInfo) GetOutgoingControllerIfhandle() string {
	if m != nil {
		return m.OutgoingControllerIfhandle
	}
	return ""
}

func (m *MplsTeS2LOtnInfo) GetOutgoingSubControllerIfhandle() string {
	if m != nil {
		return m.OutgoingSubControllerIfhandle
	}
	return ""
}

func (m *MplsTeS2LOtnInfo) GetIncomingControllerIfhandle() string {
	if m != nil {
		return m.IncomingControllerIfhandle
	}
	return ""
}

func (m *MplsTeS2LOtnInfo) GetIncomingSubControllerIfhandle() string {
	if m != nil {
		return m.IncomingSubControllerIfhandle
	}
	return ""
}

func (m *MplsTeS2LOtnInfo) GetGpid() uint32 {
	if m != nil {
		return m.Gpid
	}
	return 0
}

// Private Protection information signaled
type TePvtProtObjT struct {
	// Secondary bit
	SBit bool `protobuf:"varint,1,opt,name=s_bit,json=sBit" json:"s_bit,omitempty"`
	// Protecting bit
	PBit bool `protobuf:"varint,2,opt,name=p_bit,json=pBit" json:"p_bit,omitempty"`
	// Notification bit
	NBit bool `protobuf:"varint,3,opt,name=n_bit,json=nBit" json:"n_bit,omitempty"`
	// Operational bit
	OBit bool `protobuf:"varint,4,opt,name=o_bit,json=oBit" json:"o_bit,omitempty"`
	// LSP Protect Type
	ProtectType string `protobuf:"bytes,5,opt,name=protect_type,json=protectType" json:"protect_type,omitempty"`
	// Is Wait-to-Restore timeout present
	IsWtrPresent bool `protobuf:"varint,6,opt,name=is_wtr_present,json=isWtrPresent" json:"is_wtr_present,omitempty"`
	// Wait-to-Restore timeout
	WtrTimeout uint32 `protobuf:"varint,7,opt,name=wtr_timeout,json=wtrTimeout" json:"wtr_timeout,omitempty"`
	// Is Hold-Off timeout present
	IsHoPresent bool `protobuf:"varint,8,opt,name=is_ho_present,json=isHoPresent" json:"is_ho_present,omitempty"`
	// Hold-Off timeout
	HoTimeout uint32 `protobuf:"varint,9,opt,name=ho_timeout,json=hoTimeout" json:"ho_timeout,omitempty"`
	// Is SNC mode present
	IsSncModePresent bool `protobuf:"varint,10,opt,name=is_snc_mode_present,json=isSncModePresent" json:"is_snc_mode_present,omitempty"`
	// SNC mode
	SncMode string `protobuf:"bytes,11,opt,name=snc_mode,json=sncMode" json:"snc_mode,omitempty"`
	// TCM_ID
	TcmId uint32 `protobuf:"varint,12,opt,name=tcm_id,json=tcmId" json:"tcm_id,omitempty"`
	// Path protection profile type
	PathProtProfileType  string   `protobuf:"bytes,13,opt,name=path_prot_profile_type,json=pathProtProfileType" json:"path_prot_profile_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TePvtProtObjT) Reset()         { *m = TePvtProtObjT{} }
func (m *TePvtProtObjT) String() string { return proto.CompactTextString(m) }
func (*TePvtProtObjT) ProtoMessage()    {}
func (*TePvtProtObjT) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{75}
}
func (m *TePvtProtObjT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TePvtProtObjT.Unmarshal(m, b)
}
func (m *TePvtProtObjT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TePvtProtObjT.Marshal(b, m, deterministic)
}
func (dst *TePvtProtObjT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TePvtProtObjT.Merge(dst, src)
}
func (m *TePvtProtObjT) XXX_Size() int {
	return xxx_messageInfo_TePvtProtObjT.Size(m)
}
func (m *TePvtProtObjT) XXX_DiscardUnknown() {
	xxx_messageInfo_TePvtProtObjT.DiscardUnknown(m)
}

var xxx_messageInfo_TePvtProtObjT proto.InternalMessageInfo

func (m *TePvtProtObjT) GetSBit() bool {
	if m != nil {
		return m.SBit
	}
	return false
}

func (m *TePvtProtObjT) GetPBit() bool {
	if m != nil {
		return m.PBit
	}
	return false
}

func (m *TePvtProtObjT) GetNBit() bool {
	if m != nil {
		return m.NBit
	}
	return false
}

func (m *TePvtProtObjT) GetOBit() bool {
	if m != nil {
		return m.OBit
	}
	return false
}

func (m *TePvtProtObjT) GetProtectType() string {
	if m != nil {
		return m.ProtectType
	}
	return ""
}

func (m *TePvtProtObjT) GetIsWtrPresent() bool {
	if m != nil {
		return m.IsWtrPresent
	}
	return false
}

func (m *TePvtProtObjT) GetWtrTimeout() uint32 {
	if m != nil {
		return m.WtrTimeout
	}
	return 0
}

func (m *TePvtProtObjT) GetIsHoPresent() bool {
	if m != nil {
		return m.IsHoPresent
	}
	return false
}

func (m *TePvtProtObjT) GetHoTimeout() uint32 {
	if m != nil {
		return m.HoTimeout
	}
	return 0
}

func (m *TePvtProtObjT) GetIsSncModePresent() bool {
	if m != nil {
		return m.IsSncModePresent
	}
	return false
}

func (m *TePvtProtObjT) GetSncMode() string {
	if m != nil {
		return m.SncMode
	}
	return ""
}

func (m *TePvtProtObjT) GetTcmId() uint32 {
	if m != nil {
		return m.TcmId
	}
	return 0
}

func (m *TePvtProtObjT) GetPathProtProfileType() string {
	if m != nil {
		return m.PathProtProfileType
	}
	return ""
}

// APS Protection Info of S2L
type MplsTeS2LApsInfo struct {
	// Protection Info
	ProtectionInfo       *TePvtProtObjT `protobuf:"bytes,1,opt,name=protection_info,json=protectionInfo" json:"protection_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *MplsTeS2LApsInfo) Reset()         { *m = MplsTeS2LApsInfo{} }
func (m *MplsTeS2LApsInfo) String() string { return proto.CompactTextString(m) }
func (*MplsTeS2LApsInfo) ProtoMessage()    {}
func (*MplsTeS2LApsInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{76}
}
func (m *MplsTeS2LApsInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeS2LApsInfo.Unmarshal(m, b)
}
func (m *MplsTeS2LApsInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeS2LApsInfo.Marshal(b, m, deterministic)
}
func (dst *MplsTeS2LApsInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeS2LApsInfo.Merge(dst, src)
}
func (m *MplsTeS2LApsInfo) XXX_Size() int {
	return xxx_messageInfo_MplsTeS2LApsInfo.Size(m)
}
func (m *MplsTeS2LApsInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeS2LApsInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeS2LApsInfo proto.InternalMessageInfo

func (m *MplsTeS2LApsInfo) GetProtectionInfo() *TePvtProtObjT {
	if m != nil {
		return m.ProtectionInfo
	}
	return nil
}

// OTN S2l information
type MplsTeOtnS2LInfo struct {
	// Info Related to OTN technology in S2L
	Otn *MplsTeS2LOtnInfo `protobuf:"bytes,1,opt,name=otn" json:"otn,omitempty"`
	// APS Info for OTN S2L
	Aps                  *MplsTeS2LApsInfo `protobuf:"bytes,2,opt,name=aps" json:"aps,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *MplsTeOtnS2LInfo) Reset()         { *m = MplsTeOtnS2LInfo{} }
func (m *MplsTeOtnS2LInfo) String() string { return proto.CompactTextString(m) }
func (*MplsTeOtnS2LInfo) ProtoMessage()    {}
func (*MplsTeOtnS2LInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{77}
}
func (m *MplsTeOtnS2LInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeOtnS2LInfo.Unmarshal(m, b)
}
func (m *MplsTeOtnS2LInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeOtnS2LInfo.Marshal(b, m, deterministic)
}
func (dst *MplsTeOtnS2LInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeOtnS2LInfo.Merge(dst, src)
}
func (m *MplsTeOtnS2LInfo) XXX_Size() int {
	return xxx_messageInfo_MplsTeOtnS2LInfo.Size(m)
}
func (m *MplsTeOtnS2LInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeOtnS2LInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeOtnS2LInfo proto.InternalMessageInfo

func (m *MplsTeOtnS2LInfo) GetOtn() *MplsTeS2LOtnInfo {
	if m != nil {
		return m.Otn
	}
	return nil
}

func (m *MplsTeOtnS2LInfo) GetAps() *MplsTeS2LApsInfo {
	if m != nil {
		return m.Aps
	}
	return nil
}

// TE Segment-Routing S2L path hop
type TeS2LSrPathHop struct {
	// Type of the SID
	SidType string `protobuf:"bytes,1,opt,name=sid_type,json=sidType" json:"sid_type,omitempty"`
	// Node has IP addresses specified
	HasIpAddresses bool `protobuf:"varint,2,opt,name=has_ip_addresses,json=hasIpAddresses" json:"has_ip_addresses,omitempty"`
	// Local IP address of adjacency or Node ID
	LocalAddr string `protobuf:"bytes,3,opt,name=local_addr,json=localAddr" json:"local_addr,omitempty"`
	// Remote IP address of adjacency
	RemoteAddr string `protobuf:"bytes,4,opt,name=remote_addr,json=remoteAddr" json:"remote_addr,omitempty"`
	// Hop has MPLS label specified
	HasMplsLabel bool `protobuf:"varint,5,opt,name=has_mpls_label,json=hasMplsLabel" json:"has_mpls_label,omitempty"`
	// The MPLS label value
	MplsLabelValue uint32 `protobuf:"varint,6,opt,name=mpls_label_value,json=mplsLabelValue" json:"mpls_label_value,omitempty"`
	// Hop has EL specified
	HasEntropyLabel      bool     `protobuf:"varint,7,opt,name=has_entropy_label,json=hasEntropyLabel" json:"has_entropy_label,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeS2LSrPathHop) Reset()         { *m = TeS2LSrPathHop{} }
func (m *TeS2LSrPathHop) String() string { return proto.CompactTextString(m) }
func (*TeS2LSrPathHop) ProtoMessage()    {}
func (*TeS2LSrPathHop) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{78}
}
func (m *TeS2LSrPathHop) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeS2LSrPathHop.Unmarshal(m, b)
}
func (m *TeS2LSrPathHop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeS2LSrPathHop.Marshal(b, m, deterministic)
}
func (dst *TeS2LSrPathHop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeS2LSrPathHop.Merge(dst, src)
}
func (m *TeS2LSrPathHop) XXX_Size() int {
	return xxx_messageInfo_TeS2LSrPathHop.Size(m)
}
func (m *TeS2LSrPathHop) XXX_DiscardUnknown() {
	xxx_messageInfo_TeS2LSrPathHop.DiscardUnknown(m)
}

var xxx_messageInfo_TeS2LSrPathHop proto.InternalMessageInfo

func (m *TeS2LSrPathHop) GetSidType() string {
	if m != nil {
		return m.SidType
	}
	return ""
}

func (m *TeS2LSrPathHop) GetHasIpAddresses() bool {
	if m != nil {
		return m.HasIpAddresses
	}
	return false
}

func (m *TeS2LSrPathHop) GetLocalAddr() string {
	if m != nil {
		return m.LocalAddr
	}
	return ""
}

func (m *TeS2LSrPathHop) GetRemoteAddr() string {
	if m != nil {
		return m.RemoteAddr
	}
	return ""
}

func (m *TeS2LSrPathHop) GetHasMplsLabel() bool {
	if m != nil {
		return m.HasMplsLabel
	}
	return false
}

func (m *TeS2LSrPathHop) GetMplsLabelValue() uint32 {
	if m != nil {
		return m.MplsLabelValue
	}
	return 0
}

func (m *TeS2LSrPathHop) GetHasEntropyLabel() bool {
	if m != nil {
		return m.HasEntropyLabel
	}
	return false
}

// Path computation error information
type MplsTeP2MpPcalcError struct {
	// Error message (for display purposes only)
	ErrorMessage string `protobuf:"bytes,1,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// LSP Mode
	LspMode string `protobuf:"bytes,2,opt,name=lsp_mode,json=lspMode" json:"lsp_mode,omitempty"`
	// Time in seconds seconds (since Jan. 1, 1970) when the error message is logged
	LogTime              uint32   `protobuf:"varint,3,opt,name=log_time,json=logTime" json:"log_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeP2MpPcalcError) Reset()         { *m = MplsTeP2MpPcalcError{} }
func (m *MplsTeP2MpPcalcError) String() string { return proto.CompactTextString(m) }
func (*MplsTeP2MpPcalcError) ProtoMessage()    {}
func (*MplsTeP2MpPcalcError) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{79}
}
func (m *MplsTeP2MpPcalcError) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeP2MpPcalcError.Unmarshal(m, b)
}
func (m *MplsTeP2MpPcalcError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeP2MpPcalcError.Marshal(b, m, deterministic)
}
func (dst *MplsTeP2MpPcalcError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeP2MpPcalcError.Merge(dst, src)
}
func (m *MplsTeP2MpPcalcError) XXX_Size() int {
	return xxx_messageInfo_MplsTeP2MpPcalcError.Size(m)
}
func (m *MplsTeP2MpPcalcError) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeP2MpPcalcError.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeP2MpPcalcError proto.InternalMessageInfo

func (m *MplsTeP2MpPcalcError) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *MplsTeP2MpPcalcError) GetLspMode() string {
	if m != nil {
		return m.LspMode
	}
	return ""
}

func (m *MplsTeP2MpPcalcError) GetLogTime() uint32 {
	if m != nil {
		return m.LogTime
	}
	return 0
}

// P2MP signalling error
type MplsTeP2MpSigError struct {
	// Source address of the error generating node
	ErrorNode uint32 `protobuf:"varint,1,opt,name=error_node,json=errorNode" json:"error_node,omitempty"`
	// Path Error code
	Error uint32 `protobuf:"varint,2,opt,name=error" json:"error,omitempty"`
	// Path Error subcode
	SubCode uint32 `protobuf:"varint,3,opt,name=sub_code,json=subCode" json:"sub_code,omitempty"`
	LspMode string `protobuf:"bytes,4,opt,name=lsp_mode,json=lspMode" json:"lsp_mode,omitempty"`
	// Time in seconds when the error message is logged
	LogTime uint32 `protobuf:"varint,5,opt,name=log_time,json=logTime" json:"log_time,omitempty"`
	// LSP-id for which the error was received
	SignallingLspId uint32 `protobuf:"varint,6,opt,name=signalling_lsp_id,json=signallingLspId" json:"signalling_lsp_id,omitempty"`
	// Error message (for display purposes only)
	ErrorMessage string `protobuf:"bytes,7,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// Indicates if error is on the reverse LSP
	ReverseLsp           bool     `protobuf:"varint,8,opt,name=reverse_lsp,json=reverseLsp" json:"reverse_lsp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeP2MpSigError) Reset()         { *m = MplsTeP2MpSigError{} }
func (m *MplsTeP2MpSigError) String() string { return proto.CompactTextString(m) }
func (*MplsTeP2MpSigError) ProtoMessage()    {}
func (*MplsTeP2MpSigError) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{80}
}
func (m *MplsTeP2MpSigError) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeP2MpSigError.Unmarshal(m, b)
}
func (m *MplsTeP2MpSigError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeP2MpSigError.Marshal(b, m, deterministic)
}
func (dst *MplsTeP2MpSigError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeP2MpSigError.Merge(dst, src)
}
func (m *MplsTeP2MpSigError) XXX_Size() int {
	return xxx_messageInfo_MplsTeP2MpSigError.Size(m)
}
func (m *MplsTeP2MpSigError) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeP2MpSigError.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeP2MpSigError proto.InternalMessageInfo

func (m *MplsTeP2MpSigError) GetErrorNode() uint32 {
	if m != nil {
		return m.ErrorNode
	}
	return 0
}

func (m *MplsTeP2MpSigError) GetError() uint32 {
	if m != nil {
		return m.Error
	}
	return 0
}

func (m *MplsTeP2MpSigError) GetSubCode() uint32 {
	if m != nil {
		return m.SubCode
	}
	return 0
}

func (m *MplsTeP2MpSigError) GetLspMode() string {
	if m != nil {
		return m.LspMode
	}
	return ""
}

func (m *MplsTeP2MpSigError) GetLogTime() uint32 {
	if m != nil {
		return m.LogTime
	}
	return 0
}

func (m *MplsTeP2MpSigError) GetSignallingLspId() uint32 {
	if m != nil {
		return m.SignallingLspId
	}
	return 0
}

func (m *MplsTeP2MpSigError) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *MplsTeP2MpSigError) GetReverseLsp() bool {
	if m != nil {
		return m.ReverseLsp
	}
	return false
}

// P2MP path-option
type MplsTeP2MpPathOption struct {
	// The path option index is valid
	OptionIndexIsValid bool `protobuf:"varint,1,opt,name=option_index_is_valid,json=optionIndexIsValid" json:"option_index_is_valid,omitempty"`
	// Path option index
	OptionIndex uint32 `protobuf:"varint,2,opt,name=option_index,json=optionIndex" json:"option_index,omitempty"`
	// Path option name
	PathOptionName string `protobuf:"bytes,3,opt,name=path_option_name,json=pathOptionName" json:"path_option_name,omitempty"`
	// Path option type
	PathOptionType string `protobuf:"bytes,4,opt,name=path_option_type,json=pathOptionType" json:"path_option_type,omitempty"`
	// Explicit Path Name, this is the key to table ExplicitPaths.NameTable
	ExplicitPathName string `protobuf:"bytes,5,opt,name=explicit_path_name,json=explicitPathName" json:"explicit_path_name,omitempty"`
	// Explicit Path ID, this is the key to table ExplicitPaths.IdentifierTable
	ExplicitPathId uint32 `protobuf:"varint,6,opt,name=explicit_path_id,json=explicitPathId" json:"explicit_path_id,omitempty"`
	// Holddown Duration (seconds)
	HolddownDuration uint32 `protobuf:"varint,7,opt,name=holddown_duration,json=holddownDuration" json:"holddown_duration,omitempty"`
	// PCE server address
	PceAddress string `protobuf:"bytes,8,opt,name=pce_address,json=pceAddress" json:"pce_address,omitempty"`
	// The path-option area constraint
	PathOptionAreaId string `protobuf:"bytes,9,opt,name=path_option_area_id,json=pathOptionAreaId" json:"path_option_area_id,omitempty"`
	// TRUE if explicit path is strict
	IsStrictExplicitPath bool `protobuf:"varint,10,opt,name=is_strict_explicit_path,json=isStrictExplicitPath" json:"is_strict_explicit_path,omitempty"`
	// TRUE if path is helddown
	IsHelddown bool `protobuf:"varint,11,opt,name=is_helddown,json=isHelddown" json:"is_helddown,omitempty"`
	// TRUE if the path is locked down
	IsLockdown bool `protobuf:"varint,12,opt,name=is_lockdown,json=isLockdown" json:"is_lockdown,omitempty"`
	// TRUE if the path is verbatim
	IsVerbatim bool `protobuf:"varint,13,opt,name=is_verbatim,json=isVerbatim" json:"is_verbatim,omitempty"`
	// TRUE if the path option is disabled
	IsDisabled bool `protobuf:"varint,14,opt,name=is_disabled,json=isDisabled" json:"is_disabled,omitempty"`
	// TRUE if the path has an attribute set defined
	HasAttributeSet bool `protobuf:"varint,15,opt,name=has_attribute_set,json=hasAttributeSet" json:"has_attribute_set,omitempty"`
	// The path option attribute set used by this path
	AttributeSet *MplsTeAttributeSet `protobuf:"bytes,16,opt,name=attribute_set,json=attributeSet" json:"attribute_set,omitempty"`
	// TRUE if the path has found the defined attribute set
	AttributeSetFound bool `protobuf:"varint,17,opt,name=attribute_set_found,json=attributeSetFound" json:"attribute_set_found,omitempty"`
	// Path computation information
	PathCalculationError []*MplsTeP2MpPcalcError `protobuf:"bytes,18,rep,name=path_calculation_error,json=pathCalculationError" json:"path_calculation_error,omitempty"`
	// Path computation remerge resolve info
	RemergeError []*MplsTeP2MpPcalcError `protobuf:"bytes,19,rep,name=remerge_error,json=remergeError" json:"remerge_error,omitempty"`
	// Signalling information
	SignallingError []*MplsTeP2MpSigError `protobuf:"bytes,20,rep,name=signalling_error,json=signallingError" json:"signalling_error,omitempty"`
	// TRUE if the path has an XRO attribute set configured
	HasXroAttributeSet bool `protobuf:"varint,21,opt,name=has_xro_attribute_set,json=hasXroAttributeSet" json:"has_xro_attribute_set,omitempty"`
	// TRUE if the path's XRO attribute set is known
	XroAttributeSetFound bool `protobuf:"varint,22,opt,name=xro_attribute_set_found,json=xroAttributeSetFound" json:"xro_attribute_set_found,omitempty"`
	// The XRO attribute set used by this path-option
	XroAttributeSet *MplsTeAttributeSet `protobuf:"bytes,23,opt,name=xro_attribute_set,json=xroAttributeSet" json:"xro_attribute_set,omitempty"`
	// TRUE if the path is Segment-Routing
	IsSegmentRouting bool `protobuf:"varint,24,opt,name=is_segment_routing,json=isSegmentRouting" json:"is_segment_routing,omitempty"`
	// Path option index for Protect path options
	ProtectedByPathOptionIndex uint32 `protobuf:"varint,25,opt,name=protected_by_path_option_index,json=protectedByPathOptionIndex" json:"protected_by_path_option_index,omitempty"`
	// Path option index for Restore path options
	RestoredFromPathOptionIndex uint32   `protobuf:"varint,26,opt,name=restored_from_path_option_index,json=restoredFromPathOptionIndex" json:"restored_from_path_option_index,omitempty"`
	XXX_NoUnkeyedLiteral        struct{} `json:"-"`
	XXX_unrecognized            []byte   `json:"-"`
	XXX_sizecache               int32    `json:"-"`
}

func (m *MplsTeP2MpPathOption) Reset()         { *m = MplsTeP2MpPathOption{} }
func (m *MplsTeP2MpPathOption) String() string { return proto.CompactTextString(m) }
func (*MplsTeP2MpPathOption) ProtoMessage()    {}
func (*MplsTeP2MpPathOption) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{81}
}
func (m *MplsTeP2MpPathOption) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeP2MpPathOption.Unmarshal(m, b)
}
func (m *MplsTeP2MpPathOption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeP2MpPathOption.Marshal(b, m, deterministic)
}
func (dst *MplsTeP2MpPathOption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeP2MpPathOption.Merge(dst, src)
}
func (m *MplsTeP2MpPathOption) XXX_Size() int {
	return xxx_messageInfo_MplsTeP2MpPathOption.Size(m)
}
func (m *MplsTeP2MpPathOption) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeP2MpPathOption.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeP2MpPathOption proto.InternalMessageInfo

func (m *MplsTeP2MpPathOption) GetOptionIndexIsValid() bool {
	if m != nil {
		return m.OptionIndexIsValid
	}
	return false
}

func (m *MplsTeP2MpPathOption) GetOptionIndex() uint32 {
	if m != nil {
		return m.OptionIndex
	}
	return 0
}

func (m *MplsTeP2MpPathOption) GetPathOptionName() string {
	if m != nil {
		return m.PathOptionName
	}
	return ""
}

func (m *MplsTeP2MpPathOption) GetPathOptionType() string {
	if m != nil {
		return m.PathOptionType
	}
	return ""
}

func (m *MplsTeP2MpPathOption) GetExplicitPathName() string {
	if m != nil {
		return m.ExplicitPathName
	}
	return ""
}

func (m *MplsTeP2MpPathOption) GetExplicitPathId() uint32 {
	if m != nil {
		return m.ExplicitPathId
	}
	return 0
}

func (m *MplsTeP2MpPathOption) GetHolddownDuration() uint32 {
	if m != nil {
		return m.HolddownDuration
	}
	return 0
}

func (m *MplsTeP2MpPathOption) GetPceAddress() string {
	if m != nil {
		return m.PceAddress
	}
	return ""
}

func (m *MplsTeP2MpPathOption) GetPathOptionAreaId() string {
	if m != nil {
		return m.PathOptionAreaId
	}
	return ""
}

func (m *MplsTeP2MpPathOption) GetIsStrictExplicitPath() bool {
	if m != nil {
		return m.IsStrictExplicitPath
	}
	return false
}

func (m *MplsTeP2MpPathOption) GetIsHelddown() bool {
	if m != nil {
		return m.IsHelddown
	}
	return false
}

func (m *MplsTeP2MpPathOption) GetIsLockdown() bool {
	if m != nil {
		return m.IsLockdown
	}
	return false
}

func (m *MplsTeP2MpPathOption) GetIsVerbatim() bool {
	if m != nil {
		return m.IsVerbatim
	}
	return false
}

func (m *MplsTeP2MpPathOption) GetIsDisabled() bool {
	if m != nil {
		return m.IsDisabled
	}
	return false
}

func (m *MplsTeP2MpPathOption) GetHasAttributeSet() bool {
	if m != nil {
		return m.HasAttributeSet
	}
	return false
}

func (m *MplsTeP2MpPathOption) GetAttributeSet() *MplsTeAttributeSet {
	if m != nil {
		return m.AttributeSet
	}
	return nil
}

func (m *MplsTeP2MpPathOption) GetAttributeSetFound() bool {
	if m != nil {
		return m.AttributeSetFound
	}
	return false
}

func (m *MplsTeP2MpPathOption) GetPathCalculationError() []*MplsTeP2MpPcalcError {
	if m != nil {
		return m.PathCalculationError
	}
	return nil
}

func (m *MplsTeP2MpPathOption) GetRemergeError() []*MplsTeP2MpPcalcError {
	if m != nil {
		return m.RemergeError
	}
	return nil
}

func (m *MplsTeP2MpPathOption) GetSignallingError() []*MplsTeP2MpSigError {
	if m != nil {
		return m.SignallingError
	}
	return nil
}

func (m *MplsTeP2MpPathOption) GetHasXroAttributeSet() bool {
	if m != nil {
		return m.HasXroAttributeSet
	}
	return false
}

func (m *MplsTeP2MpPathOption) GetXroAttributeSetFound() bool {
	if m != nil {
		return m.XroAttributeSetFound
	}
	return false
}

func (m *MplsTeP2MpPathOption) GetXroAttributeSet() *MplsTeAttributeSet {
	if m != nil {
		return m.XroAttributeSet
	}
	return nil
}

func (m *MplsTeP2MpPathOption) GetIsSegmentRouting() bool {
	if m != nil {
		return m.IsSegmentRouting
	}
	return false
}

func (m *MplsTeP2MpPathOption) GetProtectedByPathOptionIndex() uint32 {
	if m != nil {
		return m.ProtectedByPathOptionIndex
	}
	return 0
}

func (m *MplsTeP2MpPathOption) GetRestoredFromPathOptionIndex() uint32 {
	if m != nil {
		return m.RestoredFromPathOptionIndex
	}
	return 0
}

// TE G709 OTN TSpec
type TeMgmtG709OtnTspec struct {
	// Signal Type
	SignalType uint32 `protobuf:"varint,1,opt,name=signal_type,json=signalType" json:"signal_type,omitempty"`
	// NMC or Tolerance
	NmcOrTolerance uint32 `protobuf:"varint,2,opt,name=nmc_or_tolerance,json=nmcOrTolerance" json:"nmc_or_tolerance,omitempty"`
	// Number of Virtual Components
	Nvc uint32 `protobuf:"varint,3,opt,name=nvc" json:"nvc,omitempty"`
	// Multiplier
	Multiplier uint32 `protobuf:"varint,4,opt,name=multiplier" json:"multiplier,omitempty"`
	// Bit Rate in kbps
	BitRate              uint32   `protobuf:"varint,5,opt,name=bit_rate,json=bitRate" json:"bit_rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeMgmtG709OtnTspec) Reset()         { *m = TeMgmtG709OtnTspec{} }
func (m *TeMgmtG709OtnTspec) String() string { return proto.CompactTextString(m) }
func (*TeMgmtG709OtnTspec) ProtoMessage()    {}
func (*TeMgmtG709OtnTspec) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{82}
}
func (m *TeMgmtG709OtnTspec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeMgmtG709OtnTspec.Unmarshal(m, b)
}
func (m *TeMgmtG709OtnTspec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeMgmtG709OtnTspec.Marshal(b, m, deterministic)
}
func (dst *TeMgmtG709OtnTspec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeMgmtG709OtnTspec.Merge(dst, src)
}
func (m *TeMgmtG709OtnTspec) XXX_Size() int {
	return xxx_messageInfo_TeMgmtG709OtnTspec.Size(m)
}
func (m *TeMgmtG709OtnTspec) XXX_DiscardUnknown() {
	xxx_messageInfo_TeMgmtG709OtnTspec.DiscardUnknown(m)
}

var xxx_messageInfo_TeMgmtG709OtnTspec proto.InternalMessageInfo

func (m *TeMgmtG709OtnTspec) GetSignalType() uint32 {
	if m != nil {
		return m.SignalType
	}
	return 0
}

func (m *TeMgmtG709OtnTspec) GetNmcOrTolerance() uint32 {
	if m != nil {
		return m.NmcOrTolerance
	}
	return 0
}

func (m *TeMgmtG709OtnTspec) GetNvc() uint32 {
	if m != nil {
		return m.Nvc
	}
	return 0
}

func (m *TeMgmtG709OtnTspec) GetMultiplier() uint32 {
	if m != nil {
		return m.Multiplier
	}
	return 0
}

func (m *TeMgmtG709OtnTspec) GetBitRate() uint32 {
	if m != nil {
		return m.BitRate
	}
	return 0
}

// Union of different TE generic TSpec types
type TeMgmtGenericTspec struct {
	TSpecType string `protobuf:"bytes,1,opt,name=t_spec_type,json=tSpecType" json:"t_spec_type,omitempty"`
	// TE TSpec for G709 OTN
	OtntSpec             *TeMgmtG709OtnTspec `protobuf:"bytes,2,opt,name=otnt_spec,json=otntSpec" json:"otnt_spec,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *TeMgmtGenericTspec) Reset()         { *m = TeMgmtGenericTspec{} }
func (m *TeMgmtGenericTspec) String() string { return proto.CompactTextString(m) }
func (*TeMgmtGenericTspec) ProtoMessage()    {}
func (*TeMgmtGenericTspec) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{83}
}
func (m *TeMgmtGenericTspec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeMgmtGenericTspec.Unmarshal(m, b)
}
func (m *TeMgmtGenericTspec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeMgmtGenericTspec.Marshal(b, m, deterministic)
}
func (dst *TeMgmtGenericTspec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeMgmtGenericTspec.Merge(dst, src)
}
func (m *TeMgmtGenericTspec) XXX_Size() int {
	return xxx_messageInfo_TeMgmtGenericTspec.Size(m)
}
func (m *TeMgmtGenericTspec) XXX_DiscardUnknown() {
	xxx_messageInfo_TeMgmtGenericTspec.DiscardUnknown(m)
}

var xxx_messageInfo_TeMgmtGenericTspec proto.InternalMessageInfo

func (m *TeMgmtGenericTspec) GetTSpecType() string {
	if m != nil {
		return m.TSpecType
	}
	return ""
}

func (m *TeMgmtGenericTspec) GetOtntSpec() *TeMgmtG709OtnTspec {
	if m != nil {
		return m.OtntSpec
	}
	return nil
}

// TE G709 OTN FSpec
type TeMgmtG709OtnFspec struct {
	// Signal Type
	SignalType uint32 `protobuf:"varint,1,opt,name=signal_type,json=signalType" json:"signal_type,omitempty"`
	// NMC or Tolerance
	NmcOrTolerance uint32 `protobuf:"varint,2,opt,name=nmc_or_tolerance,json=nmcOrTolerance" json:"nmc_or_tolerance,omitempty"`
	// Number of Virtual Components
	Nvc uint32 `protobuf:"varint,3,opt,name=nvc" json:"nvc,omitempty"`
	// Multiplier
	Multiplier uint32 `protobuf:"varint,4,opt,name=multiplier" json:"multiplier,omitempty"`
	// Bit Rate in kbps
	BitRate              uint32   `protobuf:"varint,5,opt,name=bit_rate,json=bitRate" json:"bit_rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeMgmtG709OtnFspec) Reset()         { *m = TeMgmtG709OtnFspec{} }
func (m *TeMgmtG709OtnFspec) String() string { return proto.CompactTextString(m) }
func (*TeMgmtG709OtnFspec) ProtoMessage()    {}
func (*TeMgmtG709OtnFspec) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{84}
}
func (m *TeMgmtG709OtnFspec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeMgmtG709OtnFspec.Unmarshal(m, b)
}
func (m *TeMgmtG709OtnFspec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeMgmtG709OtnFspec.Marshal(b, m, deterministic)
}
func (dst *TeMgmtG709OtnFspec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeMgmtG709OtnFspec.Merge(dst, src)
}
func (m *TeMgmtG709OtnFspec) XXX_Size() int {
	return xxx_messageInfo_TeMgmtG709OtnFspec.Size(m)
}
func (m *TeMgmtG709OtnFspec) XXX_DiscardUnknown() {
	xxx_messageInfo_TeMgmtG709OtnFspec.DiscardUnknown(m)
}

var xxx_messageInfo_TeMgmtG709OtnFspec proto.InternalMessageInfo

func (m *TeMgmtG709OtnFspec) GetSignalType() uint32 {
	if m != nil {
		return m.SignalType
	}
	return 0
}

func (m *TeMgmtG709OtnFspec) GetNmcOrTolerance() uint32 {
	if m != nil {
		return m.NmcOrTolerance
	}
	return 0
}

func (m *TeMgmtG709OtnFspec) GetNvc() uint32 {
	if m != nil {
		return m.Nvc
	}
	return 0
}

func (m *TeMgmtG709OtnFspec) GetMultiplier() uint32 {
	if m != nil {
		return m.Multiplier
	}
	return 0
}

func (m *TeMgmtG709OtnFspec) GetBitRate() uint32 {
	if m != nil {
		return m.BitRate
	}
	return 0
}

// Union of different TE generic FSpec types
type TeMgmtGenericFspec struct {
	FSpecType string `protobuf:"bytes,1,opt,name=f_spec_type,json=fSpecType" json:"f_spec_type,omitempty"`
	// TE FSpec for G709 OTN
	OtnfSpec             *TeMgmtG709OtnFspec `protobuf:"bytes,2,opt,name=otnf_spec,json=otnfSpec" json:"otnf_spec,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *TeMgmtGenericFspec) Reset()         { *m = TeMgmtGenericFspec{} }
func (m *TeMgmtGenericFspec) String() string { return proto.CompactTextString(m) }
func (*TeMgmtGenericFspec) ProtoMessage()    {}
func (*TeMgmtGenericFspec) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{85}
}
func (m *TeMgmtGenericFspec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeMgmtGenericFspec.Unmarshal(m, b)
}
func (m *TeMgmtGenericFspec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeMgmtGenericFspec.Marshal(b, m, deterministic)
}
func (dst *TeMgmtGenericFspec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeMgmtGenericFspec.Merge(dst, src)
}
func (m *TeMgmtGenericFspec) XXX_Size() int {
	return xxx_messageInfo_TeMgmtGenericFspec.Size(m)
}
func (m *TeMgmtGenericFspec) XXX_DiscardUnknown() {
	xxx_messageInfo_TeMgmtGenericFspec.DiscardUnknown(m)
}

var xxx_messageInfo_TeMgmtGenericFspec proto.InternalMessageInfo

func (m *TeMgmtGenericFspec) GetFSpecType() string {
	if m != nil {
		return m.FSpecType
	}
	return ""
}

func (m *TeMgmtGenericFspec) GetOtnfSpec() *TeMgmtG709OtnFspec {
	if m != nil {
		return m.OtnfSpec
	}
	return nil
}

// Bandwidth information of a flow
type BandwidthSpecBag struct {
	// Average bandwidth in  kbps
	AverageRate uint64 `protobuf:"varint,1,opt,name=average_rate,json=averageRate" json:"average_rate,omitempty"`
	// Maximum burst of data in bytes
	MaximumBurst uint64 `protobuf:"varint,2,opt,name=maximum_burst,json=maximumBurst" json:"maximum_burst,omitempty"`
	// Peak rate in  kbps
	PeakRate             uint64   `protobuf:"varint,3,opt,name=peak_rate,json=peakRate" json:"peak_rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BandwidthSpecBag) Reset()         { *m = BandwidthSpecBag{} }
func (m *BandwidthSpecBag) String() string { return proto.CompactTextString(m) }
func (*BandwidthSpecBag) ProtoMessage()    {}
func (*BandwidthSpecBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{86}
}
func (m *BandwidthSpecBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BandwidthSpecBag.Unmarshal(m, b)
}
func (m *BandwidthSpecBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BandwidthSpecBag.Marshal(b, m, deterministic)
}
func (dst *BandwidthSpecBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BandwidthSpecBag.Merge(dst, src)
}
func (m *BandwidthSpecBag) XXX_Size() int {
	return xxx_messageInfo_BandwidthSpecBag.Size(m)
}
func (m *BandwidthSpecBag) XXX_DiscardUnknown() {
	xxx_messageInfo_BandwidthSpecBag.DiscardUnknown(m)
}

var xxx_messageInfo_BandwidthSpecBag proto.InternalMessageInfo

func (m *BandwidthSpecBag) GetAverageRate() uint64 {
	if m != nil {
		return m.AverageRate
	}
	return 0
}

func (m *BandwidthSpecBag) GetMaximumBurst() uint64 {
	if m != nil {
		return m.MaximumBurst
	}
	return 0
}

func (m *BandwidthSpecBag) GetPeakRate() uint64 {
	if m != nil {
		return m.PeakRate
	}
	return 0
}

// TE LSP convergence related information
type TeLspConvergenceInfo struct {
	// LSP RSVP Path-in timestamp (clocktime in nsecs)
	PathIn uint64 `protobuf:"varint,1,opt,name=path_in,json=pathIn" json:"path_in,omitempty"`
	// LSP RSVP Path-in timestamp (clocktime in nsecs)
	PathOut uint64 `protobuf:"varint,2,opt,name=path_out,json=pathOut" json:"path_out,omitempty"`
	// LSP RSVP Resv-in timestamp (clocktime in nsecs)
	ResvIn uint64 `protobuf:"varint,3,opt,name=resv_in,json=resvIn" json:"resv_in,omitempty"`
	// LSP RSVP Resv-out timestamp (clocktime in nsecs)
	ResvOut uint64 `protobuf:"varint,4,opt,name=resv_out,json=resvOut" json:"resv_out,omitempty"`
	// LSP Label rewrite timestamp (clocktime in nsecs)
	LabelRewrite uint64 `protobuf:"varint,5,opt,name=label_rewrite,json=labelRewrite" json:"label_rewrite,omitempty"`
	// Tunnel rewrite timestamp (clocktime in nsecs)
	TunnelRewrite        uint64   `protobuf:"varint,6,opt,name=tunnel_rewrite,json=tunnelRewrite" json:"tunnel_rewrite,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeLspConvergenceInfo) Reset()         { *m = TeLspConvergenceInfo{} }
func (m *TeLspConvergenceInfo) String() string { return proto.CompactTextString(m) }
func (*TeLspConvergenceInfo) ProtoMessage()    {}
func (*TeLspConvergenceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{87}
}
func (m *TeLspConvergenceInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeLspConvergenceInfo.Unmarshal(m, b)
}
func (m *TeLspConvergenceInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeLspConvergenceInfo.Marshal(b, m, deterministic)
}
func (dst *TeLspConvergenceInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeLspConvergenceInfo.Merge(dst, src)
}
func (m *TeLspConvergenceInfo) XXX_Size() int {
	return xxx_messageInfo_TeLspConvergenceInfo.Size(m)
}
func (m *TeLspConvergenceInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TeLspConvergenceInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TeLspConvergenceInfo proto.InternalMessageInfo

func (m *TeLspConvergenceInfo) GetPathIn() uint64 {
	if m != nil {
		return m.PathIn
	}
	return 0
}

func (m *TeLspConvergenceInfo) GetPathOut() uint64 {
	if m != nil {
		return m.PathOut
	}
	return 0
}

func (m *TeLspConvergenceInfo) GetResvIn() uint64 {
	if m != nil {
		return m.ResvIn
	}
	return 0
}

func (m *TeLspConvergenceInfo) GetResvOut() uint64 {
	if m != nil {
		return m.ResvOut
	}
	return 0
}

func (m *TeLspConvergenceInfo) GetLabelRewrite() uint64 {
	if m != nil {
		return m.LabelRewrite
	}
	return 0
}

func (m *TeLspConvergenceInfo) GetTunnelRewrite() uint64 {
	if m != nil {
		return m.TunnelRewrite
	}
	return 0
}

// Midpoint Soft Preemption LSP Info
type MplsTeSoftPreemptionLspInfo struct {
	// The current state of the soft preemption operation
	Status string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	// The POSIX timestamp when the soft preemption occurred
	SoftPreemptionTimestamp uint32 `protobuf:"varint,2,opt,name=soft_preemption_timestamp,json=softPreemptionTimestamp" json:"soft_preemption_timestamp,omitempty"`
	// Name of the link where the soft preemption occurred
	SoftPreemptionLink string `protobuf:"bytes,3,opt,name=soft_preemption_link,json=softPreemptionLink" json:"soft_preemption_link,omitempty"`
	// The address of the link where the preemption happened
	PreemptingLinkAddress string `protobuf:"bytes,4,opt,name=preempting_link_address,json=preemptingLinkAddress" json:"preempting_link_address,omitempty"`
	// The number of seconds until hard preemption is triggered
	TimeToHardPreemption uint32 `protobuf:"varint,5,opt,name=time_to_hard_preemption,json=timeToHardPreemption" json:"time_to_hard_preemption,omitempty"`
	// FRR-rewrite during soft preemption
	FrRrewrite bool `protobuf:"varint,6,opt,name=fr_rrewrite,json=frRrewrite" json:"fr_rrewrite,omitempty"`
	// The tunnel name of the backup
	FrRrewriteTunnelName string   `protobuf:"bytes,7,opt,name=fr_rrewrite_tunnel_name,json=frRrewriteTunnelName" json:"fr_rrewrite_tunnel_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeSoftPreemptionLspInfo) Reset()         { *m = MplsTeSoftPreemptionLspInfo{} }
func (m *MplsTeSoftPreemptionLspInfo) String() string { return proto.CompactTextString(m) }
func (*MplsTeSoftPreemptionLspInfo) ProtoMessage()    {}
func (*MplsTeSoftPreemptionLspInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{88}
}
func (m *MplsTeSoftPreemptionLspInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeSoftPreemptionLspInfo.Unmarshal(m, b)
}
func (m *MplsTeSoftPreemptionLspInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeSoftPreemptionLspInfo.Marshal(b, m, deterministic)
}
func (dst *MplsTeSoftPreemptionLspInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeSoftPreemptionLspInfo.Merge(dst, src)
}
func (m *MplsTeSoftPreemptionLspInfo) XXX_Size() int {
	return xxx_messageInfo_MplsTeSoftPreemptionLspInfo.Size(m)
}
func (m *MplsTeSoftPreemptionLspInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeSoftPreemptionLspInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeSoftPreemptionLspInfo proto.InternalMessageInfo

func (m *MplsTeSoftPreemptionLspInfo) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *MplsTeSoftPreemptionLspInfo) GetSoftPreemptionTimestamp() uint32 {
	if m != nil {
		return m.SoftPreemptionTimestamp
	}
	return 0
}

func (m *MplsTeSoftPreemptionLspInfo) GetSoftPreemptionLink() string {
	if m != nil {
		return m.SoftPreemptionLink
	}
	return ""
}

func (m *MplsTeSoftPreemptionLspInfo) GetPreemptingLinkAddress() string {
	if m != nil {
		return m.PreemptingLinkAddress
	}
	return ""
}

func (m *MplsTeSoftPreemptionLspInfo) GetTimeToHardPreemption() uint32 {
	if m != nil {
		return m.TimeToHardPreemption
	}
	return 0
}

func (m *MplsTeSoftPreemptionLspInfo) GetFrRrewrite() bool {
	if m != nil {
		return m.FrRrewrite
	}
	return false
}

func (m *MplsTeSoftPreemptionLspInfo) GetFrRrewriteTunnelName() string {
	if m != nil {
		return m.FrRrewriteTunnelName
	}
	return ""
}

// Hop information
type TunnelHopInfo struct {
	// Hop address
	HopAddress string `protobuf:"bytes,1,opt,name=hop_address,json=hopAddress" json:"hop_address,omitempty"`
	// Deprecated
	HopAffinity uint32 `protobuf:"varint,2,opt,name=hop_affinity,json=hopAffinity" json:"hop_affinity,omitempty"`
	// Hop affinity
	HopExtendedAffinity  []uint32 `protobuf:"varint,3,rep,packed,name=hop_extended_affinity,json=hopExtendedAffinity" json:"hop_extended_affinity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TunnelHopInfo) Reset()         { *m = TunnelHopInfo{} }
func (m *TunnelHopInfo) String() string { return proto.CompactTextString(m) }
func (*TunnelHopInfo) ProtoMessage()    {}
func (*TunnelHopInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{89}
}
func (m *TunnelHopInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TunnelHopInfo.Unmarshal(m, b)
}
func (m *TunnelHopInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TunnelHopInfo.Marshal(b, m, deterministic)
}
func (dst *TunnelHopInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TunnelHopInfo.Merge(dst, src)
}
func (m *TunnelHopInfo) XXX_Size() int {
	return xxx_messageInfo_TunnelHopInfo.Size(m)
}
func (m *TunnelHopInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TunnelHopInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TunnelHopInfo proto.InternalMessageInfo

func (m *TunnelHopInfo) GetHopAddress() string {
	if m != nil {
		return m.HopAddress
	}
	return ""
}

func (m *TunnelHopInfo) GetHopAffinity() uint32 {
	if m != nil {
		return m.HopAffinity
	}
	return 0
}

func (m *TunnelHopInfo) GetHopExtendedAffinity() []uint32 {
	if m != nil {
		return m.HopExtendedAffinity
	}
	return nil
}

// TE BFD Session Info
type MplsTeBfdSessionInfo struct {
	// BFD session state
	State string `protobuf:"bytes,1,opt,name=state" json:"state,omitempty"`
	// Time in seconds since the last session state change
	StateChangeTime      uint32   `protobuf:"varint,2,opt,name=state_change_time,json=stateChangeTime" json:"state_change_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeBfdSessionInfo) Reset()         { *m = MplsTeBfdSessionInfo{} }
func (m *MplsTeBfdSessionInfo) String() string { return proto.CompactTextString(m) }
func (*MplsTeBfdSessionInfo) ProtoMessage()    {}
func (*MplsTeBfdSessionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{90}
}
func (m *MplsTeBfdSessionInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeBfdSessionInfo.Unmarshal(m, b)
}
func (m *MplsTeBfdSessionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeBfdSessionInfo.Marshal(b, m, deterministic)
}
func (dst *MplsTeBfdSessionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeBfdSessionInfo.Merge(dst, src)
}
func (m *MplsTeBfdSessionInfo) XXX_Size() int {
	return xxx_messageInfo_MplsTeBfdSessionInfo.Size(m)
}
func (m *MplsTeBfdSessionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeBfdSessionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeBfdSessionInfo proto.InternalMessageInfo

func (m *MplsTeBfdSessionInfo) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *MplsTeBfdSessionInfo) GetStateChangeTime() uint32 {
	if m != nil {
		return m.StateChangeTime
	}
	return 0
}

// TE Tunnel BFD Session Deletion History
type MplsTeBfdDeletionHistory struct {
	// LSP ID of the BFD session get deleted
	LspId uint32 `protobuf:"varint,1,opt,name=lsp_id,json=lspId" json:"lsp_id,omitempty"`
	// Time stamp of the BFD session get deleted
	DeletionTime uint32 `protobuf:"varint,2,opt,name=deletion_time,json=deletionTime" json:"deletion_time,omitempty"`
	// Reason for the BFD session get deleted
	DeletionReason string `protobuf:"bytes,3,opt,name=deletion_reason,json=deletionReason" json:"deletion_reason,omitempty"`
	// Diagnostic Code for the BFD session get deleted
	DeletionDiagnosticCode uint32   `protobuf:"varint,4,opt,name=deletion_diagnostic_code,json=deletionDiagnosticCode" json:"deletion_diagnostic_code,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *MplsTeBfdDeletionHistory) Reset()         { *m = MplsTeBfdDeletionHistory{} }
func (m *MplsTeBfdDeletionHistory) String() string { return proto.CompactTextString(m) }
func (*MplsTeBfdDeletionHistory) ProtoMessage()    {}
func (*MplsTeBfdDeletionHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{91}
}
func (m *MplsTeBfdDeletionHistory) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeBfdDeletionHistory.Unmarshal(m, b)
}
func (m *MplsTeBfdDeletionHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeBfdDeletionHistory.Marshal(b, m, deterministic)
}
func (dst *MplsTeBfdDeletionHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeBfdDeletionHistory.Merge(dst, src)
}
func (m *MplsTeBfdDeletionHistory) XXX_Size() int {
	return xxx_messageInfo_MplsTeBfdDeletionHistory.Size(m)
}
func (m *MplsTeBfdDeletionHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeBfdDeletionHistory.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeBfdDeletionHistory proto.InternalMessageInfo

func (m *MplsTeBfdDeletionHistory) GetLspId() uint32 {
	if m != nil {
		return m.LspId
	}
	return 0
}

func (m *MplsTeBfdDeletionHistory) GetDeletionTime() uint32 {
	if m != nil {
		return m.DeletionTime
	}
	return 0
}

func (m *MplsTeBfdDeletionHistory) GetDeletionReason() string {
	if m != nil {
		return m.DeletionReason
	}
	return ""
}

func (m *MplsTeBfdDeletionHistory) GetDeletionDiagnosticCode() uint32 {
	if m != nil {
		return m.DeletionDiagnosticCode
	}
	return 0
}

// TE Head-end BFD information
type MplsTeHeadBfdInfo struct {
	// Time in seconds since the BFD session created
	CreationTime uint32 `protobuf:"varint,1,opt,name=creation_time,json=creationTime" json:"creation_time,omitempty"`
	// BFD Session Info
	SessionInfo *MplsTeBfdSessionInfo `protobuf:"bytes,2,opt,name=session_info,json=sessionInfo" json:"session_info,omitempty"`
	// BFD Session Deletion History
	DeletionHistory *MplsTeBfdDeletionHistory `protobuf:"bytes,3,opt,name=deletion_history,json=deletionHistory" json:"deletion_history,omitempty"`
	// LSP BFD type
	LspbfdType string `protobuf:"bytes,4,opt,name=lspbfd_type,json=lspbfdType" json:"lspbfd_type,omitempty"`
	// sBFD session is redundant
	IsRedundant bool `protobuf:"varint,5,opt,name=is_redundant,json=isRedundant" json:"is_redundant,omitempty"`
	// BFD reverse path labels
	BfdReversePathLabels []uint32 `protobuf:"varint,6,rep,packed,name=bfd_reverse_path_labels,json=bfdReversePathLabels" json:"bfd_reverse_path_labels,omitempty"`
	// The BFD reverse path is stale compared to configuration
	BfdReversePathStale  bool     `protobuf:"varint,7,opt,name=bfd_reverse_path_stale,json=bfdReversePathStale" json:"bfd_reverse_path_stale,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeHeadBfdInfo) Reset()         { *m = MplsTeHeadBfdInfo{} }
func (m *MplsTeHeadBfdInfo) String() string { return proto.CompactTextString(m) }
func (*MplsTeHeadBfdInfo) ProtoMessage()    {}
func (*MplsTeHeadBfdInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{92}
}
func (m *MplsTeHeadBfdInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeHeadBfdInfo.Unmarshal(m, b)
}
func (m *MplsTeHeadBfdInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeHeadBfdInfo.Marshal(b, m, deterministic)
}
func (dst *MplsTeHeadBfdInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeHeadBfdInfo.Merge(dst, src)
}
func (m *MplsTeHeadBfdInfo) XXX_Size() int {
	return xxx_messageInfo_MplsTeHeadBfdInfo.Size(m)
}
func (m *MplsTeHeadBfdInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeHeadBfdInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeHeadBfdInfo proto.InternalMessageInfo

func (m *MplsTeHeadBfdInfo) GetCreationTime() uint32 {
	if m != nil {
		return m.CreationTime
	}
	return 0
}

func (m *MplsTeHeadBfdInfo) GetSessionInfo() *MplsTeBfdSessionInfo {
	if m != nil {
		return m.SessionInfo
	}
	return nil
}

func (m *MplsTeHeadBfdInfo) GetDeletionHistory() *MplsTeBfdDeletionHistory {
	if m != nil {
		return m.DeletionHistory
	}
	return nil
}

func (m *MplsTeHeadBfdInfo) GetLspbfdType() string {
	if m != nil {
		return m.LspbfdType
	}
	return ""
}

func (m *MplsTeHeadBfdInfo) GetIsRedundant() bool {
	if m != nil {
		return m.IsRedundant
	}
	return false
}

func (m *MplsTeHeadBfdInfo) GetBfdReversePathLabels() []uint32 {
	if m != nil {
		return m.BfdReversePathLabels
	}
	return nil
}

func (m *MplsTeHeadBfdInfo) GetBfdReversePathStale() bool {
	if m != nil {
		return m.BfdReversePathStale
	}
	return false
}

// TE Tail-end BFD information
type MplsTeTailBfdInfo struct {
	// BFD Session Info
	SessionInfo *MplsTeBfdSessionInfo `protobuf:"bytes,1,opt,name=session_info,json=sessionInfo" json:"session_info,omitempty"`
	// BFD session failure diagnostic code
	FailureDiagnosticCode uint32 `protobuf:"varint,2,opt,name=failure_diagnostic_code,json=failureDiagnosticCode" json:"failure_diagnostic_code,omitempty"`
	// BFD session failure reason
	FailureReason string `protobuf:"bytes,3,opt,name=failure_reason,json=failureReason" json:"failure_reason,omitempty"`
	// BFD Local Discriminator
	LocalDiscriminator uint32 `protobuf:"varint,4,opt,name=local_discriminator,json=localDiscriminator" json:"local_discriminator,omitempty"`
	// BFD Remote Discrminator
	RemoteDiscriminator uint32 `protobuf:"varint,5,opt,name=remote_discriminator,json=remoteDiscriminator" json:"remote_discriminator,omitempty"`
	// Hello interval in mini second
	MinInterval uint32 `protobuf:"varint,6,opt,name=min_interval,json=minInterval" json:"min_interval,omitempty"`
	// Is default hello interval
	MinIntervalDefault bool `protobuf:"varint,7,opt,name=min_interval_default,json=minIntervalDefault" json:"min_interval_default,omitempty"`
	// Multiplier
	Multiplier uint32 `protobuf:"varint,8,opt,name=multiplier" json:"multiplier,omitempty"`
	// Is default multiplier
	MultiplierDefault    bool     `protobuf:"varint,9,opt,name=multiplier_default,json=multiplierDefault" json:"multiplier_default,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeTailBfdInfo) Reset()         { *m = MplsTeTailBfdInfo{} }
func (m *MplsTeTailBfdInfo) String() string { return proto.CompactTextString(m) }
func (*MplsTeTailBfdInfo) ProtoMessage()    {}
func (*MplsTeTailBfdInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{93}
}
func (m *MplsTeTailBfdInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeTailBfdInfo.Unmarshal(m, b)
}
func (m *MplsTeTailBfdInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeTailBfdInfo.Marshal(b, m, deterministic)
}
func (dst *MplsTeTailBfdInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeTailBfdInfo.Merge(dst, src)
}
func (m *MplsTeTailBfdInfo) XXX_Size() int {
	return xxx_messageInfo_MplsTeTailBfdInfo.Size(m)
}
func (m *MplsTeTailBfdInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeTailBfdInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeTailBfdInfo proto.InternalMessageInfo

func (m *MplsTeTailBfdInfo) GetSessionInfo() *MplsTeBfdSessionInfo {
	if m != nil {
		return m.SessionInfo
	}
	return nil
}

func (m *MplsTeTailBfdInfo) GetFailureDiagnosticCode() uint32 {
	if m != nil {
		return m.FailureDiagnosticCode
	}
	return 0
}

func (m *MplsTeTailBfdInfo) GetFailureReason() string {
	if m != nil {
		return m.FailureReason
	}
	return ""
}

func (m *MplsTeTailBfdInfo) GetLocalDiscriminator() uint32 {
	if m != nil {
		return m.LocalDiscriminator
	}
	return 0
}

func (m *MplsTeTailBfdInfo) GetRemoteDiscriminator() uint32 {
	if m != nil {
		return m.RemoteDiscriminator
	}
	return 0
}

func (m *MplsTeTailBfdInfo) GetMinInterval() uint32 {
	if m != nil {
		return m.MinInterval
	}
	return 0
}

func (m *MplsTeTailBfdInfo) GetMinIntervalDefault() bool {
	if m != nil {
		return m.MinIntervalDefault
	}
	return false
}

func (m *MplsTeTailBfdInfo) GetMultiplier() uint32 {
	if m != nil {
		return m.Multiplier
	}
	return 0
}

func (m *MplsTeTailBfdInfo) GetMultiplierDefault() bool {
	if m != nil {
		return m.MultiplierDefault
	}
	return false
}

// TE Association Object
type MplsTeS2LAssociationObject struct {
	// S2L Association Type (draft-ietf-ccamp-mpls-tp-rsvpte-ext-associated-lsp)
	S2LAssociationType uint32 `protobuf:"varint,1,opt,name=s2_l_association_type,json=s2LAssociationType" json:"s2_l_association_type,omitempty"`
	// S2L Association Tie Role
	S2LAssociationTieRole string `protobuf:"bytes,2,opt,name=s2_l_association_tie_role,json=s2LAssociationTieRole" json:"s2_l_association_tie_role,omitempty"`
	// S2L Association ID
	S2LAssociationId uint32 `protobuf:"varint,3,opt,name=s2_l_association_id,json=s2LAssociationId" json:"s2_l_association_id,omitempty"`
	// S2L Association Source
	S2LAssociationSource string `protobuf:"bytes,4,opt,name=s2_l_association_source,json=s2LAssociationSource" json:"s2_l_association_source,omitempty"`
	// S2L Global Source
	S2LGlobalSource uint32 `protobuf:"varint,5,opt,name=s2_l_global_source,json=s2LGlobalSource" json:"s2_l_global_source,omitempty"`
	// S2L Extended ID Array
	S2LExtendedId        []uint32 `protobuf:"varint,6,rep,packed,name=s2_l_extended_id,json=s2LExtendedId" json:"s2_l_extended_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeS2LAssociationObject) Reset()         { *m = MplsTeS2LAssociationObject{} }
func (m *MplsTeS2LAssociationObject) String() string { return proto.CompactTextString(m) }
func (*MplsTeS2LAssociationObject) ProtoMessage()    {}
func (*MplsTeS2LAssociationObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{94}
}
func (m *MplsTeS2LAssociationObject) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeS2LAssociationObject.Unmarshal(m, b)
}
func (m *MplsTeS2LAssociationObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeS2LAssociationObject.Marshal(b, m, deterministic)
}
func (dst *MplsTeS2LAssociationObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeS2LAssociationObject.Merge(dst, src)
}
func (m *MplsTeS2LAssociationObject) XXX_Size() int {
	return xxx_messageInfo_MplsTeS2LAssociationObject.Size(m)
}
func (m *MplsTeS2LAssociationObject) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeS2LAssociationObject.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeS2LAssociationObject proto.InternalMessageInfo

func (m *MplsTeS2LAssociationObject) GetS2LAssociationType() uint32 {
	if m != nil {
		return m.S2LAssociationType
	}
	return 0
}

func (m *MplsTeS2LAssociationObject) GetS2LAssociationTieRole() string {
	if m != nil {
		return m.S2LAssociationTieRole
	}
	return ""
}

func (m *MplsTeS2LAssociationObject) GetS2LAssociationId() uint32 {
	if m != nil {
		return m.S2LAssociationId
	}
	return 0
}

func (m *MplsTeS2LAssociationObject) GetS2LAssociationSource() string {
	if m != nil {
		return m.S2LAssociationSource
	}
	return ""
}

func (m *MplsTeS2LAssociationObject) GetS2LGlobalSource() uint32 {
	if m != nil {
		return m.S2LGlobalSource
	}
	return 0
}

func (m *MplsTeS2LAssociationObject) GetS2LExtendedId() []uint32 {
	if m != nil {
		return m.S2LExtendedId
	}
	return nil
}

// TE Protection Object
type MplsTeS2LProtectionObject struct {
	//  S2L Protection Secondary Bit
	S2LSecondary bool `protobuf:"varint,1,opt,name=s2_l_secondary,json=s2LSecondary" json:"s2_l_secondary,omitempty"`
	//  S2L Protection Protecting Bit
	S2LProtecting bool `protobuf:"varint,2,opt,name=s2_l_protecting,json=s2LProtecting" json:"s2_l_protecting,omitempty"`
	//  S2L Protection Notification Bit
	S2LNotification bool `protobuf:"varint,3,opt,name=s2_l_notification,json=s2LNotification" json:"s2_l_notification,omitempty"`
	//  S2L Protection Operational Bit
	S2LOperational bool `protobuf:"varint,4,opt,name=s2_l_operational,json=s2LOperational" json:"s2_l_operational,omitempty"`
	// Indicates Enhanced Protection Scheme
	Enhanced bool `protobuf:"varint,5,opt,name=enhanced" json:"enhanced,omitempty"`
	// Dedicated 1+1 Protection
	Ded1Plus1 bool `protobuf:"varint,6,opt,name=ded1_plus1,json=ded1Plus1" json:"ded1_plus1,omitempty"`
	// Dedicated 1:1 Protection
	Ded1To1 bool `protobuf:"varint,7,opt,name=ded1_to1,json=ded1To1" json:"ded1_to1,omitempty"`
	// Shared Link Layer Protection
	Shared bool `protobuf:"varint,8,opt,name=shared" json:"shared,omitempty"`
	// LSP should not use any Link Layer Protection
	LinkUnprotected bool `protobuf:"varint,9,opt,name=link_unprotected,json=linkUnprotected" json:"link_unprotected,omitempty"`
	// LSP should use Links that are protecting other (primary) traffic
	ExtraTraffic bool `protobuf:"varint,10,opt,name=extra_traffic,json=extraTraffic" json:"extra_traffic,omitempty"`
	// Any
	Any bool `protobuf:"varint,11,opt,name=any" json:"any,omitempty"`
	// Full Rerouting
	Rerouting bool `protobuf:"varint,12,opt,name=rerouting" json:"rerouting,omitempty"`
	// Rerouting Without Extra-Traffic
	ReroutingNoEt bool `protobuf:"varint,13,opt,name=rerouting_no_et,json=reroutingNoEt" json:"rerouting_no_et,omitempty"`
	// 1:N Protection with Extra-Traffic
	OneToNProtectionEt bool `protobuf:"varint,14,opt,name=one_to_n_protection_et,json=oneToNProtectionEt" json:"one_to_n_protection_et,omitempty"`
	// 1+1 Unidirectional Protection
	OnePlusOneUni bool `protobuf:"varint,15,opt,name=one_plus_one_uni,json=onePlusOneUni" json:"one_plus_one_uni,omitempty"`
	// 1+1 Bidirectional Protection
	OnePlusOneBi bool `protobuf:"varint,16,opt,name=one_plus_one_bi,json=onePlusOneBi" json:"one_plus_one_bi,omitempty"`
	// LSP Flags Unprotected
	LspUnprotected       bool     `protobuf:"varint,17,opt,name=lsp_unprotected,json=lspUnprotected" json:"lsp_unprotected,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeS2LProtectionObject) Reset()         { *m = MplsTeS2LProtectionObject{} }
func (m *MplsTeS2LProtectionObject) String() string { return proto.CompactTextString(m) }
func (*MplsTeS2LProtectionObject) ProtoMessage()    {}
func (*MplsTeS2LProtectionObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{95}
}
func (m *MplsTeS2LProtectionObject) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeS2LProtectionObject.Unmarshal(m, b)
}
func (m *MplsTeS2LProtectionObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeS2LProtectionObject.Marshal(b, m, deterministic)
}
func (dst *MplsTeS2LProtectionObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeS2LProtectionObject.Merge(dst, src)
}
func (m *MplsTeS2LProtectionObject) XXX_Size() int {
	return xxx_messageInfo_MplsTeS2LProtectionObject.Size(m)
}
func (m *MplsTeS2LProtectionObject) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeS2LProtectionObject.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeS2LProtectionObject proto.InternalMessageInfo

func (m *MplsTeS2LProtectionObject) GetS2LSecondary() bool {
	if m != nil {
		return m.S2LSecondary
	}
	return false
}

func (m *MplsTeS2LProtectionObject) GetS2LProtecting() bool {
	if m != nil {
		return m.S2LProtecting
	}
	return false
}

func (m *MplsTeS2LProtectionObject) GetS2LNotification() bool {
	if m != nil {
		return m.S2LNotification
	}
	return false
}

func (m *MplsTeS2LProtectionObject) GetS2LOperational() bool {
	if m != nil {
		return m.S2LOperational
	}
	return false
}

func (m *MplsTeS2LProtectionObject) GetEnhanced() bool {
	if m != nil {
		return m.Enhanced
	}
	return false
}

func (m *MplsTeS2LProtectionObject) GetDed1Plus1() bool {
	if m != nil {
		return m.Ded1Plus1
	}
	return false
}

func (m *MplsTeS2LProtectionObject) GetDed1To1() bool {
	if m != nil {
		return m.Ded1To1
	}
	return false
}

func (m *MplsTeS2LProtectionObject) GetShared() bool {
	if m != nil {
		return m.Shared
	}
	return false
}

func (m *MplsTeS2LProtectionObject) GetLinkUnprotected() bool {
	if m != nil {
		return m.LinkUnprotected
	}
	return false
}

func (m *MplsTeS2LProtectionObject) GetExtraTraffic() bool {
	if m != nil {
		return m.ExtraTraffic
	}
	return false
}

func (m *MplsTeS2LProtectionObject) GetAny() bool {
	if m != nil {
		return m.Any
	}
	return false
}

func (m *MplsTeS2LProtectionObject) GetRerouting() bool {
	if m != nil {
		return m.Rerouting
	}
	return false
}

func (m *MplsTeS2LProtectionObject) GetReroutingNoEt() bool {
	if m != nil {
		return m.ReroutingNoEt
	}
	return false
}

func (m *MplsTeS2LProtectionObject) GetOneToNProtectionEt() bool {
	if m != nil {
		return m.OneToNProtectionEt
	}
	return false
}

func (m *MplsTeS2LProtectionObject) GetOnePlusOneUni() bool {
	if m != nil {
		return m.OnePlusOneUni
	}
	return false
}

func (m *MplsTeS2LProtectionObject) GetOnePlusOneBi() bool {
	if m != nil {
		return m.OnePlusOneBi
	}
	return false
}

func (m *MplsTeS2LProtectionObject) GetLspUnprotected() bool {
	if m != nil {
		return m.LspUnprotected
	}
	return false
}

// Information about flex LSP lockout info for the link
type FlexLockoutT struct {
	// True if s2l is locked out
	IsLockout bool `protobuf:"varint,1,opt,name=is_lockout,json=isLockout" json:"is_lockout,omitempty"`
	// Flex LSP Lockout Origination Source
	Origination string `protobuf:"bytes,2,opt,name=origination" json:"origination,omitempty"`
	// The timestamp when the lockout is set
	LockoutTimestamp     uint32   `protobuf:"varint,3,opt,name=lockout_timestamp,json=lockoutTimestamp" json:"lockout_timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FlexLockoutT) Reset()         { *m = FlexLockoutT{} }
func (m *FlexLockoutT) String() string { return proto.CompactTextString(m) }
func (*FlexLockoutT) ProtoMessage()    {}
func (*FlexLockoutT) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{96}
}
func (m *FlexLockoutT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlexLockoutT.Unmarshal(m, b)
}
func (m *FlexLockoutT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlexLockoutT.Marshal(b, m, deterministic)
}
func (dst *FlexLockoutT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlexLockoutT.Merge(dst, src)
}
func (m *FlexLockoutT) XXX_Size() int {
	return xxx_messageInfo_FlexLockoutT.Size(m)
}
func (m *FlexLockoutT) XXX_DiscardUnknown() {
	xxx_messageInfo_FlexLockoutT.DiscardUnknown(m)
}

var xxx_messageInfo_FlexLockoutT proto.InternalMessageInfo

func (m *FlexLockoutT) GetIsLockout() bool {
	if m != nil {
		return m.IsLockout
	}
	return false
}

func (m *FlexLockoutT) GetOrigination() string {
	if m != nil {
		return m.Origination
	}
	return ""
}

func (m *FlexLockoutT) GetLockoutTimestamp() uint32 {
	if m != nil {
		return m.LockoutTimestamp
	}
	return 0
}

// TE Per-S2L FlexLSP Information
type MplsTeS2LFlexInfo struct {
	// FlexLSP Entry Exists
	EntryExists bool `protobuf:"varint,1,opt,name=entry_exists,json=entryExists" json:"entry_exists,omitempty"`
	// In Label
	InLabel uint32 `protobuf:"varint,2,opt,name=in_label,json=inLabel" json:"in_label,omitempty"`
	// GAL BFD Session Created
	BfdCreated bool `protobuf:"varint,3,opt,name=bfd_created,json=bfdCreated" json:"bfd_created,omitempty"`
	// GAL BFD Session Up
	BfdUp bool `protobuf:"varint,4,opt,name=bfd_up,json=bfdUp" json:"bfd_up,omitempty"`
	// OAM Entry Created
	OamCreated bool `protobuf:"varint,5,opt,name=oam_created,json=oamCreated" json:"oam_created,omitempty"`
	// FEC for the FlexLSP Entry
	FlexFec *TeS2LFecT `protobuf:"bytes,6,opt,name=flex_fec,json=flexFec" json:"flex_fec,omitempty"`
	// BFD Next Hop
	BfdNextHop string `protobuf:"bytes,7,opt,name=bfd_next_hop,json=bfdNextHop" json:"bfd_next_hop,omitempty"`
	// BFD Tunnel Interface Handle
	BfdTunIfh string `protobuf:"bytes,8,opt,name=bfd_tun_ifh,json=bfdTunIfh" json:"bfd_tun_ifh,omitempty"`
	// BFD Out Interface Handle
	BfdOutIfh string `protobuf:"bytes,9,opt,name=bfd_out_ifh,json=bfdOutIfh" json:"bfd_out_ifh,omitempty"`
	// BFD Internal Label
	BfdIntLabel uint32 `protobuf:"varint,10,opt,name=bfd_int_label,json=bfdIntLabel" json:"bfd_int_label,omitempty"`
	// BFD Egress Label
	BfdEgressLabel uint32 `protobuf:"varint,11,opt,name=bfd_egress_label,json=bfdEgressLabel" json:"bfd_egress_label,omitempty"`
	// Fault LDI Lockout
	FaultLdiLockout bool `protobuf:"varint,12,opt,name=fault_ldi_lockout,json=faultLdiLockout" json:"fault_ldi_lockout,omitempty"`
	// Fault LDI
	FaultLdi bool `protobuf:"varint,13,opt,name=fault_ldi,json=faultLdi" json:"fault_ldi,omitempty"`
	// Fault LKR
	FaultLkr bool `protobuf:"varint,14,opt,name=fault_lkr,json=faultLkr" json:"fault_lkr,omitempty"`
	// Fault AIS
	FaultAis bool `protobuf:"varint,15,opt,name=fault_ais,json=faultAis" json:"fault_ais,omitempty"`
	// Fault Time
	FaultTime uint32 `protobuf:"varint,16,opt,name=fault_time,json=faultTime" json:"fault_time,omitempty"`
	// Flex LSP Lockout Info
	Lockout              *FlexLockoutT `protobuf:"bytes,17,opt,name=lockout" json:"lockout,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *MplsTeS2LFlexInfo) Reset()         { *m = MplsTeS2LFlexInfo{} }
func (m *MplsTeS2LFlexInfo) String() string { return proto.CompactTextString(m) }
func (*MplsTeS2LFlexInfo) ProtoMessage()    {}
func (*MplsTeS2LFlexInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{97}
}
func (m *MplsTeS2LFlexInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeS2LFlexInfo.Unmarshal(m, b)
}
func (m *MplsTeS2LFlexInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeS2LFlexInfo.Marshal(b, m, deterministic)
}
func (dst *MplsTeS2LFlexInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeS2LFlexInfo.Merge(dst, src)
}
func (m *MplsTeS2LFlexInfo) XXX_Size() int {
	return xxx_messageInfo_MplsTeS2LFlexInfo.Size(m)
}
func (m *MplsTeS2LFlexInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeS2LFlexInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeS2LFlexInfo proto.InternalMessageInfo

func (m *MplsTeS2LFlexInfo) GetEntryExists() bool {
	if m != nil {
		return m.EntryExists
	}
	return false
}

func (m *MplsTeS2LFlexInfo) GetInLabel() uint32 {
	if m != nil {
		return m.InLabel
	}
	return 0
}

func (m *MplsTeS2LFlexInfo) GetBfdCreated() bool {
	if m != nil {
		return m.BfdCreated
	}
	return false
}

func (m *MplsTeS2LFlexInfo) GetBfdUp() bool {
	if m != nil {
		return m.BfdUp
	}
	return false
}

func (m *MplsTeS2LFlexInfo) GetOamCreated() bool {
	if m != nil {
		return m.OamCreated
	}
	return false
}

func (m *MplsTeS2LFlexInfo) GetFlexFec() *TeS2LFecT {
	if m != nil {
		return m.FlexFec
	}
	return nil
}

func (m *MplsTeS2LFlexInfo) GetBfdNextHop() string {
	if m != nil {
		return m.BfdNextHop
	}
	return ""
}

func (m *MplsTeS2LFlexInfo) GetBfdTunIfh() string {
	if m != nil {
		return m.BfdTunIfh
	}
	return ""
}

func (m *MplsTeS2LFlexInfo) GetBfdOutIfh() string {
	if m != nil {
		return m.BfdOutIfh
	}
	return ""
}

func (m *MplsTeS2LFlexInfo) GetBfdIntLabel() uint32 {
	if m != nil {
		return m.BfdIntLabel
	}
	return 0
}

func (m *MplsTeS2LFlexInfo) GetBfdEgressLabel() uint32 {
	if m != nil {
		return m.BfdEgressLabel
	}
	return 0
}

func (m *MplsTeS2LFlexInfo) GetFaultLdiLockout() bool {
	if m != nil {
		return m.FaultLdiLockout
	}
	return false
}

func (m *MplsTeS2LFlexInfo) GetFaultLdi() bool {
	if m != nil {
		return m.FaultLdi
	}
	return false
}

func (m *MplsTeS2LFlexInfo) GetFaultLkr() bool {
	if m != nil {
		return m.FaultLkr
	}
	return false
}

func (m *MplsTeS2LFlexInfo) GetFaultAis() bool {
	if m != nil {
		return m.FaultAis
	}
	return false
}

func (m *MplsTeS2LFlexInfo) GetFaultTime() uint32 {
	if m != nil {
		return m.FaultTime
	}
	return 0
}

func (m *MplsTeS2LFlexInfo) GetLockout() *FlexLockoutT {
	if m != nil {
		return m.Lockout
	}
	return nil
}

// SRLG-collection information
type TeS2LSrlgCollectInfo struct {
	// SRLG-collection mechanism
	SrlgCollectType string `protobuf:"bytes,1,opt,name=srlg_collect_type,json=srlgCollectType" json:"srlg_collect_type,omitempty"`
	// Discovered SRLGs
	DiscoveredSrlGs      []uint32 `protobuf:"varint,2,rep,packed,name=discovered_srl_gs,json=discoveredSrlGs" json:"discovered_srl_gs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeS2LSrlgCollectInfo) Reset()         { *m = TeS2LSrlgCollectInfo{} }
func (m *TeS2LSrlgCollectInfo) String() string { return proto.CompactTextString(m) }
func (*TeS2LSrlgCollectInfo) ProtoMessage()    {}
func (*TeS2LSrlgCollectInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{98}
}
func (m *TeS2LSrlgCollectInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeS2LSrlgCollectInfo.Unmarshal(m, b)
}
func (m *TeS2LSrlgCollectInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeS2LSrlgCollectInfo.Marshal(b, m, deterministic)
}
func (dst *TeS2LSrlgCollectInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeS2LSrlgCollectInfo.Merge(dst, src)
}
func (m *TeS2LSrlgCollectInfo) XXX_Size() int {
	return xxx_messageInfo_TeS2LSrlgCollectInfo.Size(m)
}
func (m *TeS2LSrlgCollectInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TeS2LSrlgCollectInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TeS2LSrlgCollectInfo proto.InternalMessageInfo

func (m *TeS2LSrlgCollectInfo) GetSrlgCollectType() string {
	if m != nil {
		return m.SrlgCollectType
	}
	return ""
}

func (m *TeS2LSrlgCollectInfo) GetDiscoveredSrlGs() []uint32 {
	if m != nil {
		return m.DiscoveredSrlGs
	}
	return nil
}

// Midpoint LSP Wrap Protection LSP Info
type TunnelMidpointLspWrapInfoBag struct {
	// LSP Wrap protection enabled
	LspWrapProtectionEnable bool `protobuf:"varint,1,opt,name=lsp_wrap_protection_enable,json=lspWrapProtectionEnable" json:"lsp_wrap_protection_enable,omitempty"`
	// LSP Wrap Merge Point Label
	LspWrapProtectionLabel uint32 `protobuf:"varint,2,opt,name=lsp_wrap_protection_label,json=lspWrapProtectionLabel" json:"lsp_wrap_protection_label,omitempty"`
	// Reverse Egress Interface
	ReverseEgressInterface string `protobuf:"bytes,3,opt,name=reverse_egress_interface,json=reverseEgressInterface" json:"reverse_egress_interface,omitempty"`
	// Reverse LSP label
	ReverseLspLabel uint32 `protobuf:"varint,4,opt,name=reverse_lsp_label,json=reverseLspLabel" json:"reverse_lsp_label,omitempty"`
	// LSP wrap protection state
	LspWrapProtectionState string   `protobuf:"bytes,5,opt,name=lsp_wrap_protection_state,json=lspWrapProtectionState" json:"lsp_wrap_protection_state,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *TunnelMidpointLspWrapInfoBag) Reset()         { *m = TunnelMidpointLspWrapInfoBag{} }
func (m *TunnelMidpointLspWrapInfoBag) String() string { return proto.CompactTextString(m) }
func (*TunnelMidpointLspWrapInfoBag) ProtoMessage()    {}
func (*TunnelMidpointLspWrapInfoBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{99}
}
func (m *TunnelMidpointLspWrapInfoBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TunnelMidpointLspWrapInfoBag.Unmarshal(m, b)
}
func (m *TunnelMidpointLspWrapInfoBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TunnelMidpointLspWrapInfoBag.Marshal(b, m, deterministic)
}
func (dst *TunnelMidpointLspWrapInfoBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TunnelMidpointLspWrapInfoBag.Merge(dst, src)
}
func (m *TunnelMidpointLspWrapInfoBag) XXX_Size() int {
	return xxx_messageInfo_TunnelMidpointLspWrapInfoBag.Size(m)
}
func (m *TunnelMidpointLspWrapInfoBag) XXX_DiscardUnknown() {
	xxx_messageInfo_TunnelMidpointLspWrapInfoBag.DiscardUnknown(m)
}

var xxx_messageInfo_TunnelMidpointLspWrapInfoBag proto.InternalMessageInfo

func (m *TunnelMidpointLspWrapInfoBag) GetLspWrapProtectionEnable() bool {
	if m != nil {
		return m.LspWrapProtectionEnable
	}
	return false
}

func (m *TunnelMidpointLspWrapInfoBag) GetLspWrapProtectionLabel() uint32 {
	if m != nil {
		return m.LspWrapProtectionLabel
	}
	return 0
}

func (m *TunnelMidpointLspWrapInfoBag) GetReverseEgressInterface() string {
	if m != nil {
		return m.ReverseEgressInterface
	}
	return ""
}

func (m *TunnelMidpointLspWrapInfoBag) GetReverseLspLabel() uint32 {
	if m != nil {
		return m.ReverseLspLabel
	}
	return 0
}

func (m *TunnelMidpointLspWrapInfoBag) GetLspWrapProtectionState() string {
	if m != nil {
		return m.LspWrapProtectionState
	}
	return ""
}

// S2l Diversity info
type MplsTeS2LDiversityInfo struct {
	// S2L path diversity type
	DiversityType        string   `protobuf:"bytes,1,opt,name=diversity_type,json=diversityType" json:"diversity_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeS2LDiversityInfo) Reset()         { *m = MplsTeS2LDiversityInfo{} }
func (m *MplsTeS2LDiversityInfo) String() string { return proto.CompactTextString(m) }
func (*MplsTeS2LDiversityInfo) ProtoMessage()    {}
func (*MplsTeS2LDiversityInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{100}
}
func (m *MplsTeS2LDiversityInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeS2LDiversityInfo.Unmarshal(m, b)
}
func (m *MplsTeS2LDiversityInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeS2LDiversityInfo.Marshal(b, m, deterministic)
}
func (dst *MplsTeS2LDiversityInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeS2LDiversityInfo.Merge(dst, src)
}
func (m *MplsTeS2LDiversityInfo) XXX_Size() int {
	return xxx_messageInfo_MplsTeS2LDiversityInfo.Size(m)
}
func (m *MplsTeS2LDiversityInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeS2LDiversityInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeS2LDiversityInfo proto.InternalMessageInfo

func (m *MplsTeS2LDiversityInfo) GetDiversityType() string {
	if m != nil {
		return m.DiversityType
	}
	return ""
}

// A P2MP S2L
type MplsTeP2MpS2L struct {
	// FEC for the S2L
	S2LFec *TeS2LFecT `protobuf:"bytes,1,opt,name=s2_l_fec,json=s2LFec" json:"s2_l_fec,omitempty"`
	// The path option used to find the path for this S2L
	ActivePathOption *MplsTeP2MpPathOption `protobuf:"bytes,2,opt,name=active_path_option,json=activePathOption" json:"active_path_option,omitempty"`
	// The S2L's excluded srlg groups
	SharedRiskLinkGroups []*MplsSrlgInfo `protobuf:"bytes,3,rep,name=shared_risk_link_groups,json=sharedRiskLinkGroups" json:"shared_risk_link_groups,omitempty"`
	// IGP-area in which the S2L path was calculated
	PcalcArea string `protobuf:"bytes,4,opt,name=pcalc_area,json=pcalcArea" json:"pcalc_area,omitempty"`
	// TRUE if this LSR expanded a loose path
	IsExpandedEro bool `protobuf:"varint,5,opt,name=is_expanded_ero,json=isExpandedEro" json:"is_expanded_ero,omitempty"`
	// Loose path reevaluation query received at mid-point
	PathReevalQueryMid uint32 `protobuf:"varint,6,opt,name=path_reeval_query_mid,json=pathReevalQueryMid" json:"path_reeval_query_mid,omitempty"`
	// Time since last reevaluation query received at mid-point
	TimeSinceLastQueryReceivedMid uint32 `protobuf:"varint,7,opt,name=time_since_last_query_received_mid,json=timeSinceLastQueryReceivedMid" json:"time_since_last_query_received_mid,omitempty"`
	// Time since last preferred path exists msg send from mid-point
	TimeSinceLastPreferredPathExistsSendMid uint32 `protobuf:"varint,8,opt,name=time_since_last_preferred_path_exists_send_mid,json=timeSinceLastPreferredPathExistsSendMid" json:"time_since_last_preferred_path_exists_send_mid,omitempty"`
	// Time since last preferred tree exists msg send from mid-point
	TimeSinceLastPreferredTreeExistsSendMid uint32 `protobuf:"varint,9,opt,name=time_since_last_preferred_tree_exists_send_mid,json=timeSinceLastPreferredTreeExistsSendMid" json:"time_since_last_preferred_tree_exists_send_mid,omitempty"`
	// Indicates the protocol and area used to find Outgoing ERO
	ExpandedEroAreaId string `protobuf:"bytes,10,opt,name=expanded_ero_area_id,json=expandedEroAreaId" json:"expanded_ero_area_id,omitempty"`
	// The Outgoing ERO's affinity bits (colors)
	ExpandedEroAffinityBits uint32 `protobuf:"varint,11,opt,name=expanded_ero_affinity_bits,json=expandedEroAffinityBits" json:"expanded_ero_affinity_bits,omitempty"`
	// The Outgoing ERO's affinity mask (colors)
	ExpandedEroAffinityMask uint32 `protobuf:"varint,12,opt,name=expanded_ero_affinity_mask,json=expandedEroAffinityMask" json:"expanded_ero_affinity_mask,omitempty"`
	// The Outgoing ERO's selection metric
	ExpandedEroMetricType string `protobuf:"bytes,13,opt,name=expanded_ero_metric_type,json=expandedEroMetricType" json:"expanded_ero_metric_type,omitempty"`
	// The metric value of the expanded path
	ExpandedEroMetric uint32 `protobuf:"varint,14,opt,name=expanded_ero_metric,json=expandedEroMetric" json:"expanded_ero_metric,omitempty"`
	// Next ABR auto discovered
	AbrAutoDiscovered string `protobuf:"bytes,15,opt,name=abr_auto_discovered,json=abrAutoDiscovered" json:"abr_auto_discovered,omitempty"`
	// FRR Enabled or Disabled
	IsFrrEnabled bool `protobuf:"varint,16,opt,name=is_frr_enabled,json=isFrrEnabled" json:"is_frr_enabled,omitempty"`
	// Node Protection Enabled or Disabled
	IsNodeProtected bool `protobuf:"varint,17,opt,name=is_node_protected,json=isNodeProtected" json:"is_node_protected,omitempty"`
	// BW Protection Enabled or Disabled
	IsBandwidthProtect bool `protobuf:"varint,18,opt,name=is_bandwidth_protect,json=isBandwidthProtect" json:"is_bandwidth_protect,omitempty"`
	// Path RRO Enabled or Disabled
	PathRroEnabled bool `protobuf:"varint,19,opt,name=path_rro_enabled,json=pathRroEnabled" json:"path_rro_enabled,omitempty"`
	// Outgoing ERO for this S2L
	OutEro []*RsvpMgmtEroSubobj `protobuf:"bytes,20,rep,name=out_ero,json=outEro" json:"out_ero,omitempty"`
	// Incoming ERO for this S2L
	InEro []*RsvpMgmtEroSubobj `protobuf:"bytes,21,rep,name=in_ero,json=inEro" json:"in_ero,omitempty"`
	// Outgoing XRO for this S2L
	OutXro *TeXro `protobuf:"bytes,22,opt,name=out_xro,json=outXro" json:"out_xro,omitempty"`
	// Incoming XRO for this S2L
	InXro *TeXro `protobuf:"bytes,23,opt,name=in_xro,json=inXro" json:"in_xro,omitempty"`
	// Path RRO for this S2L
	PathRro []*RsvpMgmtRroSubobj `protobuf:"bytes,24,rep,name=path_rro,json=pathRro" json:"path_rro,omitempty"`
	// Resv RRO for this S2L
	ResvRro []*RsvpMgmtRroSubobj `protobuf:"bytes,25,rep,name=resv_rro,json=resvRro" json:"resv_rro,omitempty"`
	// Tunnel's Path hops with affinity
	PathAffinityArray []*TunnelHopInfo `protobuf:"bytes,26,rep,name=path_affinity_array,json=pathAffinityArray" json:"path_affinity_array,omitempty"`
	// The T spec info
	TSpec *BandwidthSpecBag `protobuf:"bytes,27,opt,name=t_spec,json=tSpec" json:"t_spec,omitempty"`
	// Generic TSpec
	GenericTSpec *TeMgmtGenericTspec `protobuf:"bytes,28,opt,name=generic_t_spec,json=genericTSpec" json:"generic_t_spec,omitempty"`
	// The F spec info
	FSpec *BandwidthSpecBag `protobuf:"bytes,29,opt,name=f_spec,json=fSpec" json:"f_spec,omitempty"`
	// Generic FSpec
	GenericFSpec *TeMgmtGenericFspec `protobuf:"bytes,30,opt,name=generic_f_spec,json=genericFSpec" json:"generic_f_spec,omitempty"`
	// The path's weight
	Weight uint64 `protobuf:"varint,31,opt,name=weight" json:"weight,omitempty"`
	// The reverse path weight
	ReverseWeight uint64 `protobuf:"varint,32,opt,name=reverse_weight,json=reverseWeight" json:"reverse_weight,omitempty"`
	// Time in seconds since the tunnel was up
	Uptime uint32 `protobuf:"varint,33,opt,name=uptime" json:"uptime,omitempty"`
	// Egress Interface
	EgressInterface string `protobuf:"bytes,34,opt,name=egress_interface,json=egressInterface" json:"egress_interface,omitempty"`
	// State of Outgoing Interface
	EgressInterfaceState string `protobuf:"bytes,35,opt,name=egress_interface_state,json=egressInterfaceState" json:"egress_interface_state,omitempty"`
	// Egress Interface in brief format
	EgressInterfaceBrief string `protobuf:"bytes,36,opt,name=egress_interface_brief,json=egressInterfaceBrief" json:"egress_interface_brief,omitempty"`
	// Ingress Interface
	IngressInterface string `protobuf:"bytes,37,opt,name=ingress_interface,json=ingressInterface" json:"ingress_interface,omitempty"`
	// State of Incoming Interface
	IngressInterfaceState string `protobuf:"bytes,38,opt,name=ingress_interface_state,json=ingressInterfaceState" json:"ingress_interface_state,omitempty"`
	// Ingress Interface in brief format
	IngressInterfaceBrief string `protobuf:"bytes,39,opt,name=ingress_interface_brief,json=ingressInterfaceBrief" json:"ingress_interface_brief,omitempty"`
	// Local label
	S2LLocalLabel uint32 `protobuf:"varint,40,opt,name=s2_l_local_label,json=s2LLocalLabel" json:"s2_l_local_label,omitempty"`
	// Outgoing label
	S2LOutLabel uint32 `protobuf:"varint,41,opt,name=s2_l_out_label,json=s2LOutLabel" json:"s2_l_out_label,omitempty"`
	// Indicates outbound FRR state
	OutboundFrrState string `protobuf:"bytes,42,opt,name=outbound_frr_state,json=outboundFrrState" json:"outbound_frr_state,omitempty"`
	// FRR out tunnel intface
	FrrOutTunnelInterface string `protobuf:"bytes,43,opt,name=frr_out_tunnel_interface,json=frrOutTunnelInterface" json:"frr_out_tunnel_interface,omitempty"`
	// Role of S2L
	Role string `protobuf:"bytes,44,opt,name=role" json:"role,omitempty"`
	// Signaling status
	SignallingStatus string `protobuf:"bytes,45,opt,name=signalling_status,json=signallingStatus" json:"signalling_status,omitempty"`
	// Local router id
	LocalRouterId string `protobuf:"bytes,46,opt,name=local_router_id,json=localRouterId" json:"local_router_id,omitempty"`
	// Upstream router id
	UpstreamRouterId string `protobuf:"bytes,47,opt,name=upstream_router_id,json=upstreamRouterId" json:"upstream_router_id,omitempty"`
	// Downstream router id
	DownstreamRouterId string `protobuf:"bytes,48,opt,name=downstream_router_id,json=downstreamRouterId" json:"downstream_router_id,omitempty"`
	// Next hop address
	NextHopAddress string `protobuf:"bytes,49,opt,name=next_hop_address,json=nextHopAddress" json:"next_hop_address,omitempty"`
	// Next hop address
	NextHopAddressGeneric *TeAddrT_ `protobuf:"bytes,50,opt,name=next_hop_address_generic,json=nextHopAddressGeneric" json:"next_hop_address_generic,omitempty"`
	// Previous hop address
	PreviousHopAddress string `protobuf:"bytes,51,opt,name=previous_hop_address,json=previousHopAddress" json:"previous_hop_address,omitempty"`
	// Previous hop address
	PreviousHopAddressGeneric *TeAddrT_ `protobuf:"bytes,52,opt,name=previous_hop_address_generic,json=previousHopAddressGeneric" json:"previous_hop_address_generic,omitempty"`
	// Incoming interface address
	IncomingAddress string `protobuf:"bytes,53,opt,name=incoming_address,json=incomingAddress" json:"incoming_address,omitempty"`
	// Incoming interface address
	IncomingAddressGeneric *TeAddrT_ `protobuf:"bytes,54,opt,name=incoming_address_generic,json=incomingAddressGeneric" json:"incoming_address_generic,omitempty"`
	// Interface handle of the backup tunnel
	BackupTunnelInterface string `protobuf:"bytes,55,opt,name=backup_tunnel_interface,json=backupTunnelInterface" json:"backup_tunnel_interface,omitempty"`
	// Hop count
	NodeHopCount uint32 `protobuf:"varint,56,opt,name=node_hop_count,json=nodeHopCount" json:"node_hop_count,omitempty"`
	// TE LSP convergence related information
	S2LConvergence *TeLspConvergenceInfo `protobuf:"bytes,57,opt,name=s2_l_convergence,json=s2LConvergence" json:"s2_l_convergence,omitempty"`
	// The soft preemption info for this LSP.
	SoftPreemption *MplsTeSoftPreemptionLspInfo `protobuf:"bytes,58,opt,name=soft_preemption,json=softPreemption" json:"soft_preemption,omitempty"`
	// Is Optical
	IsOptical bool `protobuf:"varint,59,opt,name=is_optical,json=isOptical" json:"is_optical,omitempty"`
	// GMPLS labels
	GmplsLabels *MplsTeMgmtGmplsLabels `protobuf:"bytes,60,opt,name=gmpls_labels,json=gmplsLabels" json:"gmpls_labels,omitempty"`
	// Otn S2L Information
	OtnS2L *MplsTeOtnS2LInfo `protobuf:"bytes,61,opt,name=otn_s2_l,json=otnS2L" json:"otn_s2_l,omitempty"`
	// The Head-end BFD info
	HeadEndBfdInfo *MplsTeHeadBfdInfo `protobuf:"bytes,62,opt,name=head_end_bfd_info,json=headEndBfdInfo" json:"head_end_bfd_info,omitempty"`
	// The Tail-end BFD info
	TailEndBfdInfo *MplsTeTailBfdInfo `protobuf:"bytes,63,opt,name=tail_end_bfd_info,json=tailEndBfdInfo" json:"tail_end_bfd_info,omitempty"`
	// SRLG-collection data
	SrlgCollection *TeS2LSrlgCollectInfo `protobuf:"bytes,64,opt,name=srlg_collection,json=srlgCollection" json:"srlg_collection,omitempty"`
	// Association Object
	Association *MplsTeS2LAssociationObject `protobuf:"bytes,65,opt,name=association" json:"association,omitempty"`
	// Protection Object
	Protection *MplsTeS2LProtectionObject `protobuf:"bytes,66,opt,name=protection" json:"protection,omitempty"`
	//  S2l Reverse ERO Object Present
	S2LReverseEroObjPresent bool `protobuf:"varint,67,opt,name=s2_l_reverse_ero_obj_present,json=s2LReverseEroObjPresent" json:"s2_l_reverse_ero_obj_present,omitempty"`
	//  Reverse Incoming ERO for this S2L
	ReverseEroIn []*RsvpMgmtEroSubobj `protobuf:"bytes,68,rep,name=reverse_ero_in,json=reverseEroIn" json:"reverse_ero_in,omitempty"`
	// Reverse Associated Bidir LSP Present
	ReverseLspPresent bool `protobuf:"varint,69,opt,name=reverse_lsp_present,json=reverseLspPresent" json:"reverse_lsp_present,omitempty"`
	// Reverse Associated Bidir LSP Connected
	ReverseLspConnected bool `protobuf:"varint,70,opt,name=reverse_lsp_connected,json=reverseLspConnected" json:"reverse_lsp_connected,omitempty"`
	// Reverse Associated Bidir LSP FEC
	ReverseLspFec *TeLspFecT `protobuf:"bytes,71,opt,name=reverse_lsp_fec,json=reverseLspFec" json:"reverse_lsp_fec,omitempty"`
	// Reverse Associated Bidir LSP Name
	ReverseLspName string `protobuf:"bytes,72,opt,name=reverse_lsp_name,json=reverseLspName" json:"reverse_lsp_name,omitempty"`
	//  S2L Reverse TSpec Object Present
	S2LReverseTSpecObjPresent bool `protobuf:"varint,73,opt,name=s2_l_reverse_t_spec_obj_present,json=s2LReverseTSpecObjPresent" json:"s2_l_reverse_t_spec_obj_present,omitempty"`
	// The Reverse T spec info
	ReverseTSpec *BandwidthSpecBag `protobuf:"bytes,74,opt,name=reverse_t_spec,json=reverseTSpec" json:"reverse_t_spec,omitempty"`
	// Reverse LSP Sub Objects
	S2LReverseLspSubObjs []uint32 `protobuf:"varint,75,rep,packed,name=s2_l_reverse_lsp_sub_objs,json=s2LReverseLspSubObjs" json:"s2_l_reverse_lsp_sub_objs,omitempty"`
	// FlexLSP S2L Information
	FlexInfo *MplsTeS2LFlexInfo `protobuf:"bytes,76,opt,name=flex_info,json=flexInfo" json:"flex_info,omitempty"`
	// Segment-Routing S2L path info
	S2LSegmentRoutingPath []*TeS2LSrPathHop `protobuf:"bytes,77,rep,name=s2_l_segment_routing_path,json=s2LSegmentRoutingPath" json:"s2_l_segment_routing_path,omitempty"`
	// Lsp Wrap  Related information
	LspWrapInfo *TunnelMidpointLspWrapInfoBag `protobuf:"bytes,78,opt,name=lsp_wrap_info,json=lspWrapInfo" json:"lsp_wrap_info,omitempty"`
	// Path is using Strict SPF
	PathUsingStrictSpf bool `protobuf:"varint,79,opt,name=path_using_strict_spf,json=pathUsingStrictSpf" json:"path_using_strict_spf,omitempty"`
	// S2L Diversity Information
	DiversityInfo        *MplsTeS2LDiversityInfo `protobuf:"bytes,80,opt,name=diversity_info,json=diversityInfo" json:"diversity_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *MplsTeP2MpS2L) Reset()         { *m = MplsTeP2MpS2L{} }
func (m *MplsTeP2MpS2L) String() string { return proto.CompactTextString(m) }
func (*MplsTeP2MpS2L) ProtoMessage()    {}
func (*MplsTeP2MpS2L) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886, []int{101}
}
func (m *MplsTeP2MpS2L) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeP2MpS2L.Unmarshal(m, b)
}
func (m *MplsTeP2MpS2L) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeP2MpS2L.Marshal(b, m, deterministic)
}
func (dst *MplsTeP2MpS2L) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeP2MpS2L.Merge(dst, src)
}
func (m *MplsTeP2MpS2L) XXX_Size() int {
	return xxx_messageInfo_MplsTeP2MpS2L.Size(m)
}
func (m *MplsTeP2MpS2L) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeP2MpS2L.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeP2MpS2L proto.InternalMessageInfo

func (m *MplsTeP2MpS2L) GetS2LFec() *TeS2LFecT {
	if m != nil {
		return m.S2LFec
	}
	return nil
}

func (m *MplsTeP2MpS2L) GetActivePathOption() *MplsTeP2MpPathOption {
	if m != nil {
		return m.ActivePathOption
	}
	return nil
}

func (m *MplsTeP2MpS2L) GetSharedRiskLinkGroups() []*MplsSrlgInfo {
	if m != nil {
		return m.SharedRiskLinkGroups
	}
	return nil
}

func (m *MplsTeP2MpS2L) GetPcalcArea() string {
	if m != nil {
		return m.PcalcArea
	}
	return ""
}

func (m *MplsTeP2MpS2L) GetIsExpandedEro() bool {
	if m != nil {
		return m.IsExpandedEro
	}
	return false
}

func (m *MplsTeP2MpS2L) GetPathReevalQueryMid() uint32 {
	if m != nil {
		return m.PathReevalQueryMid
	}
	return 0
}

func (m *MplsTeP2MpS2L) GetTimeSinceLastQueryReceivedMid() uint32 {
	if m != nil {
		return m.TimeSinceLastQueryReceivedMid
	}
	return 0
}

func (m *MplsTeP2MpS2L) GetTimeSinceLastPreferredPathExistsSendMid() uint32 {
	if m != nil {
		return m.TimeSinceLastPreferredPathExistsSendMid
	}
	return 0
}

func (m *MplsTeP2MpS2L) GetTimeSinceLastPreferredTreeExistsSendMid() uint32 {
	if m != nil {
		return m.TimeSinceLastPreferredTreeExistsSendMid
	}
	return 0
}

func (m *MplsTeP2MpS2L) GetExpandedEroAreaId() string {
	if m != nil {
		return m.ExpandedEroAreaId
	}
	return ""
}

func (m *MplsTeP2MpS2L) GetExpandedEroAffinityBits() uint32 {
	if m != nil {
		return m.ExpandedEroAffinityBits
	}
	return 0
}

func (m *MplsTeP2MpS2L) GetExpandedEroAffinityMask() uint32 {
	if m != nil {
		return m.ExpandedEroAffinityMask
	}
	return 0
}

func (m *MplsTeP2MpS2L) GetExpandedEroMetricType() string {
	if m != nil {
		return m.ExpandedEroMetricType
	}
	return ""
}

func (m *MplsTeP2MpS2L) GetExpandedEroMetric() uint32 {
	if m != nil {
		return m.ExpandedEroMetric
	}
	return 0
}

func (m *MplsTeP2MpS2L) GetAbrAutoDiscovered() string {
	if m != nil {
		return m.AbrAutoDiscovered
	}
	return ""
}

func (m *MplsTeP2MpS2L) GetIsFrrEnabled() bool {
	if m != nil {
		return m.IsFrrEnabled
	}
	return false
}

func (m *MplsTeP2MpS2L) GetIsNodeProtected() bool {
	if m != nil {
		return m.IsNodeProtected
	}
	return false
}

func (m *MplsTeP2MpS2L) GetIsBandwidthProtect() bool {
	if m != nil {
		return m.IsBandwidthProtect
	}
	return false
}

func (m *MplsTeP2MpS2L) GetPathRroEnabled() bool {
	if m != nil {
		return m.PathRroEnabled
	}
	return false
}

func (m *MplsTeP2MpS2L) GetOutEro() []*RsvpMgmtEroSubobj {
	if m != nil {
		return m.OutEro
	}
	return nil
}

func (m *MplsTeP2MpS2L) GetInEro() []*RsvpMgmtEroSubobj {
	if m != nil {
		return m.InEro
	}
	return nil
}

func (m *MplsTeP2MpS2L) GetOutXro() *TeXro {
	if m != nil {
		return m.OutXro
	}
	return nil
}

func (m *MplsTeP2MpS2L) GetInXro() *TeXro {
	if m != nil {
		return m.InXro
	}
	return nil
}

func (m *MplsTeP2MpS2L) GetPathRro() []*RsvpMgmtRroSubobj {
	if m != nil {
		return m.PathRro
	}
	return nil
}

func (m *MplsTeP2MpS2L) GetResvRro() []*RsvpMgmtRroSubobj {
	if m != nil {
		return m.ResvRro
	}
	return nil
}

func (m *MplsTeP2MpS2L) GetPathAffinityArray() []*TunnelHopInfo {
	if m != nil {
		return m.PathAffinityArray
	}
	return nil
}

func (m *MplsTeP2MpS2L) GetTSpec() *BandwidthSpecBag {
	if m != nil {
		return m.TSpec
	}
	return nil
}

func (m *MplsTeP2MpS2L) GetGenericTSpec() *TeMgmtGenericTspec {
	if m != nil {
		return m.GenericTSpec
	}
	return nil
}

func (m *MplsTeP2MpS2L) GetFSpec() *BandwidthSpecBag {
	if m != nil {
		return m.FSpec
	}
	return nil
}

func (m *MplsTeP2MpS2L) GetGenericFSpec() *TeMgmtGenericFspec {
	if m != nil {
		return m.GenericFSpec
	}
	return nil
}

func (m *MplsTeP2MpS2L) GetWeight() uint64 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *MplsTeP2MpS2L) GetReverseWeight() uint64 {
	if m != nil {
		return m.ReverseWeight
	}
	return 0
}

func (m *MplsTeP2MpS2L) GetUptime() uint32 {
	if m != nil {
		return m.Uptime
	}
	return 0
}

func (m *MplsTeP2MpS2L) GetEgressInterface() string {
	if m != nil {
		return m.EgressInterface
	}
	return ""
}

func (m *MplsTeP2MpS2L) GetEgressInterfaceState() string {
	if m != nil {
		return m.EgressInterfaceState
	}
	return ""
}

func (m *MplsTeP2MpS2L) GetEgressInterfaceBrief() string {
	if m != nil {
		return m.EgressInterfaceBrief
	}
	return ""
}

func (m *MplsTeP2MpS2L) GetIngressInterface() string {
	if m != nil {
		return m.IngressInterface
	}
	return ""
}

func (m *MplsTeP2MpS2L) GetIngressInterfaceState() string {
	if m != nil {
		return m.IngressInterfaceState
	}
	return ""
}

func (m *MplsTeP2MpS2L) GetIngressInterfaceBrief() string {
	if m != nil {
		return m.IngressInterfaceBrief
	}
	return ""
}

func (m *MplsTeP2MpS2L) GetS2LLocalLabel() uint32 {
	if m != nil {
		return m.S2LLocalLabel
	}
	return 0
}

func (m *MplsTeP2MpS2L) GetS2LOutLabel() uint32 {
	if m != nil {
		return m.S2LOutLabel
	}
	return 0
}

func (m *MplsTeP2MpS2L) GetOutboundFrrState() string {
	if m != nil {
		return m.OutboundFrrState
	}
	return ""
}

func (m *MplsTeP2MpS2L) GetFrrOutTunnelInterface() string {
	if m != nil {
		return m.FrrOutTunnelInterface
	}
	return ""
}

func (m *MplsTeP2MpS2L) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (m *MplsTeP2MpS2L) GetSignallingStatus() string {
	if m != nil {
		return m.SignallingStatus
	}
	return ""
}

func (m *MplsTeP2MpS2L) GetLocalRouterId() string {
	if m != nil {
		return m.LocalRouterId
	}
	return ""
}

func (m *MplsTeP2MpS2L) GetUpstreamRouterId() string {
	if m != nil {
		return m.UpstreamRouterId
	}
	return ""
}

func (m *MplsTeP2MpS2L) GetDownstreamRouterId() string {
	if m != nil {
		return m.DownstreamRouterId
	}
	return ""
}

func (m *MplsTeP2MpS2L) GetNextHopAddress() string {
	if m != nil {
		return m.NextHopAddress
	}
	return ""
}

func (m *MplsTeP2MpS2L) GetNextHopAddressGeneric() *TeAddrT_ {
	if m != nil {
		return m.NextHopAddressGeneric
	}
	return nil
}

func (m *MplsTeP2MpS2L) GetPreviousHopAddress() string {
	if m != nil {
		return m.PreviousHopAddress
	}
	return ""
}

func (m *MplsTeP2MpS2L) GetPreviousHopAddressGeneric() *TeAddrT_ {
	if m != nil {
		return m.PreviousHopAddressGeneric
	}
	return nil
}

func (m *MplsTeP2MpS2L) GetIncomingAddress() string {
	if m != nil {
		return m.IncomingAddress
	}
	return ""
}

func (m *MplsTeP2MpS2L) GetIncomingAddressGeneric() *TeAddrT_ {
	if m != nil {
		return m.IncomingAddressGeneric
	}
	return nil
}

func (m *MplsTeP2MpS2L) GetBackupTunnelInterface() string {
	if m != nil {
		return m.BackupTunnelInterface
	}
	return ""
}

func (m *MplsTeP2MpS2L) GetNodeHopCount() uint32 {
	if m != nil {
		return m.NodeHopCount
	}
	return 0
}

func (m *MplsTeP2MpS2L) GetS2LConvergence() *TeLspConvergenceInfo {
	if m != nil {
		return m.S2LConvergence
	}
	return nil
}

func (m *MplsTeP2MpS2L) GetSoftPreemption() *MplsTeSoftPreemptionLspInfo {
	if m != nil {
		return m.SoftPreemption
	}
	return nil
}

func (m *MplsTeP2MpS2L) GetIsOptical() bool {
	if m != nil {
		return m.IsOptical
	}
	return false
}

func (m *MplsTeP2MpS2L) GetGmplsLabels() *MplsTeMgmtGmplsLabels {
	if m != nil {
		return m.GmplsLabels
	}
	return nil
}

func (m *MplsTeP2MpS2L) GetOtnS2L() *MplsTeOtnS2LInfo {
	if m != nil {
		return m.OtnS2L
	}
	return nil
}

func (m *MplsTeP2MpS2L) GetHeadEndBfdInfo() *MplsTeHeadBfdInfo {
	if m != nil {
		return m.HeadEndBfdInfo
	}
	return nil
}

func (m *MplsTeP2MpS2L) GetTailEndBfdInfo() *MplsTeTailBfdInfo {
	if m != nil {
		return m.TailEndBfdInfo
	}
	return nil
}

func (m *MplsTeP2MpS2L) GetSrlgCollection() *TeS2LSrlgCollectInfo {
	if m != nil {
		return m.SrlgCollection
	}
	return nil
}

func (m *MplsTeP2MpS2L) GetAssociation() *MplsTeS2LAssociationObject {
	if m != nil {
		return m.Association
	}
	return nil
}

func (m *MplsTeP2MpS2L) GetProtection() *MplsTeS2LProtectionObject {
	if m != nil {
		return m.Protection
	}
	return nil
}

func (m *MplsTeP2MpS2L) GetS2LReverseEroObjPresent() bool {
	if m != nil {
		return m.S2LReverseEroObjPresent
	}
	return false
}

func (m *MplsTeP2MpS2L) GetReverseEroIn() []*RsvpMgmtEroSubobj {
	if m != nil {
		return m.ReverseEroIn
	}
	return nil
}

func (m *MplsTeP2MpS2L) GetReverseLspPresent() bool {
	if m != nil {
		return m.ReverseLspPresent
	}
	return false
}

func (m *MplsTeP2MpS2L) GetReverseLspConnected() bool {
	if m != nil {
		return m.ReverseLspConnected
	}
	return false
}

func (m *MplsTeP2MpS2L) GetReverseLspFec() *TeLspFecT {
	if m != nil {
		return m.ReverseLspFec
	}
	return nil
}

func (m *MplsTeP2MpS2L) GetReverseLspName() string {
	if m != nil {
		return m.ReverseLspName
	}
	return ""
}

func (m *MplsTeP2MpS2L) GetS2LReverseTSpecObjPresent() bool {
	if m != nil {
		return m.S2LReverseTSpecObjPresent
	}
	return false
}

func (m *MplsTeP2MpS2L) GetReverseTSpec() *BandwidthSpecBag {
	if m != nil {
		return m.ReverseTSpec
	}
	return nil
}

func (m *MplsTeP2MpS2L) GetS2LReverseLspSubObjs() []uint32 {
	if m != nil {
		return m.S2LReverseLspSubObjs
	}
	return nil
}

func (m *MplsTeP2MpS2L) GetFlexInfo() *MplsTeS2LFlexInfo {
	if m != nil {
		return m.FlexInfo
	}
	return nil
}

func (m *MplsTeP2MpS2L) GetS2LSegmentRoutingPath() []*TeS2LSrPathHop {
	if m != nil {
		return m.S2LSegmentRoutingPath
	}
	return nil
}

func (m *MplsTeP2MpS2L) GetLspWrapInfo() *TunnelMidpointLspWrapInfoBag {
	if m != nil {
		return m.LspWrapInfo
	}
	return nil
}

func (m *MplsTeP2MpS2L) GetPathUsingStrictSpf() bool {
	if m != nil {
		return m.PathUsingStrictSpf
	}
	return false
}

func (m *MplsTeP2MpS2L) GetDiversityInfo() *MplsTeS2LDiversityInfo {
	if m != nil {
		return m.DiversityInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*MplsTeP2MpLsp_KEYS)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.mpls_te_p2mp_lsp_KEYS")
	proto.RegisterType((*MplsTeP2MpLsp)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.mpls_te_p2mp_lsp")
	proto.RegisterType((*RsvpNgApiStatsEntryBag)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.rsvp_ng_api_stats_entry_bag")
	proto.RegisterType((*RsvpNgApiStatsBag)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.rsvp_ng_api_stats_bag")
	proto.RegisterType((*RsvpNgApiCtxEventBag)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.rsvp_ng_api_ctx_event_bag")
	proto.RegisterType((*RsvpNgApiCtxHistory)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.rsvp_ng_api_ctx_history")
	proto.RegisterType((*RsvpNgApiCtxBag)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.rsvp_ng_api_ctx_bag")
	proto.RegisterType((*RsvpMgmtEroIpv4Subobj)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.rsvp_mgmt_ero_ipv4_subobj")
	proto.RegisterType((*RsvpMgmtEroUnnumSubobj)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.rsvp_mgmt_ero_unnum_subobj")
	proto.RegisterType((*RsvpMgmtEroSubobj)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.rsvp_mgmt_ero_subobj")
	proto.RegisterType((*RsvpMgmtRroIpv4SubobjFlags)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.rsvp_mgmt_rro_ipv4_subobj_flags")
	proto.RegisterType((*RsvpMgmtRroLabelSubobjFlags)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.rsvp_mgmt_rro_label_subobj_flags")
	proto.RegisterType((*RsvpMgmtRroUnnumberedSubobjFlags)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.rsvp_mgmt_rro_unnumbered_subobj_flags")
	proto.RegisterType((*RsvpMgmtRroIpv4Subobj)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.rsvp_mgmt_rro_ipv4_subobj")
	proto.RegisterType((*RsvpMgmtRroLabelSubobj)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.rsvp_mgmt_rro_label_subobj")
	proto.RegisterType((*RsvpMgmtRroUnnumberedSubobj)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.rsvp_mgmt_rro_unnumbered_subobj")
	proto.RegisterType((*RsvpMgmtRroSrlgSubobj)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.rsvp_mgmt_rro_srlg_subobj")
	proto.RegisterType((*RsvpMgmtRroSubobj)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.rsvp_mgmt_rro_subobj")
	proto.RegisterType((*TeS2LFecT)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.te_s2l_fec_t")
	proto.RegisterType((*TeAddrTypeIpv4Unnum)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.te_addr_type_ipv4_unnum")
	proto.RegisterType((*Addr)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.addr")
	proto.RegisterType((*TeAddrT_)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.te_addr_t_")
	proto.RegisterType((*TeLspFecCtypeDataT)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.te_lsp_fec_ctype_data_t")
	proto.RegisterType((*TeLspFecT)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.te_lsp_fec_t")
	proto.RegisterType((*AffinityNameBag)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.affinity_name_bag")
	proto.RegisterType((*MplsTeTunnelsAffinityInfo)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.mpls_te_tunnels_affinity_info")
	proto.RegisterType((*MplsSrlgInfo)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.mpls_srlg_info")
	proto.RegisterType((*TeXroSubobjIpv4)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.te_xro_subobj_ipv4")
	proto.RegisterType((*TeXroSubobjIpv6)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.te_xro_subobj_ipv6")
	proto.RegisterType((*TeXroSubobjUnnum)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.te_xro_subobj_unnum")
	proto.RegisterType((*TeXroSubobjAs)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.te_xro_subobj_as")
	proto.RegisterType((*TeXroSubobjSrlg)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.te_xro_subobj_srlg")
	proto.RegisterType((*TeXroSubobjP2PLsp)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.te_xro_subobj_p2p_lsp")
	proto.RegisterType((*TeXroSubobj)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.te_xro_subobj")
	proto.RegisterType((*TeXro)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.te_xro")
	proto.RegisterType((*TeRevertSchT)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.te_revert_sch_t")
	proto.RegisterType((*HasiIdEvent)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.hasi_id_event")
	proto.RegisterType((*HasiSObjIdEvents)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.hasi_s_obj_id_events")
	proto.RegisterType((*HasiSObjectCtx)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.hasi_s_object_ctx")
	proto.RegisterType((*HasiMIdEvents)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.hasi_m_id_events")
	proto.RegisterType((*HasiMObjectSlaveInfo)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.hasi_m_object_slave_info")
	proto.RegisterType((*HasiMObjectCtx)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.hasi_m_object_ctx")
	proto.RegisterType((*TeServP2MpAutoTun)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.te_serv_p2mp_auto_tun")
	proto.RegisterType((*TeServP2PAutoTun)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.te_serv_p2p_auto_tun")
	proto.RegisterType((*TeServP2MpEinfo)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.te_serv_p2mp_einfo")
	proto.RegisterType((*MplsTeP2MpFsmEventCounts)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.mpls_te_p2mp_fsm_event_counts")
	proto.RegisterType((*MplsTeP2MpFsmEventStat)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.mpls_te_p2mp_fsm_event_stat")
	proto.RegisterType((*MplsTeP2MpFsmInfo)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.mpls_te_p2mp_fsm_info")
	proto.RegisterType((*TeServP2MpEinfos)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.te_serv_p2mp_einfos")
	proto.RegisterType((*TeServiceInfo)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.te_service_info")
	proto.RegisterType((*TeOduFlexCbrInfo)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.te_odu_flex_cbr_info")
	proto.RegisterType((*TeOduFlexGfpFResInfo)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.te_odu_flex_gfp_f_res_info")
	proto.RegisterType((*TeOduFlexGfpFNonResInfo)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.te_odu_flex_gfp_f_non_res_info")
	proto.RegisterType((*TeOduV3Bw)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.te_odu_v3_bw")
	proto.RegisterType((*MplsTeLoggingAttributes)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.mpls_te_logging_attributes")
	proto.RegisterType((*MplsTeAttributeSetAutoMesh)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.mpls_te_attribute_set_auto_mesh")
	proto.RegisterType((*MplsTeProtectedIfNameStr)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.mpls_te_protected_if_name_str")
	proto.RegisterType((*MplsTeAttributeSetSigName)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.mpls_te_attribute_set_sig_name")
	proto.RegisterType((*MplsTeAttributeSetAutoBackup)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.mpls_te_attribute_set_auto_backup")
	proto.RegisterType((*MplsTeAttributeSetVersion)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.mpls_te_attribute_set_version")
	proto.RegisterType((*MplsTeAttributeSetBfdRevPath)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.mpls_te_attribute_set_bfd_rev_path")
	proto.RegisterType((*MplsTeAttributeSetPathOption)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.mpls_te_attribute_set_path_option")
	proto.RegisterType((*MplsTeAttributeSetXro)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.mpls_te_attribute_set_xro")
	proto.RegisterType((*MplsTeAttributeSetP2MpTe)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.mpls_te_attribute_set_p2mp_te")
	proto.RegisterType((*MplsTeAttributeSetApsPp)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.mpls_te_attribute_set_aps_pp")
	proto.RegisterType((*MplsTeAttributeSetSrPrependEntry)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.mpls_te_attribute_set_sr_prepend_entry")
	proto.RegisterType((*MplsTeAttributeSetSrPrependList)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.mpls_te_attribute_set_sr_prepend_list")
	proto.RegisterType((*MplsTeAttributeSetP2PTe)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.mpls_te_attribute_set_p2p_te")
	proto.RegisterType((*MplsTeAttributeSetUnion)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.mpls_te_attribute_set_union")
	proto.RegisterType((*MplsTeAttributeSet)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.mpls_te_attribute_set")
	proto.RegisterType((*MplsTeMgmtWdmFixedGridLabel)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.mpls_te_mgmt_wdm_fixed_grid_label")
	proto.RegisterType((*MplsTeMgmtG709OtnFixedSizeLabel)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.mpls_te_mgmt_g709_otn_fixed_size_label")
	proto.RegisterType((*MplsTeMgmtGmplsLabel)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.mpls_te_mgmt_gmpls_label")
	proto.RegisterType((*MplsTeMgmtGmplsLabels)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.mpls_te_mgmt_gmpls_labels")
	proto.RegisterType((*MplsTeS2LOtnInfo)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.mpls_te_s2l_otn_info")
	proto.RegisterType((*TePvtProtObjT)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.te_pvt_prot_obj_t")
	proto.RegisterType((*MplsTeS2LApsInfo)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.mpls_te_s2l_aps_info")
	proto.RegisterType((*MplsTeOtnS2LInfo)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.mpls_te_otn_s2l_info")
	proto.RegisterType((*TeS2LSrPathHop)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.te_s2l_sr_path_hop")
	proto.RegisterType((*MplsTeP2MpPcalcError)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.mpls_te_p2mp_pcalc_error")
	proto.RegisterType((*MplsTeP2MpSigError)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.mpls_te_p2mp_sig_error")
	proto.RegisterType((*MplsTeP2MpPathOption)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.mpls_te_p2mp_path_option")
	proto.RegisterType((*TeMgmtG709OtnTspec)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.te_mgmt_g709_otn_tspec")
	proto.RegisterType((*TeMgmtGenericTspec)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.te_mgmt_generic_tspec")
	proto.RegisterType((*TeMgmtG709OtnFspec)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.te_mgmt_g709_otn_fspec")
	proto.RegisterType((*TeMgmtGenericFspec)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.te_mgmt_generic_fspec")
	proto.RegisterType((*BandwidthSpecBag)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.bandwidth_spec_bag")
	proto.RegisterType((*TeLspConvergenceInfo)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.te_lsp_convergence_info")
	proto.RegisterType((*MplsTeSoftPreemptionLspInfo)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.mpls_te_soft_preemption_lsp_info")
	proto.RegisterType((*TunnelHopInfo)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.tunnel_hop_info")
	proto.RegisterType((*MplsTeBfdSessionInfo)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.mpls_te_bfd_session_info")
	proto.RegisterType((*MplsTeBfdDeletionHistory)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.mpls_te_bfd_deletion_history")
	proto.RegisterType((*MplsTeHeadBfdInfo)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.mpls_te_head_bfd_info")
	proto.RegisterType((*MplsTeTailBfdInfo)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.mpls_te_tail_bfd_info")
	proto.RegisterType((*MplsTeS2LAssociationObject)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.mpls_te_s2l_association_object")
	proto.RegisterType((*MplsTeS2LProtectionObject)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.mpls_te_s2l_protection_object")
	proto.RegisterType((*FlexLockoutT)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.flex_lockout_t")
	proto.RegisterType((*MplsTeS2LFlexInfo)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.mpls_te_s2l_flex_info")
	proto.RegisterType((*TeS2LSrlgCollectInfo)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.te_s2l_srlg_collect_info")
	proto.RegisterType((*TunnelMidpointLspWrapInfoBag)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.tunnel_midpoint_lsp_wrap_info_bag")
	proto.RegisterType((*MplsTeS2LDiversityInfo)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.mpls_te_s2l_diversity_info")
	proto.RegisterType((*MplsTeP2MpS2L)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.p2p_p2mp_tunnel.tunnel_remotes.tunnel_remote.mpls_te_p2mp_s2l")
}

func init() {
	proto.RegisterFile("mpls_te_p2mp_lsp.proto", fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886)
}

var fileDescriptor_mpls_te_p2mp_lsp_364b6c63f40ce886 = []byte{
	// 11866 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x7d, 0x5b, 0x8c, 0x24, 0xc9,
	0x71, 0x18, 0x6a, 0x9e, 0x3d, 0xd1, 0xdd, 0xf3, 0xa8, 0x79, 0xf5, 0xec, 0x7b, 0xfb, 0x6e, 0xef,
	0xf6, 0x5e, 0xbb, 0x77, 0xb3, 0xc7, 0xbd, 0x17, 0x5f, 0xfb, 0xbc, 0x1b, 0x71, 0x76, 0x77, 0x5c,
	0x33, 0x77, 0xa4, 0x0c, 0x49, 0xa5, 0xea, 0xaa, 0xec, 0x9e, 0xba, 0xad, 0xae, 0xaa, 0xcb, 0xac,
	0x9e, 0x07, 0x69, 0xc9, 0x90, 0x44, 0xd2, 0xbc, 0x23, 0x29, 0x91, 0x32, 0x49, 0x4b, 0xa0, 0x28,
	0xd2, 0x30, 0x08, 0x18, 0xb4, 0x3f, 0x04, 0xc3, 0xb0, 0x6c, 0x40, 0x82, 0x01, 0xdb, 0xb0, 0x21,
	0x43, 0xfe, 0x36, 0x04, 0x7f, 0xe8, 0xc7, 0x3f, 0xb6, 0x3f, 0x6c, 0x83, 0x36, 0x60, 0xd8, 0x1f,
	0x32, 0x32, 0x22, 0xb3, 0x2a, 0xab, 0xbb, 0x67, 0xf6, 0x8e, 0xbc, 0x9e, 0x3b, 0x03, 0xfe, 0x99,
	0xe9, 0x8a, 0x8c, 0xcc, 0x8c, 0x7c, 0x45, 0x46, 0x46, 0x44, 0x46, 0xc2, 0x4a, 0x37, 0x8d, 0x84,
	0x9b, 0x31, 0x37, 0x5d, 0xef, 0xa6, 0x6e, 0x24, 0xd2, 0x2b, 0x29, 0x4f, 0xb2, 0xc4, 0xbe, 0xef,
	0x87, 0xc2, 0x4f, 0xdc, 0x30, 0x11, 0xee, 0x01, 0x77, 0x35, 0x52, 0x92, 0x32, 0x7e, 0x45, 0x7d,
	0x5c, 0x49, 0xd7, 0x53, 0xca, 0x95, 0xf5, 0xe2, 0x98, 0x45, 0x57, 0xe8, 0x9f, 0xcb, 0x59, 0x37,
	0xc9, 0x98, 0x28, 0x7f, 0x36, 0x7f, 0x73, 0x0c, 0x96, 0xfb, 0xab, 0x72, 0x3f, 0x77, 0xe7, 0x17,
	0xb7, 0xed, 0x65, 0x98, 0x92, 0xbf, 0xc3, 0xa0, 0x61, 0x5d, 0xb0, 0x2e, 0xd7, 0x9d, 0xc9, 0x48,
	0xa4, 0x1b, 0x81, 0x7d, 0x1a, 0x66, 0x54, 0x09, 0x61, 0xd0, 0x18, 0xc3, 0x94, 0x0a, 0x01, 0x36,
	0x02, 0xfb, 0x59, 0xb0, 0xd9, 0x41, 0xc6, 0xe2, 0x80, 0x05, 0x6e, 0x81, 0x35, 0x7e, 0xc1, 0xba,
	0x3c, 0xe3, 0xcc, 0xeb, 0x94, 0x1d, 0x8d, 0x7d, 0x09, 0x66, 0x45, 0xd2, 0xe3, 0x3e, 0x73, 0xbd,
	0x20, 0xe0, 0x4c, 0x88, 0xc6, 0x04, 0x62, 0xd6, 0x09, 0x7a, 0x83, 0x80, 0x92, 0x10, 0xdf, 0xcd,
	0x0e, 0x53, 0xd6, 0x98, 0xc4, 0xe4, 0x49, 0x7f, 0xe7, 0x30, 0x65, 0xf6, 0x55, 0x58, 0x0c, 0x98,
	0xc8, 0xc2, 0xd8, 0xcb, 0xc2, 0x24, 0xce, 0x8b, 0x98, 0x42, 0x1c, 0xdb, 0x48, 0xd2, 0xe5, 0x34,
	0xa0, 0x92, 0xae, 0xbb, 0x5d, 0x6c, 0xd2, 0x34, 0x12, 0x3e, 0x95, 0xae, 0xdf, 0x4b, 0x37, 0x82,
	0xe6, 0x9f, 0x57, 0x60, 0xbe, 0xbf, 0x13, 0xec, 0xc7, 0xa0, 0x2e, 0xc2, 0x4e, 0xec, 0x45, 0x2c,
	0x70, 0x63, 0xaf, 0xcb, 0x1a, 0xeb, 0x58, 0x72, 0x4d, 0x03, 0xef, 0x7b, 0x5d, 0x66, 0x37, 0xa1,
	0x1e, 0x0a, 0xb7, 0xcd, 0xb9, 0xdb, 0xf6, 0xc2, 0x88, 0x05, 0x8d, 0x6b, 0x17, 0xac, 0xcb, 0x15,
	0xa7, 0x1a, 0x8a, 0xbb, 0x9c, 0xdf, 0x45, 0x90, 0xfd, 0x34, 0x2c, 0x48, 0x04, 0xcf, 0xcf, 0xc2,
	0x3d, 0xe6, 0x72, 0xe6, 0x89, 0x24, 0x6e, 0xbc, 0x88, 0x04, 0xcc, 0xb5, 0x39, 0xbf, 0x81, 0x70,
	0x07, 0xc1, 0xb2, 0x52, 0xd9, 0xe9, 0x2d, 0x2f, 0x0e, 0xf6, 0xc3, 0x20, 0xdb, 0x6d, 0x7c, 0x02,
	0xf1, 0x6a, 0x91, 0x48, 0x6f, 0x6a, 0x98, 0xec, 0x65, 0x89, 0x24, 0x58, 0xd6, 0x4b, 0xdd, 0x94,
	0x87, 0x09, 0x0f, 0xb3, 0xc3, 0xc6, 0x75, 0xc4, 0x9c, 0x8f, 0x44, 0xba, 0x2d, 0x13, 0xb6, 0x14,
	0x5c, 0x56, 0x2f, 0xb1, 0x77, 0x93, 0x28, 0x28, 0x90, 0x5f, 0xa2, 0xea, 0x23, 0x91, 0xbe, 0x91,
	0x44, 0x41, 0x8e, 0xab, 0x4a, 0xce, 0xab, 0xa7, 0x6e, 0x7f, 0x99, 0xc6, 0xcf, 0xa4, 0x01, 0x47,
	0xe0, 0x32, 0xcc, 0x07, 0x22, 0x63, 0xae, 0x1f, 0x79, 0x42, 0xb8, 0x5d, 0x2f, 0xf3, 0x77, 0x1b,
	0xaf, 0x60, 0xfb, 0x67, 0x25, 0xfc, 0x96, 0x04, 0xdf, 0x93, 0xd0, 0x3e, 0xcc, 0x30, 0x0e, 0xd8,
	0x41, 0xe3, 0x55, 0x24, 0xa1, 0xc0, 0xdc, 0x90, 0x50, 0xbb, 0x07, 0xd3, 0x92, 0x82, 0x36, 0xf3,
	0x1b, 0xaf, 0x5d, 0xb0, 0x2e, 0x57, 0xd7, 0x7f, 0xe9, 0xca, 0x87, 0x3b, 0xe3, 0xaf, 0x64, 0xcc,
	0x55, 0x35, 0xb8, 0x99, 0x23, 0xa7, 0xf8, 0x5d, 0xe6, 0xdb, 0x36, 0x4c, 0x60, 0x53, 0x3f, 0x89,
	0x4d, 0xc5, 0xdf, 0xf6, 0xdf, 0x80, 0x19, 0xb1, 0xee, 0x46, 0x6e, 0x14, 0x8a, 0xac, 0xf1, 0xa9,
	0x0b, 0xe3, 0x97, 0xab, 0xeb, 0xbf, 0xfa, 0x61, 0x13, 0x53, 0x9a, 0x75, 0x62, 0x3d, 0x72, 0xa6,
	0xc5, 0xfa, 0xe6, 0x66, 0x28, 0x32, 0x7b, 0x05, 0xa6, 0x7a, 0x69, 0x16, 0x76, 0x59, 0xe3, 0xd3,
	0x34, 0x57, 0xe9, 0x4b, 0xce, 0x62, 0x49, 0x95, 0x70, 0x7b, 0x69, 0xe3, 0x33, 0x94, 0x22, 0xd6,
	0x37, 0xc5, 0x9b, 0xa9, 0xec, 0x64, 0x4a, 0x49, 0x79, 0xe2, 0x33, 0x16, 0x84, 0x71, 0xa7, 0xf1,
	0x59, 0xea, 0x64, 0x89, 0xb1, 0x95, 0x43, 0xed, 0x33, 0x00, 0x84, 0x19, 0x24, 0xfb, 0x71, 0xe3,
	0x06, 0x2d, 0x62, 0x89, 0x73, 0x3b, 0xd9, 0x8f, 0xed, 0x67, 0x60, 0x81, 0xb3, 0x44, 0xd6, 0x16,
	0x7e, 0x31, 0x9f, 0xaf, 0x37, 0x69, 0x0e, 0x14, 0x09, 0x6a, 0xc2, 0x3e, 0x07, 0xb6, 0x81, 0x9c,
	0xf1, 0xb0, 0xd3, 0x61, 0xbc, 0x71, 0x0b, 0xb1, 0x8d, 0x62, 0x76, 0x28, 0xc1, 0x3e, 0x0b, 0x20,
	0x5b, 0xc1, 0xdd, 0x88, 0xb5, 0xb3, 0xc6, 0x6d, 0xac, 0x79, 0x06, 0x21, 0x9b, 0xac, 0x9d, 0xc9,
	0xe4, 0x50, 0xb8, 0xa9, 0x27, 0x44, 0xb8, 0xc7, 0x1a, 0x77, 0x70, 0x2e, 0xcd, 0x84, 0x62, 0x8b,
	0x00, 0xf6, 0x45, 0xa8, 0x85, 0x72, 0xfa, 0x64, 0x8c, 0xb7, 0x3d, 0x9f, 0x35, 0xee, 0xea, 0xc5,
	0xb6, 0xa1, 0x41, 0xb2, 0x13, 0x22, 0x4f, 0x64, 0x6e, 0xea, 0x65, 0xbb, 0xae, 0xbf, 0xeb, 0xc5,
	0x1d, 0xd6, 0x78, 0x9d, 0x3a, 0x41, 0xc2, 0xb7, 0xbc, 0x6c, 0xf7, 0x16, 0x42, 0xed, 0xa7, 0x60,
	0x3e, 0x65, 0x5c, 0x84, 0x22, 0x63, 0x71, 0xe6, 0xb6, 0x0e, 0x33, 0x26, 0x1a, 0x6f, 0x5c, 0xb0,
	0x2e, 0x4f, 0x38, 0x73, 0x05, 0xfc, 0xa6, 0x04, 0xcb, 0x46, 0x1a, 0xa8, 0xa9, 0xe7, 0x3f, 0x64,
	0x99, 0x68, 0x6c, 0x20, 0xf2, 0x42, 0x91, 0xb2, 0x45, 0x09, 0xcd, 0x6b, 0x70, 0x9a, 0x8b, 0xbd,
	0xd4, 0x8d, 0x3b, 0xae, 0x97, 0x86, 0xae, 0xc8, 0xbc, 0x4c, 0xb8, 0x2c, 0xce, 0xf8, 0xa1, 0xdb,
	0xf2, 0x3a, 0xf6, 0x12, 0x4c, 0xfa, 0x49, 0x2f, 0xce, 0x90, 0xaf, 0x4e, 0x38, 0xf4, 0xd1, 0x7c,
	0x6f, 0x1a, 0x96, 0x07, 0x73, 0x49, 0xfc, 0xc7, 0x61, 0xd6, 0xcf, 0x0e, 0x5c, 0xb6, 0x27, 0x2b,
	0xc7, 0x59, 0x6a, 0x11, 0x27, 0xf2, 0xb3, 0x83, 0x3b, 0x12, 0x88, 0x8b, 0xf1, 0x09, 0x98, 0xf3,
	0x33, 0x1e, 0x99, 0x68, 0x63, 0xc4, 0x4d, 0x25, 0xb8, 0xc0, 0x7b, 0xd7, 0x82, 0x19, 0xe1, 0xef,
	0xb2, 0xa0, 0x27, 0xd9, 0xd5, 0x38, 0xae, 0xb1, 0x87, 0x1f, 0xf6, 0xb4, 0x3e, 0xa6, 0xf9, 0x4e,
	0x51, 0xbb, 0xfd, 0x25, 0x18, 0xcb, 0x0e, 0x90, 0xe9, 0x9f, 0x30, 0x0d, 0x63, 0xd9, 0x81, 0xac,
	0x9c, 0x1f, 0xe0, 0x96, 0x72, 0xd2, 0x95, 0xf3, 0x03, 0xfb, 0xcb, 0x16, 0x4c, 0x07, 0x3c, 0x49,
	0xdd, 0xec, 0x00, 0x77, 0xac, 0x13, 0x26, 0x61, 0x4a, 0xd6, 0xbd, 0x63, 0x90, 0xc1, 0x0f, 0x70,
	0x4b, 0xfc, 0x28, 0xc8, 0x70, 0x0e, 0xec, 0xdf, 0xb6, 0xa0, 0x96, 0x26, 0x22, 0x4b, 0x93, 0x58,
	0x0a, 0x0e, 0x07, 0x8d, 0xca, 0xc9, 0xd3, 0x52, 0xcd, 0x09, 0xd8, 0x39, 0x68, 0xfe, 0x89, 0x05,
	0x6b, 0x26, 0x72, 0xb1, 0xfe, 0xe4, 0x82, 0xd4, 0x9b, 0x85, 0x65, 0x6c, 0x16, 0xaf, 0xc1, 0xa9,
	0x94, 0x27, 0x41, 0xcf, 0x67, 0xdc, 0x15, 0xbd, 0x6e, 0xd7, 0xe3, 0x87, 0x2e, 0x67, 0x69, 0xe4,
	0x1d, 0x6a, 0x39, 0x69, 0xc2, 0x59, 0xd5, 0x18, 0xdb, 0x84, 0xe0, 0x60, 0xfa, 0x46, 0x60, 0xaf,
	0xc2, 0x74, 0x28, 0x5c, 0xc1, 0xe2, 0x0c, 0x17, 0x64, 0xc5, 0x99, 0x0a, 0xc5, 0x36, 0x8b, 0x33,
	0x7b, 0x1e, 0xc6, 0xbd, 0x0e, 0xc3, 0x15, 0x52, 0x77, 0xe4, 0x4f, 0x29, 0x20, 0xb4, 0xc3, 0x28,
	0x63, 0x5c, 0x33, 0x66, 0x92, 0x89, 0x6a, 0x04, 0x24, 0xa6, 0xdc, 0xec, 0xc1, 0x6a, 0x3f, 0xf5,
	0xbb, 0xa1, 0xc8, 0x12, 0x7e, 0x68, 0x9f, 0x01, 0x64, 0xb7, 0x22, 0xf3, 0xba, 0xa9, 0x12, 0xec,
	0x0a, 0x80, 0xe4, 0xbf, 0x03, 0xfc, 0x63, 0x86, 0xe5, 0xbc, 0x23, 0x4f, 0x0e, 0xbc, 0xcc, 0x6b,
	0x8c, 0x5f, 0x18, 0x97, 0xb9, 0x11, 0x72, 0xdb, 0xcb, 0xbc, 0xe6, 0x7f, 0x9a, 0x82, 0xc5, 0xfe,
	0x7a, 0x65, 0x7f, 0x1d, 0xdf, 0x37, 0xd6, 0xf1, 0x7d, 0x73, 0x1b, 0xce, 0x1f, 0x95, 0xb9, 0xe5,
	0x09, 0x56, 0x48, 0xa1, 0xa7, 0x87, 0x96, 0x70, 0xd3, 0x13, 0x6c, 0x23, 0x90, 0x24, 0xf8, 0x49,
	0x2c, 0x7a, 0xdd, 0xa1, 0x24, 0x8c, 0x13, 0x09, 0x1a, 0x63, 0x08, 0x09, 0x47, 0x65, 0xd6, 0x24,
	0xd0, 0x08, 0x9d, 0x1e, 0x5a, 0x82, 0x22, 0x61, 0x09, 0x26, 0xdb, 0x91, 0xd7, 0x11, 0x38, 0x62,
	0x75, 0x87, 0x3e, 0xe4, 0x36, 0x9f, 0xf0, 0xb0, 0x13, 0xc6, 0x4a, 0x70, 0x55, 0x5f, 0xf6, 0x57,
	0x2c, 0x00, 0x39, 0x45, 0x43, 0x91, 0x85, 0xbe, 0x68, 0x4c, 0xa3, 0xf8, 0xc1, 0x46, 0xbf, 0x20,
	0xe4, 0x52, 0x30, 0x2a, 0xb6, 0x7f, 0xc3, 0x82, 0x29, 0x1c, 0x61, 0xd1, 0xa8, 0x20, 0x0d, 0xe1,
	0x28, 0x69, 0x28, 0xad, 0x33, 0x47, 0x55, 0x2c, 0x69, 0x98, 0x56, 0xf3, 0xb7, 0x31, 0x83, 0x44,
	0x74, 0x46, 0x4d, 0x84, 0xaa, 0xce, 0xd1, 0xf5, 0xda, 0x77, 0xe1, 0x82, 0x88, 0xbc, 0x3d, 0xe6,
	0x1e, 0x33, 0x93, 0x01, 0xa7, 0xd1, 0x19, 0xc4, 0xdb, 0x3a, 0x62, 0x3a, 0xe7, 0xe5, 0x1c, 0x33,
	0x1d, 0xab, 0x46, 0x39, 0xb7, 0x86, 0xcf, 0xc9, 0xe6, 0xbb, 0x9a, 0x43, 0x75, 0x3b, 0xdd, 0xcc,
	0x65, 0x3c, 0x71, 0xc3, 0x74, 0xef, 0x45, 0x57, 0xf4, 0x5a, 0x49, 0xeb, 0x6d, 0x29, 0x0c, 0x48,
	0x86, 0x92, 0xf1, 0xd0, 0xcf, 0x5c, 0x9e, 0xf4, 0x32, 0x62, 0x56, 0x15, 0xa7, 0x1e, 0x8a, 0x6d,
	0x84, 0x3a, 0x12, 0x68, 0x9f, 0x87, 0xaa, 0xcc, 0xaa, 0xcf, 0x4e, 0xb4, 0xe0, 0x81, 0xf1, 0x44,
	0x9f, 0x99, 0x1e, 0x83, 0x7a, 0xca, 0x59, 0x3b, 0x3c, 0x70, 0x23, 0x16, 0x77, 0xb2, 0x5d, 0x5c,
	0x2a, 0x75, 0xa7, 0x46, 0xc0, 0x4d, 0x84, 0x35, 0x7f, 0x62, 0xc1, 0xa9, 0x32, 0x2d, 0xbd, 0x38,
	0xee, 0x75, 0x3f, 0x28, 0x31, 0x97, 0x61, 0x1e, 0xdb, 0xa1, 0x65, 0xb9, 0x62, 0x69, 0xcf, 0x32,
	0x9e, 0xe4, 0x22, 0xde, 0x46, 0x20, 0x4f, 0x5d, 0x12, 0x13, 0xcb, 0xe2, 0xc5, 0x09, 0x53, 0xb6,
	0x05, 0x8b, 0xe2, 0x1b, 0x81, 0x5c, 0x58, 0x72, 0x1a, 0xf7, 0xf4, 0xa1, 0x52, 0x7d, 0x35, 0xff,
	0xc7, 0x18, 0x2c, 0x95, 0x89, 0x55, 0x64, 0xae, 0x41, 0x45, 0x7e, 0x19, 0x9c, 0x7d, 0x9a, 0xf1,
	0x04, 0xf9, 0xde, 0xef, 0x59, 0xb0, 0x88, 0xdd, 0xab, 0xd0, 0xdd, 0xa4, 0xf5, 0x36, 0xf3, 0x33,
	0xa4, 0x6e, 0x54, 0x2b, 0x62, 0xd8, 0xb8, 0x3a, 0xf3, 0xf2, 0xe3, 0x0e, 0x4f, 0xb6, 0x7b, 0xad,
	0x07, 0x48, 0x82, 0xfd, 0x63, 0x0b, 0xd6, 0xb0, 0xb7, 0x5b, 0x8c, 0xb3, 0xa0, 0x9f, 0x40, 0x12,
	0xef, 0xde, 0x1e, 0x2d, 0x81, 0xe6, 0x60, 0x3b, 0x2b, 0x05, 0x31, 0x26, 0x9d, 0xcd, 0x1f, 0x8e,
	0xc1, 0xf9, 0x22, 0x1b, 0x2f, 0xb7, 0xcb, 0x25, 0x5e, 0x78, 0x1d, 0x56, 0x43, 0x3c, 0xbd, 0x64,
	0xcc, 0xa7, 0x33, 0xfd, 0x9e, 0x17, 0x46, 0x5e, 0x2b, 0xd2, 0x13, 0x66, 0x39, 0x94, 0xa7, 0x18,
	0x95, 0x7a, 0x43, 0x27, 0xda, 0x57, 0x61, 0xa9, 0x9c, 0x2f, 0x8c, 0xdd, 0x9e, 0xa0, 0xfd, 0xab,
	0xe2, 0x2c, 0x98, 0x99, 0x36, 0xe2, 0x37, 0x05, 0xb3, 0x5f, 0x84, 0x95, 0x50, 0x18, 0xa7, 0x5c,
	0x95, 0x55, 0xc9, 0xc3, 0x15, 0x67, 0x29, 0x14, 0xf9, 0x49, 0x77, 0x4b, 0xa7, 0xd9, 0x9f, 0x81,
	0x33, 0xa1, 0x70, 0xe3, 0x24, 0x60, 0xc3, 0x69, 0x9c, 0xc0, 0xbc, 0x6b, 0xa1, 0xb8, 0x9f, 0x04,
	0x6c, 0x18, 0x9d, 0x67, 0xf0, 0x74, 0x83, 0x05, 0x84, 0x01, 0x6e, 0x03, 0x15, 0xa7, 0x42, 0xe8,
	0x1b, 0x41, 0xf3, 0x17, 0xe0, 0x42, 0xb9, 0x83, 0x22, 0xaf, 0xc5, 0xa2, 0x72, 0x0f, 0xd1, 0x52,
	0xea, 0x44, 0x49, 0xcb, 0x8b, 0x28, 0xbd, 0x58, 0x4a, 0xaf, 0x23, 0x74, 0x53, 0x02, 0x9b, 0x3f,
	0x1e, 0x83, 0x4b, 0xe5, 0xc2, 0x8c, 0x39, 0xf2, 0xff, 0xfb, 0x3c, 0xef, 0xf3, 0x7f, 0x55, 0xe2,
	0xa2, 0x7d, 0xb3, 0x52, 0xee, 0xc1, 0x6a, 0xcb, 0xb6, 0x70, 0x1d, 0x25, 0xa3, 0x5b, 0x47, 0x43,
	0x17, 0x84, 0x96, 0x11, 0xce, 0x43, 0x95, 0x0f, 0x72, 0x69, 0x9e, 0x73, 0xe9, 0xe6, 0xdf, 0x1f,
	0x33, 0x19, 0x70, 0xff, 0xdc, 0xb1, 0xbf, 0xda, 0xd7, 0x8e, 0x74, 0xb4, 0xed, 0x18, 0x9c, 0xb7,
	0xba, 0x21, 0x4b, 0x30, 0x49, 0x93, 0x76, 0x4c, 0x69, 0x14, 0xe5, 0x87, 0xfd, 0x12, 0x34, 0x42,
	0xa1, 0x72, 0xed, 0x79, 0x3c, 0x94, 0xe3, 0x66, 0x6e, 0x37, 0x38, 0x07, 0x71, 0x5e, 0xbf, 0xa5,
	0x52, 0x69, 0xdf, 0xb1, 0xd7, 0x61, 0xb9, 0x0f, 0x5f, 0xad, 0x89, 0x09, 0x94, 0x4c, 0x17, 0xf7,
	0x4a, 0xe8, 0xb4, 0x32, 0xfe, 0xca, 0xea, 0xe7, 0x43, 0x03, 0x2b, 0xc3, 0xfe, 0x7a, 0x5f, 0x7f,
	0xf5, 0x46, 0xdb, 0x5f, 0x47, 0x2c, 0x4d, 0xdd, 0x69, 0xcf, 0xc0, 0x42, 0xb1, 0x25, 0x96, 0xe7,
	0xc0, 0x7c, 0x9e, 0xa0, 0xf7, 0xeb, 0x8b, 0x50, 0x2b, 0xed, 0x9f, 0xb4, 0x5d, 0x57, 0xc3, 0x62,
	0xf3, 0x6c, 0xae, 0xf7, 0x4f, 0x79, 0xc1, 0xa3, 0x8e, 0x6e, 0xfa, 0x32, 0x4c, 0x09, 0x1e, 0xb9,
	0xd8, 0x74, 0xd9, 0x87, 0x93, 0x82, 0x47, 0xaf, 0x8b, 0xe6, 0x3f, 0x9a, 0x34, 0x37, 0x4d, 0x5e,
	0xda, 0x34, 0x79, 0xdf, 0xa6, 0xc9, 0xfb, 0x37, 0x4d, 0x7e, 0xc2, 0x9b, 0x26, 0x1f, 0xb6, 0x69,
	0x3a, 0xe6, 0xa6, 0xf9, 0x7d, 0x0b, 0x96, 0x68, 0xbe, 0xf1, 0x13, 0xde, 0x2f, 0xfb, 0xd7, 0x87,
	0xb3, 0x80, 0x5f, 0x25, 0xea, 0x7e, 0x52, 0xde, 0xd2, 0xfb, 0x48, 0x9c, 0x38, 0x09, 0x56, 0x34,
	0x30, 0x25, 0xcd, 0x7d, 0xbd, 0x44, 0xac, 0x1c, 0x65, 0x9c, 0x40, 0x7d, 0x64, 0x4e, 0x9e, 0xc4,
	0x28, 0x1b, 0x33, 0xd7, 0x99, 0x97, 0x1f, 0x26, 0x69, 0xcd, 0x7f, 0x33, 0x0e, 0xb5, 0x8c, 0xb9,
	0x62, 0x3d, 0x22, 0x65, 0xaf, 0x7d, 0x05, 0x96, 0x50, 0xa1, 0x2b, 0xbf, 0x44, 0xaf, 0xd5, 0xe1,
	0x49, 0xcf, 0xb0, 0x6f, 0xcc, 0x8b, 0xf5, 0xcd, 0xbb, 0xcc, 0xdf, 0x56, 0x09, 0x1b, 0x81, 0xfd,
	0x38, 0xcc, 0xe5, 0xf8, 0xca, 0x14, 0x42, 0x8c, 0xab, 0x4a, 0xa8, 0x9b, 0x68, 0x10, 0x79, 0x1a,
	0xec, 0x1c, 0xab, 0x6c, 0xf3, 0x20, 0xc5, 0xeb, 0x5d, 0xe6, 0xe7, 0x16, 0x8f, 0xd7, 0xe0, 0x74,
	0x8e, 0x3b, 0xc4, 0x50, 0x42, 0x92, 0xea, 0x0a, 0x65, 0xba, 0x33, 0x68, 0x2e, 0x29, 0xc8, 0x21,
	0x0b, 0x89, 0x3e, 0xfc, 0x2b, 0xca, 0x11, 0x66, 0x5f, 0x84, 0x7a, 0x8e, 0x16, 0x30, 0x91, 0xa9,
	0x83, 0x25, 0x10, 0xd2, 0x6d, 0x26, 0x32, 0xfb, 0x49, 0x58, 0xc8, 0x51, 0xfa, 0x4c, 0x22, 0xaa,
	0xac, 0x2d, 0x34, 0x8c, 0xd8, 0x9f, 0x86, 0x33, 0x83, 0x3d, 0x46, 0x27, 0x54, 0x2f, 0x4b, 0x38,
	0xea, 0x69, 0x66, 0x9c, 0x46, 0xb9, 0xe7, 0x1e, 0xe4, 0xe9, 0xa5, 0x1e, 0x54, 0x36, 0x9c, 0x19,
	0x12, 0xd5, 0x29, 0xcb, 0x2d, 0xe4, 0x14, 0xe7, 0xa1, 0x96, 0x63, 0xed, 0xf1, 0x36, 0x9e, 0xa3,
	0x66, 0x9c, 0x19, 0x42, 0x79, 0x8b, 0xb7, 0x9b, 0x2e, 0xac, 0x66, 0xc4, 0xfb, 0xb0, 0x0c, 0x5a,
	0xdd, 0x38, 0x21, 0xed, 0xd3, 0x30, 0x53, 0x1c, 0x03, 0x88, 0x03, 0x55, 0xb8, 0x3e, 0x03, 0x3c,
	0x09, 0x73, 0x06, 0x37, 0x44, 0xab, 0x83, 0x3a, 0x50, 0x14, 0x0c, 0x51, 0x42, 0x9b, 0x7f, 0x69,
	0xc1, 0x84, 0x2c, 0x7e, 0xa8, 0x6a, 0x47, 0xf2, 0x54, 0x59, 0x61, 0x99, 0xf7, 0x56, 0x25, 0x4c,
	0xb3, 0xdd, 0x1f, 0x5a, 0xb0, 0x5a, 0x10, 0x45, 0x0b, 0x47, 0xa3, 0x13, 0x4f, 0xe9, 0x8c, 0xc0,
	0x8c, 0x31, 0xac, 0x43, 0x9c, 0x65, 0xf9, 0xfb, 0xcd, 0x9c, 0x0c, 0x2d, 0x22, 0x7c, 0x09, 0x20,
	0xcf, 0xe1, 0xda, 0x5d, 0x98, 0x56, 0x5f, 0x6a, 0x8b, 0xdb, 0xf9, 0xb0, 0xc9, 0x93, 0x65, 0x3b,
	0x53, 0x19, 0x6e, 0x4c, 0xcd, 0x1f, 0x59, 0x38, 0x80, 0xda, 0xec, 0xe2, 0x23, 0xcd, 0x81, 0x97,
	0x79, 0x6e, 0x26, 0x05, 0x34, 0x63, 0x76, 0xa8, 0x11, 0x6c, 0xeb, 0xa9, 0x71, 0x15, 0x96, 0xd2,
	0x75, 0x97, 0xac, 0x92, 0x86, 0x49, 0x4f, 0x8d, 0xc1, 0x42, 0xba, 0xbe, 0xb5, 0x29, 0xd2, 0xdb,
	0x45, 0x82, 0x7d, 0x1d, 0x1a, 0x7a, 0xe2, 0x6b, 0xcb, 0x60, 0x3e, 0xc3, 0x69, 0x4d, 0x2e, 0xb5,
	0x69, 0x15, 0xa8, 0x64, 0x9a, 0xe9, 0xcd, 0xbf, 0x18, 0x43, 0x66, 0x91, 0x5b, 0x86, 0x34, 0x5d,
	0x25, 0x13, 0xa8, 0xa4, 0x8b, 0x16, 0x7d, 0x13, 0xea, 0xe5, 0xf5, 0xae, 0x18, 0x43, 0xdb, 0x58,
	0xec, 0xd7, 0x60, 0xe5, 0x88, 0x75, 0x4e, 0xc7, 0xd5, 0xc5, 0xf6, 0x90, 0x45, 0x7e, 0x96, 0xaa,
	0x55, 0xeb, 0x9b, 0x18, 0xc2, 0x4c, 0x3b, 0x5f, 0xdc, 0xbf, 0x6f, 0xc1, 0x52, 0x7f, 0xfb, 0xc2,
	0xb8, 0x9d, 0x28, 0x7e, 0xdb, 0x19, 0xa1, 0xb1, 0xcc, 0x1c, 0x35, 0xc7, 0x2e, 0x77, 0xe2, 0x46,
	0xdc, 0x4e, 0xec, 0x55, 0x98, 0xd6, 0x2b, 0x58, 0xe9, 0xb2, 0xda, 0xb4, 0x7c, 0xbf, 0x31, 0x06,
	0x0b, 0x5e, 0xbb, 0x1d, 0xc6, 0x61, 0x76, 0x88, 0xa6, 0x54, 0xd4, 0x0a, 0x3e, 0x09, 0x73, 0x7e,
	0x12, 0x8b, 0x8c, 0x7b, 0xa1, 0x69, 0xd7, 0xa8, 0x3b, 0xb3, 0x05, 0x18, 0xe7, 0xc0, 0x53, 0x30,
	0x6f, 0x20, 0xee, 0x79, 0x51, 0x8f, 0xa9, 0xee, 0x36, 0x0a, 0x78, 0x4b, 0x82, 0xd1, 0xd4, 0x9a,
	0xf0, 0x7d, 0x8f, 0x07, 0x2e, 0x67, 0x6d, 0x85, 0x3b, 0xae, 0x4c, 0xad, 0x94, 0xe0, 0xb0, 0x36,
	0xe1, 0xbe, 0x0a, 0x6b, 0x46, 0xb1, 0xf9, 0x28, 0x51, 0x1e, 0x92, 0x20, 0x57, 0x0b, 0x04, 0x3d,
	0x50, 0x94, 0xf7, 0x35, 0x38, 0x95, 0x67, 0x18, 0xac, 0x70, 0x92, 0x32, 0x6b, 0x8c, 0xbb, 0xe5,
	0x8a, 0x9b, 0xff, 0xcb, 0x82, 0xb3, 0x7a, 0x64, 0xa8, 0xb7, 0x85, 0x9b, 0x77, 0x8f, 0x1c, 0x4c,
	0xfb, 0x31, 0xa8, 0xe7, 0x80, 0x56, 0x98, 0x09, 0xd5, 0x31, 0x35, 0x0d, 0xbc, 0x19, 0x66, 0xa2,
	0x84, 0xd4, 0xf5, 0xc4, 0x43, 0xd5, 0x27, 0x39, 0xd2, 0x3d, 0x4f, 0x3c, 0xb4, 0xbf, 0x61, 0xc1,
	0xbc, 0xec, 0xf1, 0x40, 0xd7, 0x10, 0x32, 0x81, 0x8a, 0xdb, 0xea, 0xba, 0xf7, 0xa1, 0x2f, 0xf9,
	0xfe, 0x21, 0x76, 0xe6, 0xb0, 0xea, 0x1b, 0x79, 0xcd, 0xcd, 0x5f, 0x84, 0x59, 0x2c, 0x1a, 0x37,
	0x6e, 0x6c, 0xea, 0xd3, 0xb0, 0x20, 0x76, 0x3d, 0x94, 0x73, 0x42, 0xf1, 0xd0, 0xc5, 0x0d, 0x44,
	0x35, 0x77, 0x8e, 0x12, 0x9c, 0x50, 0x3c, 0x7c, 0x5d, 0x82, 0x25, 0xaf, 0xc7, 0x8c, 0x68, 0x8d,
	0x27, 0x0e, 0x50, 0x91, 0x80, 0xfb, 0x5e, 0x97, 0x35, 0x7f, 0xd7, 0x02, 0x3b, 0x63, 0xee, 0x41,
	0x2e, 0x9b, 0x22, 0x53, 0xb4, 0x1b, 0x30, 0xad, 0x19, 0xb1, 0x92, 0x4f, 0xd5, 0xa7, 0x5c, 0x69,
	0x85, 0x6a, 0x4b, 0x75, 0xde, 0x4c, 0xae, 0xd7, 0xb2, 0xcf, 0xc0, 0x8c, 0x97, 0x65, 0x3c, 0x6c,
	0xf5, 0x32, 0xa6, 0x16, 0x6c, 0x01, 0xb0, 0x2f, 0xc1, 0x2c, 0x3b, 0xf0, 0xa3, 0x9e, 0x90, 0x0b,
	0x10, 0xe7, 0xae, 0x72, 0x5d, 0xc8, 0xa1, 0x72, 0xea, 0x0e, 0x27, 0xea, 0xfa, 0x47, 0x4c, 0xd4,
	0x0f, 0x2d, 0x58, 0x2c, 0x13, 0x45, 0x5b, 0xe9, 0x05, 0xe4, 0x80, 0xfd, 0xbb, 0x29, 0x64, 0x2c,
	0xd7, 0xa9, 0xf5, 0x9f, 0x2e, 0xc6, 0x06, 0x4e, 0x17, 0x1f, 0x0e, 0x85, 0x57, 0x61, 0xbe, 0x4c,
	0xa0, 0x27, 0xe4, 0xe0, 0x7b, 0xc2, 0xa5, 0x6d, 0x4d, 0xb3, 0x63, 0x4f, 0xdc, 0xc7, 0xef, 0xe6,
	0x4e, 0x7f, 0x37, 0xcb, 0x69, 0x21, 0x19, 0x12, 0x4d, 0x34, 0xcd, 0xbf, 0xe5, 0xd9, 0xa6, 0x43,
	0x8e, 0x27, 0x7d, 0x64, 0x8c, 0x0d, 0x23, 0xe3, 0xbd, 0x71, 0x58, 0x2e, 0x17, 0x2b, 0xd7, 0x43,
	0x24, 0x52, 0x3b, 0x86, 0xf1, 0x36, 0xf3, 0xd5, 0xde, 0x39, 0x5a, 0x0f, 0x05, 0x59, 0x11, 0xba,
	0x99, 0x74, 0xe2, 0x84, 0x33, 0x53, 0x0e, 0xad, 0x38, 0x55, 0x02, 0xd2, 0x96, 0xf4, 0x2a, 0xac,
	0xa1, 0xe1, 0x5f, 0x88, 0x30, 0xee, 0x90, 0xc6, 0x83, 0x1d, 0xf8, 0x2c, 0xc5, 0xfd, 0x92, 0xce,
	0xd1, 0xab, 0x05, 0xc2, 0xfd, 0x24, 0x60, 0x77, 0x74, 0xb2, 0xfd, 0x49, 0x38, 0x95, 0xb2, 0xb8,
	0x17, 0x65, 0x61, 0xd7, 0xcb, 0x58, 0x7f, 0x66, 0x52, 0xb2, 0x34, 0x0c, 0x8c, 0x81, 0xdc, 0xe6,
	0x7e, 0xd4, 0x97, 0x9b, 0x74, 0x2e, 0x0d, 0x03, 0xa3, 0x9c, 0x7b, 0x70, 0x30, 0xa6, 0x86, 0x0d,
	0xc6, 0x4f, 0xa7, 0xa0, 0x5e, 0x1a, 0x8c, 0xa1, 0xb2, 0xda, 0xbb, 0x16, 0xcc, 0x1a, 0x67, 0xbf,
	0xe2, 0xbc, 0xd9, 0x1a, 0xc1, 0x20, 0xf5, 0xf1, 0x1a, 0xa7, 0x2e, 0xff, 0x6e, 0xeb, 0x8a, 0x35,
	0x2d, 0xd7, 0x0d, 0x5a, 0xc6, 0x4f, 0x88, 0x96, 0xeb, 0x48, 0xcb, 0xf5, 0x82, 0x96, 0xef, 0x59,
	0xb0, 0x34, 0x70, 0xa8, 0x2b, 0x8e, 0x93, 0xfe, 0x68, 0x29, 0x22, 0xc9, 0x74, 0xb1, 0x20, 0xa0,
	0x20, 0xec, 0xb7, 0x2c, 0xa8, 0x79, 0xc2, 0x20, 0x88, 0x04, 0x99, 0x5f, 0x1d, 0x2d, 0x41, 0x9e,
	0x70, 0xaa, 0x9e, 0x28, 0x0f, 0x95, 0x71, 0x98, 0x94, 0x74, 0x4c, 0x9d, 0xc4, 0x50, 0xe1, 0x99,
	0xb5, 0x2e, 0xff, 0x16, 0xb4, 0xbc, 0x67, 0x91, 0x0f, 0x58, 0x41, 0x0a, 0x59, 0xe6, 0xd9, 0x68,
	0x49, 0x51, 0xac, 0x0d, 0x5d, 0xcd, 0x72, 0x62, 0x9a, 0xff, 0xd2, 0x82, 0x29, 0xc2, 0xb3, 0xbf,
	0x6c, 0xc1, 0x6c, 0x81, 0xcf, 0xfc, 0x8c, 0x74, 0x44, 0xd5, 0xf5, 0x5f, 0x1e, 0x29, 0x61, 0x4e,
	0xfd, 0x00, 0x0f, 0xf5, 0xaa, 0x4e, 0x7b, 0x1d, 0x96, 0xbb, 0xbd, 0xac, 0xe7, 0x45, 0x6e, 0x10,
	0xee, 0x31, 0x2e, 0xa4, 0xc0, 0xd1, 0x8e, 0xbc, 0x8e, 0x62, 0x89, 0x8b, 0x94, 0x78, 0x5b, 0xa7,
	0xdd, 0x8d, 0xbc, 0x4e, 0xf3, 0x5f, 0x58, 0x30, 0x27, 0xb7, 0x36, 0xb6, 0xc7, 0x78, 0xe6, 0x0a,
	0x7f, 0xd7, 0xcd, 0xec, 0x26, 0xd4, 0xb4, 0x23, 0x0a, 0xca, 0x13, 0x92, 0x8b, 0xd4, 0x9c, 0x12,
	0x0c, 0x5d, 0x00, 0xd5, 0xb7, 0x14, 0x7c, 0xb5, 0xd8, 0x99, 0x23, 0xdd, 0xf6, 0x32, 0x66, 0x3f,
	0x07, 0x76, 0x8e, 0xd4, 0xe6, 0xec, 0x9d, 0x1e, 0x8b, 0xfd, 0x43, 0xb5, 0xf5, 0x2d, 0xe8, 0x94,
	0xbb, 0x3a, 0xc1, 0x3e, 0x05, 0x95, 0xa0, 0xc7, 0xbd, 0x9c, 0xb1, 0xd6, 0x9d, 0xfc, 0x5b, 0xee,
	0x71, 0x5d, 0xef, 0xc0, 0xcd, 0xb8, 0x94, 0xd2, 0xc8, 0x4c, 0x5c, 0xe9, 0x7a, 0x07, 0x3b, 0xf2,
	0xbb, 0xf9, 0x0e, 0xd4, 0x77, 0x3d, 0x11, 0xba, 0x61, 0x40, 0x26, 0x52, 0x7b, 0x0d, 0x2a, 0x51,
	0xe2, 0x7b, 0x51, 0x61, 0x44, 0x9f, 0xc6, 0x6f, 0x72, 0xd2, 0x94, 0x7d, 0xc9, 0x59, 0xe1, 0x7c,
	0x50, 0x21, 0xc0, 0x46, 0x80, 0x7c, 0x33, 0xec, 0x6a, 0xb9, 0x18, 0x7f, 0x17, 0x3e, 0x49, 0x13,
	0xa6, 0x4f, 0xd2, 0x9f, 0x4f, 0xc3, 0x12, 0xd6, 0x29, 0x5c, 0x64, 0x2c, 0xaa, 0x66, 0x61, 0xf7,
	0x60, 0xca, 0xe7, 0xcc, 0x53, 0x96, 0xbc, 0x11, 0x4c, 0x81, 0x52, 0x4b, 0x1d, 0x55, 0x99, 0xbd,
	0x0f, 0xd3, 0xbd, 0x54, 0x0e, 0x84, 0x50, 0x5c, 0x7d, 0xc4, 0xf5, 0xea, 0xda, 0xe4, 0x9a, 0x5c,
	0xf0, 0xd2, 0x34, 0x0a, 0x7d, 0xda, 0xe2, 0xc4, 0x61, 0xec, 0xeb, 0x93, 0xfd, 0x88, 0x69, 0x98,
	0x37, 0xea, 0xdd, 0x96, 0xd5, 0xda, 0x5f, 0xb3, 0xc0, 0x04, 0xba, 0xb1, 0xf7, 0x50, 0x28, 0x3e,
	0x3e, 0x62, 0x5a, 0xe6, 0x8c, 0x6a, 0xef, 0x7b, 0x0f, 0x85, 0xfd, 0x3b, 0x16, 0x2c, 0xf5, 0xd9,
	0xaf, 0xa9, 0x6b, 0x26, 0x4f, 0x82, 0x1c, 0x5b, 0x98, 0x46, 0x71, 0xea, 0x9c, 0x6f, 0x5a, 0xb0,
	0xd8, 0x47, 0x11, 0xf6, 0xcf, 0xd4, 0x49, 0x10, 0xb4, 0x50, 0x22, 0x08, 0x7b, 0xe8, 0x5d, 0x0b,
	0x16, 0x7c, 0xcf, 0xdf, 0x65, 0x92, 0x0c, 0x97, 0x33, 0x5a, 0xdb, 0xd3, 0x27, 0x32, 0x5a, 0x58,
	0xef, 0x7d, 0xef, 0xa1, 0x43, 0xb5, 0x36, 0xff, 0x8b, 0x05, 0x0b, 0xc5, 0x72, 0x66, 0x7e, 0xe6,
	0xfa, 0xd9, 0x81, 0xfd, 0x38, 0xcc, 0xaa, 0x2f, 0x39, 0x74, 0x05, 0x33, 0xa9, 0x11, 0x54, 0x76,
	0xeb, 0x46, 0x60, 0x9f, 0x87, 0xaa, 0xc2, 0xca, 0xe5, 0xe5, 0xba, 0x03, 0x04, 0xc2, 0x53, 0xfa,
	0x6f, 0x5b, 0x30, 0xaf, 0x30, 0x72, 0x3e, 0xa1, 0x56, 0x48, 0x30, 0x92, 0x76, 0xf6, 0xf1, 0x24,
	0x47, 0xb5, 0x62, 0x23, 0x40, 0x5f, 0x47, 0xd1, 0xfc, 0xf7, 0x93, 0x30, 0x8f, 0x88, 0x5d, 0x83,
	0x71, 0x0d, 0x5f, 0xc8, 0xd6, 0x47, 0xb7, 0x90, 0xc3, 0xae, 0x04, 0x86, 0x99, 0x1b, 0xb0, 0x88,
	0x9d, 0x18, 0x63, 0x9b, 0xd3, 0xd5, 0xde, 0xa6, 0x5a, 0x87, 0xf3, 0x94, 0xf1, 0x8f, 0x17, 0x4f,
	0x99, 0xf8, 0xb8, 0xf1, 0x94, 0xc9, 0x8f, 0x86, 0xa7, 0x34, 0xff, 0xb1, 0x05, 0x0d, 0x35, 0xb3,
	0xf5, 0xca, 0x45, 0x97, 0x22, 0x54, 0xa8, 0xac, 0x41, 0x45, 0x7d, 0xe9, 0x53, 0xef, 0x34, 0x7e,
	0x6f, 0x04, 0xf6, 0xaf, 0xc1, 0x4c, 0xb1, 0x34, 0xc7, 0x46, 0x23, 0x67, 0xf7, 0xaf, 0x38, 0xa7,
	0x12, 0xea, 0x05, 0xf9, 0x9f, 0x27, 0x14, 0xfb, 0xe9, 0x8e, 0x80, 0xfd, 0x2c, 0xc1, 0xe4, 0x3b,
	0x3d, 0x96, 0x6b, 0xfb, 0xe8, 0x43, 0xca, 0x41, 0x24, 0x3a, 0x68, 0xeb, 0xca, 0x84, 0x53, 0x21,
	0x00, 0x95, 0xa9, 0x12, 0x51, 0x1c, 0x22, 0x79, 0x0b, 0x08, 0xb4, 0x23, 0x85, 0xa2, 0xf3, 0x50,
	0x25, 0x01, 0x80, 0x10, 0xa6, 0x08, 0x81, 0x40, 0x1a, 0x81, 0x96, 0x2d, 0x21, 0x90, 0x05, 0x05,
	0x08, 0x84, 0x08, 0x4f, 0xc3, 0x82, 0x42, 0xf0, 0x33, 0x72, 0xa1, 0xda, 0xcd, 0xd0, 0x68, 0x52,
	0x77, 0xe6, 0x28, 0xe1, 0x56, 0x86, 0x5e, 0x54, 0xbb, 0x99, 0xfd, 0x5d, 0x0b, 0x16, 0x8a, 0x71,
	0xe4, 0x5d, 0x12, 0x11, 0xc9, 0xdf, 0x6d, 0x77, 0x44, 0xc3, 0x34, 0x30, 0x7d, 0x9c, 0x79, 0x9a,
	0x2c, 0x05, 0x05, 0xb2, 0x91, 0xbb, 0x9e, 0xd0, 0x1e, 0x71, 0x68, 0x9c, 0xa9, 0x38, 0xb0, 0xeb,
	0x89, 0x37, 0x94, 0x6b, 0xdc, 0xef, 0x5a, 0x60, 0xa7, 0x9c, 0xe9, 0x0b, 0x2e, 0x1a, 0xb1, 0x7a,
	0x82, 0xbc, 0x7f, 0x3e, 0xe5, 0x8c, 0xee, 0xd1, 0x28, 0xa2, 0x9a, 0x7f, 0x39, 0x86, 0xba, 0x1b,
	0xc1, 0xf8, 0x1e, 0x95, 0xed, 0xf5, 0xb2, 0x44, 0x56, 0x60, 0x37, 0x60, 0xda, 0x4f, 0xe2, 0x8c,
	0x1d, 0x64, 0x7a, 0x7d, 0xa8, 0x4f, 0x7b, 0x05, 0xa6, 0xfc, 0x28, 0x64, 0x71, 0xa6, 0xd4, 0x41,
	0xea, 0x0b, 0x5d, 0xc9, 0x48, 0x1f, 0x3f, 0xae, 0x5c, 0xc9, 0x48, 0x19, 0xff, 0x2c, 0xd8, 0xb9,
	0x6a, 0xcb, 0x15, 0x2c, 0x23, 0xc5, 0x24, 0x69, 0xb4, 0xe6, 0xf3, 0x94, 0x6d, 0x96, 0xe1, 0x55,
	0xa1, 0x17, 0x61, 0xa5, 0x8c, 0xcd, 0x99, 0x88, 0x92, 0x3d, 0xa6, 0xbd, 0x52, 0x96, 0xcc, 0x1c,
	0x8e, 0x4a, 0x93, 0xa7, 0x0b, 0xd6, 0xe1, 0x0c, 0x6f, 0xcd, 0x14, 0xb3, 0x62, 0x0a, 0x35, 0xcc,
	0x0b, 0x94, 0x62, 0x0e, 0xd6, 0x12, 0x4c, 0x8a, 0x4c, 0xca, 0xe5, 0x34, 0x17, 0xe9, 0x43, 0x36,
	0x80, 0x33, 0xd1, 0x8b, 0xf4, 0xdc, 0x53, 0x5f, 0xb2, 0x2b, 0x68, 0x36, 0x07, 0x68, 0x96, 0x9b,
	0xd0, 0x02, 0x2f, 0x6a, 0xfa, 0x62, 0xc6, 0x02, 0xa1, 0xf8, 0x9d, 0x1a, 0xf5, 0x2a, 0xc2, 0x88,
	0x13, 0x35, 0xff, 0xc3, 0x04, 0x2c, 0x15, 0x3d, 0xfc, 0xbe, 0x3a, 0x18, 0xbd, 0x09, 0x93, 0x2c,
	0xf1, 0x93, 0xc8, 0xcd, 0x0e, 0x13, 0xad, 0x76, 0xab, 0x69, 0xe0, 0xce, 0x61, 0xc2, 0xec, 0xe7,
	0x61, 0x89, 0xfa, 0xdd, 0x0d, 0x63, 0x91, 0x79, 0xb1, 0xcf, 0xa8, 0x5f, 0xa9, 0xef, 0x6d, 0x4a,
	0xdb, 0x50, 0x49, 0xd8, 0xb3, 0x17, 0xe4, 0x32, 0x2c, 0x6c, 0x43, 0x34, 0x00, 0x26, 0x48, 0x56,
	0xcc, 0x0e, 0xd4, 0x46, 0x9b, 0x7a, 0xd9, 0xae, 0x36, 0x9c, 0x6a, 0xe0, 0x96, 0x47, 0xd7, 0xaa,
	0x86, 0x0c, 0xe7, 0xd4, 0x07, 0x18, 0xce, 0x24, 0x92, 0xc3, 0x39, 0x3d, 0x74, 0x38, 0x31, 0xcd,
	0xec, 0xf1, 0xca, 0xf1, 0x3d, 0x3e, 0x33, 0xd0, 0xe3, 0xf6, 0x15, 0x74, 0xa8, 0xb8, 0xee, 0xfa,
	0x5e, 0x2a, 0xd1, 0xde, 0xe9, 0x31, 0x21, 0x0b, 0x02, 0xe5, 0x72, 0x95, 0xee, 0x5d, 0xbf, 0xe5,
	0xa5, 0xc2, 0xd1, 0x09, 0x92, 0xfb, 0x14, 0xf8, 0x2c, 0xf6, 0x5a, 0x11, 0x23, 0xe7, 0xd2, 0x8a,
	0x33, 0xa7, 0xb1, 0xef, 0x10, 0x58, 0xf6, 0x50, 0xcb, 0xf3, 0x1f, 0xf6, 0xf4, 0x22, 0x6c, 0xd4,
	0x10, 0xaf, 0x46, 0x40, 0x32, 0x4f, 0xc9, 0xbd, 0x25, 0x66, 0x07, 0x99, 0xbb, 0x9b, 0xa4, 0x8d,
	0x3a, 0x29, 0xae, 0xe5, 0xf7, 0x1b, 0x49, 0x2a, 0xe7, 0x69, 0xd2, 0xcb, 0x3a, 0x49, 0x18, 0x77,
	0x8c, 0x0b, 0x3a, 0xb3, 0x74, 0x0a, 0xd6, 0x29, 0xc5, 0x35, 0x9d, 0xf3, 0x50, 0x55, 0x6e, 0x10,
	0x99, 0xe7, 0x3f, 0x6c, 0xcc, 0xe1, 0x7c, 0x06, 0x04, 0x6d, 0x4b, 0x48, 0xf3, 0x5f, 0x93, 0xe6,
	0xbc, 0x58, 0xbf, 0x0c, 0x77, 0xb7, 0x62, 0x89, 0x5a, 0xa5, 0x25, 0x9a, 0xcf, 0xfb, 0xb1, 0xe1,
	0xf3, 0x7e, 0xbc, 0x34, 0xef, 0x87, 0x2f, 0xaa, 0x89, 0xa3, 0x16, 0x95, 0x31, 0x68, 0x93, 0xc7,
	0x0f, 0xda, 0xd4, 0xe0, 0x32, 0x79, 0xa9, 0x30, 0xf6, 0x60, 0x3b, 0xda, 0xa2, 0xab, 0x5c, 0x9c,
	0xf1, 0x8c, 0x8d, 0x1e, 0xe0, 0xf4, 0x4b, 0xb9, 0xdc, 0xa8, 0xaf, 0xe6, 0x0f, 0x2c, 0x38, 0x7d,
	0x44, 0x4e, 0xd9, 0x3a, 0xc3, 0x57, 0x3f, 0xec, 0x6a, 0xd3, 0x99, 0xf2, 0xd5, 0x97, 0x5b, 0xcf,
	0x25, 0x98, 0x4d, 0x39, 0xdb, 0x0b, 0x93, 0x9e, 0x70, 0x8b, 0xae, 0x99, 0x71, 0xea, 0x1a, 0xba,
	0x8d, 0x5d, 0x74, 0x16, 0x00, 0x87, 0x94, 0x50, 0x94, 0xc2, 0x5e, 0x42, 0x28, 0x79, 0x0d, 0x2a,
	0x54, 0x49, 0xee, 0x9d, 0x30, 0x8d, 0xdf, 0x1b, 0x41, 0xf3, 0x9f, 0xcf, 0xf4, 0xdd, 0x1c, 0x95,
	0xf4, 0x29, 0xf3, 0xd5, 0x2c, 0xd9, 0xf3, 0x45, 0x57, 0x95, 0x6b, 0x15, 0x46, 0x7f, 0xd1, 0xa5,
	0x92, 0xd5, 0x1d, 0x34, 0xf2, 0x75, 0xd2, 0x17, 0x49, 0x25, 0x02, 0x3a, 0x3d, 0x5d, 0x82, 0x59,
	0xdc, 0x1f, 0xa5, 0x2c, 0xea, 0x7b, 0x3d, 0xa1, 0x49, 0xab, 0x6b, 0xe8, 0x2d, 0x09, 0xb4, 0x9f,
	0x51, 0xfb, 0x2b, 0x8a, 0xf2, 0xbd, 0x16, 0x61, 0x2a, 0x06, 0xac, 0x13, 0xb6, 0x15, 0x9c, 0xbc,
	0x01, 0xde, 0x46, 0xbf, 0x42, 0x2d, 0x04, 0x4d, 0x6a, 0x6f, 0x00, 0x02, 0x93, 0xa0, 0x62, 0x7f,
	0xcf, 0x82, 0xf9, 0xa2, 0xa3, 0x95, 0x07, 0xfe, 0x14, 0x6e, 0xc4, 0x0f, 0x47, 0x7a, 0x01, 0xb0,
	0x3c, 0xc2, 0xce, 0x1c, 0xfe, 0xde, 0x2e, 0x9c, 0xf1, 0xbf, 0x65, 0x41, 0xcd, 0x9c, 0x3b, 0xea,
	0x1c, 0xd9, 0x3d, 0x21, 0xa2, 0xa8, 0x52, 0xa7, 0x8a, 0x5f, 0xb7, 0x68, 0xf6, 0x3e, 0x07, 0x8b,
	0x78, 0xd5, 0x2e, 0x4b, 0xdc, 0x16, 0x73, 0x39, 0xf3, 0x59, 0xb8, 0xa7, 0x98, 0x5b, 0xc5, 0x99,
	0x97, 0x49, 0x3b, 0xc9, 0x4d, 0xe6, 0x28, 0xb8, 0xfd, 0x1a, 0x9c, 0xe2, 0x4c, 0x2e, 0x6a, 0x3a,
	0x66, 0xf4, 0xe5, 0x22, 0x9e, 0xb7, 0x6a, 0x60, 0x94, 0x32, 0x5f, 0xd5, 0x5e, 0x5b, 0x7d, 0xd9,
	0x14, 0x03, 0xc4, 0xb4, 0x52, 0x86, 0x6b, 0xb0, 0xc2, 0xd9, 0x3e, 0x0f, 0xa5, 0x80, 0x56, 0xce,
	0x42, 0x5c, 0x70, 0x51, 0xa5, 0x96, 0x32, 0xdd, 0x86, 0x0b, 0x4a, 0x12, 0x75, 0xdb, 0x3c, 0xe9,
	0xba, 0xe8, 0x72, 0xd4, 0x97, 0x9d, 0x98, 0xe3, 0x29, 0x81, 0xc2, 0xe9, 0x5d, 0x9e, 0x74, 0x1d,
	0xb1, 0x97, 0x96, 0x4a, 0x79, 0x03, 0x9a, 0xa5, 0x52, 0xba, 0x9e, 0xc8, 0x18, 0xef, 0x2f, 0xa7,
	0x8e, 0xe5, 0x9c, 0x29, 0xca, 0xb9, 0x87, 0x68, 0xa5, 0x92, 0x9e, 0x05, 0xdb, 0xb8, 0x3e, 0x9c,
	0xb2, 0x18, 0x2f, 0x76, 0xce, 0x52, 0x07, 0xe7, 0xf7, 0x87, 0xb7, 0x08, 0x2e, 0x57, 0x84, 0x9f,
	0xc4, 0xed, 0xb0, 0x83, 0x17, 0x0c, 0xe8, 0x5e, 0x62, 0x63, 0x8e, 0x90, 0x29, 0xe1, 0x56, 0x0e,
	0x97, 0x5c, 0xb8, 0x1b, 0x92, 0xbd, 0x68, 0x2f, 0x6c, 0x37, 0xe6, 0x49, 0xb4, 0x53, 0xa0, 0xb7,
	0xc2, 0xb6, 0xe4, 0x6f, 0x78, 0xdd, 0xb9, 0xcb, 0xdc, 0x20, 0x6c, 0xb7, 0x1b, 0x0b, 0xc4, 0xdf,
	0x14, 0xec, 0x76, 0xd8, 0x6e, 0x4b, 0x0e, 0x21, 0xc9, 0xc3, 0x64, 0x1b, 0x93, 0xa7, 0xdb, 0x9c,
	0x63, 0xd2, 0x39, 0xa8, 0xca, 0xa4, 0x38, 0xa5, 0xd4, 0x45, 0xba, 0xce, 0xd9, 0xe6, 0xfc, 0x7e,
	0x8a, 0xe9, 0x17, 0xa0, 0x26, 0xd3, 0x5b, 0xfb, 0x0a, 0x61, 0x89, 0xea, 0x6f, 0x73, 0x7e, 0x73,
	0x9f, 0x30, 0x9e, 0x86, 0x05, 0xce, 0xfc, 0x84, 0x07, 0x64, 0x96, 0x24, 0xb4, 0x65, 0xda, 0xc1,
	0x28, 0x01, 0x6d, 0x93, 0x88, 0xfb, 0x3c, 0x2c, 0x89, 0xa4, 0x9d, 0xb9, 0x29, 0x67, 0xac, 0x8b,
	0xa6, 0x25, 0x42, 0x5f, 0x41, 0x74, 0x5b, 0xa6, 0x6d, 0xe5, 0x49, 0x32, 0x87, 0x36, 0x84, 0xf6,
	0xed, 0x31, 0xc2, 0xfe, 0x5b, 0x16, 0xd4, 0x25, 0x30, 0xf4, 0x49, 0x28, 0xd6, 0x8a, 0xee, 0x51,
	0x18, 0x03, 0xfa, 0x2a, 0x77, 0x6a, 0xaa, 0x62, 0xb9, 0xff, 0x88, 0xe6, 0x7b, 0x93, 0xa8, 0xb8,
	0x36, 0x89, 0xc1, 0x31, 0x51, 0xdf, 0x86, 0xf9, 0xab, 0xaa, 0x60, 0x78, 0x18, 0xfa, 0xba, 0x05,
	0x73, 0x7b, 0x61, 0xdb, 0x35, 0x36, 0x39, 0x75, 0xde, 0xf3, 0x47, 0xdf, 0x04, 0xe1, 0xd4, 0xf7,
	0xc2, 0xf6, 0x9d, 0x7c, 0x17, 0x45, 0x1f, 0x04, 0x64, 0xf5, 0x26, 0x39, 0xe3, 0x27, 0x48, 0x8e,
	0x58, 0xdf, 0x34, 0xc8, 0xf9, 0x9e, 0x05, 0x4b, 0xb2, 0x73, 0xb4, 0xbc, 0x8a, 0x3e, 0x39, 0x92,
	0xa4, 0x89, 0x91, 0x99, 0x59, 0x06, 0x4f, 0x21, 0xce, 0xc2, 0x5e, 0xd8, 0xbe, 0xd1, 0xcb, 0x12,
	0xe5, 0xf8, 0x23, 0x09, 0xfb, 0x81, 0x05, 0x6b, 0xfd, 0x84, 0xa1, 0xf3, 0x93, 0xe1, 0xe0, 0x13,
	0x8c, 0x8e, 0x3a, 0x83, 0xb8, 0xa5, 0x12, 0x71, 0x5b, 0xeb, 0x5b, 0x92, 0xbe, 0xe6, 0x03, 0x94,
	0xf7, 0x93, 0xa0, 0xe7, 0xb6, 0x23, 0x76, 0xe0, 0xfa, 0x2d, 0x9e, 0x6b, 0x1c, 0x5a, 0x61, 0xe6,
	0x72, 0xbd, 0xd1, 0xd7, 0x9d, 0xe9, 0x56, 0x98, 0x39, 0xb4, 0xc9, 0xcf, 0x64, 0x49, 0xc4, 0xb8,
	0x14, 0xd5, 0xb5, 0x37, 0x43, 0x0e, 0x68, 0xbe, 0x04, 0xa7, 0xcc, 0x02, 0x3b, 0xed, 0xd4, 0x6d,
	0x4b, 0x31, 0xfa, 0x51, 0xc5, 0x36, 0x5f, 0x83, 0x73, 0x83, 0x19, 0xe3, 0x24, 0x7e, 0x5f, 0x99,
	0xff, 0x3b, 0xb9, 0x85, 0xca, 0xdc, 0x7b, 0xd7, 0xdc, 0xd6, 0xbe, 0x7d, 0x1a, 0x66, 0xe4, 0x47,
	0xc4, 0xf6, 0xd4, 0x75, 0x8a, 0x19, 0xa7, 0x92, 0x04, 0xbd, 0x4d, 0xf9, 0x6d, 0x7f, 0xd5, 0x82,
	0x9a, 0xd9, 0x64, 0xb5, 0x8e, 0x46, 0x31, 0x0e, 0x03, 0x3d, 0xeb, 0x40, 0x12, 0xf4, 0xee, 0x46,
	0xec, 0xe0, 0x56, 0x8b, 0xcb, 0x69, 0x6b, 0x0f, 0x76, 0xd5, 0xa8, 0x3c, 0x96, 0x8f, 0x1e, 0x17,
	0x67, 0x56, 0x11, 0xf5, 0x7a, 0x3b, 0xbd, 0xeb, 0x30, 0x61, 0xff, 0x5d, 0x0b, 0x56, 0x86, 0x0f,
	0x85, 0x5a, 0x51, 0xf1, 0xe8, 0x89, 0x33, 0xc7, 0xde, 0x59, 0x30, 0x08, 0xbc, 0x9f, 0xc4, 0x0e,
	0x13, 0xcd, 0x9f, 0x8e, 0xc1, 0x29, 0x5d, 0x6f, 0x94, 0x74, 0x3a, 0x72, 0xc7, 0xcb, 0xcf, 0x67,
	0xe8, 0x5b, 0x82, 0x16, 0xd7, 0x5c, 0x56, 0xad, 0x38, 0x95, 0x48, 0xa4, 0x65, 0x41, 0xb5, 0x10,
	0xa2, 0x2b, 0x28, 0xa8, 0x52, 0xea, 0x05, 0xa8, 0xc9, 0xac, 0x5c, 0x39, 0xce, 0x28, 0x47, 0x0b,
	0x88, 0x44, 0xea, 0x90, 0xdf, 0x8c, 0xcc, 0xaf, 0x30, 0x92, 0x34, 0x53, 0xbe, 0x14, 0x15, 0x4c,
	0x7f, 0x90, 0x66, 0xf2, 0x4c, 0x87, 0x2e, 0x1d, 0xb1, 0xe8, 0xb5, 0xdb, 0xa1, 0x8f, 0xe7, 0xde,
	0xd6, 0xbe, 0x52, 0x09, 0x2c, 0x44, 0x22, 0xdd, 0x30, 0x52, 0x6e, 0xee, 0xcb, 0x5d, 0xae, 0x1c,
	0xa1, 0x43, 0xc5, 0x38, 0xa0, 0x93, 0x87, 0x6d, 0xc6, 0xe8, 0x50, 0x71, 0x0e, 0xde, 0x80, 0x8b,
	0x32, 0x47, 0xea, 0x7b, 0x91, 0x8f, 0x51, 0x4a, 0x7a, 0xbc, 0xe8, 0x04, 0x7d, 0x2a, 0xa4, 0x33,
	0xeb, 0xd9, 0x48, 0xa4, 0x5b, 0x12, 0xef, 0x2e, 0xa1, 0x6d, 0x12, 0x96, 0x3e, 0x23, 0x5e, 0x81,
	0x45, 0x2f, 0x8a, 0x06, 0xf2, 0x92, 0xac, 0xb7, 0xe0, 0x45, 0x51, 0x19, 0xbf, 0xf9, 0xcf, 0x00,
	0xce, 0xeb, 0x5e, 0x2f, 0x9f, 0x95, 0x91, 0xd3, 0x74, 0x99, 0xd8, 0xb5, 0x5f, 0x80, 0x25, 0x12,
	0x4b, 0x7a, 0x9c, 0x05, 0x46, 0xdc, 0x13, 0x5a, 0xb4, 0x8b, 0x45, 0x5a, 0x11, 0xfe, 0xe4, 0x09,
	0x98, 0x33, 0x82, 0x89, 0x18, 0xfa, 0xc0, 0x7a, 0x1e, 0x4b, 0x04, 0x77, 0x41, 0xba, 0xda, 0x64,
	0xf4, 0x54, 0x5e, 0x56, 0x71, 0xad, 0xa4, 0xe8, 0xac, 0x3c, 0x11, 0xc3, 0xd2, 0x94, 0x43, 0xab,
	0x90, 0x9d, 0xb6, 0x2e, 0x4a, 0x71, 0x55, 0x1e, 0x83, 0x7a, 0x39, 0xa6, 0x0a, 0x1d, 0x26, 0x6a,
	0xbb, 0x66, 0x40, 0x15, 0xba, 0xf5, 0xa4, 0x51, 0x4c, 0x12, 0xa6, 0xf4, 0xad, 0x27, 0x8d, 0x6b,
	0x50, 0x70, 0x11, 0x6a, 0x69, 0x12, 0x85, 0xfe, 0x21, 0xb5, 0x51, 0x29, 0x73, 0xaa, 0x04, 0xc3,
	0x06, 0xe2, 0xf1, 0xce, 0x40, 0x61, 0x74, 0x3d, 0xb7, 0xee, 0xd4, 0x0d, 0x24, 0x26, 0xec, 0x57,
	0x61, 0x4d, 0xd6, 0x8f, 0x30, 0xea, 0x2f, 0x83, 0x04, 0x25, 0x6e, 0x87, 0x62, 0xab, 0x48, 0x37,
	0xa8, 0x78, 0x0c, 0xea, 0xda, 0xb7, 0x91, 0xc8, 0x00, 0x6a, 0xa0, 0x02, 0x12, 0x1d, 0xef, 0x5a,
	0x50, 0xd1, 0x8e, 0x7f, 0x4a, 0xe5, 0x37, 0xb2, 0xe3, 0xc8, 0x50, 0x67, 0x49, 0x27, 0xaf, 0x5e,
	0x75, 0x76, 0x9e, 0x6a, 0xb4, 0xb4, 0xa6, 0x3b, 0x5b, 0xf9, 0x22, 0xf6, 0x75, 0x76, 0xdb, 0x13,
	0x99, 0xcb, 0x19, 0xad, 0x60, 0x92, 0xc9, 0xab, 0x12, 0xe6, 0x10, 0x48, 0x4e, 0x7c, 0x14, 0x64,
	0xcb, 0xd7, 0xd0, 0x94, 0x0c, 0xbe, 0x20, 0x05, 0xda, 0xd2, 0xed, 0x33, 0xfb, 0x65, 0x68, 0xa0,
	0x60, 0xdb, 0x7f, 0xd9, 0x4d, 0x66, 0x22, 0x59, 0x7c, 0x45, 0x0a, 0xb9, 0x7d, 0xd7, 0xdd, 0x64,
	0xce, 0x8b, 0x50, 0x33, 0x05, 0x5e, 0x25, 0x92, 0x57, 0x0d, 0x59, 0x17, 0x15, 0x4f, 0x72, 0xf9,
	0x98, 0x13, 0x3b, 0x8a, 0x98, 0x9f, 0x29, 0xe9, 0x7c, 0x49, 0xa6, 0x1a, 0xf3, 0x1a, 0xd3, 0x70,
	0xed, 0xca, 0x5c, 0x24, 0x47, 0x7b, 0x71, 0x9c, 0xf4, 0xe4, 0x9e, 0x6c, 0xab, 0xb5, 0xdb, 0xcb,
	0xe8, 0xe6, 0xec, 0x0d, 0x95, 0x60, 0x7f, 0x12, 0x4e, 0xf5, 0x4b, 0xd3, 0x46, 0x7f, 0x92, 0x28,
	0xdf, 0x28, 0xcb, 0xd4, 0x46, 0x9f, 0x7e, 0xd9, 0x82, 0x69, 0xc5, 0x26, 0x50, 0xaa, 0x1f, 0xc1,
	0x0e, 0x75, 0x34, 0x3b, 0x77, 0x74, 0xd5, 0x52, 0xfc, 0x28, 0x38, 0xca, 0x32, 0x89, 0x1f, 0x39,
	0xc0, 0x3e, 0x0b, 0x10, 0x25, 0x5e, 0xe0, 0xa2, 0x9b, 0x29, 0x1e, 0x13, 0xea, 0xce, 0x8c, 0x84,
	0x6c, 0x4b, 0x80, 0x3c, 0xaa, 0x9a, 0xc1, 0x66, 0xdc, 0xd6, 0xbe, 0xd9, 0x03, 0xab, 0x7a, 0xed,
	0xe4, 0x3a, 0xad, 0x9b, 0xfb, 0x46, 0x07, 0x34, 0xa1, 0x2e, 0xd9, 0x9b, 0x9b, 0xdf, 0x31, 0x69,
	0xe0, 0xea, 0xac, 0x4a, 0xe0, 0xeb, 0xea, 0x7a, 0x49, 0x29, 0x92, 0xd6, 0x1a, 0xa6, 0xe7, 0x91,
	0xb4, 0x9a, 0x5b, 0x86, 0xda, 0x48, 0xdf, 0x86, 0x74, 0xc3, 0x36, 0xf9, 0xd6, 0x8a, 0x8c, 0xdb,
	0x57, 0x61, 0xd1, 0x48, 0xc8, 0x35, 0x6e, 0x24, 0xbf, 0xd8, 0x79, 0x52, 0x4e, 0x5e, 0xf3, 0x8f,
	0x2d, 0x38, 0x37, 0x9c, 0x1b, 0x8b, 0x90, 0x7c, 0x6a, 0x6d, 0x1b, 0x26, 0x72, 0x5f, 0x98, 0x19,
	0x07, 0x7f, 0xcb, 0x33, 0xa2, 0x0a, 0xd2, 0x65, 0x38, 0x4a, 0x02, 0x81, 0x90, 0xcd, 0xbe, 0x0c,
	0x8d, 0x21, 0x84, 0x10, 0x36, 0x29, 0x6d, 0x56, 0x06, 0xa9, 0xd1, 0x21, 0x6b, 0x42, 0xe1, 0x4a,
	0xa9, 0x98, 0xbc, 0x5f, 0x95, 0xc4, 0x80, 0xb7, 0x59, 0xef, 0xa5, 0x37, 0x34, 0xb0, 0xf9, 0x47,
	0x15, 0xb8, 0x78, 0xcc, 0x3e, 0x42, 0x2a, 0x4a, 0x75, 0x55, 0x94, 0xa2, 0x73, 0xe9, 0x98, 0x5d,
	0xe6, 0x88, 0x59, 0xfa, 0xaa, 0xe8, 0xb6, 0x46, 0xb9, 0xef, 0x75, 0x99, 0x31, 0x66, 0xdf, 0xb5,
	0x60, 0xb6, 0x9c, 0x5d, 0x09, 0x7b, 0xf1, 0xa8, 0xe6, 0xee, 0xf0, 0x61, 0x70, 0xea, 0xc2, 0xa4,
	0x70, 0xc8, 0x7e, 0x34, 0xfe, 0xbe, 0xf6, 0xa3, 0x89, 0x0f, 0xb4, 0x1f, 0x4d, 0x7e, 0x80, 0xfd,
	0x68, 0xea, 0xfd, 0xec, 0x47, 0xd3, 0x1f, 0x78, 0x3f, 0xaa, 0x1c, 0xbf, 0x1f, 0x95, 0xb6, 0x9a,
	0x99, 0x8f, 0xeb, 0x56, 0x03, 0xc7, 0x6f, 0x35, 0x25, 0xee, 0x5e, 0x1d, 0xe4, 0xee, 0x26, 0xe7,
	0xac, 0x7d, 0x74, 0x9c, 0xf3, 0x47, 0x16, 0x2c, 0x0d, 0x59, 0xd5, 0xa2, 0x51, 0x47, 0x4d, 0xc8,
	0xe8, 0x34, 0x8e, 0xc3, 0x78, 0x9d, 0xb3, 0x38, 0xc8, 0x40, 0x44, 0x99, 0x7d, 0xce, 0xf6, 0xb1,
	0xcf, 0xaf, 0x18, 0x77, 0x2c, 0xca, 0xab, 0x0c, 0xfd, 0x02, 0xc9, 0xed, 0xb8, 0x48, 0x30, 0x14,
	0x29, 0xf5, 0x1c, 0x8a, 0x3c, 0xea, 0x1c, 0x40, 0x87, 0xc5, 0x8c, 0x17, 0xd7, 0x8e, 0xea, 0x8e,
	0x01, 0x51, 0x11, 0xcb, 0x02, 0xd6, 0xf6, 0xb4, 0x99, 0x01, 0x23, 0x96, 0xdd, 0x26, 0x40, 0xb3,
	0x0d, 0xcd, 0xe1, 0x64, 0xb4, 0xda, 0x81, 0xcb, 0xd9, 0x1e, 0x5a, 0xa3, 0x64, 0x53, 0x48, 0x89,
	0x6a, 0x5c, 0x81, 0x42, 0xd5, 0xa9, 0xa4, 0xe0, 0x31, 0xa8, 0xb7, 0x42, 0x54, 0xee, 0xb9, 0xe6,
	0xe5, 0xe9, 0x9a, 0x02, 0xd2, 0xb5, 0xe6, 0xff, 0x3d, 0x7b, 0x14, 0x8b, 0xc4, 0x82, 0x13, 0x72,
	0xb5, 0xfe, 0x19, 0x84, 0xed, 0xb3, 0x00, 0x7e, 0x22, 0x32, 0x37, 0x0a, 0xbb, 0x61, 0xa6, 0x8f,
	0xf0, 0x12, 0xb2, 0x29, 0x01, 0xc3, 0x64, 0xf1, 0xf1, 0x61, 0xb2, 0xf8, 0x25, 0x98, 0xed, 0x0b,
	0x2a, 0xa8, 0x1c, 0xff, 0x5b, 0xa5, 0x88, 0x82, 0xc7, 0x88, 0xec, 0x93, 0xc7, 0x89, 0xec, 0x74,
	0x85, 0xbc, 0x20, 0x74, 0x50, 0xd0, 0x5e, 0x0e, 0xc5, 0x2d, 0x4d, 0xf5, 0x51, 0x3c, 0x65, 0xfa,
	0xe3, 0xca, 0x53, 0x2a, 0xc7, 0xf0, 0x94, 0xd2, 0x32, 0x98, 0x29, 0x2f, 0x83, 0xbe, 0xd9, 0x0b,
	0x03, 0xb3, 0xf7, 0x5b, 0x16, 0xd4, 0xd4, 0x82, 0x20, 0x2d, 0x53, 0x75, 0xb4, 0xcb, 0x7b, 0xe8,
	0x52, 0x74, 0xaa, 0xea, 0x07, 0x6a, 0xc1, 0x5e, 0x85, 0x35, 0x9c, 0xb2, 0x61, 0xbc, 0xe7, 0x45,
	0x61, 0xa0, 0xec, 0x04, 0x61, 0x97, 0x25, 0xbd, 0x0c, 0x39, 0x62, 0xdd, 0x59, 0x95, 0x08, 0x1b,
	0x46, 0xfa, 0x0e, 0x25, 0xa3, 0x28, 0x32, 0x90, 0xd7, 0x23, 0xb9, 0xbb, 0x8e, 0x59, 0x57, 0xfa,
	0xb3, 0xde, 0x20, 0xb9, 0x7b, 0x07, 0x9e, 0xc4, 0xc0, 0x83, 0x47, 0x54, 0x6c, 0x0e, 0x06, 0x49,
	0xfd, 0x8f, 0x85, 0x62, 0x6b, 0x38, 0x15, 0xc6, 0xd8, 0x38, 0xf0, 0xc4, 0xd0, 0x52, 0x89, 0x24,
	0xb3, 0x50, 0x3a, 0x15, 0x34, 0x07, 0x0b, 0x25, 0xfa, 0x8c, 0x32, 0x9f, 0x86, 0x05, 0xbc, 0x18,
	0x11, 0x30, 0x0c, 0x4c, 0x49, 0x72, 0xca, 0x3c, 0x2e, 0xa6, 0x39, 0x95, 0xb0, 0x19, 0x0a, 0xb2,
	0x51, 0xdf, 0x86, 0xf3, 0xa1, 0x70, 0x07, 0xd0, 0xcd, 0x8a, 0xe9, 0xcc, 0x70, 0x3a, 0x14, 0x77,
	0xca, 0x79, 0xcb, 0x35, 0xca, 0x56, 0xf8, 0xa5, 0x7c, 0xb6, 0x32, 0x23, 0x8b, 0x2d, 0xdf, 0xc4,
	0xfd, 0x2c, 0x9c, 0x55, 0xb8, 0x41, 0x28, 0xde, 0x56, 0xd7, 0x18, 0x07, 0x4f, 0x0e, 0x6b, 0x98,
	0xef, 0x76, 0x28, 0xde, 0xa6, 0x7b, 0x8d, 0x46, 0x09, 0x9f, 0x84, 0xd3, 0x66, 0x09, 0x78, 0xe9,
	0xd0, 0xc8, 0xbf, 0x94, 0xcb, 0x08, 0x94, 0x5f, 0xb2, 0x0d, 0x23, 0xf7, 0x2d, 0x6c, 0x71, 0x9e,
	0x5b, 0x8b, 0xdf, 0x66, 0x09, 0x64, 0x3e, 0x38, 0x95, 0x97, 0xa0, 0xc4, 0x71, 0xa3, 0x90, 0xe7,
	0x61, 0x29, 0xf5, 0x59, 0x90, 0xba, 0x7d, 0xd1, 0x69, 0xe9, 0x88, 0x60, 0x63, 0xda, 0x76, 0x29,
	0x44, 0xed, 0x59, 0x00, 0xca, 0x81, 0xac, 0x6d, 0x95, 0xac, 0xa8, 0x08, 0x41, 0xb6, 0xf6, 0x38,
	0xcc, 0x52, 0xb2, 0x71, 0x1c, 0xa0, 0x30, 0x4a, 0x12, 0xaa, 0xcf, 0x03, 0x9f, 0x46, 0x01, 0x36,
	0xf5, 0x59, 0xcb, 0x0d, 0x86, 0x75, 0xdd, 0x1a, 0x1d, 0xba, 0x90, 0xf0, 0xd6, 0xed, 0xc1, 0x9e,
	0x2b, 0xf2, 0x07, 0x43, 0x1b, 0x7e, 0xca, 0xcc, 0x1f, 0x1c, 0xd5, 0xec, 0x56, 0xd0, 0xdf, 0xec,
	0xd3, 0x79, 0xb3, 0x5b, 0x41, 0xb9, 0xd9, 0xd4, 0x2e, 0xa3, 0xba, 0xc6, 0x99, 0xbc, 0x5d, 0x79,
	0x0d, 0xf6, 0x1f, 0x58, 0x30, 0xaf, 0xb6, 0x3b, 0xc6, 0x05, 0x23, 0x07, 0x8c, 0xb3, 0xc8, 0x6b,
	0xf9, 0xc9, 0x30, 0x1a, 0x73, 0xb3, 0x75, 0x66, 0x5b, 0xed, 0xc0, 0x21, 0x52, 0xd0, 0xed, 0x83,
	0xa6, 0x6c, 0x1f, 0x81, 0x66, 0xbf, 0x9d, 0xd3, 0x53, 0xf6, 0xa6, 0x99, 0xb1, 0xe8, 0x38, 0x29,
	0x6c, 0xac, 0x0d, 0xaf, 0xf8, 0x80, 0x27, 0xf6, 0x2e, 0x8c, 0x1f, 0xf0, 0x44, 0xf9, 0x98, 0xbe,
	0x35, 0x9a, 0xbb, 0x12, 0x8e, 0xac, 0xa2, 0xf9, 0xdf, 0x26, 0x8e, 0x12, 0x7a, 0xa8, 0x38, 0x36,
	0xa0, 0xeb, 0xb0, 0x06, 0x75, 0x1d, 0xc7, 0xe9, 0x2e, 0xc6, 0x8e, 0xd5, 0x5d, 0x7c, 0xf4, 0xe7,
	0x94, 0xa3, 0xe4, 0x9b, 0xa9, 0x0f, 0xa4, 0x4c, 0x9c, 0xfe, 0x80, 0xca, 0xc4, 0xca, 0x71, 0x92,
	0xc9, 0xb1, 0xdb, 0x73, 0x49, 0xfa, 0x80, 0x8f, 0xab, 0xf4, 0x51, 0x3d, 0x5a, 0xfa, 0x68, 0xfe,
	0xc7, 0x71, 0x38, 0x73, 0xc4, 0xd1, 0x3c, 0x15, 0x6e, 0x9a, 0xa2, 0x3b, 0x6a, 0xec, 0xbb, 0xdd,
	0x24, 0xc8, 0x03, 0xc4, 0x88, 0xd8, 0xbf, 0x97, 0x04, 0xcc, 0x5e, 0x86, 0xa9, 0xcc, 0xef, 0x16,
	0xf7, 0x48, 0x27, 0x33, 0xbf, 0x4b, 0x41, 0x1b, 0x8c, 0x50, 0x4f, 0x86, 0x1a, 0x61, 0xb6, 0x00,
	0xe3, 0x90, 0x94, 0x11, 0xb1, 0x86, 0x89, 0x7e, 0x44, 0xac, 0xe8, 0x2a, 0x2c, 0xed, 0x7b, 0x61,
	0xe6, 0x66, 0x89, 0xcb, 0x99, 0xc8, 0x12, 0x5e, 0xf2, 0xf8, 0x5c, 0x90, 0x69, 0x3b, 0x89, 0x43,
	0x29, 0xe8, 0x3b, 0xd3, 0x54, 0x53, 0x34, 0x69, 0xb7, 0x4d, 0xd7, 0xcf, 0xaa, 0x04, 0x3e, 0x68,
	0xb7, 0x11, 0xe7, 0x6b, 0x16, 0xcc, 0x15, 0x17, 0x8a, 0xf0, 0x92, 0x8f, 0x12, 0x20, 0xdd, 0x11,
	0xac, 0x71, 0xf3, 0xea, 0x92, 0x33, 0x4b, 0x5f, 0xdb, 0xaa, 0x5a, 0xfb, 0x1a, 0xa0, 0x58, 0x83,
	0x2b, 0x55, 0xfe, 0x69, 0x87, 0x91, 0x3a, 0xd2, 0x50, 0x7c, 0x0e, 0xf4, 0xd0, 0x90, 0x0b, 0x75,
	0x8b, 0xd2, 0xb0, 0xf7, 0x30, 0xca, 0xb3, 0x6c, 0xb2, 0x72, 0x84, 0xcf, 0x0e, 0x23, 0x1d, 0x9c,
	0x63, 0xde, 0x48, 0xd8, 0x96, 0xf0, 0xe6, 0x3b, 0xf0, 0xc4, 0x11, 0x3a, 0x0b, 0xee, 0xa6, 0x9c,
	0xa5, 0x2c, 0x0e, 0x28, 0x94, 0xea, 0xd0, 0x4b, 0x99, 0x4b, 0x30, 0x69, 0x06, 0xdf, 0xa0, 0x8f,
	0xdc, 0xf3, 0x88, 0x0e, 0x35, 0xc4, 0x2a, 0xd0, 0xf3, 0x88, 0x4e, 0x34, 0x7f, 0x66, 0xc1, 0xa5,
	0x47, 0xd6, 0x29, 0x45, 0x1a, 0xfb, 0x87, 0x96, 0x9c, 0x08, 0x05, 0x11, 0x21, 0xd3, 0x06, 0xfb,
	0xbd, 0x13, 0x52, 0xdc, 0xf4, 0x75, 0x82, 0x9c, 0x80, 0xf8, 0x79, 0x87, 0xa8, 0x69, 0xfe, 0x95,
	0x7d, 0xd4, 0x2a, 0x91, 0xb5, 0x67, 0xac, 0xcc, 0x25, 0xac, 0xe3, 0xb8, 0xc4, 0xd8, 0xc7, 0x95,
	0x4b, 0x8c, 0x1f, 0x73, 0x46, 0x79, 0x08, 0xd7, 0x70, 0x82, 0x0a, 0x16, 0xa9, 0xd5, 0x2a, 0x58,
	0xa7, 0xcb, 0x62, 0x0a, 0x07, 0x89, 0x3a, 0x88, 0xe0, 0x6d, 0xcf, 0x67, 0xb1, 0x7f, 0x68, 0x6e,
	0x37, 0xb4, 0x9a, 0xaf, 0xc8, 0xac, 0xdb, 0x3a, 0xe7, 0x36, 0x65, 0x74, 0x28, 0xdf, 0x0d, 0x9d,
	0xcd, 0xd8, 0x86, 0xbe, 0x62, 0xc1, 0x0d, 0x2d, 0x75, 0x7f, 0xb0, 0x0a, 0x07, 0xb7, 0x99, 0x57,
	0x49, 0x20, 0x7f, 0xff, 0xb5, 0x1b, 0x8d, 0x3e, 0xf6, 0x20, 0x33, 0x75, 0xfc, 0x41, 0xe6, 0x73,
	0xd0, 0xec, 0xa3, 0x7f, 0xd8, 0x91, 0x66, 0x1a, 0xfb, 0xe7, 0x7c, 0xa9, 0x7f, 0x7e, 0xbe, 0xb3,
	0x4d, 0x65, 0x14, 0x67, 0x9b, 0x99, 0xf7, 0x7d, 0xb6, 0x59, 0x87, 0xe5, 0xbe, 0x66, 0x77, 0x59,
	0xc6, 0x43, 0x5f, 0x45, 0x04, 0x5a, 0x2c, 0xb5, 0xf4, 0x1e, 0x26, 0xd9, 0x9b, 0xf0, 0xd8, 0xe0,
	0x68, 0x53, 0xb6, 0xc1, 0x4d, 0xec, 0x7c, 0xdf, 0x78, 0x52, 0x19, 0x06, 0x05, 0x5b, 0x70, 0xe9,
	0x11, 0x13, 0xa7, 0xeb, 0xf1, 0x4e, 0x18, 0xab, 0x93, 0xe8, 0xc5, 0x63, 0xe6, 0xe6, 0x3d, 0x44,
	0xb4, 0xdb, 0xf0, 0xc2, 0xa3, 0x67, 0x23, 0x15, 0xea, 0x72, 0x16, 0x79, 0x59, 0xb8, 0xa7, 0x6d,
	0x50, 0xcf, 0x1c, 0x3b, 0xfb, 0xa8, 0x7c, 0x47, 0x65, 0xb1, 0xdf, 0x86, 0x6b, 0xef, 0xbb, 0x9e,
	0x81, 0xd3, 0xec, 0x73, 0xef, 0xa3, 0x26, 0xa3, 0x97, 0x7e, 0x19, 0x9e, 0x7d, 0x44, 0x45, 0xfa,
	0x9b, 0xd4, 0x46, 0x73, 0xd8, 0x59, 0x4f, 0x1e, 0xd3, 0x59, 0xea, 0x8b, 0x94, 0x4a, 0xfb, 0xf0,
	0xea, 0xa3, 0x9b, 0x52, 0xaa, 0xc1, 0x6c, 0x11, 0x99, 0xcc, 0xae, 0x1d, 0xdb, 0x22, 0xb3, 0x3a,
	0xa3, 0x5d, 0xaf, 0x90, 0x76, 0xba, 0xa8, 0x78, 0xf0, 0xa4, 0xbc, 0x62, 0x96, 0x7b, 0x84, 0xc5,
	0xcb, 0xfe, 0xe8, 0xf4, 0xb6, 0xbf, 0x67, 0x41, 0xcd, 0xdc, 0x1c, 0xf1, 0xbc, 0x3d, 0x82, 0x08,
	0x86, 0xef, 0x6b, 0x67, 0x76, 0xaa, 0xea, 0x0b, 0x1f, 0xb4, 0x20, 0x7b, 0x9a, 0x99, 0x3e, 0xfc,
	0x5c, 0x5f, 0x64, 0x79, 0x94, 0x0e, 0x62, 0xf9, 0x67, 0xd4, 0x41, 0xac, 0xfc, 0x9c, 0x3a, 0x88,
	0xd5, 0x9f, 0x5b, 0x07, 0xd1, 0xf8, 0x99, 0x75, 0x10, 0x6b, 0xef, 0x53, 0x07, 0x71, 0xea, 0xd1,
	0x3a, 0x88, 0xd3, 0x3f, 0x83, 0x0e, 0xe2, 0xcc, 0xcf, 0xa9, 0x83, 0x38, 0xfb, 0x33, 0xea, 0x20,
	0xce, 0x7d, 0x00, 0x1d, 0xc4, 0xf9, 0x41, 0x1d, 0x44, 0xf3, 0x2f, 0x66, 0x0a, 0x67, 0xfa, 0xf2,
	0x9c, 0xed, 0xc5, 0x72, 0x8f, 0x7c, 0x05, 0xd6, 0xd4, 0x04, 0x2f, 0xa7, 0x1a, 0xb2, 0xec, 0x0a,
	0x21, 0xdc, 0x30, 0xae, 0x75, 0x60, 0xc7, 0xfe, 0x43, 0x0b, 0xd6, 0x8e, 0x54, 0xb9, 0x2b, 0x79,
	0xed, 0x9d, 0x93, 0x59, 0x7f, 0x46, 0xc5, 0xce, 0x8a, 0x79, 0xff, 0x44, 0xb2, 0xac, 0x07, 0x64,
	0x03, 0xf8, 0x07, 0x16, 0x34, 0x06, 0x8d, 0xa8, 0x64, 0x43, 0x55, 0xde, 0x64, 0x27, 0x44, 0xad,
	0x61, 0xbc, 0x2d, 0x53, 0x7b, 0x23, 0x27, 0xc8, 0xfe, 0xb1, 0xd5, 0x7f, 0xcd, 0x46, 0xe6, 0xea,
	0x32, 0xb1, 0x3b, 0xaa, 0x40, 0x98, 0x8f, 0x70, 0x58, 0x2a, 0xdf, 0xeb, 0xb9, 0xa1, 0x88, 0xc1,
	0xcb, 0x7b, 0x03, 0xaa, 0x9f, 0x51, 0x05, 0xc1, 0x3c, 0x52, 0xd7, 0xe4, 0xcc, 0x99, 0xc4, 0x7d,
	0x81, 0x27, 0xf6, 0x8f, 0x2c, 0x58, 0xee, 0x3f, 0x71, 0xb8, 0xdd, 0x34, 0x63, 0xea, 0x42, 0xfc,
	0x09, 0x69, 0xfa, 0x95, 0xfe, 0xc9, 0xb1, 0x4b, 0x93, 0x72, 0xfd, 0x5e, 0x9a, 0x31, 0xfb, 0x07,
	0x16, 0x2c, 0x0d, 0x53, 0x1d, 0xa8, 0xd3, 0x74, 0x74, 0x42, 0x03, 0x8c, 0x75, 0x3a, 0x0b, 0xa5,
	0xd1, 0x4d, 0xc5, 0x56, 0x6a, 0xff, 0xe1, 0xb0, 0x2e, 0x94, 0xad, 0x51, 0xaf, 0x94, 0x44, 0x27,
	0xd5, 0x85, 0xd8, 0x83, 0x0b, 0xe5, 0x1e, 0xdc, 0xda, 0x61, 0xcd, 0x7f, 0x62, 0x3c, 0xe1, 0x56,
	0xca, 0x73, 0x24, 0x57, 0x33, 0x9c, 0x3c, 0x86, 0x70, 0x35, 0x6d, 0x3a, 0x38, 0x32, 0xab, 0xeb,
	0x73, 0xff, 0xda, 0xba, 0x7e, 0x76, 0x63, 0x78, 0x01, 0xb7, 0x24, 0x8a, 0xfd, 0x7d, 0x0b, 0x16,
	0x87, 0xb0, 0xdb, 0x51, 0x3d, 0x3b, 0x74, 0x0c, 0x87, 0x2f, 0x77, 0xdc, 0x9b, 0x12, 0xd4, 0xfc,
	0x63, 0xab, 0x30, 0x9a, 0x62, 0x4c, 0xd9, 0xfd, 0xa0, 0xeb, 0xb6, 0xc3, 0x03, 0x26, 0x37, 0x93,
	0x30, 0x20, 0xcd, 0x04, 0x3a, 0x87, 0xd2, 0x55, 0x35, 0x96, 0xe5, 0xce, 0xa1, 0x78, 0x51, 0x8d,
	0x65, 0xb6, 0x0d, 0x13, 0x12, 0x55, 0xb9, 0xc5, 0xe0, 0x6f, 0x0c, 0x6c, 0xb8, 0xeb, 0x21, 0x5d,
	0x22, 0xf5, 0x7c, 0x29, 0x11, 0x2a, 0x05, 0x96, 0x02, 0x6f, 0x13, 0xd4, 0x3e, 0x07, 0x10, 0x06,
	0x2c, 0xce, 0xc2, 0x76, 0xc8, 0xb8, 0x52, 0x83, 0x1a, 0x10, 0xbc, 0x48, 0x49, 0x39, 0x90, 0x93,
	0x2c, 0x38, 0xfa, 0xb3, 0x79, 0x58, 0xe8, 0x63, 0x90, 0xf0, 0xce, 0x4b, 0xcf, 0xbf, 0xe2, 0x26,
	0x59, 0xac, 0xa8, 0x17, 0xe1, 0x17, 0x99, 0xa2, 0x7e, 0x1e, 0xc6, 0xb3, 0x34, 0x56, 0x16, 0x5e,
	0xf9, 0x53, 0x6e, 0x98, 0xad, 0x30, 0x73, 0xbb, 0x5e, 0xaa, 0x83, 0x6c, 0xe7, 0x06, 0xe5, 0xec,
	0x9e, 0x97, 0xaa, 0xd8, 0xda, 0xab, 0x30, 0xad, 0xb0, 0xd4, 0x3b, 0x2f, 0x53, 0x94, 0xdc, 0xfc,
	0xb7, 0x63, 0xd0, 0x28, 0xd7, 0x8d, 0x5f, 0x54, 0xdb, 0x59, 0x00, 0x75, 0x43, 0xa7, 0xd8, 0x37,
	0xa9, 0xf7, 0x70, 0xab, 0xfc, 0x2d, 0x0b, 0xc6, 0xf7, 0x83, 0xee, 0xa8, 0x37, 0xc5, 0x23, 0xc7,
	0xd2, 0x91, 0xb5, 0xdb, 0x5f, 0xb3, 0x60, 0x3c, 0xc9, 0xf4, 0x24, 0xdc, 0x1b, 0x29, 0x15, 0x47,
	0x0e, 0x8c, 0x23, 0x49, 0x68, 0xfe, 0x9f, 0x89, 0xc2, 0x72, 0xd0, 0xdf, 0x99, 0x78, 0x0f, 0xcd,
	0x56, 0x07, 0x6c, 0xba, 0x39, 0x51, 0x44, 0xfc, 0x1f, 0xc1, 0x95, 0xf0, 0xa3, 0xe8, 0xa0, 0x5b,
	0x5c, 0x1b, 0x44, 0x02, 0xea, 0xe6, 0xec, 0xef, 0x58, 0xb0, 0x80, 0x84, 0x31, 0x93, 0xae, 0xb1,
	0x13, 0xa6, 0x6b, 0x4e, 0x92, 0x70, 0xc7, 0x20, 0x4b, 0xf6, 0x17, 0x67, 0x62, 0xaf, 0xaf, 0xbf,
	0xc6, 0x4f, 0xba, 0xbf, 0x24, 0x0d, 0x03, 0xfd, 0x85, 0x84, 0x95, 0xfa, 0x6b, 0xe2, 0xa4, 0xfb,
	0x4b, 0x92, 0x60, 0xf4, 0x57, 0xf3, 0x7f, 0x56, 0x60, 0x49, 0x63, 0x8b, 0xf5, 0x08, 0xe7, 0x29,
	0xde, 0x9e, 0xb8, 0x0a, 0x8b, 0x61, 0xec, 0x27, 0x5d, 0x79, 0xca, 0xf4, 0x93, 0x38, 0xe3, 0x49,
	0x14, 0xa9, 0xa8, 0x8b, 0x33, 0x8e, 0xad, 0x93, 0x6e, 0xe5, 0x29, 0xe8, 0xd6, 0x35, 0x98, 0xa1,
	0x74, 0xef, 0x74, 0x75, 0x30, 0x1b, 0x79, 0xd0, 0x5f, 0x87, 0x3c, 0x09, 0x03, 0x88, 0x1b, 0x15,
	0x12, 0xdb, 0x5c, 0xd6, 0xc9, 0xdb, 0xbd, 0x96, 0x51, 0xe7, 0x0d, 0x38, 0x7b, 0x44, 0x3e, 0x55,
	0x2f, 0xa9, 0x0f, 0x4f, 0x0d, 0xcd, 0x4d, 0x55, 0x5f, 0x85, 0xc5, 0xfc, 0xd2, 0xb2, 0x51, 0x2d,
	0x5d, 0x0e, 0xcf, 0xef, 0x33, 0x97, 0xdb, 0x39, 0x24, 0x83, 0xaa, 0x8f, 0x6e, 0x8a, 0xaf, 0x0e,
	0x66, 0xcb, 0xdb, 0x99, 0xe7, 0xed, 0x6b, 0x27, 0x29, 0xf2, 0x96, 0x75, 0xf2, 0x40, 0x3b, 0x8f,
	0xc8, 0xa7, 0xea, 0x25, 0x25, 0xff, 0xa9, 0xa1, 0xb9, 0xa9, 0xea, 0x2f, 0x9a, 0x7e, 0xb0, 0x33,
	0x23, 0x0b, 0x5a, 0x99, 0x5f, 0xa9, 0x31, 0xbd, 0x6c, 0x7f, 0xc3, 0x82, 0x29, 0xe2, 0x67, 0xca,
	0xc2, 0x15, 0x9e, 0xd4, 0x84, 0x17, 0x8e, 0xaa, 0xd8, 0xbe, 0x0c, 0xf3, 0x3e, 0x4f, 0xc8, 0xd9,
	0x30, 0xa6, 0x08, 0x45, 0xa8, 0x10, 0xac, 0x3b, 0xb3, 0x08, 0xbf, 0x45, 0x60, 0x15, 0xe1, 0x34,
	0x47, 0xcb, 0x1d, 0xc7, 0xab, 0xa1, 0x46, 0x61, 0x81, 0xf1, 0x30, 0x67, 0xbd, 0xf4, 0x30, 0xe7,
	0x67, 0xe1, 0xcc, 0xb0, 0xb9, 0x11, 0xb6, 0x77, 0xbd, 0x38, 0x88, 0xf4, 0x5d, 0xf8, 0x53, 0x83,
	0xd3, 0x63, 0x43, 0x61, 0xd8, 0xaf, 0xc3, 0x85, 0xa3, 0x46, 0x3a, 0x2f, 0x65, 0x0e, 0x4b, 0x39,
	0x3b, 0x74, 0xb0, 0xf3, 0x82, 0x3e, 0x0b, 0x67, 0x86, 0x2d, 0xc7, 0xbc, 0x90, 0xf9, 0xf2, 0xca,
	0x18, 0x4e, 0xca, 0x51, 0x8b, 0x2b, 0x2f, 0x65, 0x81, 0x48, 0x19, 0xba, 0xbe, 0xf2, 0x82, 0xa4,
	0x80, 0x94, 0x86, 0xe4, 0x2f, 0x52, 0x77, 0xf0, 0x77, 0xf3, 0x27, 0xe3, 0xb0, 0x90, 0x31, 0x37,
	0xdd, 0xcb, 0xc8, 0x64, 0x95, 0xb4, 0xde, 0x76, 0x33, 0x7b, 0x11, 0x26, 0x85, 0xdb, 0x0a, 0xb5,
	0x8c, 0x35, 0x21, 0x6e, 0x86, 0x08, 0x4c, 0x11, 0x48, 0xa6, 0xe7, 0x89, 0x54, 0x01, 0x63, 0x04,
	0x92, 0xcd, 0x61, 0x22, 0x56, 0xc0, 0x04, 0x81, 0xe4, 0x42, 0x3c, 0x91, 0x48, 0xe0, 0x45, 0xa8,
	0x29, 0xf5, 0xbe, 0xf9, 0x80, 0x70, 0x55, 0xc1, 0xb4, 0x5e, 0x24, 0x14, 0xee, 0x7e, 0x86, 0xaa,
	0x2b, 0x7c, 0x82, 0x8f, 0x1c, 0xc6, 0x6a, 0xa1, 0xf8, 0x7c, 0xc6, 0xb7, 0x08, 0x66, 0x9f, 0x87,
	0xaa, 0x44, 0xd1, 0xea, 0x7b, 0x15, 0xe9, 0x65, 0x3f, 0xe3, 0x5a, 0x63, 0x4f, 0x0f, 0x01, 0xef,
	0x26, 0x79, 0x29, 0x15, 0x3d, 0x73, 0xde, 0x48, 0x74, 0x21, 0x67, 0x01, 0x76, 0x93, 0xbc, 0x8c,
	0x19, 0xb2, 0x78, 0xed, 0x26, 0xba, 0x88, 0xe7, 0x60, 0x31, 0x14, 0xae, 0xb6, 0x96, 0xe6, 0x05,
	0x91, 0x43, 0xe9, 0x7c, 0x28, 0xb6, 0xc9, 0x6e, 0xaa, 0x4b, 0x33, 0x2d, 0xab, 0xd5, 0xa3, 0x2c,
	0xab, 0x35, 0xd3, 0xb2, 0x7a, 0xb4, 0x9d, 0xb0, 0x7e, 0xa4, 0x9d, 0xb0, 0xf9, 0xf7, 0xac, 0xf2,
	0x26, 0x21, 0x0f, 0x4a, 0xb8, 0x49, 0xbc, 0x67, 0x95, 0xec, 0xaf, 0xe8, 0x3e, 0x46, 0xa2, 0x89,
	0x37, 0x02, 0xde, 0x52, 0x9e, 0x2c, 0xa6, 0x89, 0x17, 0xef, 0x26, 0x7e, 0x75, 0xac, 0xa0, 0x52,
	0x6e, 0x63, 0x92, 0x52, 0xa4, 0x72, 0x8f, 0x64, 0x3d, 0x6b, 0x34, 0xb7, 0xf6, 0x86, 0xed, 0x9e,
	0x28, 0xd9, 0xc9, 0x7a, 0xbd, 0x54, 0x8c, 0xea, 0xb6, 0xe0, 0xb0, 0x01, 0x71, 0x64, 0x85, 0xcd,
	0xef, 0x8e, 0x51, 0xdc, 0x8c, 0xf5, 0x08, 0xb5, 0xb1, 0x72, 0xb8, 0x77, 0x13, 0x32, 0xc3, 0x87,
	0x41, 0xe9, 0x9d, 0x16, 0x11, 0x06, 0xfa, 0x15, 0xe7, 0x5d, 0x4f, 0xb8, 0xa1, 0xe9, 0x86, 0x4f,
	0xab, 0x6d, 0x76, 0xd7, 0x13, 0x1b, 0x85, 0x1f, 0x3e, 0x5d, 0x98, 0xf0, 0xbd, 0x88, 0x1e, 0x0e,
	0x50, 0xb1, 0x22, 0x10, 0x22, 0x71, 0xf0, 0x99, 0x22, 0x24, 0x8f, 0xd2, 0x27, 0xd4, 0x33, 0x45,
	0x08, 0x42, 0x84, 0xc7, 0x41, 0x96, 0xe8, 0x16, 0x1c, 0x5a, 0x59, 0xd9, 0x6a, 0xbb, 0x9e, 0xb8,
	0x97, 0x46, 0x4a, 0x58, 0xba, 0xac, 0xde, 0xe2, 0xd6, 0x0f, 0x02, 0x45, 0x3d, 0x6d, 0x7f, 0xc7,
	0xd8, 0xe1, 0xea, 0x21, 0x20, 0x15, 0xed, 0x5d, 0x96, 0xc7, 0x24, 0xd3, 0x49, 0x0f, 0x55, 0x91,
	0x74, 0x93, 0x6d, 0x6e, 0xd7, 0x13, 0x77, 0x08, 0x4e, 0xb2, 0x4e, 0xaf, 0x38, 0xb5, 0x60, 0x2f,
	0xd3, 0x75, 0x38, 0xc6, 0x79, 0xc2, 0x31, 0x3a, 0x8c, 0xfc, 0xe1, 0x76, 0x99, 0x10, 0x5e, 0x27,
	0x7f, 0x5f, 0x17, 0x81, 0xf7, 0x08, 0x86, 0xd1, 0x36, 0x45, 0x4a, 0xcb, 0x8d, 0x24, 0x9a, 0xe9,
	0x48, 0xa4, 0xb8, 0xdc, 0x30, 0x10, 0x67, 0xc7, 0x35, 0x82, 0x6a, 0x4e, 0x47, 0x49, 0x47, 0x2e,
	0xeb, 0xe6, 0xb7, 0xc6, 0xfa, 0x5e, 0x72, 0x17, 0x61, 0x47, 0xd5, 0x7a, 0x16, 0x80, 0x6a, 0x8d,
	0xb5, 0x6f, 0x44, 0xdd, 0x99, 0x41, 0xc8, 0x7d, 0x59, 0xe8, 0x12, 0x4c, 0xe2, 0x87, 0x36, 0x9a,
	0x53, 0x26, 0x39, 0x8e, 0xc8, 0x8e, 0x83, 0xbc, 0x2a, 0x21, 0xf9, 0x6e, 0x50, 0x26, 0x70, 0xe2,
	0x68, 0x02, 0x27, 0x4b, 0x04, 0x62, 0xfc, 0x75, 0xba, 0x6d, 0x80, 0x0e, 0xc6, 0x14, 0x5d, 0x7a,
	0x4a, 0xc5, 0x5f, 0xcf, 0x13, 0x28, 0xc2, 0xf4, 0x40, 0x3f, 0x4d, 0x0f, 0xe9, 0x27, 0x9c, 0x05,
	0xe4, 0x47, 0x15, 0x89, 0x54, 0xb1, 0x41, 0x50, 0xa0, 0x4d, 0x91, 0x36, 0xff, 0x69, 0xbd, 0x7f,
	0x28, 0x4a, 0x1e, 0xca, 0xcb, 0xf4, 0x8b, 0x9e, 0xeb, 0x70, 0x43, 0xe1, 0xa2, 0xbd, 0x50, 0x6d,
	0x0a, 0x36, 0x25, 0xe2, 0xa3, 0x1d, 0x1b, 0xe2, 0x2d, 0x99, 0x22, 0x79, 0xbc, 0x99, 0x45, 0x07,
	0x25, 0x37, 0x30, 0xe5, 0x94, 0x32, 0x2a, 0x31, 0xc3, 0x09, 0xcd, 0xa6, 0xb9, 0x66, 0x14, 0xd5,
	0x1e, 0x7d, 0x98, 0x86, 0xa7, 0xb2, 0x81, 0x89, 0xcb, 0x06, 0x9f, 0xba, 0x37, 0x42, 0x0a, 0x51,
	0xa9, 0x93, 0xfa, 0xa9, 0xfb, 0x22, 0xae, 0x90, 0x2e, 0xb7, 0x8c, 0x9d, 0xf7, 0xf2, 0xac, 0x89,
	0xbb, 0x11, 0xd8, 0xcf, 0xc0, 0xc2, 0x6e, 0x12, 0x05, 0x41, 0xb2, 0x1f, 0xbb, 0x79, 0xa0, 0x58,
	0xda, 0x6f, 0xe6, 0x75, 0xc2, 0x6d, 0x1d, 0x30, 0xf6, 0x3c, 0x54, 0x53, 0x43, 0x4b, 0x4e, 0x92,
	0x20, 0xa4, 0x85, 0x76, 0x5c, 0x87, 0xe7, 0x50, 0xed, 0xf1, 0x38, 0xf3, 0xc8, 0x11, 0x09, 0xc9,
	0x2c, 0x9a, 0x74, 0x83, 0x33, 0x6f, 0x23, 0xb0, 0x3f, 0x81, 0x5e, 0x4e, 0xea, 0xa9, 0xc6, 0x72,
	0xc4, 0xa4, 0xfc, 0x5e, 0x03, 0x3d, 0xd9, 0x78, 0xc7, 0x8c, 0x9c, 0x74, 0x1e, 0xaa, 0x72, 0xf3,
	0x63, 0x44, 0x9d, 0xb2, 0xb5, 0x42, 0x28, 0xde, 0x50, 0x10, 0x85, 0x10, 0x25, 0xfe, 0x43, 0x44,
	0xa8, 0x69, 0x84, 0x4d, 0x05, 0x51, 0x08, 0x7b, 0x8c, 0xb7, 0xbc, 0x2c, 0xec, 0x2a, 0xfb, 0x27,
	0x84, 0xe2, 0x2d, 0x05, 0x51, 0x08, 0x41, 0x28, 0xe8, 0xce, 0xe9, 0xac, 0x46, 0xb8, 0xad, 0x20,
	0x9a, 0x19, 0x94, 0x54, 0x3f, 0xca, 0xad, 0x56, 0x32, 0x03, 0x53, 0x3f, 0x85, 0x21, 0x96, 0xcb,
	0x88, 0xf3, 0xa3, 0xb9, 0xfb, 0x3f, 0x54, 0x21, 0xe5, 0xd4, 0x4c, 0x55, 0x14, 0xde, 0xcc, 0x2b,
	0xe9, 0xab, 0xda, 0x49, 0x2f, 0xd6, 0xe6, 0xc6, 0x92, 0xd6, 0xea, 0xae, 0x4c, 0xb0, 0xff, 0xd0,
	0x52, 0xdb, 0xb8, 0xe4, 0x60, 0xbd, 0x88, 0xac, 0xee, 0xc4, 0x2a, 0xec, 0xd1, 0x04, 0x8b, 0x3b,
	0x8a, 0x71, 0x3a, 0x4b, 0x92, 0x8e, 0x5b, 0x05, 0x19, 0x77, 0x90, 0x47, 0x7d, 0xd3, 0x82, 0x3a,
	0x67, 0x5d, 0xc6, 0x3b, 0x4c, 0xd1, 0xb5, 0x78, 0xc2, 0x74, 0xd5, 0x54, 0xf5, 0x44, 0xcf, 0xb7,
	0x2d, 0x98, 0x37, 0x78, 0x1c, 0x91, 0xb4, 0x84, 0x24, 0xb5, 0x47, 0xfb, 0x9e, 0xbf, 0xe6, 0xf5,
	0x26, 0x2b, 0x25, 0x9a, 0x5e, 0x80, 0x65, 0x39, 0x5b, 0x0f, 0x78, 0xd2, 0x37, 0x63, 0xc9, 0xa6,
	0x69, 0xef, 0x7a, 0xe2, 0x0b, 0x3c, 0x29, 0x4d, 0xda, 0x4f, 0xc0, 0xea, 0x00, 0xba, 0x9a, 0x2b,
	0x64, 0xd0, 0x5c, 0x3a, 0x28, 0xe7, 0xa0, 0xe9, 0xf2, 0x6d, 0x0b, 0x16, 0x06, 0xab, 0x59, 0x3d,
	0xc9, 0xf9, 0x3e, 0xd7, 0x47, 0x98, 0xe4, 0x9d, 0xf8, 0xde, 0x75, 0xc9, 0xa2, 0xaf, 0x8c, 0xa2,
	0x52, 0xd0, 0x2d, 0xd9, 0xea, 0xed, 0x9b, 0x70, 0xae, 0xb8, 0x16, 0xd4, 0x3a, 0x34, 0xf7, 0x0b,
	0xc5, 0xf2, 0xc9, 0x28, 0x7a, 0x2a, 0xc7, 0xba, 0x79, 0x58, 0x18, 0xbc, 0x68, 0x07, 0xb8, 0x0d,
	0xe7, 0x95, 0xeb, 0x9f, 0x8a, 0xc7, 0x33, 0x58, 0xc8, 0x29, 0x52, 0x67, 0x6b, 0xb4, 0xbb, 0x3c,
	0xe9, 0xf6, 0x95, 0xd2, 0xfc, 0x23, 0x0b, 0x56, 0x06, 0x34, 0x7b, 0x99, 0x48, 0x99, 0x8f, 0xd7,
	0x24, 0x71, 0x8c, 0xcd, 0x97, 0x6c, 0x80, 0x40, 0x5a, 0xcc, 0x8a, 0xbb, 0xbe, 0x9b, 0x70, 0xb7,
	0x3f, 0x22, 0xc6, 0x6c, 0xdc, 0xf5, 0x1f, 0xf0, 0x1d, 0x0d, 0xb5, 0xe7, 0x61, 0x3c, 0xde, 0xf3,
	0xd5, 0xf6, 0x2e, 0x7f, 0xda, 0xe7, 0x00, 0xba, 0xbd, 0x28, 0x0b, 0xd3, 0xc8, 0x50, 0x14, 0x17,
	0x90, 0x52, 0xb4, 0x8b, 0xc9, 0x72, 0xb4, 0x8b, 0x3f, 0xb5, 0x30, 0x0e, 0x22, 0x91, 0xcc, 0x62,
	0xc6, 0x43, 0x5f, 0x51, 0x7c, 0x0e, 0xaa, 0x99, 0x2b, 0x7f, 0x95, 0x94, 0xb5, 0xd9, 0x76, 0xca,
	0x7c, 0xad, 0xac, 0x9d, 0x49, 0xb2, 0x98, 0x70, 0x94, 0x20, 0xdb, 0x1e, 0x81, 0x64, 0x3f, 0xa4,
	0x37, 0x9d, 0x8a, 0xac, 0x58, 0x52, 0x32, 0xbc, 0xcb, 0xdb, 0xff, 0xcf, 0x75, 0x79, 0x5b, 0x77,
	0x79, 0x7b, 0xb0, 0xcb, 0xdb, 0xfd, 0x5d, 0xde, 0x3e, 0xd9, 0x2e, 0x6f, 0xe7, 0x5d, 0x8e, 0x94,
	0x34, 0x0f, 0xc1, 0x2e, 0xfc, 0x9c, 0x91, 0xda, 0x96, 0xd7, 0x91, 0x62, 0x96, 0xb7, 0xc7, 0xb8,
	0xd7, 0x61, 0x45, 0x54, 0x95, 0x09, 0xa7, 0xaa, 0x60, 0x18, 0xed, 0xe5, 0x31, 0xa8, 0x77, 0xbd,
	0x83, 0xb0, 0xdb, 0xeb, 0xba, 0xad, 0x1e, 0x17, 0x99, 0x8a, 0x3c, 0x5f, 0x53, 0xc0, 0x9b, 0x12,
	0x86, 0x77, 0xdd, 0x98, 0xf7, 0x90, 0x0a, 0xa1, 0x87, 0xd7, 0x2b, 0x12, 0x80, 0x5d, 0xf7, 0xef,
	0x8a, 0x87, 0xc2, 0xfc, 0x24, 0xde, 0x93, 0x3c, 0x3c, 0xd6, 0x71, 0x8f, 0x56, 0x61, 0x5a, 0x29,
	0xc3, 0x55, 0xdd, 0x53, 0xa4, 0x97, 0x96, 0x43, 0x41, 0xab, 0xb9, 0xa7, 0x6b, 0x44, 0xc4, 0x07,
	0xbd, 0x4c, 0xe6, 0x51, 0x0a, 0x61, 0x55, 0xd5, 0x14, 0xe9, 0x66, 0xf1, 0xdd, 0x4a, 0x99, 0x20,
	0xf3, 0x50, 0x5c, 0x58, 0x44, 0x94, 0x79, 0x1e, 0x83, 0xba, 0x7a, 0x1b, 0x92, 0x82, 0x83, 0xa9,
	0x98, 0x7f, 0x35, 0x52, 0xa2, 0x12, 0xcc, 0xbe, 0x04, 0xb3, 0x79, 0xaf, 0x12, 0xd6, 0x14, 0x62,
	0xd5, 0x09, 0xaa, 0xd0, 0x9a, 0xff, 0x75, 0x0c, 0x2e, 0xe4, 0x67, 0xb5, 0xbe, 0xeb, 0xf4, 0x14,
	0xf6, 0x83, 0x62, 0x1a, 0xaa, 0x97, 0xaa, 0x2d, 0xf3, 0xa5, 0x6a, 0xfb, 0x55, 0x58, 0xeb, 0xcf,
	0x53, 0x3c, 0xdd, 0x4f, 0xf3, 0x78, 0xb5, 0x7c, 0x03, 0x7f, 0x27, 0x7f, 0xc8, 0x7f, 0x48, 0x30,
	0xac, 0x28, 0x8c, 0x1f, 0xea, 0x20, 0x9a, 0xe5, 0x6c, 0x9b, 0x61, 0xfc, 0xd0, 0xbe, 0x0e, 0xab,
	0x1a, 0x59, 0x1e, 0x04, 0xc2, 0xf8, 0x61, 0x2e, 0x56, 0x92, 0x00, 0xbc, 0x5c, 0x24, 0xcb, 0x0c,
	0x5a, 0xc2, 0xfc, 0x04, 0xac, 0x4a, 0xaa, 0xdc, 0x2c, 0x71, 0x77, 0x3d, 0x1e, 0x18, 0x35, 0xaa,
	0x75, 0xb1, 0x24, 0x93, 0x77, 0x92, 0x37, 0x3c, 0x1e, 0x14, 0x55, 0xca, 0xc5, 0xdb, 0xe6, 0x2e,
	0x37, 0x7b, 0x0f, 0x43, 0x7f, 0x39, 0x0a, 0x22, 0xcb, 0x35, 0x10, 0x74, 0x3c, 0x24, 0x14, 0xb2,
	0xe9, 0xd8, 0xb1, 0x54, 0x20, 0x53, 0x9c, 0x22, 0x7c, 0x06, 0xea, 0x5d, 0x0b, 0xe6, 0x14, 0xee,
	0x6e, 0xa2, 0x3a, 0xf8, 0x3c, 0x54, 0xe5, 0xef, 0xf2, 0x93, 0x4b, 0xb0, 0x9b, 0xa4, 0xc6, 0xab,
	0xa9, 0x88, 0x60, 0x3a, 0xd9, 0xa2, 0xbb, 0x77, 0xaa, 0x9d, 0x59, 0xed, 0x75, 0x58, 0x96, 0x28,
	0xf9, 0xab, 0x5f, 0x39, 0x2e, 0x59, 0xc7, 0x16, 0x77, 0x93, 0x54, 0x3f, 0x11, 0xa6, 0xf3, 0x34,
	0x7f, 0xa9, 0x38, 0xe8, 0xb4, 0xda, 0x81, 0x2b, 0x98, 0xc8, 0x2f, 0xda, 0x15, 0x01, 0x2b, 0x89,
	0x1a, 0x15, 0xb0, 0x52, 0x9e, 0xc6, 0xe4, 0x0f, 0x15, 0xd5, 0x85, 0x4e, 0x6c, 0xea, 0xad, 0x33,
	0x4c, 0xa0, 0x98, 0x2e, 0x78, 0xb4, 0xfc, 0x53, 0xab, 0x70, 0x2a, 0x96, 0xc5, 0xe7, 0x81, 0x10,
	0xf5, 0x93, 0xf5, 0xcb, 0x30, 0x55, 0x7a, 0xbd, 0x6e, 0x32, 0xd2, 0xa7, 0xb8, 0x1c, 0xd5, 0x28,
	0xbf, 0xa6, 0x81, 0x78, 0x2c, 0x7c, 0x12, 0xe6, 0x72, 0x24, 0xce, 0x3c, 0xa1, 0x6c, 0xb6, 0x33,
	0x4e, 0x1e, 0x96, 0xd1, 0x41, 0xa8, 0xfd, 0x32, 0x34, 0x72, 0xc4, 0x20, 0xf4, 0x3a, 0x71, 0x22,
	0x32, 0xf4, 0xbc, 0x54, 0xa7, 0xd0, 0xba, 0xb3, 0xa2, 0xd3, 0x6f, 0xe7, 0xc9, 0xf2, 0xbc, 0xda,
	0xfc, 0xce, 0x44, 0x61, 0xb6, 0xde, 0x65, 0x5e, 0x80, 0x8d, 0xd0, 0xcf, 0x9f, 0x61, 0x14, 0xe6,
	0x9c, 0x42, 0xf5, 0xfc, 0x99, 0x06, 0x22, 0x85, 0x5f, 0xb7, 0xa0, 0x66, 0xf6, 0xe8, 0xa8, 0xcd,
	0x4f, 0xfd, 0x23, 0xe8, 0x54, 0xd5, 0x17, 0xde, 0x5a, 0xfc, 0x3b, 0x16, 0xcc, 0xf7, 0x0f, 0x80,
	0x32, 0x3c, 0x45, 0xa3, 0xa4, 0xa8, 0xbf, 0x4e, 0x27, 0x1f, 0x36, 0x1d, 0x9d, 0xf9, 0x3c, 0x54,
	0x23, 0x91, 0x4a, 0x5c, 0xe3, 0x30, 0x0b, 0x04, 0xda, 0xd1, 0xcf, 0x5b, 0x0a, 0x97, 0xb3, 0xa0,
	0x17, 0x07, 0x5e, 0x9c, 0x29, 0x9d, 0x4c, 0x35, 0x14, 0x8e, 0x06, 0xc9, 0xb5, 0xd8, 0x7f, 0x81,
	0x4b, 0xa9, 0xd8, 0x55, 0x24, 0xe2, 0xa5, 0xf2, 0x9d, 0xaa, 0x4d, 0x52, 0xbb, 0x5f, 0x83, 0x95,
	0x81, 0x6c, 0x22, 0xf3, 0xd4, 0x45, 0x89, 0x8a, 0xb3, 0x58, 0xce, 0xb5, 0x2d, 0x93, 0x9a, 0xdf,
	0x30, 0xa6, 0x45, 0xe6, 0x85, 0x51, 0x31, 0x2d, 0x06, 0x46, 0xdc, 0xfa, 0x28, 0x47, 0xfc, 0x3a,
	0xac, 0xea, 0x60, 0x4a, 0xfd, 0xf3, 0x9e, 0x16, 0xd4, 0xb2, 0x4a, 0x2e, 0x4f, 0x7b, 0xb9, 0x73,
	0xe8, 0x7c, 0xa5, 0x85, 0x55, 0x57, 0x50, 0xb5, 0xae, 0xae, 0xc2, 0x22, 0xe9, 0xda, 0x82, 0x50,
	0xf8, 0x3c, 0xec, 0xaa, 0x07, 0x57, 0x69, 0x49, 0xd9, 0x98, 0x74, 0xdb, 0x4c, 0xb1, 0x5f, 0x80,
	0x25, 0xa5, 0x7d, 0x2b, 0xe7, 0x20, 0x26, 0xbc, 0x48, 0x69, 0xe5, 0x2c, 0x17, 0xa1, 0xd6, 0x0d,
	0x63, 0xba, 0xdd, 0xbf, 0xe7, 0x45, 0xfa, 0x96, 0x4b, 0x37, 0x8c, 0x37, 0x14, 0x48, 0xee, 0x23,
	0x26, 0x4a, 0x7e, 0xd1, 0x9d, 0x06, 0xd0, 0x36, 0x50, 0xd5, 0x8d, 0xf7, 0x3e, 0xc1, 0xa9, 0x32,
	0x20, 0x38, 0x3d, 0x07, 0x76, 0xf1, 0x95, 0x97, 0x47, 0x3e, 0xe2, 0x0b, 0x45, 0x8a, 0xbe, 0x40,
	0xff, 0x67, 0x63, 0x45, 0xd4, 0x12, 0xd4, 0x76, 0x0a, 0x91, 0xf8, 0x21, 0xf1, 0x06, 0xf5, 0x60,
	0xd2, 0x0b, 0xb0, 0x8c, 0x01, 0xba, 0xcc, 0x24, 0x43, 0x22, 0xb4, 0xc5, 0xfa, 0xe6, 0x8d, 0x22,
	0x49, 0xc5, 0x2c, 0x59, 0x1b, 0xcc, 0x12, 0x32, 0x97, 0x27, 0x91, 0xd6, 0xee, 0x2d, 0xf7, 0x65,
	0x0b, 0x99, 0x93, 0x44, 0xcc, 0x7e, 0x0e, 0x16, 0x07, 0x72, 0xe6, 0x4f, 0x8b, 0xce, 0x97, 0xf3,
	0x90, 0x42, 0x65, 0x00, 0xbd, 0xf4, 0xb6, 0xe7, 0x52, 0x39, 0x8b, 0x7a, 0xe6, 0xf3, 0x19, 0xf5,
	0xa6, 0xb0, 0x7a, 0xe9, 0xdf, 0x78, 0xed, 0x57, 0x6e, 0x04, 0xeb, 0x9b, 0xf4, 0xd6, 0xbf, 0x42,
	0x7e, 0x52, 0x87, 0x57, 0xd4, 0x7b, 0x13, 0xea, 0x96, 0x30, 0xf8, 0x86, 0x58, 0xdf, 0xd4, 0xbb,
	0xd2, 0x46, 0xd0, 0xfc, 0xea, 0x64, 0x71, 0x3f, 0x50, 0xf6, 0xa5, 0xa1, 0xbd, 0x57, 0x5d, 0xf9,
	0xb8, 0x8a, 0xdc, 0x2b, 0x98, 0x9f, 0xc4, 0x81, 0xc7, 0x0f, 0x95, 0xde, 0xad, 0x26, 0xd6, 0x37,
	0xb7, 0x35, 0xcc, 0x7e, 0x42, 0xbd, 0xea, 0xab, 0xf3, 0xc7, 0xfa, 0xf1, 0x25, 0x59, 0xdf, 0x56,
	0x0e, 0xc4, 0xdd, 0x4c, 0xe2, 0xc5, 0x49, 0x16, 0xb6, 0xd5, 0x13, 0x0f, 0xca, 0x66, 0x23, 0x1b,
	0x71, 0xdf, 0x00, 0x4b, 0x59, 0x1d, 0x71, 0xe5, 0xb2, 0x45, 0x88, 0x17, 0x29, 0x4b, 0xce, 0xac,
	0x58, 0xdf, 0x7c, 0x50, 0x40, 0xed, 0x53, 0x50, 0x61, 0xf1, 0xae, 0x14, 0xdb, 0xf3, 0xf7, 0xfc,
	0xf5, 0xb7, 0x7d, 0x16, 0x20, 0x60, 0xc1, 0x0b, 0x6e, 0x1a, 0xf5, 0xc4, 0x0b, 0x4a, 0xa8, 0x98,
	0x91, 0x90, 0x2d, 0x09, 0x90, 0x52, 0x1f, 0x26, 0x67, 0xc9, 0x0b, 0x6a, 0x06, 0x4f, 0xcb, 0xef,
	0x9d, 0xe4, 0x05, 0x14, 0xc2, 0xf0, 0xb9, 0x49, 0xa5, 0xb1, 0x54, 0x5f, 0xf6, 0x53, 0x30, 0x8f,
	0xb2, 0x50, 0x2f, 0xce, 0x4f, 0x97, 0x6a, 0xb2, 0xce, 0x49, 0xf8, 0x9b, 0x05, 0x98, 0x82, 0x8c,
	0x67, 0xdc, 0x73, 0x33, 0x2e, 0xa5, 0x03, 0x5f, 0xa9, 0xcc, 0x6a, 0x08, 0xdc, 0x21, 0x98, 0x3c,
	0x69, 0x78, 0xf1, 0xa1, 0x52, 0x91, 0xc9, 0x9f, 0xf6, 0x19, 0x98, 0xa1, 0xeb, 0x98, 0x3a, 0xe4,
	0x47, 0xc5, 0x29, 0x00, 0xb2, 0xaf, 0xf3, 0x0f, 0x37, 0x4e, 0x5c, 0x96, 0x29, 0xe5, 0x58, 0x3d,
	0x07, 0xdf, 0x4f, 0xee, 0x64, 0xf6, 0x3a, 0xac, 0x24, 0x31, 0x4a, 0x61, 0xb1, 0x39, 0xae, 0x2c,
	0x53, 0xaa, 0x32, 0x3b, 0x89, 0xd9, 0x4e, 0x72, 0xbf, 0xb8, 0xa9, 0x72, 0x27, 0x93, 0x13, 0x47,
	0xe6, 0x91, 0x9d, 0xe5, 0xca, 0x1f, 0xbd, 0x38, 0x54, 0x1a, 0xb3, 0x7a, 0x12, 0x33, 0xd9, 0x65,
	0x0f, 0x62, 0xf6, 0x66, 0x1c, 0xda, 0x97, 0x60, 0xae, 0x84, 0xd8, 0x0a, 0x95, 0x97, 0x7d, 0xad,
	0xc0, 0xbb, 0x19, 0x4a, 0xa1, 0x41, 0x0a, 0x1c, 0x66, 0x57, 0x91, 0x16, 0x6b, 0x36, 0x12, 0xa9,
	0xd1, 0x53, 0xcd, 0x5f, 0x87, 0x59, 0x0c, 0xde, 0x17, 0x25, 0xfe, 0xc3, 0xa4, 0x97, 0xb9, 0x99,
	0x0a, 0xa3, 0xa1, 0xbe, 0xd5, 0xa4, 0x9b, 0x21, 0xfd, 0x60, 0xd2, 0xcb, 0xec, 0x0b, 0x50, 0xd5,
	0xaf, 0x4e, 0x17, 0xaf, 0xff, 0x9a, 0x20, 0xfb, 0x19, 0x58, 0xc8, 0x4b, 0xcb, 0x85, 0x64, 0xb5,
	0x2a, 0x55, 0x42, 0x2e, 0x1d, 0x37, 0x7f, 0x3a, 0x59, 0xec, 0x31, 0xf8, 0x3c, 0xb8, 0x24, 0x46,
	0x07, 0x57, 0xc5, 0x2b, 0x5c, 0x2e, 0x3b, 0x08, 0x85, 0x7a, 0x78, 0xb5, 0xe2, 0x54, 0x11, 0x76,
	0x07, 0x41, 0x72, 0x12, 0x85, 0x71, 0x29, 0x14, 0xc7, 0x74, 0x18, 0x93, 0xe9, 0xe2, 0x3c, 0x54,
	0xe5, 0xa6, 0x41, 0x4f, 0x48, 0xe8, 0x2b, 0x51, 0xd0, 0x6a, 0x07, 0xb7, 0x08, 0x22, 0x45, 0x32,
	0x89, 0xd0, 0x4b, 0xd5, 0xdc, 0x9e, 0x6c, 0xb5, 0x83, 0x37, 0x53, 0x7c, 0xdd, 0xc2, 0xeb, 0xe6,
	0xf9, 0x68, 0x56, 0x43, 0xe2, 0x75, 0x75, 0xbe, 0x7d, 0xa8, 0x20, 0x8d, 0x6d, 0xe6, 0x2b, 0xc7,
	0xcd, 0x51, 0xd8, 0xef, 0xf3, 0x97, 0xd2, 0x9d, 0x69, 0x59, 0xdb, 0x5d, 0xe6, 0xdb, 0x17, 0xa0,
	0x26, 0x09, 0xce, 0xa3, 0xbe, 0x93, 0xe8, 0x2d, 0x9b, 0x74, 0x5f, 0x05, 0x7e, 0x3f, 0x47, 0x6d,
	0xce, 0x7a, 0xb1, 0x1b, 0xb6, 0x77, 0x95, 0x0a, 0x7a, 0x46, 0x0a, 0x17, 0xbd, 0x78, 0xa3, 0xbd,
	0xab, 0xd3, 0xe5, 0xc0, 0xc8, 0xf4, 0x99, 0x3c, 0xfd, 0x41, 0x2f, 0x93, 0xe9, 0x4d, 0xa8, 0xd3,
	0x0e, 0xaf, 0x6f, 0x02, 0x52, 0x94, 0x0a, 0x99, 0x69, 0x23, 0xce, 0x72, 0x93, 0x90, 0xc4, 0x29,
	0x79, 0xcf, 0x28, 0xfb, 0x7d, 0xab, 0x1d, 0x98, 0x2e, 0x40, 0x4f, 0xc3, 0x02, 0xee, 0x1b, 0x6e,
	0x14, 0x84, 0xf9, 0x74, 0xa2, 0x45, 0x35, 0x87, 0x09, 0x9b, 0x41, 0xa8, 0x27, 0xd5, 0x69, 0x98,
	0xc9, 0x71, 0xd5, 0xa2, 0xaa, 0x68, 0x1c, 0x23, 0xf1, 0x21, 0x57, 0x4b, 0x48, 0x25, 0x3e, 0xe4,
	0x45, 0xa2, 0x17, 0x0a, 0xb5, 0x62, 0x28, 0xf1, 0x46, 0x88, 0x56, 0x32, 0x4a, 0x44, 0xd1, 0x75,
	0x9e, 0xec, 0x3a, 0x08, 0x41, 0xb9, 0xf5, 0x00, 0xa6, 0x35, 0x5d, 0x0b, 0x38, 0x92, 0xbf, 0xf2,
	0x61, 0x8f, 0x64, 0x79, 0x69, 0x39, 0xba, 0xba, 0x26, 0x87, 0x46, 0x6e, 0x19, 0x8c, 0x3a, 0x3a,
	0x6a, 0x5c, 0xf1, 0x0c, 0xaf, 0x09, 0x34, 0xf4, 0x13, 0x73, 0x32, 0x41, 0x85, 0x91, 0xc3, 0xcd,
	0xf3, 0x69, 0x58, 0x90, 0x22, 0x46, 0xb2, 0x47, 0x4f, 0x49, 0xf2, 0xc8, 0xc5, 0x00, 0xee, 0xe3,
	0xf8, 0xa8, 0x49, 0x9e, 0xb0, 0xcd, 0xa3, 0xd7, 0x45, 0xf3, 0x4f, 0xc6, 0xe0, 0xa2, 0xa2, 0xae,
	0x1b, 0x06, 0x69, 0x82, 0xc3, 0x2c, 0x52, 0x77, 0x9f, 0x7b, 0x74, 0x38, 0x43, 0xdd, 0xc2, 0x6b,
	0x70, 0x2a, 0x07, 0x9a, 0xcc, 0x0b, 0xe3, 0x48, 0xaa, 0x35, 0xb8, 0x1a, 0x89, 0xf4, 0xf3, 0xdc,
	0x4b, 0x0d, 0x0e, 0x86, 0xc9, 0xf6, 0x2b, 0xb0, 0x36, 0x2c, 0xb3, 0xb9, 0x40, 0x57, 0x06, 0xf2,
	0xd2, 0x6c, 0x79, 0x19, 0x1a, 0x5a, 0x38, 0xcd, 0x63, 0x13, 0xeb, 0x40, 0x6a, 0x2a, 0x74, 0x99,
	0x4a, 0xd7, 0xf1, 0x83, 0xf5, 0xfb, 0x05, 0x18, 0x98, 0x3a, 0xb7, 0x72, 0x19, 0x0e, 0x5d, 0x75,
	0x67, 0xae, 0xb0, 0x75, 0x51, 0x2d, 0x47, 0x10, 0x48, 0xc7, 0x3f, 0x32, 0x18, 0x0d, 0x12, 0x88,
	0x8e, 0x3b, 0xcd, 0x5b, 0x45, 0xd8, 0x52, 0x39, 0x6e, 0xc5, 0x8b, 0x87, 0x38, 0x68, 0x97, 0x60,
	0xb6, 0x80, 0x98, 0x21, 0x8c, 0x72, 0x28, 0x5a, 0xf0, 0xbf, 0x77, 0x5d, 0x59, 0x54, 0x73, 0xbd,
	0xf4, 0x7a, 0x64, 0xef, 0x41, 0x45, 0xbf, 0xb9, 0x3f, 0xc2, 0x67, 0x6c, 0x0b, 0x8e, 0x32, 0x45,
	0xaf, 0xf9, 0xa3, 0x8f, 0x9e, 0x0e, 0x65, 0x3e, 0x70, 0x4d, 0x62, 0xc4, 0x16, 0x02, 0xe3, 0x76,
	0xc4, 0x3c, 0xd1, 0x60, 0xdc, 0x8b, 0xf8, 0xae, 0x05, 0xab, 0xe6, 0x4b, 0xd4, 0xb8, 0xeb, 0xe3,
	0x9d, 0x12, 0xfd, 0x60, 0xf6, 0xaf, 0x8c, 0x84, 0xba, 0xfc, 0x29, 0x6c, 0x67, 0xa9, 0x78, 0xef,
	0x7a, 0x33, 0x8c, 0xe9, 0xcd, 0x6b, 0x75, 0xad, 0xc7, 0x8b, 0x7c, 0xb4, 0xdd, 0xe9, 0x07, 0xe1,
	0x11, 0x72, 0x83, 0x33, 0x4f, 0xc5, 0xd0, 0x63, 0x07, 0xa9, 0x87, 0xa2, 0x1f, 0x53, 0xb7, 0x0e,
	0x30, 0x86, 0xde, 0x1d, 0x05, 0xbd, 0xc3, 0x13, 0x29, 0x24, 0x63, 0xfb, 0x39, 0x63, 0x52, 0x8e,
	0x7f, 0xa7, 0xc7, 0xf8, 0xa1, 0x5c, 0x92, 0x4a, 0xe8, 0x47, 0x3f, 0x53, 0x07, 0xd3, 0xfe, 0x9a,
	0x4c, 0xba, 0x17, 0x06, 0xf6, 0x06, 0x34, 0x51, 0xb3, 0x23, 0xc2, 0xd8, 0x67, 0x6e, 0xe4, 0x89,
	0x4c, 0x65, 0xd3, 0xe1, 0xeb, 0x31, 0x3f, 0x99, 0x26, 0xcf, 0x4a, 0xcc, 0x6d, 0x89, 0xb8, 0xe9,
	0x89, 0x0c, 0x8b, 0xd0, 0x01, 0xec, 0x65, 0x51, 0x2e, 0x5c, 0xe9, 0x2f, 0x2a, 0xe5, 0xac, 0xcd,
	0xb8, 0xec, 0x6e, 0xf2, 0x24, 0xc5, 0xcd, 0xd5, 0x15, 0x2c, 0xa6, 0x62, 0xe9, 0xe0, 0xf0, 0x64,
	0xa9, 0xd8, 0x2d, 0x9d, 0x45, 0x0e, 0x1b, 0xed, 0xc6, 0xdb, 0x2c, 0x7e, 0x74, 0x05, 0x19, 0x67,
	0x6c, 0xa0, 0x82, 0x99, 0xe3, 0x2a, 0xd8, 0xe1, 0x8c, 0x95, 0x2b, 0xb8, 0x0a, 0x4b, 0x66, 0x27,
	0xe7, 0x96, 0x54, 0xba, 0x99, 0xba, 0xc0, 0x8a, 0xae, 0x56, 0xa6, 0x54, 0x7c, 0x22, 0xde, 0xcc,
	0x50, 0x7a, 0xd0, 0x9d, 0x76, 0xaf, 0x55, 0x33, 0x9b, 0xf9, 0xb6, 0xfb, 0x91, 0x99, 0xf1, 0xa1,
	0xf7, 0xda, 0x91, 0x99, 0xf1, 0xcd, 0xf7, 0x97, 0xa0, 0x51, 0xca, 0xac, 0x2e, 0xc3, 0x1a, 0x8e,
	0x3e, 0xcb, 0x46, 0x56, 0xba, 0x02, 0x8b, 0x8c, 0xfd, 0x0a, 0x2c, 0x0e, 0xc9, 0x88, 0xbb, 0x5f,
	0xbd, 0xd4, 0x44, 0x75, 0xf5, 0xf6, 0x0a, 0x2c, 0x7a, 0x2d, 0x4e, 0x77, 0x63, 0x0a, 0xc6, 0xaf,
	0x5c, 0xd4, 0x16, 0xbc, 0x16, 0xbf, 0xd1, 0xcb, 0x92, 0xdb, 0x79, 0x82, 0x72, 0xb5, 0x6a, 0x73,
	0x9e, 0x87, 0x0e, 0x9e, 0xd7, 0xae, 0x56, 0x77, 0x39, 0xd7, 0x51, 0x86, 0xe9, 0xaa, 0x9f, 0x19,
	0x6b, 0x35, 0x97, 0x23, 0xe7, 0x42, 0x61, 0x44, 0x5a, 0xa5, 0xeb, 0x62, 0xa5, 0xa8, 0x1c, 0x2a,
	0x83, 0x8a, 0x4e, 0x64, 0x1b, 0x21, 0x39, 0x54, 0x9e, 0xdc, 0xc0, 0xcf, 0x79, 0x92, 0x53, 0x41,
	0x31, 0x89, 0xd0, 0xc0, 0xef, 0xf0, 0x44, 0xd3, 0xf1, 0x6b, 0x30, 0x2d, 0x37, 0x50, 0xb9, 0xa2,
	0xc8, 0x58, 0xf8, 0xa1, 0x7b, 0xf1, 0xe0, 0xcb, 0x12, 0xa8, 0x8b, 0x67, 0xc5, 0x73, 0xb7, 0x53,
	0x49, 0x2f, 0x93, 0x0b, 0xf6, 0x4b, 0x30, 0x15, 0xc6, 0x58, 0xfb, 0xf2, 0x09, 0xd6, 0x3e, 0x19,
	0xc6, 0xb2, 0xf2, 0x84, 0xda, 0x7e, 0xc0, 0x13, 0xb4, 0x2d, 0x8e, 0x2e, 0x6e, 0x8d, 0x6c, 0xed,
	0x17, 0x78, 0x62, 0x77, 0xb1, 0xb5, 0xb2, 0xbe, 0xd5, 0x91, 0xd6, 0x37, 0x19, 0xc6, 0xb2, 0xba,
	0xbf, 0xa9, 0x4c, 0x06, 0x9c, 0x27, 0x18, 0x99, 0x75, 0xa4, 0xdd, 0xcb, 0x8b, 0xee, 0x9d, 0x56,
	0x73, 0x4c, 0x12, 0x80, 0xf6, 0x07, 0x49, 0xc0, 0xda, 0x49, 0x12, 0x20, 0x6b, 0x95, 0x04, 0xfc,
	0x8e, 0xa5, 0x3c, 0x43, 0x72, 0xd6, 0xe2, 0x71, 0xee, 0x1d, 0x36, 0x4e, 0x21, 0x31, 0x1f, 0x7e,
	0x08, 0x93, 0xb2, 0x4a, 0xde, 0xc1, 0xeb, 0x03, 0x9a, 0x6b, 0xdd, 0x90, 0x35, 0xdb, 0x87, 0x30,
	0xa5, 0x6c, 0x8d, 0xa7, 0x47, 0xf3, 0xf4, 0xf6, 0xa0, 0x51, 0xcb, 0x99, 0x44, 0x23, 0xa3, 0xfd,
	0x75, 0x0b, 0x66, 0x73, 0xe3, 0x28, 0xd1, 0x70, 0x66, 0x64, 0x8f, 0x41, 0x0c, 0x9a, 0x62, 0x9d,
	0x9a, 0xfa, 0xdc, 0x41, 0x6a, 0x0e, 0x61, 0x4a, 0x59, 0x00, 0xcf, 0x9e, 0x5c, 0x47, 0xb4, 0x07,
	0x3a, 0x42, 0xd1, 0x70, 0xee, 0x64, 0x3a, 0xa2, 0x5d, 0xea, 0x88, 0xbb, 0x48, 0xcd, 0x0a, 0x4c,
	0xed, 0xb3, 0xb0, 0xb3, 0x9b, 0xe1, 0x95, 0xde, 0x09, 0x47, 0x7d, 0x49, 0xb9, 0x57, 0x0b, 0xdf,
	0x2a, 0xfd, 0x02, 0x19, 0xdf, 0x14, 0xf4, 0xf3, 0x84, 0x56, 0x38, 0x6a, 0x5f, 0x2c, 0x39, 0x6a,
	0x3f, 0x05, 0xf3, 0x03, 0xd2, 0x7e, 0x53, 0x05, 0xd0, 0xeb, 0x13, 0xf3, 0x5f, 0x84, 0x95, 0x7e,
	0x54, 0x25, 0xb7, 0x3f, 0x46, 0xda, 0xbb, 0xbe, 0x0c, 0xe4, 0x6e, 0x3f, 0x2c, 0x57, 0x8b, 0x87,
	0xac, 0xdd, 0x78, 0x7c, 0x68, 0xae, 0x9b, 0x32, 0xcd, 0x7e, 0x06, 0x16, 0xf4, 0xbd, 0x95, 0x82,
	0xae, 0x4b, 0xe4, 0xa8, 0xa5, 0x12, 0x0a, 0xc2, 0xf0, 0xd2, 0xc4, 0x70, 0xca, 0x9e, 0xd0, 0x97,
	0x26, 0x86, 0x91, 0x36, 0x34, 0x1f, 0xd1, 0xf6, 0xe4, 0xf0, 0x7c, 0x44, 0x9c, 0xd6, 0x31, 0x92,
	0x4e, 0x9a, 0x8e, 0x3b, 0x97, 0x55, 0x74, 0xaf, 0xf5, 0xcd, 0x4d, 0x09, 0xa5, 0xc3, 0x8e, 0x7e,
	0xfb, 0x4b, 0x6e, 0x1f, 0x84, 0xf6, 0x14, 0x9d, 0xe7, 0xc5, 0xfa, 0xe6, 0x83, 0x9e, 0x3a, 0xcf,
	0x3f, 0x8b, 0x8f, 0xc5, 0xb5, 0x92, 0x5e, 0x1c, 0xa0, 0x38, 0x40, 0x84, 0x3f, 0x4d, 0x6d, 0xd5,
	0x29, 0x77, 0xb9, 0xba, 0xbd, 0xf0, 0x12, 0x45, 0x24, 0xc3, 0xd3, 0xac, 0x7e, 0xae, 0x45, 0xf7,
	0xcf, 0x33, 0x44, 0x74, 0x9b, 0xf3, 0x07, 0xbd, 0x4c, 0xbf, 0xa5, 0xa2, 0x3b, 0xc9, 0x86, 0x09,
	0x54, 0xe8, 0x3e, 0x4b, 0x97, 0xf3, 0xe4, 0x6f, 0xd9, 0xcb, 0x86, 0x2f, 0x90, 0xb2, 0xbb, 0x3e,
	0x47, 0x35, 0x17, 0x09, 0xdb, 0x64, 0x81, 0x7d, 0x02, 0xe6, 0xa8, 0xc1, 0x18, 0x1a, 0x8d, 0x4b,
	0x79, 0xef, 0x0a, 0x9d, 0xb0, 0x10, 0x8c, 0x11, 0x7b, 0xf9, 0x06, 0x3e, 0xd1, 0xd4, 0x4b, 0x45,
	0xc6, 0x99, 0xd7, 0x35, 0x50, 0xaf, 0x52, 0xa9, 0x3a, 0x25, 0xc7, 0x7e, 0x1e, 0x96, 0x82, 0x64,
	0x3f, 0x1e, 0xc0, 0x7f, 0x9e, 0x6c, 0xb3, 0x45, 0x5a, 0x9e, 0xe3, 0x32, 0xcc, 0x6b, 0x0d, 0x4c,
	0x6e, 0xc5, 0x7c, 0x81, 0xcc, 0x71, 0xea, 0xfd, 0x3d, 0x6d, 0xc9, 0xfc, 0xdb, 0x16, 0x34, 0xfa,
	0x51, 0xf5, 0x1a, 0x6b, 0xac, 0xe3, 0x52, 0xfe, 0xeb, 0x23, 0x58, 0xca, 0xb2, 0x26, 0x37, 0x73,
	0x9d, 0xe5, 0x32, 0x39, 0xaf, 0x53, 0xc5, 0x78, 0xab, 0x5f, 0xbf, 0x45, 0x67, 0xb6, 0xe1, 0x9a,
	0x0e, 0x56, 0x4e, 0x69, 0x46, 0x3b, 0xbe, 0x6f, 0xc1, 0x99, 0x61, 0x59, 0xf2, 0xb6, 0xbc, 0x38,
	0xf2, 0xb6, 0xac, 0x0d, 0x92, 0xa5, 0xdb, 0xf3, 0x14, 0xcc, 0xe7, 0xb7, 0x23, 0x74, 0x5b, 0x3e,
	0x41, 0x1c, 0x44, 0xc3, 0x75, 0x43, 0xbe, 0x63, 0x41, 0xa3, 0x1f, 0x37, 0x6f, 0xc4, 0xf5, 0x91,
	0x37, 0x62, 0xa5, 0x8f, 0x1e, 0xdd, 0x82, 0xeb, 0xb0, 0x5a, 0x7a, 0xee, 0xd1, 0x58, 0x52, 0x2f,
	0xd1, 0x92, 0x32, 0x1f, 0x7e, 0x2c, 0x96, 0xd4, 0xe3, 0x30, 0x8b, 0x92, 0xb9, 0x1c, 0x12, 0x7c,
	0x0e, 0xae, 0xf1, 0x32, 0xd9, 0x66, 0x25, 0xf4, 0x8d, 0x24, 0xc5, 0x57, 0xe1, 0xc8, 0xe3, 0x4e,
	0x72, 0x01, 0xc3, 0x89, 0xa3, 0xf1, 0x0a, 0x36, 0xb6, 0x33, 0x82, 0xc6, 0x0e, 0x73, 0x17, 0x41,
	0xb3, 0xc1, 0xad, 0x02, 0x68, 0xff, 0xbe, 0x05, 0x73, 0x7d, 0x2e, 0x11, 0x8d, 0x57, 0x91, 0xa4,
	0x74, 0x64, 0xde, 0xf9, 0x47, 0x78, 0x7c, 0x38, 0xb3, 0x65, 0xff, 0x0b, 0xa5, 0xfd, 0x4e, 0xd2,
	0x2c, 0xf4, 0xbd, 0xa8, 0xf1, 0x9a, 0xd6, 0x7e, 0x3f, 0x20, 0x80, 0xfd, 0x0d, 0x0b, 0x6a, 0xe6,
	0xbd, 0xa6, 0xc6, 0x27, 0x4f, 0xfa, 0x22, 0x55, 0xb5, 0x93, 0xbb, 0xde, 0x0b, 0xfb, 0xd7, 0xa1,
	0x42, 0x57, 0x2c, 0xdc, 0xa8, 0xf1, 0xa9, 0xd1, 0xde, 0x6f, 0x30, 0xaf, 0x72, 0x38, 0x53, 0x49,
	0x16, 0x6f, 0xaf, 0x6f, 0xda, 0xdf, 0xb2, 0x60, 0x01, 0x1d, 0x06, 0xe4, 0x51, 0x5e, 0x5b, 0x87,
	0x1b, 0x9f, 0x1e, 0xad, 0x47, 0x63, 0xc9, 0x43, 0xc1, 0x99, 0x95, 0x9f, 0x77, 0xe2, 0xe0, 0x66,
	0x3b, 0x40, 0x63, 0xb0, 0x24, 0x09, 0x8d, 0xd5, 0x25, 0x92, 0x3e, 0x33, 0x5a, 0x92, 0x4a, 0xd6,
	0x71, 0x67, 0x56, 0x7e, 0x1a, 0x24, 0x7d, 0x5b, 0xce, 0x77, 0x43, 0xa5, 0x2b, 0xe7, 0xfb, 0x67,
	0x47, 0xa3, 0x65, 0x3b, 0x4a, 0xab, 0xec, 0xcc, 0x1a, 0xaa, 0x63, 0x15, 0x6e, 0xba, 0x6a, 0x58,
	0x42, 0x1b, 0x37, 0x46, 0xfb, 0xbc, 0xc2, 0x70, 0x7b, 0xb1, 0x63, 0x92, 0x60, 0x7f, 0xd3, 0x02,
	0x30, 0x42, 0xce, 0xdd, 0x1c, 0x6d, 0x54, 0x8c, 0xa1, 0x56, 0x57, 0xc7, 0x20, 0xc0, 0xfe, 0x14,
	0x9c, 0x41, 0xce, 0x99, 0xeb, 0xa5, 0x79, 0x82, 0x57, 0x9e, 0xf4, 0x6d, 0xb0, 0x5b, 0xa4, 0x0c,
	0x17, 0xeb, 0x9b, 0xca, 0x73, 0xe2, 0x0e, 0x4f, 0x1e, 0xb4, 0xde, 0xd6, 0x97, 0xc2, 0xde, 0xb3,
	0x0a, 0xd9, 0x58, 0x66, 0x0d, 0xe3, 0xc6, 0xed, 0x13, 0x54, 0x1f, 0xd4, 0x78, 0x4e, 0xd4, 0x46,
	0x6c, 0x5f, 0x81, 0x45, 0x53, 0x49, 0xae, 0x9b, 0x70, 0x87, 0x6c, 0xfd, 0x85, 0x9a, 0x5c, 0x13,
	0xbf, 0x0e, 0xcb, 0x26, 0x7e, 0x71, 0x0b, 0xf3, 0xae, 0x7e, 0xad, 0x53, 0xe7, 0x28, 0x6e, 0x63,
	0x7e, 0x59, 0x87, 0xe1, 0x54, 0x99, 0xda, 0xcc, 0x6f, 0xbc, 0x3e, 0x32, 0x7d, 0xb6, 0xaa, 0xc1,
	0xcd, 0xf2, 0xb3, 0xc6, 0xa6, 0x48, 0xef, 0x32, 0x5f, 0x4a, 0x68, 0x26, 0x15, 0xe8, 0xa6, 0xf6,
	0x06, 0x49, 0x68, 0x05, 0x22, 0xde, 0x04, 0xb9, 0x09, 0xe7, 0x4b, 0x03, 0xac, 0x7c, 0x70, 0xcd,
	0x31, 0xde, 0xa0, 0xf8, 0x54, 0xc5, 0x18, 0xe3, 0xb9, 0xd0, 0x18, 0xe5, 0xaf, 0x19, 0xa3, 0xac,
	0xce, 0xab, 0xbf, 0x70, 0x62, 0x47, 0x45, 0x3d, 0xc6, 0x74, 0x58, 0x7d, 0x49, 0x79, 0x52, 0x98,
	0xad, 0x17, 0xbd, 0x96, 0x6c, 0x8f, 0x68, 0x7c, 0x8e, 0x9c, 0x83, 0x8a, 0x86, 0x6c, 0x8a, 0x74,
	0xbb, 0xd7, 0x7a, 0xd0, 0x7a, 0x5b, 0xd8, 0xbf, 0x69, 0xc1, 0x4c, 0x6e, 0x77, 0x6d, 0x6c, 0x8e,
	0x96, 0x55, 0x96, 0x8c, 0xbc, 0x0e, 0xda, 0x52, 0x91, 0x49, 0xfe, 0x81, 0xa5, 0xc8, 0xef, 0x8f,
	0x2e, 0x87, 0x57, 0x5e, 0xee, 0x8d, 0xee, 0xd5, 0xcf, 0xf2, 0xf5, 0x3c, 0x74, 0x36, 0x29, 0x7b,
	0xbd, 0xe3, 0xbd, 0x9a, 0xef, 0x5a, 0x50, 0x2f, 0x59, 0xcb, 0x1a, 0xf7, 0x47, 0x13, 0x39, 0xe3,
	0x91, 0x26, 0x3a, 0xa7, 0xaa, 0x2c, 0x54, 0xd8, 0x6d, 0xda, 0x98, 0xd0, 0x13, 0x74, 0x88, 0xc2,
	0xeb, 0x42, 0x22, 0x6d, 0x37, 0x1e, 0x90, 0xde, 0x55, 0x26, 0xbe, 0x29, 0xf0, 0x1c, 0x25, 0x93,
	0xb6, 0xd3, 0xb6, 0xdc, 0x8e, 0x66, 0xcb, 0xe6, 0xab, 0xc6, 0xd6, 0x68, 0xc3, 0xe4, 0x0d, 0x1a,
	0xcc, 0x0c, 0xc3, 0x98, 0x6c, 0x46, 0x6b, 0x0a, 0xdf, 0x9d, 0xbf, 0xf6, 0x7f, 0x03, 0x00, 0x00,
	0xff, 0xff, 0xd4, 0x78, 0x1f, 0x5b, 0x6c, 0xb5, 0x00, 0x00,
}
