// Code generated by protoc-gen-go. DO NOT EDIT.
// source: te_sr_node.proto

package cisco_ios_xr_mpls_te_oper_mpls_te_segment_routing_sr_node_infos_sr_node_info

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// MPLS TE Segment-Routing Node topology information
type TeSrNode_KEYS struct {
	Protocol             string   `protobuf:"bytes,1,opt,name=protocol" json:"protocol,omitempty"`
	IgpInstance          string   `protobuf:"bytes,2,opt,name=igp_instance,json=igpInstance" json:"igp_instance,omitempty"`
	Area                 uint32   `protobuf:"varint,3,opt,name=area" json:"area,omitempty"`
	IgpNodeId            string   `protobuf:"bytes,4,opt,name=igp_node_id,json=igpNodeId" json:"igp_node_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeSrNode_KEYS) Reset()         { *m = TeSrNode_KEYS{} }
func (m *TeSrNode_KEYS) String() string { return proto.CompactTextString(m) }
func (*TeSrNode_KEYS) ProtoMessage()    {}
func (*TeSrNode_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_te_sr_node_b4b312b9a0bcf882, []int{0}
}
func (m *TeSrNode_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeSrNode_KEYS.Unmarshal(m, b)
}
func (m *TeSrNode_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeSrNode_KEYS.Marshal(b, m, deterministic)
}
func (dst *TeSrNode_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeSrNode_KEYS.Merge(dst, src)
}
func (m *TeSrNode_KEYS) XXX_Size() int {
	return xxx_messageInfo_TeSrNode_KEYS.Size(m)
}
func (m *TeSrNode_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_TeSrNode_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_TeSrNode_KEYS proto.InternalMessageInfo

func (m *TeSrNode_KEYS) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *TeSrNode_KEYS) GetIgpInstance() string {
	if m != nil {
		return m.IgpInstance
	}
	return ""
}

func (m *TeSrNode_KEYS) GetArea() uint32 {
	if m != nil {
		return m.Area
	}
	return 0
}

func (m *TeSrNode_KEYS) GetIgpNodeId() string {
	if m != nil {
		return m.IgpNodeId
	}
	return ""
}

type TeSrNode struct {
	// The local node's IGP id formatted as string
	LocalNodeIgpId string `protobuf:"bytes,50,opt,name=local_node_igp_id,json=localNodeIgpId" json:"local_node_igp_id,omitempty"`
	// IGP area which this node belongs to
	IgpArea *TeSrIgpArea `protobuf:"bytes,51,opt,name=igp_area,json=igpArea" json:"igp_area,omitempty"`
	// TRUE if this is a router node; FALSE if it's a network node
	TopologyNodeIsRouter bool `protobuf:"varint,52,opt,name=topology_node_is_router,json=topologyNodeIsRouter" json:"topology_node_is_router,omitempty"`
	// The local node's TE router-id
	LocalNodeTeRouterId string `protobuf:"bytes,53,opt,name=local_node_te_router_id,json=localNodeTeRouterId" json:"local_node_te_router_id,omitempty"`
	// Flag to indicate whether this node is overloaded
	TopologyNodeOverloaded bool `protobuf:"varint,54,opt,name=topology_node_overloaded,json=topologyNodeOverloaded" json:"topology_node_overloaded,omitempty"`
	// Segment-Routing Node information
	SrNodeInfo *TeSrNodeInfo `protobuf:"bytes,55,opt,name=sr_node_info,json=srNodeInfo" json:"sr_node_info,omitempty"`
	// This node's link information
	NodeLinks            []*TeSrLinkInfo `protobuf:"bytes,56,rep,name=node_links,json=nodeLinks" json:"node_links,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *TeSrNode) Reset()         { *m = TeSrNode{} }
func (m *TeSrNode) String() string { return proto.CompactTextString(m) }
func (*TeSrNode) ProtoMessage()    {}
func (*TeSrNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_te_sr_node_b4b312b9a0bcf882, []int{1}
}
func (m *TeSrNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeSrNode.Unmarshal(m, b)
}
func (m *TeSrNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeSrNode.Marshal(b, m, deterministic)
}
func (dst *TeSrNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeSrNode.Merge(dst, src)
}
func (m *TeSrNode) XXX_Size() int {
	return xxx_messageInfo_TeSrNode.Size(m)
}
func (m *TeSrNode) XXX_DiscardUnknown() {
	xxx_messageInfo_TeSrNode.DiscardUnknown(m)
}

var xxx_messageInfo_TeSrNode proto.InternalMessageInfo

func (m *TeSrNode) GetLocalNodeIgpId() string {
	if m != nil {
		return m.LocalNodeIgpId
	}
	return ""
}

func (m *TeSrNode) GetIgpArea() *TeSrIgpArea {
	if m != nil {
		return m.IgpArea
	}
	return nil
}

func (m *TeSrNode) GetTopologyNodeIsRouter() bool {
	if m != nil {
		return m.TopologyNodeIsRouter
	}
	return false
}

func (m *TeSrNode) GetLocalNodeTeRouterId() string {
	if m != nil {
		return m.LocalNodeTeRouterId
	}
	return ""
}

func (m *TeSrNode) GetTopologyNodeOverloaded() bool {
	if m != nil {
		return m.TopologyNodeOverloaded
	}
	return false
}

func (m *TeSrNode) GetSrNodeInfo() *TeSrNodeInfo {
	if m != nil {
		return m.SrNodeInfo
	}
	return nil
}

func (m *TeSrNode) GetNodeLinks() []*TeSrLinkInfo {
	if m != nil {
		return m.NodeLinks
	}
	return nil
}

// Information about the Shared Risk Link Group
type MplsSrlgInfo struct {
	// SRLG number
	SharedRiskGroup uint32 `protobuf:"varint,1,opt,name=shared_risk_group,json=sharedRiskGroup" json:"shared_risk_group,omitempty"`
	// SRLG name
	SrlgName             string   `protobuf:"bytes,2,opt,name=srlg_name,json=srlgName" json:"srlg_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsSrlgInfo) Reset()         { *m = MplsSrlgInfo{} }
func (m *MplsSrlgInfo) String() string { return proto.CompactTextString(m) }
func (*MplsSrlgInfo) ProtoMessage()    {}
func (*MplsSrlgInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_te_sr_node_b4b312b9a0bcf882, []int{2}
}
func (m *MplsSrlgInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsSrlgInfo.Unmarshal(m, b)
}
func (m *MplsSrlgInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsSrlgInfo.Marshal(b, m, deterministic)
}
func (dst *MplsSrlgInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsSrlgInfo.Merge(dst, src)
}
func (m *MplsSrlgInfo) XXX_Size() int {
	return xxx_messageInfo_MplsSrlgInfo.Size(m)
}
func (m *MplsSrlgInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsSrlgInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MplsSrlgInfo proto.InternalMessageInfo

func (m *MplsSrlgInfo) GetSharedRiskGroup() uint32 {
	if m != nil {
		return m.SharedRiskGroup
	}
	return 0
}

func (m *MplsSrlgInfo) GetSrlgName() string {
	if m != nil {
		return m.SrlgName
	}
	return ""
}

// A IGP area information for Segment-Routing
type TeSrIgpArea struct {
	// True if the Segment-Routing is enabled in this area
	SegmentRoutingEnabled bool `protobuf:"varint,1,opt,name=segment_routing_enabled,json=segmentRoutingEnabled" json:"segment_routing_enabled,omitempty"`
	// True if the strict SPF is enabled in this area
	StrictSpfEnabled bool `protobuf:"varint,2,opt,name=strict_spf_enabled,json=strictSpfEnabled" json:"strict_spf_enabled,omitempty"`
	// IGP type
	IgpType string `protobuf:"bytes,3,opt,name=igp_type,json=igpType" json:"igp_type,omitempty"`
	// IGP Instance name
	IgpInstance string `protobuf:"bytes,4,opt,name=igp_instance,json=igpInstance" json:"igp_instance,omitempty"`
	// IGP Area ID
	IgpArea uint32 `protobuf:"varint,5,opt,name=igp_area,json=igpArea" json:"igp_area,omitempty"`
	// IGP-area format
	IgpAreaFormat        string   `protobuf:"bytes,6,opt,name=igp_area_format,json=igpAreaFormat" json:"igp_area_format,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeSrIgpArea) Reset()         { *m = TeSrIgpArea{} }
func (m *TeSrIgpArea) String() string { return proto.CompactTextString(m) }
func (*TeSrIgpArea) ProtoMessage()    {}
func (*TeSrIgpArea) Descriptor() ([]byte, []int) {
	return fileDescriptor_te_sr_node_b4b312b9a0bcf882, []int{3}
}
func (m *TeSrIgpArea) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeSrIgpArea.Unmarshal(m, b)
}
func (m *TeSrIgpArea) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeSrIgpArea.Marshal(b, m, deterministic)
}
func (dst *TeSrIgpArea) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeSrIgpArea.Merge(dst, src)
}
func (m *TeSrIgpArea) XXX_Size() int {
	return xxx_messageInfo_TeSrIgpArea.Size(m)
}
func (m *TeSrIgpArea) XXX_DiscardUnknown() {
	xxx_messageInfo_TeSrIgpArea.DiscardUnknown(m)
}

var xxx_messageInfo_TeSrIgpArea proto.InternalMessageInfo

func (m *TeSrIgpArea) GetSegmentRoutingEnabled() bool {
	if m != nil {
		return m.SegmentRoutingEnabled
	}
	return false
}

func (m *TeSrIgpArea) GetStrictSpfEnabled() bool {
	if m != nil {
		return m.StrictSpfEnabled
	}
	return false
}

func (m *TeSrIgpArea) GetIgpType() string {
	if m != nil {
		return m.IgpType
	}
	return ""
}

func (m *TeSrIgpArea) GetIgpInstance() string {
	if m != nil {
		return m.IgpInstance
	}
	return ""
}

func (m *TeSrIgpArea) GetIgpArea() uint32 {
	if m != nil {
		return m.IgpArea
	}
	return 0
}

func (m *TeSrIgpArea) GetIgpAreaFormat() string {
	if m != nil {
		return m.IgpAreaFormat
	}
	return ""
}

// A link's Segment-Routing Adjacency information
type TeSrAdjSid struct {
	// The adjacency SID assigned for the topology node
	AdjacencySid uint32 `protobuf:"varint,1,opt,name=adjacency_sid,json=adjacencySid" json:"adjacency_sid,omitempty"`
	// Link Type
	LinkType string `protobuf:"bytes,2,opt,name=link_type,json=linkType" json:"link_type,omitempty"`
	// Local Address
	LocalAddr string `protobuf:"bytes,3,opt,name=local_addr,json=localAddr" json:"local_addr,omitempty"`
	// Remote Address
	RemoteAddr string `protobuf:"bytes,4,opt,name=remote_addr,json=remoteAddr" json:"remote_addr,omitempty"`
	// The neighbor node's IGP ID
	NbrNodeIgpid string `protobuf:"bytes,5,opt,name=nbr_node_igpid,json=nbrNodeIgpid" json:"nbr_node_igpid,omitempty"`
	// The neigbor node's TE router-id
	NbrNodeTeRouterId string `protobuf:"bytes,6,opt,name=nbr_node_te_router_id,json=nbrNodeTeRouterId" json:"nbr_node_te_router_id,omitempty"`
	// IGP Flag F
	FlagF bool `protobuf:"varint,7,opt,name=flag_f,json=flagF" json:"flag_f,omitempty"`
	// IGP Flag B
	FlagB bool `protobuf:"varint,8,opt,name=flag_b,json=flagB" json:"flag_b,omitempty"`
	// IGP Flag V
	FlagV bool `protobuf:"varint,9,opt,name=flag_v,json=flagV" json:"flag_v,omitempty"`
	// IGP Flag L
	FlagL bool `protobuf:"varint,10,opt,name=flag_l,json=flagL" json:"flag_l,omitempty"`
	// IGP Flag S
	FlagS                bool     `protobuf:"varint,11,opt,name=flag_s,json=flagS" json:"flag_s,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeSrAdjSid) Reset()         { *m = TeSrAdjSid{} }
func (m *TeSrAdjSid) String() string { return proto.CompactTextString(m) }
func (*TeSrAdjSid) ProtoMessage()    {}
func (*TeSrAdjSid) Descriptor() ([]byte, []int) {
	return fileDescriptor_te_sr_node_b4b312b9a0bcf882, []int{4}
}
func (m *TeSrAdjSid) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeSrAdjSid.Unmarshal(m, b)
}
func (m *TeSrAdjSid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeSrAdjSid.Marshal(b, m, deterministic)
}
func (dst *TeSrAdjSid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeSrAdjSid.Merge(dst, src)
}
func (m *TeSrAdjSid) XXX_Size() int {
	return xxx_messageInfo_TeSrAdjSid.Size(m)
}
func (m *TeSrAdjSid) XXX_DiscardUnknown() {
	xxx_messageInfo_TeSrAdjSid.DiscardUnknown(m)
}

var xxx_messageInfo_TeSrAdjSid proto.InternalMessageInfo

func (m *TeSrAdjSid) GetAdjacencySid() uint32 {
	if m != nil {
		return m.AdjacencySid
	}
	return 0
}

func (m *TeSrAdjSid) GetLinkType() string {
	if m != nil {
		return m.LinkType
	}
	return ""
}

func (m *TeSrAdjSid) GetLocalAddr() string {
	if m != nil {
		return m.LocalAddr
	}
	return ""
}

func (m *TeSrAdjSid) GetRemoteAddr() string {
	if m != nil {
		return m.RemoteAddr
	}
	return ""
}

func (m *TeSrAdjSid) GetNbrNodeIgpid() string {
	if m != nil {
		return m.NbrNodeIgpid
	}
	return ""
}

func (m *TeSrAdjSid) GetNbrNodeTeRouterId() string {
	if m != nil {
		return m.NbrNodeTeRouterId
	}
	return ""
}

func (m *TeSrAdjSid) GetFlagF() bool {
	if m != nil {
		return m.FlagF
	}
	return false
}

func (m *TeSrAdjSid) GetFlagB() bool {
	if m != nil {
		return m.FlagB
	}
	return false
}

func (m *TeSrAdjSid) GetFlagV() bool {
	if m != nil {
		return m.FlagV
	}
	return false
}

func (m *TeSrAdjSid) GetFlagL() bool {
	if m != nil {
		return m.FlagL
	}
	return false
}

func (m *TeSrAdjSid) GetFlagS() bool {
	if m != nil {
		return m.FlagS
	}
	return false
}

// MPLS TE Node's Segment-Routing Information
type TeSrNodeInfo struct {
	// Segment-Routing Node-SID
	SegmentId uint32 `protobuf:"varint,1,opt,name=segment_id,json=segmentId" json:"segment_id,omitempty"`
	// Node-SID local absolute value
	SegmentIdLocalAbsoluteValue uint32 `protobuf:"varint,2,opt,name=segment_id_local_absolute_value,json=segmentIdLocalAbsoluteValue" json:"segment_id_local_absolute_value,omitempty"`
	// Segment-Routring global block start value
	SrgbStart uint32 `protobuf:"varint,3,opt,name=srgb_start,json=srgbStart" json:"srgb_start,omitempty"`
	// Segment-Routing global block size
	SrgbSize             uint32   `protobuf:"varint,4,opt,name=srgb_size,json=srgbSize" json:"srgb_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeSrNodeInfo) Reset()         { *m = TeSrNodeInfo{} }
func (m *TeSrNodeInfo) String() string { return proto.CompactTextString(m) }
func (*TeSrNodeInfo) ProtoMessage()    {}
func (*TeSrNodeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_te_sr_node_b4b312b9a0bcf882, []int{5}
}
func (m *TeSrNodeInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeSrNodeInfo.Unmarshal(m, b)
}
func (m *TeSrNodeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeSrNodeInfo.Marshal(b, m, deterministic)
}
func (dst *TeSrNodeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeSrNodeInfo.Merge(dst, src)
}
func (m *TeSrNodeInfo) XXX_Size() int {
	return xxx_messageInfo_TeSrNodeInfo.Size(m)
}
func (m *TeSrNodeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TeSrNodeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TeSrNodeInfo proto.InternalMessageInfo

func (m *TeSrNodeInfo) GetSegmentId() uint32 {
	if m != nil {
		return m.SegmentId
	}
	return 0
}

func (m *TeSrNodeInfo) GetSegmentIdLocalAbsoluteValue() uint32 {
	if m != nil {
		return m.SegmentIdLocalAbsoluteValue
	}
	return 0
}

func (m *TeSrNodeInfo) GetSrgbStart() uint32 {
	if m != nil {
		return m.SrgbStart
	}
	return 0
}

func (m *TeSrNodeInfo) GetSrgbSize() uint32 {
	if m != nil {
		return m.SrgbSize
	}
	return 0
}

// A link belonging to a node
type TeSrLinkInfo struct {
	// Link type
	TopologyLinkType string `protobuf:"bytes,1,opt,name=topology_link_type,json=topologyLinkType" json:"topology_link_type,omitempty"`
	// Link's local interface address
	TopologyLinkInterfaceAddress string `protobuf:"bytes,2,opt,name=topology_link_interface_address,json=topologyLinkInterfaceAddress" json:"topology_link_interface_address,omitempty"`
	// Link's local interface ID
	TopologyLinkInterfaceId uint32 `protobuf:"varint,3,opt,name=topology_link_interface_id,json=topologyLinkInterfaceId" json:"topology_link_interface_id,omitempty"`
	// Link's neighbor interface address
	TopologyLinkNeighborAddress string `protobuf:"bytes,4,opt,name=topology_link_neighbor_address,json=topologyLinkNeighborAddress" json:"topology_link_neighbor_address,omitempty"`
	// Link's neighbor interface ID
	TopologyLinkNeighborId uint32 `protobuf:"varint,5,opt,name=topology_link_neighbor_id,json=topologyLinkNeighborId" json:"topology_link_neighbor_id,omitempty"`
	// System id of neighbor
	TopologyLinkNeighborSystemId string `protobuf:"bytes,6,opt,name=topology_link_neighbor_system_id,json=topologyLinkNeighborSystemId" json:"topology_link_neighbor_system_id,omitempty"`
	// Node id of neighbor
	TopologyLinkNeighborNodeId uint32 `protobuf:"varint,7,opt,name=topology_link_neighbor_node_id,json=topologyLinkNeighborNodeId" json:"topology_link_neighbor_node_id,omitempty"`
	// Neighbor's link version counter
	TopologyLinkNeighborGeneration uint32 `protobuf:"varint,8,opt,name=topology_link_neighbor_generation,json=topologyLinkNeighborGeneration" json:"topology_link_neighbor_generation,omitempty"`
	// Neighbor's link version counter
	TopologyLinkFragmentId uint32 `protobuf:"varint,9,opt,name=topology_link_fragment_id,json=topologyLinkFragmentId" json:"topology_link_fragment_id,omitempty"`
	// The link's TE metric
	TopologyLinkTeMetric uint32 `protobuf:"varint,10,opt,name=topology_link_te_metric,json=topologyLinkTeMetric" json:"topology_link_te_metric,omitempty"`
	// The link's IGP metric
	TopologyLinkIgpMetric uint32 `protobuf:"varint,11,opt,name=topology_link_igp_metric,json=topologyLinkIgpMetric" json:"topology_link_igp_metric,omitempty"`
	// The link's affinity bits (colors)
	TopologyLinkExtendedAffinityBits []uint32 `protobuf:"varint,12,rep,packed,name=topology_link_extended_affinity_bits,json=topologyLinkExtendedAffinityBits" json:"topology_link_extended_affinity_bits,omitempty"`
	// The link's shared risk link groups
	SharedRiskLinkGroups []*MplsSrlgInfo `protobuf:"bytes,13,rep,name=shared_risk_link_groups,json=sharedRiskLinkGroups" json:"shared_risk_link_groups,omitempty"`
	// Adjacency SIDs assigned for adjacency nodes
	AdjacencySids        []*TeSrAdjSid `protobuf:"bytes,14,rep,name=adjacency_sids,json=adjacencySids" json:"adjacency_sids,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TeSrLinkInfo) Reset()         { *m = TeSrLinkInfo{} }
func (m *TeSrLinkInfo) String() string { return proto.CompactTextString(m) }
func (*TeSrLinkInfo) ProtoMessage()    {}
func (*TeSrLinkInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_te_sr_node_b4b312b9a0bcf882, []int{6}
}
func (m *TeSrLinkInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeSrLinkInfo.Unmarshal(m, b)
}
func (m *TeSrLinkInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeSrLinkInfo.Marshal(b, m, deterministic)
}
func (dst *TeSrLinkInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeSrLinkInfo.Merge(dst, src)
}
func (m *TeSrLinkInfo) XXX_Size() int {
	return xxx_messageInfo_TeSrLinkInfo.Size(m)
}
func (m *TeSrLinkInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TeSrLinkInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TeSrLinkInfo proto.InternalMessageInfo

func (m *TeSrLinkInfo) GetTopologyLinkType() string {
	if m != nil {
		return m.TopologyLinkType
	}
	return ""
}

func (m *TeSrLinkInfo) GetTopologyLinkInterfaceAddress() string {
	if m != nil {
		return m.TopologyLinkInterfaceAddress
	}
	return ""
}

func (m *TeSrLinkInfo) GetTopologyLinkInterfaceId() uint32 {
	if m != nil {
		return m.TopologyLinkInterfaceId
	}
	return 0
}

func (m *TeSrLinkInfo) GetTopologyLinkNeighborAddress() string {
	if m != nil {
		return m.TopologyLinkNeighborAddress
	}
	return ""
}

func (m *TeSrLinkInfo) GetTopologyLinkNeighborId() uint32 {
	if m != nil {
		return m.TopologyLinkNeighborId
	}
	return 0
}

func (m *TeSrLinkInfo) GetTopologyLinkNeighborSystemId() string {
	if m != nil {
		return m.TopologyLinkNeighborSystemId
	}
	return ""
}

func (m *TeSrLinkInfo) GetTopologyLinkNeighborNodeId() uint32 {
	if m != nil {
		return m.TopologyLinkNeighborNodeId
	}
	return 0
}

func (m *TeSrLinkInfo) GetTopologyLinkNeighborGeneration() uint32 {
	if m != nil {
		return m.TopologyLinkNeighborGeneration
	}
	return 0
}

func (m *TeSrLinkInfo) GetTopologyLinkFragmentId() uint32 {
	if m != nil {
		return m.TopologyLinkFragmentId
	}
	return 0
}

func (m *TeSrLinkInfo) GetTopologyLinkTeMetric() uint32 {
	if m != nil {
		return m.TopologyLinkTeMetric
	}
	return 0
}

func (m *TeSrLinkInfo) GetTopologyLinkIgpMetric() uint32 {
	if m != nil {
		return m.TopologyLinkIgpMetric
	}
	return 0
}

func (m *TeSrLinkInfo) GetTopologyLinkExtendedAffinityBits() []uint32 {
	if m != nil {
		return m.TopologyLinkExtendedAffinityBits
	}
	return nil
}

func (m *TeSrLinkInfo) GetSharedRiskLinkGroups() []*MplsSrlgInfo {
	if m != nil {
		return m.SharedRiskLinkGroups
	}
	return nil
}

func (m *TeSrLinkInfo) GetAdjacencySids() []*TeSrAdjSid {
	if m != nil {
		return m.AdjacencySids
	}
	return nil
}

func init() {
	proto.RegisterType((*TeSrNode_KEYS)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.segment_routing.sr_node_infos.sr_node_info.te_sr_node_KEYS")
	proto.RegisterType((*TeSrNode)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.segment_routing.sr_node_infos.sr_node_info.te_sr_node")
	proto.RegisterType((*MplsSrlgInfo)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.segment_routing.sr_node_infos.sr_node_info.mpls_srlg_info")
	proto.RegisterType((*TeSrIgpArea)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.segment_routing.sr_node_infos.sr_node_info.te_sr_igp_area")
	proto.RegisterType((*TeSrAdjSid)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.segment_routing.sr_node_infos.sr_node_info.te_sr_adj_sid")
	proto.RegisterType((*TeSrNodeInfo)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.segment_routing.sr_node_infos.sr_node_info.te_sr_node_info")
	proto.RegisterType((*TeSrLinkInfo)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.segment_routing.sr_node_infos.sr_node_info.te_sr_link_info")
}

func init() { proto.RegisterFile("te_sr_node.proto", fileDescriptor_te_sr_node_b4b312b9a0bcf882) }

var fileDescriptor_te_sr_node_b4b312b9a0bcf882 = []byte{
	// 1068 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xdd, 0x4e, 0x1b, 0x47,
	0x14, 0x96, 0x81, 0x80, 0x7d, 0x60, 0x0d, 0x4c, 0x43, 0x59, 0x20, 0x01, 0xc7, 0x8d, 0x2a, 0x5a,
	0x55, 0x56, 0x95, 0xff, 0xaa, 0x57, 0xd0, 0x42, 0x64, 0x95, 0x52, 0x69, 0x1d, 0x45, 0x8a, 0xda,
	0x6a, 0xb4, 0xf6, 0xcc, 0x6e, 0x26, 0xac, 0x77, 0x56, 0x33, 0x03, 0x8d, 0xa3, 0x4a, 0x95, 0xaa,
	0xbe, 0x41, 0x5f, 0xa4, 0xea, 0xc3, 0xf4, 0xaa, 0xef, 0xd1, 0xdb, 0x6a, 0xcf, 0xcc, 0xfe, 0x05,
	0xb8, 0x0b, 0x77, 0x9e, 0xef, 0x3b, 0xff, 0xfb, 0xcd, 0x1c, 0xc3, 0x9a, 0xe1, 0x54, 0x2b, 0x9a,
	0x4a, 0xc6, 0x07, 0x99, 0x92, 0x46, 0x92, 0x93, 0x89, 0xd0, 0x13, 0x49, 0x85, 0xd4, 0xf4, 0xad,
	0xa2, 0xd3, 0x2c, 0xd1, 0xd4, 0x70, 0x2a, 0x33, 0xae, 0x06, 0xee, 0x30, 0xd0, 0x3c, 0x9e, 0xf2,
	0xd4, 0x50, 0x25, 0xcf, 0x8d, 0x48, 0xe3, 0x81, 0x0b, 0x40, 0x45, 0x1a, 0x49, 0xdd, 0x38, 0xf5,
	0xff, 0x68, 0xc1, 0x6a, 0x95, 0x82, 0x7e, 0x77, 0xf4, 0x6a, 0x44, 0xb6, 0xa1, 0x8d, 0xa9, 0x26,
	0x32, 0xf1, 0x5b, 0xbd, 0xd6, 0x7e, 0x27, 0x28, 0xcf, 0xe4, 0x1e, 0xac, 0x88, 0x38, 0xa3, 0x22,
	0xd5, 0x26, 0x4c, 0x27, 0xdc, 0x9f, 0x43, 0x7e, 0x59, 0xc4, 0xd9, 0xd0, 0x41, 0x84, 0xc0, 0x42,
	0xa8, 0x78, 0xe8, 0xcf, 0xf7, 0x5a, 0xfb, 0x5e, 0x80, 0xbf, 0xc9, 0x2e, 0xe4, 0x26, 0x2e, 0x2f,
	0xf3, 0x17, 0xd0, 0xab, 0x23, 0xe2, 0xec, 0x54, 0x32, 0x3e, 0x64, 0xfd, 0x7f, 0x16, 0x00, 0xaa,
	0x32, 0xc8, 0x67, 0xb0, 0x9e, 0xc8, 0x49, 0x98, 0x38, 0x87, 0x3c, 0x21, 0xf3, 0x1f, 0xa0, 0x53,
	0x17, 0x09, 0x74, 0x8b, 0xb3, 0x21, 0x23, 0xbf, 0x40, 0x3b, 0xe7, 0x31, 0xe3, 0xc3, 0x5e, 0x6b,
	0x7f, 0xf9, 0xc1, 0x4f, 0x83, 0x0f, 0x39, 0xa1, 0x81, 0x2d, 0xab, 0xc8, 0x11, 0x2c, 0x89, 0x38,
	0x3b, 0xc8, 0x5b, 0x7a, 0x0c, 0x9b, 0x46, 0x66, 0x32, 0x91, 0xf1, 0xcc, 0x59, 0x6b, 0x0c, 0xc7,
	0x95, 0xff, 0xa8, 0xd7, 0xda, 0x6f, 0x07, 0xb7, 0x0b, 0x1a, 0x8b, 0xd5, 0x01, 0x72, 0xe4, 0x11,
	0x6c, 0xd6, 0x5a, 0x33, 0xdc, 0xf9, 0xe4, 0x0d, 0x3e, 0xc6, 0x06, 0x3f, 0x2a, 0x1b, 0x7c, 0xc1,
	0xad, 0xcf, 0x90, 0x91, 0x67, 0xe0, 0x37, 0x93, 0xc9, 0x0b, 0xae, 0x12, 0x19, 0x32, 0xce, 0xfc,
	0x27, 0x98, 0xed, 0xe3, 0x7a, 0xb6, 0x1f, 0x4a, 0x96, 0xfc, 0x06, 0x2b, 0xf5, 0x76, 0xfc, 0xa7,
	0x38, 0xa3, 0x9f, 0x6f, 0x62, 0x46, 0xe5, 0x39, 0x00, 0xad, 0xb0, 0xe9, 0x34, 0x92, 0xe4, 0x57,
	0x00, 0x24, 0x12, 0x91, 0x9e, 0x69, 0xff, 0x59, 0x6f, 0xfe, 0xa6, 0xd2, 0xe7, 0x09, 0x6c, 0xfa,
	0x4e, 0x4e, 0x9d, 0xe4, 0xf9, 0xfa, 0xaf, 0xa0, 0x8b, 0x01, 0xb5, 0x4a, 0x62, 0x24, 0xc9, 0xe7,
	0xb0, 0xae, 0x5f, 0x87, 0x8a, 0x33, 0xaa, 0x84, 0x3e, 0xa3, 0xb1, 0x92, 0xe7, 0x19, 0xca, 0xdc,
	0x0b, 0x56, 0x2d, 0x11, 0x08, 0x7d, 0xf6, 0x3c, 0x87, 0xc9, 0x0e, 0x74, 0xd0, 0x31, 0x0d, 0xa7,
	0x85, 0xd4, 0xdb, 0x39, 0x70, 0x1a, 0x4e, 0x79, 0xff, 0xbf, 0x16, 0x74, 0x9b, 0xe2, 0x20, 0x4f,
	0x60, 0xf3, 0xbd, 0xb2, 0x29, 0x4f, 0xc3, 0x71, 0xc2, 0x19, 0x66, 0x68, 0x07, 0x1b, 0x8e, 0x0e,
	0x2c, 0x7b, 0x64, 0x49, 0xf2, 0x05, 0x10, 0x6d, 0x94, 0x98, 0x18, 0xaa, 0xb3, 0xa8, 0x74, 0x99,
	0x43, 0x97, 0x35, 0xcb, 0x8c, 0xb2, 0xa8, 0xb0, 0xde, 0xb2, 0x92, 0x37, 0xb3, 0x8c, 0xe3, 0x25,
	0xeb, 0xa0, 0x28, 0x5f, 0xcc, 0x32, 0x7e, 0xe9, 0x7a, 0x2e, 0x5c, 0xbe, 0x9e, 0x5b, 0xb5, 0x0b,
	0x73, 0x0b, 0xdb, 0x2e, 0x25, 0xfd, 0x29, 0xac, 0x16, 0x14, 0x8d, 0xa4, 0x9a, 0x86, 0xc6, 0x5f,
	0xc4, 0x00, 0x9e, 0xb3, 0x38, 0x46, 0xb0, 0xff, 0xef, 0x1c, 0x78, 0xb6, 0xf3, 0x90, 0xbd, 0xa1,
	0x5a, 0x30, 0xf2, 0x09, 0x78, 0x21, 0x7b, 0x13, 0x4e, 0x78, 0x3a, 0x99, 0xe5, 0x80, 0x1b, 0xe8,
	0x4a, 0x09, 0x8e, 0x04, 0xcb, 0xa7, 0x89, 0xdf, 0x08, 0x0b, 0x77, 0xd3, 0xcc, 0x01, 0xac, 0xfc,
	0x2e, 0x80, 0xbd, 0x17, 0x21, 0x63, 0xca, 0xb5, 0xd5, 0x41, 0xe4, 0x80, 0x31, 0x45, 0xf6, 0x60,
	0x59, 0xf1, 0xa9, 0x34, 0xdc, 0xf2, 0xb6, 0x2f, 0xb0, 0x10, 0x1a, 0xdc, 0x87, 0x6e, 0x3a, 0x56,
	0xe5, 0x83, 0x21, 0x18, 0x36, 0xd7, 0x09, 0x56, 0xd2, 0xb1, 0x72, 0xaf, 0x85, 0x60, 0xe4, 0x4b,
	0xd8, 0x28, 0xad, 0x1a, 0x77, 0xcf, 0xf6, 0xb9, 0xee, 0x8c, 0x6b, 0x37, 0x6f, 0x03, 0x16, 0xa3,
	0x24, 0x8c, 0x69, 0xe4, 0x2f, 0xe1, 0xe7, 0xb8, 0x95, 0x9f, 0x8e, 0x4b, 0x78, 0xec, 0xb7, 0x2b,
	0xf8, 0xb0, 0x84, 0x2f, 0xfc, 0x4e, 0x05, 0xbf, 0x2c, 0xe1, 0xc4, 0x87, 0x0a, 0x3e, 0x29, 0x61,
	0xed, 0x2f, 0x57, 0xf0, 0xa8, 0xff, 0x77, 0xf3, 0x4d, 0x46, 0xd5, 0xde, 0x05, 0x28, 0x94, 0x55,
	0x4e, 0xb7, 0xe3, 0x90, 0x21, 0x23, 0xdf, 0xc2, 0x5e, 0x45, 0x53, 0x37, 0xc8, 0xb1, 0x96, 0xc9,
	0xb9, 0xe1, 0xf4, 0x22, 0x4c, 0xce, 0xed, 0xc0, 0xbd, 0x60, 0xa7, 0xf4, 0x39, 0xc1, 0xd9, 0x3a,
	0x9b, 0x97, 0xb9, 0x09, 0x26, 0x51, 0xf1, 0x98, 0x6a, 0x13, 0x2a, 0xe3, 0xde, 0xef, 0x4e, 0x8e,
	0x8c, 0x72, 0xc0, 0xde, 0x86, 0x9c, 0x16, 0xef, 0xac, 0xb2, 0xbc, 0xfc, 0x36, 0xc4, 0xe3, 0x91,
	0x78, 0xc7, 0xfb, 0x7f, 0xb5, 0x8b, 0xa2, 0xcb, 0x7b, 0x98, 0xcb, 0xba, 0x7c, 0xb5, 0xaa, 0x2f,
	0x6f, 0x57, 0xca, 0x5a, 0xc1, 0x9c, 0x14, 0x0a, 0x38, 0x82, 0xbd, 0xa6, 0xb5, 0x48, 0x0d, 0x57,
	0x51, 0x38, 0xb1, 0xdf, 0x9c, 0x6b, 0xed, 0x44, 0x73, 0xa7, 0xee, 0x3a, 0x2c, 0x8c, 0x0e, 0xac,
	0x0d, 0xf9, 0x1a, 0xb6, 0xaf, 0x0b, 0x23, 0x98, 0x6b, 0x6a, 0xf3, 0xca, 0x08, 0x43, 0x46, 0xbe,
	0x81, 0xdd, 0xa6, 0x73, 0xca, 0x45, 0xfc, 0x7a, 0x2c, 0x55, 0x59, 0x82, 0x55, 0xde, 0x4e, 0x3d,
	0xc0, 0xa9, 0xb3, 0x29, 0x2a, 0xf8, 0x0a, 0xb6, 0xae, 0x09, 0xe2, 0x54, 0xe9, 0x55, 0xaf, 0x75,
	0xdd, 0x7f, 0xc8, 0xc8, 0x31, 0xf4, 0xae, 0x71, 0xd5, 0x33, 0x6d, 0xf8, 0xb4, 0x92, 0xea, 0x9d,
	0xab, 0x22, 0x8c, 0xd0, 0x68, 0xc8, 0xc8, 0xe1, 0xb5, 0x7d, 0x14, 0x2b, 0x78, 0x09, 0xeb, 0xd8,
	0xbe, 0x2a, 0x8a, 0xdd, 0xc9, 0x64, 0x08, 0xf7, 0xae, 0x89, 0x11, 0xf3, 0x94, 0xab, 0xd0, 0x08,
	0x99, 0xa2, 0xfa, 0xbd, 0x60, 0xf7, 0xaa, 0x30, 0xcf, 0x4b, 0xab, 0xcb, 0x13, 0x89, 0x54, 0x58,
	0x8a, 0xb9, 0x73, 0x79, 0x22, 0xc7, 0x8e, 0x1e, 0xb2, 0xc6, 0x9a, 0xb5, 0x1a, 0xe2, 0x74, 0xca,
	0xf3, 0x27, 0x11, 0xef, 0x92, 0x57, 0xad, 0x59, 0x14, 0x12, 0xff, 0x1e, 0x39, 0xf2, 0xb4, 0xb6,
	0x30, 0xad, 0x0a, 0xe2, 0xac, 0xf0, 0x5b, 0x46, 0xbf, 0x8d, 0x86, 0x06, 0xe2, 0xcc, 0x39, 0x9e,
	0xc2, 0xfd, 0xa6, 0x23, 0x7f, 0x6b, 0x78, 0xca, 0x38, 0xa3, 0x61, 0x14, 0x89, 0x54, 0x98, 0x19,
	0x1d, 0x0b, 0xa3, 0xfd, 0x95, 0xde, 0xfc, 0xbe, 0x17, 0xf4, 0xea, 0x41, 0x8e, 0x9c, 0xe5, 0x81,
	0x33, 0x3c, 0x14, 0x46, 0x93, 0x3f, 0x5b, 0xb0, 0x59, 0xdf, 0x37, 0x18, 0x13, 0x97, 0x8e, 0xf6,
	0x3d, 0x5c, 0x86, 0x1f, 0xf8, 0xff, 0x4a, 0x73, 0xdd, 0x05, 0xb7, 0xab, 0x9d, 0x96, 0xd7, 0x88,
	0x7b, 0x4d, 0x93, 0xdf, 0x5b, 0xd0, 0x6d, 0x3c, 0xd8, 0xda, 0xef, 0x62, 0x31, 0x3f, 0xde, 0xc4,
	0x66, 0x76, 0x5b, 0x22, 0xf0, 0xea, 0xeb, 0x40, 0x8f, 0x17, 0xf1, 0x5f, 0xe5, 0xc3, 0xff, 0x03,
	0x00, 0x00, 0xff, 0xff, 0x5e, 0x35, 0x18, 0xbe, 0xe4, 0x0a, 0x00, 0x00,
}
