// Code generated by protoc-gen-go. DO NOT EDIT.
// source: te_sr_prefix.proto

package cisco_ios_xr_mpls_te_oper_mpls_te_segment_routing_sr_prefix_infos_sr_prefix_info

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// MPLS TE Segment-Routing Prefix information
type TeSrPrefix_KEYS struct {
	Protocol             string   `protobuf:"bytes,1,opt,name=protocol" json:"protocol,omitempty"`
	IgpInstance          string   `protobuf:"bytes,2,opt,name=igp_instance,json=igpInstance" json:"igp_instance,omitempty"`
	Area                 uint32   `protobuf:"varint,3,opt,name=area" json:"area,omitempty"`
	Prefix               string   `protobuf:"bytes,4,opt,name=prefix" json:"prefix,omitempty"`
	PrefixLength         uint32   `protobuf:"varint,5,opt,name=prefix_length,json=prefixLength" json:"prefix_length,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeSrPrefix_KEYS) Reset()         { *m = TeSrPrefix_KEYS{} }
func (m *TeSrPrefix_KEYS) String() string { return proto.CompactTextString(m) }
func (*TeSrPrefix_KEYS) ProtoMessage()    {}
func (*TeSrPrefix_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_te_sr_prefix_18a3f9e2fa5813a9, []int{0}
}
func (m *TeSrPrefix_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeSrPrefix_KEYS.Unmarshal(m, b)
}
func (m *TeSrPrefix_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeSrPrefix_KEYS.Marshal(b, m, deterministic)
}
func (dst *TeSrPrefix_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeSrPrefix_KEYS.Merge(dst, src)
}
func (m *TeSrPrefix_KEYS) XXX_Size() int {
	return xxx_messageInfo_TeSrPrefix_KEYS.Size(m)
}
func (m *TeSrPrefix_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_TeSrPrefix_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_TeSrPrefix_KEYS proto.InternalMessageInfo

func (m *TeSrPrefix_KEYS) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *TeSrPrefix_KEYS) GetIgpInstance() string {
	if m != nil {
		return m.IgpInstance
	}
	return ""
}

func (m *TeSrPrefix_KEYS) GetArea() uint32 {
	if m != nil {
		return m.Area
	}
	return 0
}

func (m *TeSrPrefix_KEYS) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *TeSrPrefix_KEYS) GetPrefixLength() uint32 {
	if m != nil {
		return m.PrefixLength
	}
	return 0
}

type TeSrPrefix struct {
	// Prefix
	Prefix string `protobuf:"bytes,50,opt,name=prefix" json:"prefix,omitempty"`
	// Length of the prefix
	PrefixLength uint32 `protobuf:"varint,51,opt,name=prefix_length,json=prefixLength" json:"prefix_length,omitempty"`
	// Segment-Routing prefix SID
	PrefixSid uint32 `protobuf:"varint,52,opt,name=prefix_sid,json=prefixSid" json:"prefix_sid,omitempty"`
	// Segment-Routing prefix Strict SID
	PrefixStrictSid uint32 `protobuf:"varint,53,opt,name=prefix_strict_sid,json=prefixStrictSid" json:"prefix_strict_sid,omitempty"`
	// Segment-Routing paths to prefix
	SrPaths []*TeSrPath `protobuf:"bytes,54,rep,name=sr_paths,json=srPaths" json:"sr_paths,omitempty"`
	// An IGP area where the prefix belongs to
	IgpArea *TeSrIgpArea `protobuf:"bytes,55,opt,name=igp_area,json=igpArea" json:"igp_area,omitempty"`
	// Advertizing nodes
	AdvertizingNodes []*NodeId `protobuf:"bytes,56,rep,name=advertizing_nodes,json=advertizingNodes" json:"advertizing_nodes,omitempty"`
	// Advertizing nodes for Strict SPF
	StrictAdvertizingNodes []*NodeId `protobuf:"bytes,57,rep,name=strict_advertizing_nodes,json=strictAdvertizingNodes" json:"strict_advertizing_nodes,omitempty"`
	// Prefix-SID subTLV R-flag
	FlagR bool `protobuf:"varint,58,opt,name=flag_r,json=flagR" json:"flag_r,omitempty"`
	// Prefix-SID subTLV N-flag
	FlagN bool `protobuf:"varint,59,opt,name=flag_n,json=flagN" json:"flag_n,omitempty"`
	// Prefix-SID subTLV P-flag
	FlagP bool `protobuf:"varint,60,opt,name=flag_p,json=flagP" json:"flag_p,omitempty"`
	// Prefix-SID subTLV E-flag
	FlagE bool `protobuf:"varint,61,opt,name=flag_e,json=flagE" json:"flag_e,omitempty"`
	// Prefix-SID subTLV V-flag
	FlagV bool `protobuf:"varint,62,opt,name=flag_v,json=flagV" json:"flag_v,omitempty"`
	// Prefix-SID subTLV L-flag
	FlagL bool `protobuf:"varint,63,opt,name=flag_l,json=flagL" json:"flag_l,omitempty"`
	// Prefix-SID subTLV P-flag for strict SID
	StrictFlagP bool `protobuf:"varint,64,opt,name=strict_flag_p,json=strictFlagP" json:"strict_flag_p,omitempty"`
	// Prefix-SID subTLV E-flag for strict SID
	StrictFlagE bool `protobuf:"varint,65,opt,name=strict_flag_e,json=strictFlagE" json:"strict_flag_e,omitempty"`
	// Prefix-SID subTLV V-flag for strict SID
	StrictFlagV bool `protobuf:"varint,66,opt,name=strict_flag_v,json=strictFlagV" json:"strict_flag_v,omitempty"`
	// Prefix-SID subTLV L-flag for strict SID
	StrictFlagL          bool     `protobuf:"varint,67,opt,name=strict_flag_l,json=strictFlagL" json:"strict_flag_l,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeSrPrefix) Reset()         { *m = TeSrPrefix{} }
func (m *TeSrPrefix) String() string { return proto.CompactTextString(m) }
func (*TeSrPrefix) ProtoMessage()    {}
func (*TeSrPrefix) Descriptor() ([]byte, []int) {
	return fileDescriptor_te_sr_prefix_18a3f9e2fa5813a9, []int{1}
}
func (m *TeSrPrefix) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeSrPrefix.Unmarshal(m, b)
}
func (m *TeSrPrefix) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeSrPrefix.Marshal(b, m, deterministic)
}
func (dst *TeSrPrefix) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeSrPrefix.Merge(dst, src)
}
func (m *TeSrPrefix) XXX_Size() int {
	return xxx_messageInfo_TeSrPrefix.Size(m)
}
func (m *TeSrPrefix) XXX_DiscardUnknown() {
	xxx_messageInfo_TeSrPrefix.DiscardUnknown(m)
}

var xxx_messageInfo_TeSrPrefix proto.InternalMessageInfo

func (m *TeSrPrefix) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *TeSrPrefix) GetPrefixLength() uint32 {
	if m != nil {
		return m.PrefixLength
	}
	return 0
}

func (m *TeSrPrefix) GetPrefixSid() uint32 {
	if m != nil {
		return m.PrefixSid
	}
	return 0
}

func (m *TeSrPrefix) GetPrefixStrictSid() uint32 {
	if m != nil {
		return m.PrefixStrictSid
	}
	return 0
}

func (m *TeSrPrefix) GetSrPaths() []*TeSrPath {
	if m != nil {
		return m.SrPaths
	}
	return nil
}

func (m *TeSrPrefix) GetIgpArea() *TeSrIgpArea {
	if m != nil {
		return m.IgpArea
	}
	return nil
}

func (m *TeSrPrefix) GetAdvertizingNodes() []*NodeId {
	if m != nil {
		return m.AdvertizingNodes
	}
	return nil
}

func (m *TeSrPrefix) GetStrictAdvertizingNodes() []*NodeId {
	if m != nil {
		return m.StrictAdvertizingNodes
	}
	return nil
}

func (m *TeSrPrefix) GetFlagR() bool {
	if m != nil {
		return m.FlagR
	}
	return false
}

func (m *TeSrPrefix) GetFlagN() bool {
	if m != nil {
		return m.FlagN
	}
	return false
}

func (m *TeSrPrefix) GetFlagP() bool {
	if m != nil {
		return m.FlagP
	}
	return false
}

func (m *TeSrPrefix) GetFlagE() bool {
	if m != nil {
		return m.FlagE
	}
	return false
}

func (m *TeSrPrefix) GetFlagV() bool {
	if m != nil {
		return m.FlagV
	}
	return false
}

func (m *TeSrPrefix) GetFlagL() bool {
	if m != nil {
		return m.FlagL
	}
	return false
}

func (m *TeSrPrefix) GetStrictFlagP() bool {
	if m != nil {
		return m.StrictFlagP
	}
	return false
}

func (m *TeSrPrefix) GetStrictFlagE() bool {
	if m != nil {
		return m.StrictFlagE
	}
	return false
}

func (m *TeSrPrefix) GetStrictFlagV() bool {
	if m != nil {
		return m.StrictFlagV
	}
	return false
}

func (m *TeSrPrefix) GetStrictFlagL() bool {
	if m != nil {
		return m.StrictFlagL
	}
	return false
}

// A IGP area information for Segment-Routing
type TeSrIgpArea struct {
	// True if the Segment-Routing is enabled in this area
	SegmentRoutingEnabled bool `protobuf:"varint,1,opt,name=segment_routing_enabled,json=segmentRoutingEnabled" json:"segment_routing_enabled,omitempty"`
	// True if the strict SPF is enabled in this area
	StrictSpfEnabled bool `protobuf:"varint,2,opt,name=strict_spf_enabled,json=strictSpfEnabled" json:"strict_spf_enabled,omitempty"`
	// IGP type
	IgpType string `protobuf:"bytes,3,opt,name=igp_type,json=igpType" json:"igp_type,omitempty"`
	// IGP Instance name
	IgpInstance string `protobuf:"bytes,4,opt,name=igp_instance,json=igpInstance" json:"igp_instance,omitempty"`
	// IGP Area ID
	IgpArea uint32 `protobuf:"varint,5,opt,name=igp_area,json=igpArea" json:"igp_area,omitempty"`
	// IGP-area format
	IgpAreaFormat        string   `protobuf:"bytes,6,opt,name=igp_area_format,json=igpAreaFormat" json:"igp_area_format,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeSrIgpArea) Reset()         { *m = TeSrIgpArea{} }
func (m *TeSrIgpArea) String() string { return proto.CompactTextString(m) }
func (*TeSrIgpArea) ProtoMessage()    {}
func (*TeSrIgpArea) Descriptor() ([]byte, []int) {
	return fileDescriptor_te_sr_prefix_18a3f9e2fa5813a9, []int{2}
}
func (m *TeSrIgpArea) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeSrIgpArea.Unmarshal(m, b)
}
func (m *TeSrIgpArea) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeSrIgpArea.Marshal(b, m, deterministic)
}
func (dst *TeSrIgpArea) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeSrIgpArea.Merge(dst, src)
}
func (m *TeSrIgpArea) XXX_Size() int {
	return xxx_messageInfo_TeSrIgpArea.Size(m)
}
func (m *TeSrIgpArea) XXX_DiscardUnknown() {
	xxx_messageInfo_TeSrIgpArea.DiscardUnknown(m)
}

var xxx_messageInfo_TeSrIgpArea proto.InternalMessageInfo

func (m *TeSrIgpArea) GetSegmentRoutingEnabled() bool {
	if m != nil {
		return m.SegmentRoutingEnabled
	}
	return false
}

func (m *TeSrIgpArea) GetStrictSpfEnabled() bool {
	if m != nil {
		return m.StrictSpfEnabled
	}
	return false
}

func (m *TeSrIgpArea) GetIgpType() string {
	if m != nil {
		return m.IgpType
	}
	return ""
}

func (m *TeSrIgpArea) GetIgpInstance() string {
	if m != nil {
		return m.IgpInstance
	}
	return ""
}

func (m *TeSrIgpArea) GetIgpArea() uint32 {
	if m != nil {
		return m.IgpArea
	}
	return 0
}

func (m *TeSrIgpArea) GetIgpAreaFormat() string {
	if m != nil {
		return m.IgpAreaFormat
	}
	return ""
}

// Segment-Routing primary path
type TeSrPrimaryPath struct {
	// Outgoing Interface Name
	OutgoingInterface string `protobuf:"bytes,1,opt,name=outgoing_interface,json=outgoingInterface" json:"outgoing_interface,omitempty"`
	// Outgoing Label
	OutgoingLabel uint32 `protobuf:"varint,2,opt,name=outgoing_label,json=outgoingLabel" json:"outgoing_label,omitempty"`
	// Outgoing Label for Strict SPF
	OutgoingStrictLabel uint32 `protobuf:"varint,3,opt,name=outgoing_strict_label,json=outgoingStrictLabel" json:"outgoing_strict_label,omitempty"`
	// Next hop
	NextHop string `protobuf:"bytes,4,opt,name=next_hop,json=nextHop" json:"next_hop,omitempty"`
	// Path Identifier
	PathId uint32 `protobuf:"varint,5,opt,name=path_id,json=pathId" json:"path_id,omitempty"`
	// Backup Path Identifier
	BackupPathId         uint32   `protobuf:"varint,6,opt,name=backup_path_id,json=backupPathId" json:"backup_path_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeSrPrimaryPath) Reset()         { *m = TeSrPrimaryPath{} }
func (m *TeSrPrimaryPath) String() string { return proto.CompactTextString(m) }
func (*TeSrPrimaryPath) ProtoMessage()    {}
func (*TeSrPrimaryPath) Descriptor() ([]byte, []int) {
	return fileDescriptor_te_sr_prefix_18a3f9e2fa5813a9, []int{3}
}
func (m *TeSrPrimaryPath) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeSrPrimaryPath.Unmarshal(m, b)
}
func (m *TeSrPrimaryPath) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeSrPrimaryPath.Marshal(b, m, deterministic)
}
func (dst *TeSrPrimaryPath) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeSrPrimaryPath.Merge(dst, src)
}
func (m *TeSrPrimaryPath) XXX_Size() int {
	return xxx_messageInfo_TeSrPrimaryPath.Size(m)
}
func (m *TeSrPrimaryPath) XXX_DiscardUnknown() {
	xxx_messageInfo_TeSrPrimaryPath.DiscardUnknown(m)
}

var xxx_messageInfo_TeSrPrimaryPath proto.InternalMessageInfo

func (m *TeSrPrimaryPath) GetOutgoingInterface() string {
	if m != nil {
		return m.OutgoingInterface
	}
	return ""
}

func (m *TeSrPrimaryPath) GetOutgoingLabel() uint32 {
	if m != nil {
		return m.OutgoingLabel
	}
	return 0
}

func (m *TeSrPrimaryPath) GetOutgoingStrictLabel() uint32 {
	if m != nil {
		return m.OutgoingStrictLabel
	}
	return 0
}

func (m *TeSrPrimaryPath) GetNextHop() string {
	if m != nil {
		return m.NextHop
	}
	return ""
}

func (m *TeSrPrimaryPath) GetPathId() uint32 {
	if m != nil {
		return m.PathId
	}
	return 0
}

func (m *TeSrPrimaryPath) GetBackupPathId() uint32 {
	if m != nil {
		return m.BackupPathId
	}
	return 0
}

// Segment-Routing backup path
type TeSrBackupPath struct {
	// Outgoing Interface Name
	OutgoingInterface string `protobuf:"bytes,1,opt,name=outgoing_interface,json=outgoingInterface" json:"outgoing_interface,omitempty"`
	// Outgoing Labels Stack
	OutgoingLabelsStack []uint32 `protobuf:"varint,2,rep,packed,name=outgoing_labels_stack,json=outgoingLabelsStack" json:"outgoing_labels_stack,omitempty"`
	// Outgoing Labels Stack for Strict SPF
	OutgoingStrictLabelsStack []uint32 `protobuf:"varint,3,rep,packed,name=outgoing_strict_labels_stack,json=outgoingStrictLabelsStack" json:"outgoing_strict_labels_stack,omitempty"`
	// Next hop
	NextHop              string   `protobuf:"bytes,4,opt,name=next_hop,json=nextHop" json:"next_hop,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeSrBackupPath) Reset()         { *m = TeSrBackupPath{} }
func (m *TeSrBackupPath) String() string { return proto.CompactTextString(m) }
func (*TeSrBackupPath) ProtoMessage()    {}
func (*TeSrBackupPath) Descriptor() ([]byte, []int) {
	return fileDescriptor_te_sr_prefix_18a3f9e2fa5813a9, []int{4}
}
func (m *TeSrBackupPath) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeSrBackupPath.Unmarshal(m, b)
}
func (m *TeSrBackupPath) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeSrBackupPath.Marshal(b, m, deterministic)
}
func (dst *TeSrBackupPath) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeSrBackupPath.Merge(dst, src)
}
func (m *TeSrBackupPath) XXX_Size() int {
	return xxx_messageInfo_TeSrBackupPath.Size(m)
}
func (m *TeSrBackupPath) XXX_DiscardUnknown() {
	xxx_messageInfo_TeSrBackupPath.DiscardUnknown(m)
}

var xxx_messageInfo_TeSrBackupPath proto.InternalMessageInfo

func (m *TeSrBackupPath) GetOutgoingInterface() string {
	if m != nil {
		return m.OutgoingInterface
	}
	return ""
}

func (m *TeSrBackupPath) GetOutgoingLabelsStack() []uint32 {
	if m != nil {
		return m.OutgoingLabelsStack
	}
	return nil
}

func (m *TeSrBackupPath) GetOutgoingStrictLabelsStack() []uint32 {
	if m != nil {
		return m.OutgoingStrictLabelsStack
	}
	return nil
}

func (m *TeSrBackupPath) GetNextHop() string {
	if m != nil {
		return m.NextHop
	}
	return ""
}

// Segment-Routing path
type TeSrPath struct {
	// Primary Segment-Routing Path
	PrimaryPath *TeSrPrimaryPath `protobuf:"bytes,1,opt,name=primary_path,json=primaryPath" json:"primary_path,omitempty"`
	// Backup Segment-Routing Path
	BackupPath *TeSrBackupPath `protobuf:"bytes,2,opt,name=backup_path,json=backupPath" json:"backup_path,omitempty"`
	// Backup Path is available
	HasBackupPath        bool     `protobuf:"varint,3,opt,name=has_backup_path,json=hasBackupPath" json:"has_backup_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeSrPath) Reset()         { *m = TeSrPath{} }
func (m *TeSrPath) String() string { return proto.CompactTextString(m) }
func (*TeSrPath) ProtoMessage()    {}
func (*TeSrPath) Descriptor() ([]byte, []int) {
	return fileDescriptor_te_sr_prefix_18a3f9e2fa5813a9, []int{5}
}
func (m *TeSrPath) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeSrPath.Unmarshal(m, b)
}
func (m *TeSrPath) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeSrPath.Marshal(b, m, deterministic)
}
func (dst *TeSrPath) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeSrPath.Merge(dst, src)
}
func (m *TeSrPath) XXX_Size() int {
	return xxx_messageInfo_TeSrPath.Size(m)
}
func (m *TeSrPath) XXX_DiscardUnknown() {
	xxx_messageInfo_TeSrPath.DiscardUnknown(m)
}

var xxx_messageInfo_TeSrPath proto.InternalMessageInfo

func (m *TeSrPath) GetPrimaryPath() *TeSrPrimaryPath {
	if m != nil {
		return m.PrimaryPath
	}
	return nil
}

func (m *TeSrPath) GetBackupPath() *TeSrBackupPath {
	if m != nil {
		return m.BackupPath
	}
	return nil
}

func (m *TeSrPath) GetHasBackupPath() bool {
	if m != nil {
		return m.HasBackupPath
	}
	return false
}

type NodeId struct {
	// Node Identifier
	NodeId               string   `protobuf:"bytes,1,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeId) Reset()         { *m = NodeId{} }
func (m *NodeId) String() string { return proto.CompactTextString(m) }
func (*NodeId) ProtoMessage()    {}
func (*NodeId) Descriptor() ([]byte, []int) {
	return fileDescriptor_te_sr_prefix_18a3f9e2fa5813a9, []int{6}
}
func (m *NodeId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeId.Unmarshal(m, b)
}
func (m *NodeId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeId.Marshal(b, m, deterministic)
}
func (dst *NodeId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeId.Merge(dst, src)
}
func (m *NodeId) XXX_Size() int {
	return xxx_messageInfo_NodeId.Size(m)
}
func (m *NodeId) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeId.DiscardUnknown(m)
}

var xxx_messageInfo_NodeId proto.InternalMessageInfo

func (m *NodeId) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func init() {
	proto.RegisterType((*TeSrPrefix_KEYS)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.segment_routing.sr_prefix_infos.sr_prefix_info.te_sr_prefix_KEYS")
	proto.RegisterType((*TeSrPrefix)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.segment_routing.sr_prefix_infos.sr_prefix_info.te_sr_prefix")
	proto.RegisterType((*TeSrIgpArea)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.segment_routing.sr_prefix_infos.sr_prefix_info.te_sr_igp_area")
	proto.RegisterType((*TeSrPrimaryPath)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.segment_routing.sr_prefix_infos.sr_prefix_info.te_sr_primary_path")
	proto.RegisterType((*TeSrBackupPath)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.segment_routing.sr_prefix_infos.sr_prefix_info.te_sr_backup_path")
	proto.RegisterType((*TeSrPath)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.segment_routing.sr_prefix_infos.sr_prefix_info.te_sr_path")
	proto.RegisterType((*NodeId)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.segment_routing.sr_prefix_infos.sr_prefix_info.node_id")
}

func init() { proto.RegisterFile("te_sr_prefix.proto", fileDescriptor_te_sr_prefix_18a3f9e2fa5813a9) }

var fileDescriptor_te_sr_prefix_18a3f9e2fa5813a9 = []byte{
	// 821 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xdd, 0x8e, 0xdb, 0x44,
	0x14, 0x96, 0x37, 0xdb, 0x24, 0x7b, 0x9c, 0x6c, 0x9b, 0x41, 0xdb, 0x4e, 0x10, 0x48, 0xc1, 0xfc,
	0x28, 0x42, 0x90, 0x8b, 0x14, 0xca, 0x3f, 0x65, 0x8b, 0x52, 0x11, 0x11, 0x55, 0x91, 0x83, 0x2a,
	0x55, 0x42, 0x1a, 0x26, 0xf6, 0xc4, 0x19, 0xd5, 0xb1, 0x2d, 0xcf, 0xec, 0xb2, 0x0b, 0xb7, 0x08,
	0x1e, 0x80, 0x47, 0xe0, 0x59, 0xfa, 0x02, 0xbc, 0x0c, 0x5c, 0xa2, 0xf9, 0xf1, 0x0f, 0x4e, 0x41,
	0xaa, 0xd4, 0xdc, 0xe5, 0x7c, 0xdf, 0x37, 0xf3, 0x9d, 0x73, 0x66, 0xe6, 0x38, 0x80, 0x24, 0x23,
	0x22, 0x27, 0x59, 0xce, 0x36, 0xfc, 0x6a, 0x92, 0xe5, 0xa9, 0x4c, 0xd1, 0x32, 0xe0, 0x22, 0x48,
	0x09, 0x4f, 0x05, 0xb9, 0xca, 0xc9, 0x2e, 0x8b, 0x05, 0x91, 0x8c, 0xa4, 0x19, 0xcb, 0x27, 0x36,
	0x98, 0x08, 0x16, 0xed, 0x58, 0x22, 0x49, 0x9e, 0x5e, 0x48, 0x9e, 0x44, 0x93, 0x72, 0x0b, 0xc2,
	0x93, 0x4d, 0x2a, 0x1a, 0xb1, 0xf7, 0x87, 0x03, 0x83, 0xba, 0x11, 0xf9, 0x76, 0xf6, 0x64, 0x85,
	0x5e, 0x85, 0xae, 0x36, 0x0c, 0xd2, 0x18, 0x3b, 0x23, 0x67, 0x7c, 0xe2, 0x97, 0x31, 0x7a, 0x03,
	0x7a, 0x3c, 0xca, 0x08, 0x4f, 0x84, 0xa4, 0x49, 0xc0, 0xf0, 0x91, 0xe6, 0x5d, 0x1e, 0x65, 0x73,
	0x0b, 0x21, 0x04, 0xc7, 0x34, 0x67, 0x14, 0xb7, 0x46, 0xce, 0xb8, 0xef, 0xeb, 0xdf, 0xe8, 0x36,
	0xb4, 0x8d, 0x03, 0x3e, 0xd6, 0x0b, 0x6c, 0x84, 0xde, 0x84, 0xbe, 0x75, 0x8e, 0x59, 0x12, 0xc9,
	0x2d, 0xbe, 0xa1, 0x17, 0xf5, 0x0c, 0xb8, 0xd0, 0x98, 0xf7, 0xac, 0x03, 0xbd, 0x7a, 0x96, 0xb5,
	0xdd, 0xa6, 0xff, 0xbf, 0xdb, 0xdd, 0xfd, 0xdd, 0xd0, 0xeb, 0x00, 0x56, 0x24, 0x78, 0x88, 0x3f,
	0xd0, 0x8a, 0x13, 0x83, 0xac, 0x78, 0x88, 0xde, 0x85, 0x41, 0x41, 0xcb, 0x9c, 0x07, 0x52, 0xab,
	0x3e, 0xd4, 0xaa, 0x9b, 0x56, 0xa5, 0x71, 0xa5, 0xfd, 0x11, 0xba, 0x2a, 0x29, 0x2a, 0xb7, 0x02,
	0xdf, 0x1b, 0xb5, 0xc6, 0xee, 0xf4, 0xfb, 0xc9, 0xcb, 0x3e, 0xa3, 0x89, 0xad, 0x9c, 0xca, 0xad,
	0xdf, 0x11, 0xf9, 0x52, 0x99, 0xa1, 0x9f, 0xa1, 0xab, 0x4e, 0x41, 0xb7, 0xf9, 0xa3, 0x91, 0x33,
	0x76, 0xa7, 0x3f, 0x1c, 0xca, 0xb8, 0xf0, 0xf1, 0x3b, 0x3c, 0xca, 0xce, 0xd5, 0x59, 0xfe, 0xea,
	0xc0, 0x80, 0x86, 0x97, 0x2c, 0x97, 0xfc, 0x27, 0x9e, 0x44, 0x24, 0x49, 0x43, 0x26, 0xf0, 0xc7,
	0xba, 0xfe, 0x27, 0x2f, 0x3f, 0x0d, 0xb5, 0x3d, 0xe1, 0xa1, 0x7f, 0xab, 0xe6, 0xf9, 0x48, 0x59,
	0xa2, 0xdf, 0x1d, 0xc0, 0xf6, 0x90, 0xf6, 0xf3, 0xf9, 0xe4, 0xd0, 0xf9, 0xdc, 0x36, 0xd6, 0xe7,
	0xcd, 0xac, 0xce, 0xa0, 0xbd, 0x89, 0x69, 0x44, 0x72, 0xfc, 0xe9, 0xc8, 0x19, 0x77, 0xfd, 0x1b,
	0x2a, 0xf2, 0x4b, 0x38, 0xc1, 0x9f, 0x55, 0xf0, 0xa3, 0x12, 0xce, 0xf0, 0xe7, 0x15, 0xbc, 0x2c,
	0x61, 0x86, 0xbf, 0xa8, 0xe0, 0x59, 0x09, 0x5f, 0xe2, 0x2f, 0x2b, 0xf8, 0x71, 0x09, 0xc7, 0xf8,
	0x7e, 0x05, 0x2f, 0x90, 0x07, 0x7d, 0xdb, 0x1e, 0x6b, 0xf1, 0x95, 0x66, 0x5d, 0x03, 0x3e, 0xd4,
	0x46, 0x0d, 0x0d, 0xc3, 0xe7, 0x4d, 0xcd, 0xac, 0xa9, 0xb9, 0xc4, 0x0f, 0x9a, 0x9a, 0xc7, 0x4d,
	0x4d, 0x8c, 0xbf, 0x6e, 0x6a, 0x16, 0xde, 0x5f, 0x0e, 0x9c, 0xfe, 0xfb, 0x52, 0xa1, 0x7b, 0x70,
	0xa7, 0xd1, 0x7e, 0xc2, 0x12, 0xba, 0x8e, 0x59, 0xa8, 0x27, 0x4f, 0xd7, 0x3f, 0xb3, 0xb4, 0x6f,
	0xd8, 0x99, 0x21, 0xd1, 0x7b, 0x80, 0x8a, 0xe7, 0x99, 0x6d, 0xca, 0x25, 0x47, 0x7a, 0xc9, 0x2d,
	0xc3, 0xac, 0xb2, 0x4d, 0xa1, 0x1e, 0x9a, 0xe7, 0x22, 0xaf, 0x33, 0xa6, 0xa7, 0xd2, 0x89, 0xbe,
	0xcc, 0xdf, 0x5d, 0x67, 0x6c, 0x6f, 0x9e, 0x1d, 0xef, 0xcf, 0xb3, 0x61, 0xed, 0xb1, 0x99, 0xf1,
	0x54, 0x3e, 0x85, 0x77, 0xe0, 0x66, 0x41, 0x91, 0x4d, 0x9a, 0xef, 0xa8, 0xc4, 0x6d, 0xbd, 0x41,
	0xdf, 0x2a, 0x1e, 0x6a, 0xd0, 0xfb, 0xdb, 0xa9, 0x06, 0x3a, 0xdf, 0xd1, 0xfc, 0x5a, 0xbf, 0x67,
	0xf4, 0x3e, 0xa0, 0xf4, 0x42, 0x46, 0xa9, 0x2a, 0x9b, 0x27, 0x92, 0xe5, 0x1b, 0x1a, 0x30, 0x3b,
	0x72, 0x07, 0x05, 0x33, 0x2f, 0x08, 0xf4, 0x36, 0x9c, 0x96, 0xf2, 0x98, 0xae, 0x59, 0xac, 0x0b,
	0xee, 0xfb, 0xfd, 0x02, 0x5d, 0x28, 0x10, 0x4d, 0xe1, 0xac, 0x94, 0xd9, 0x26, 0x19, 0xb5, 0x19,
	0xc8, 0xaf, 0x14, 0xa4, 0x99, 0x63, 0x66, 0xcd, 0x10, 0xba, 0x09, 0xbb, 0x92, 0x64, 0x9b, 0x66,
	0xb6, 0x05, 0x1d, 0x15, 0x7f, 0x93, 0x66, 0xe8, 0x0e, 0x74, 0x54, 0xb2, 0x84, 0x87, 0xb6, 0xfa,
	0xb6, 0x0a, 0xe7, 0x21, 0x7a, 0x0b, 0x4e, 0xd7, 0x34, 0x78, 0x7a, 0x91, 0x91, 0x82, 0x6f, 0x9b,
	0x71, 0x6b, 0xd0, 0xa5, 0x56, 0x79, 0x7f, 0x96, 0x9f, 0x98, 0x9a, 0xf8, 0x45, 0x2b, 0xaf, 0x97,
	0xa4, 0x6b, 0x11, 0x44, 0x48, 0x1a, 0x3c, 0xc5, 0x47, 0xa3, 0x56, 0xbd, 0x24, 0x5d, 0x8c, 0x58,
	0x29, 0x0a, 0xdd, 0x87, 0xd7, 0x9e, 0xdb, 0x86, 0x62, 0x69, 0x4b, 0x2f, 0x1d, 0x3e, 0xa7, 0x1b,
	0x76, 0x83, 0xff, 0xee, 0x89, 0xf7, 0xec, 0x08, 0xa0, 0x9a, 0xcb, 0xe8, 0x37, 0x07, 0x7a, 0xf5,
	0x83, 0xd5, 0x85, 0xb8, 0xd3, 0xf0, 0x60, 0x1f, 0x83, 0x9a, 0x97, 0xef, 0xda, 0x48, 0xf5, 0x1b,
	0xfd, 0xe2, 0x80, 0x5b, 0xeb, 0xb3, 0xbe, 0x20, 0xee, 0x34, 0x38, 0x54, 0x22, 0x35, 0x2b, 0x1f,
	0xaa, 0x63, 0x57, 0xef, 0x62, 0x4b, 0x45, 0x9d, 0xd6, 0x97, 0xaf, 0xeb, 0xf7, 0xb7, 0x54, 0x3c,
	0x28, 0x75, 0x9e, 0x07, 0x1d, 0x3b, 0x4e, 0xd5, 0x35, 0xb3, 0x3f, 0xed, 0x35, 0x68, 0xab, 0x70,
	0x1e, 0xae, 0xdb, 0xfa, 0xbf, 0xc7, 0xdd, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x4c, 0xa4, 0x86,
	0x9e, 0x12, 0x09, 0x00, 0x00,
}
