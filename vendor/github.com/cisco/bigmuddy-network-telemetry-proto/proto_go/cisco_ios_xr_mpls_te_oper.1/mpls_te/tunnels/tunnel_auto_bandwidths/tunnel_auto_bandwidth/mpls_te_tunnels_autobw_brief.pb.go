// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mpls_te_tunnels_autobw_brief.proto

package cisco_ios_xr_mpls_te_oper_mpls_te_tunnels_tunnel_auto_bandwidths_tunnel_auto_bandwidth

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// MPLS TE Tunnel AutoBandwidth Brief Information
type MplsTeTunnelsAutobwBrief_KEYS struct {
	TunnelName           string   `protobuf:"bytes,1,opt,name=tunnel_name,json=tunnelName" json:"tunnel_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeTunnelsAutobwBrief_KEYS) Reset()         { *m = MplsTeTunnelsAutobwBrief_KEYS{} }
func (m *MplsTeTunnelsAutobwBrief_KEYS) String() string { return proto.CompactTextString(m) }
func (*MplsTeTunnelsAutobwBrief_KEYS) ProtoMessage()    {}
func (*MplsTeTunnelsAutobwBrief_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_tunnels_autobw_brief_1791798796e0edfe, []int{0}
}
func (m *MplsTeTunnelsAutobwBrief_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeTunnelsAutobwBrief_KEYS.Unmarshal(m, b)
}
func (m *MplsTeTunnelsAutobwBrief_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeTunnelsAutobwBrief_KEYS.Marshal(b, m, deterministic)
}
func (dst *MplsTeTunnelsAutobwBrief_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeTunnelsAutobwBrief_KEYS.Merge(dst, src)
}
func (m *MplsTeTunnelsAutobwBrief_KEYS) XXX_Size() int {
	return xxx_messageInfo_MplsTeTunnelsAutobwBrief_KEYS.Size(m)
}
func (m *MplsTeTunnelsAutobwBrief_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeTunnelsAutobwBrief_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeTunnelsAutobwBrief_KEYS proto.InternalMessageInfo

func (m *MplsTeTunnelsAutobwBrief_KEYS) GetTunnelName() string {
	if m != nil {
		return m.TunnelName
	}
	return ""
}

type MplsTeTunnelsAutobwBrief struct {
	// Tunnel name
	TunnelName string `protobuf:"bytes,50,opt,name=tunnel_name,json=tunnelName" json:"tunnel_name,omitempty"`
	// Tunnel signaled name
	SignaledName string `protobuf:"bytes,51,opt,name=signaled_name,json=signaledName" json:"signaled_name,omitempty"`
	// Tunnel Lsp Id
	TunnelLspId uint32 `protobuf:"varint,52,opt,name=tunnel_lsp_id,json=tunnelLspId" json:"tunnel_lsp_id,omitempty"`
	// Tunnels's AutoBandwidth Status information
	AutoBandwidthStatus *MplsTeTunnelsAutobwStatus `protobuf:"bytes,53,opt,name=auto_bandwidth_status,json=autoBandwidthStatus" json:"auto_bandwidth_status,omitempty"`
	// Total number of bandwidth applications requested by auto-bw
	BandwidthApplications uint32 `protobuf:"varint,54,opt,name=bandwidth_applications,json=bandwidthApplications" json:"bandwidth_applications,omitempty"`
	// Last bandwidth requested by auto-bw for the tunnel
	LastBandwidthApplied uint32 `protobuf:"varint,55,opt,name=last_bandwidth_applied,json=lastBandwidthApplied" json:"last_bandwidth_applied,omitempty"`
	// Requested Bandwidth for the tunnel
	TunnelRequestedBandwidth uint32 `protobuf:"varint,56,opt,name=tunnel_requested_bandwidth,json=tunnelRequestedBandwidth" json:"tunnel_requested_bandwidth,omitempty"`
	// Signalled bandwidth for the tunnel
	SignalledBandwidth uint32 `protobuf:"varint,57,opt,name=signalled_bandwidth,json=signalledBandwidth" json:"signalled_bandwidth,omitempty"`
	// Highest bandwidth registered within current application period
	HighestBandwidth uint32 `protobuf:"varint,58,opt,name=highest_bandwidth,json=highestBandwidth" json:"highest_bandwidth,omitempty"`
	// Last sample bandwidth collected
	LastSampleBandwidth uint32 `protobuf:"varint,59,opt,name=last_sample_bandwidth,json=lastSampleBandwidth" json:"last_sample_bandwidth,omitempty"`
	// Number of samples collected within current application period
	SamplesCollected uint32 `protobuf:"varint,60,opt,name=samples_collected,json=samplesCollected" json:"samples_collected,omitempty"`
	// Time left until next auto-bw application algorithm is performed
	TimeLeftApplication  uint32   `protobuf:"varint,61,opt,name=time_left_application,json=timeLeftApplication" json:"time_left_application,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeTunnelsAutobwBrief) Reset()         { *m = MplsTeTunnelsAutobwBrief{} }
func (m *MplsTeTunnelsAutobwBrief) String() string { return proto.CompactTextString(m) }
func (*MplsTeTunnelsAutobwBrief) ProtoMessage()    {}
func (*MplsTeTunnelsAutobwBrief) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_tunnels_autobw_brief_1791798796e0edfe, []int{1}
}
func (m *MplsTeTunnelsAutobwBrief) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeTunnelsAutobwBrief.Unmarshal(m, b)
}
func (m *MplsTeTunnelsAutobwBrief) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeTunnelsAutobwBrief.Marshal(b, m, deterministic)
}
func (dst *MplsTeTunnelsAutobwBrief) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeTunnelsAutobwBrief.Merge(dst, src)
}
func (m *MplsTeTunnelsAutobwBrief) XXX_Size() int {
	return xxx_messageInfo_MplsTeTunnelsAutobwBrief.Size(m)
}
func (m *MplsTeTunnelsAutobwBrief) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeTunnelsAutobwBrief.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeTunnelsAutobwBrief proto.InternalMessageInfo

func (m *MplsTeTunnelsAutobwBrief) GetTunnelName() string {
	if m != nil {
		return m.TunnelName
	}
	return ""
}

func (m *MplsTeTunnelsAutobwBrief) GetSignaledName() string {
	if m != nil {
		return m.SignaledName
	}
	return ""
}

func (m *MplsTeTunnelsAutobwBrief) GetTunnelLspId() uint32 {
	if m != nil {
		return m.TunnelLspId
	}
	return 0
}

func (m *MplsTeTunnelsAutobwBrief) GetAutoBandwidthStatus() *MplsTeTunnelsAutobwStatus {
	if m != nil {
		return m.AutoBandwidthStatus
	}
	return nil
}

func (m *MplsTeTunnelsAutobwBrief) GetBandwidthApplications() uint32 {
	if m != nil {
		return m.BandwidthApplications
	}
	return 0
}

func (m *MplsTeTunnelsAutobwBrief) GetLastBandwidthApplied() uint32 {
	if m != nil {
		return m.LastBandwidthApplied
	}
	return 0
}

func (m *MplsTeTunnelsAutobwBrief) GetTunnelRequestedBandwidth() uint32 {
	if m != nil {
		return m.TunnelRequestedBandwidth
	}
	return 0
}

func (m *MplsTeTunnelsAutobwBrief) GetSignalledBandwidth() uint32 {
	if m != nil {
		return m.SignalledBandwidth
	}
	return 0
}

func (m *MplsTeTunnelsAutobwBrief) GetHighestBandwidth() uint32 {
	if m != nil {
		return m.HighestBandwidth
	}
	return 0
}

func (m *MplsTeTunnelsAutobwBrief) GetLastSampleBandwidth() uint32 {
	if m != nil {
		return m.LastSampleBandwidth
	}
	return 0
}

func (m *MplsTeTunnelsAutobwBrief) GetSamplesCollected() uint32 {
	if m != nil {
		return m.SamplesCollected
	}
	return 0
}

func (m *MplsTeTunnelsAutobwBrief) GetTimeLeftApplication() uint32 {
	if m != nil {
		return m.TimeLeftApplication
	}
	return 0
}

// MPLS TE Tunnel AutoBandwidth Status Information
type MplsTeTunnelsAutobwStatus struct {
	// TRUE if auto-bw is enabled for the tunnel
	IsAutoBandwidthEnabled bool `protobuf:"varint,1,opt,name=is_auto_bandwidth_enabled,json=isAutoBandwidthEnabled" json:"is_auto_bandwidth_enabled,omitempty"`
	// Time until auto-bw gets activated if activation has been delayed due to failover
	ReactivationTime     uint32   `protobuf:"varint,2,opt,name=reactivation_time,json=reactivationTime" json:"reactivation_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeTunnelsAutobwStatus) Reset()         { *m = MplsTeTunnelsAutobwStatus{} }
func (m *MplsTeTunnelsAutobwStatus) String() string { return proto.CompactTextString(m) }
func (*MplsTeTunnelsAutobwStatus) ProtoMessage()    {}
func (*MplsTeTunnelsAutobwStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_tunnels_autobw_brief_1791798796e0edfe, []int{2}
}
func (m *MplsTeTunnelsAutobwStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeTunnelsAutobwStatus.Unmarshal(m, b)
}
func (m *MplsTeTunnelsAutobwStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeTunnelsAutobwStatus.Marshal(b, m, deterministic)
}
func (dst *MplsTeTunnelsAutobwStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeTunnelsAutobwStatus.Merge(dst, src)
}
func (m *MplsTeTunnelsAutobwStatus) XXX_Size() int {
	return xxx_messageInfo_MplsTeTunnelsAutobwStatus.Size(m)
}
func (m *MplsTeTunnelsAutobwStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeTunnelsAutobwStatus.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeTunnelsAutobwStatus proto.InternalMessageInfo

func (m *MplsTeTunnelsAutobwStatus) GetIsAutoBandwidthEnabled() bool {
	if m != nil {
		return m.IsAutoBandwidthEnabled
	}
	return false
}

func (m *MplsTeTunnelsAutobwStatus) GetReactivationTime() uint32 {
	if m != nil {
		return m.ReactivationTime
	}
	return 0
}

func init() {
	proto.RegisterType((*MplsTeTunnelsAutobwBrief_KEYS)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.tunnels.tunnel_auto_bandwidths.tunnel_auto_bandwidth.mpls_te_tunnels_autobw_brief_KEYS")
	proto.RegisterType((*MplsTeTunnelsAutobwBrief)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.tunnels.tunnel_auto_bandwidths.tunnel_auto_bandwidth.mpls_te_tunnels_autobw_brief")
	proto.RegisterType((*MplsTeTunnelsAutobwStatus)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te.tunnels.tunnel_auto_bandwidths.tunnel_auto_bandwidth.mpls_te_tunnels_autobw_status")
}

func init() {
	proto.RegisterFile("mpls_te_tunnels_autobw_brief.proto", fileDescriptor_mpls_te_tunnels_autobw_brief_1791798796e0edfe)
}

var fileDescriptor_mpls_te_tunnels_autobw_brief_1791798796e0edfe = []byte{
	// 464 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0x4f, 0x8b, 0xd3, 0x40,
	0x14, 0x27, 0x82, 0xa2, 0xb3, 0x16, 0x74, 0x6a, 0xcb, 0x28, 0x8a, 0x35, 0x5e, 0x0a, 0x42, 0x84,
	0xee, 0xae, 0xba, 0xba, 0x1e, 0x76, 0x75, 0x0f, 0xe2, 0xe2, 0x21, 0x15, 0xc1, 0xd3, 0x30, 0xc9,
	0xbc, 0x6e, 0x07, 0x26, 0xc9, 0x98, 0x37, 0x71, 0xfd, 0x06, 0x7e, 0x16, 0xbf, 0x8e, 0x9f, 0x48,
	0x32, 0x33, 0x69, 0xd3, 0x42, 0x7b, 0xf3, 0x14, 0xe6, 0xfd, 0xfe, 0xbd, 0x37, 0x2f, 0x09, 0x89,
	0x0b, 0xa3, 0x91, 0x5b, 0xe0, 0xb6, 0x29, 0x4b, 0xd0, 0xc8, 0x45, 0x63, 0xab, 0xec, 0x9a, 0x67,
	0xb5, 0x82, 0x45, 0x62, 0xea, 0xca, 0x56, 0xf4, 0x5b, 0xae, 0x30, 0xaf, 0xb8, 0xaa, 0x90, 0xff,
	0xaa, 0x79, 0x27, 0xa8, 0x0c, 0xd4, 0x49, 0x38, 0x24, 0x41, 0x1d, 0x9e, 0xce, 0x84, 0x67, 0xa2,
	0x94, 0xd7, 0x4a, 0xda, 0xe5, 0x8e, 0x72, 0xfc, 0x91, 0x3c, 0xdb, 0x97, 0xce, 0x3f, 0x5f, 0x7c,
	0x9f, 0xd3, 0xa7, 0xe4, 0x20, 0xa8, 0x4b, 0x51, 0x00, 0x8b, 0x26, 0xd1, 0xf4, 0x4e, 0x4a, 0x7c,
	0xe9, 0x8b, 0x28, 0x20, 0xfe, 0x7b, 0x93, 0x3c, 0xde, 0x67, 0xb3, 0xed, 0x30, 0xdb, 0x76, 0xa0,
	0xcf, 0xc9, 0x00, 0xd5, 0x55, 0x29, 0x34, 0x48, 0x4f, 0x39, 0x74, 0x94, 0xbb, 0x5d, 0xd1, 0x91,
	0x62, 0x32, 0x08, 0x2e, 0x1a, 0x0d, 0x57, 0x92, 0x1d, 0x4d, 0xa2, 0xe9, 0x20, 0x0d, 0xd6, 0x97,
	0x68, 0x3e, 0x49, 0xfa, 0x27, 0x22, 0xa3, 0xcd, 0x19, 0x39, 0x5a, 0x61, 0x1b, 0x64, 0xc7, 0x93,
	0x68, 0x7a, 0x30, 0x6b, 0x92, 0xff, 0x73, 0x93, 0xc9, 0x8e, 0xf9, 0x7d, 0x78, 0x3a, 0x6c, 0x8f,
	0xe7, 0x1d, 0x79, 0xee, 0x8a, 0xf4, 0x98, 0x8c, 0xd7, 0x5d, 0x0a, 0x63, 0xb4, 0xca, 0x85, 0x55,
	0x55, 0x89, 0xec, 0x95, 0x1b, 0x6c, 0xb4, 0x42, 0xcf, 0x7a, 0x20, 0x3d, 0x22, 0x63, 0x2d, 0xd0,
	0xf2, 0x2d, 0x2d, 0x48, 0xf6, 0xda, 0xc9, 0x1e, 0xb4, 0xe8, 0xf9, 0x86, 0x14, 0x24, 0x3d, 0x25,
	0x8f, 0x42, 0xe3, 0x35, 0xfc, 0x68, 0x00, 0x2d, 0xc8, 0xb5, 0x03, 0x7b, 0xe3, 0x94, 0xcc, 0x33,
	0xd2, 0x8e, 0xb0, 0x32, 0xa1, 0x2f, 0xc9, 0xd0, 0xaf, 0x42, 0x6f, 0xc8, 0x4e, 0x9c, 0x8c, 0xae,
	0xa0, 0xb5, 0xe0, 0x05, 0xb9, 0xbf, 0x54, 0x57, 0x4b, 0xe8, 0xf7, 0xc9, 0xde, 0x3a, 0xfa, 0xbd,
	0x00, 0xac, 0xc9, 0x33, 0x32, 0x72, 0x13, 0xa1, 0x28, 0x8c, 0x86, 0x9e, 0xe0, 0x9d, 0x13, 0x0c,
	0x5b, 0x70, 0xee, 0xb0, 0x8d, 0x00, 0x4f, 0x47, 0x9e, 0x57, 0x5a, 0x43, 0x6e, 0x41, 0xb2, 0x53,
	0x1f, 0x10, 0x80, 0x0f, 0x5d, 0xbd, 0x0d, 0xb0, 0xaa, 0x00, 0xae, 0x61, 0x61, 0xfb, 0x37, 0xcd,
	0xde, 0xfb, 0x80, 0x16, 0xbc, 0x84, 0x85, 0xed, 0xdd, 0x73, 0xfc, 0x3b, 0x22, 0x4f, 0xf6, 0x2e,
	0x95, 0x9e, 0x90, 0x87, 0x0a, 0xb7, 0xde, 0x03, 0x0e, 0xa5, 0xc8, 0x34, 0x48, 0xf7, 0x95, 0xdc,
	0x4e, 0xc7, 0x0a, 0xcf, 0xfa, 0x9b, 0xbf, 0xf0, 0x68, 0xdb, 0x7d, 0x0d, 0x22, 0xb7, 0xea, 0xa7,
	0x0b, 0xe3, 0x6d, 0x03, 0xec, 0x86, 0xef, 0xbe, 0x0f, 0x7c, 0x55, 0x05, 0x64, 0xb7, 0xdc, 0x3f,
	0xe0, 0xf0, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9c, 0xb8, 0xb0, 0xbb, 0x29, 0x04, 0x00, 0x00,
}
