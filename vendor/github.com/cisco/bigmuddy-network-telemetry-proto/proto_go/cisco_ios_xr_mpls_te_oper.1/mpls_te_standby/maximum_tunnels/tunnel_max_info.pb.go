// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tunnel_max_info.proto

package cisco_ios_xr_mpls_te_oper_mpls_te_standby_maximum_tunnels

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Tunnel maximum information bag
type TunnelMaxInfo_KEYS struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TunnelMaxInfo_KEYS) Reset()         { *m = TunnelMaxInfo_KEYS{} }
func (m *TunnelMaxInfo_KEYS) String() string { return proto.CompactTextString(m) }
func (*TunnelMaxInfo_KEYS) ProtoMessage()    {}
func (*TunnelMaxInfo_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_tunnel_max_info_a174f7c527a35307, []int{0}
}
func (m *TunnelMaxInfo_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TunnelMaxInfo_KEYS.Unmarshal(m, b)
}
func (m *TunnelMaxInfo_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TunnelMaxInfo_KEYS.Marshal(b, m, deterministic)
}
func (dst *TunnelMaxInfo_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TunnelMaxInfo_KEYS.Merge(dst, src)
}
func (m *TunnelMaxInfo_KEYS) XXX_Size() int {
	return xxx_messageInfo_TunnelMaxInfo_KEYS.Size(m)
}
func (m *TunnelMaxInfo_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_TunnelMaxInfo_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_TunnelMaxInfo_KEYS proto.InternalMessageInfo

type TunnelMaxInfo struct {
	// Current Maximum Tunnels
	CurrentMaximumTunnels uint32 `protobuf:"varint,50,opt,name=current_maximum_tunnels,json=currentMaximumTunnels" json:"current_maximum_tunnels,omitempty"`
	// Current Maximum Destinations
	CurrentMaximumDestinations uint32 `protobuf:"varint,51,opt,name=current_maximum_destinations,json=currentMaximumDestinations" json:"current_maximum_destinations,omitempty"`
	// Current Maximum P2MP Tunnel Count
	CurrentMaximumP2MpTunnels uint32 `protobuf:"varint,52,opt,name=current_maximum_p2_mp_tunnels,json=currentMaximumP2MpTunnels" json:"current_maximum_p2_mp_tunnels,omitempty"`
	// Current Maximum P2MP Destinations Per Tunnel Count
	CurrentMaximumP2MpDestnationPerTunnel uint32 `protobuf:"varint,53,opt,name=current_maximum_p2_mp_destnation_per_tunnel,json=currentMaximumP2MpDestnationPerTunnel" json:"current_maximum_p2_mp_destnation_per_tunnel,omitempty"`
	// Absolute Maximum
	AbsoluteMaximum uint32 `protobuf:"varint,54,opt,name=absolute_maximum,json=absoluteMaximum" json:"absolute_maximum,omitempty"`
	// Current Maximum Autotunnel Backups Allowed
	CurrentMaximumAutobackups uint32 `protobuf:"varint,55,opt,name=current_maximum_autobackups,json=currentMaximumAutobackups" json:"current_maximum_autobackups,omitempty"`
	// Current Maximum Autotunnel Mesh Allowed
	CurrentMaximumAutoMesh uint32 `protobuf:"varint,56,opt,name=current_maximum_auto_mesh,json=currentMaximumAutoMesh" json:"current_maximum_auto_mesh,omitempty"`
	// Current tunnel count
	CurrentTunnelCount uint32 `protobuf:"varint,57,opt,name=current_tunnel_count,json=currentTunnelCount" json:"current_tunnel_count,omitempty"`
	// Current Destination Count
	CurrentDestinationCount uint32 `protobuf:"varint,58,opt,name=current_destination_count,json=currentDestinationCount" json:"current_destination_count,omitempty"`
	// Current P2MP tunnel count
	CurrentP2MpTunnelCount uint32 `protobuf:"varint,59,opt,name=current_p2_mp_tunnel_count,json=currentP2MpTunnelCount" json:"current_p2_mp_tunnel_count,omitempty"`
	// Current P2MP Destination per tunnel count
	CurrentP2MpDestnationPerTunnelCount uint32 `protobuf:"varint,60,opt,name=current_p2_mp_destnation_per_tunnel_count,json=currentP2MpDestnationPerTunnelCount" json:"current_p2_mp_destnation_per_tunnel_count,omitempty"`
	// TRUE if the autobackup range is configured
	IsAutobackupRangeConfigured bool `protobuf:"varint,61,opt,name=is_autobackup_range_configured,json=isAutobackupRangeConfigured" json:"is_autobackup_range_configured,omitempty"`
	// Current Autotunnel Backup count
	CurrentAutobackups uint32 `protobuf:"varint,62,opt,name=current_autobackups,json=currentAutobackups" json:"current_autobackups,omitempty"`
	// TRUE if the automesh range is configured
	IsAutoMeshRangeConfigured bool `protobuf:"varint,63,opt,name=is_auto_mesh_range_configured,json=isAutoMeshRangeConfigured" json:"is_auto_mesh_range_configured,omitempty"`
	// Current Autotunnel Mesh count
	CurrentAutoMesh uint32 `protobuf:"varint,64,opt,name=current_auto_mesh,json=currentAutoMesh" json:"current_auto_mesh,omitempty"`
	// Current Maximum GMPLS-UNI Tunnel Count
	CurrentMaximumGmplsUniTunnels uint32 `protobuf:"varint,65,opt,name=current_maximum_gmpls_uni_tunnels,json=currentMaximumGmplsUniTunnels" json:"current_maximum_gmpls_uni_tunnels,omitempty"`
	// Current GMPLS-UNI tunnel count
	CurrentGmplsUni      uint32   `protobuf:"varint,66,opt,name=current_gmpls_uni,json=currentGmplsUni" json:"current_gmpls_uni,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TunnelMaxInfo) Reset()         { *m = TunnelMaxInfo{} }
func (m *TunnelMaxInfo) String() string { return proto.CompactTextString(m) }
func (*TunnelMaxInfo) ProtoMessage()    {}
func (*TunnelMaxInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_tunnel_max_info_a174f7c527a35307, []int{1}
}
func (m *TunnelMaxInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TunnelMaxInfo.Unmarshal(m, b)
}
func (m *TunnelMaxInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TunnelMaxInfo.Marshal(b, m, deterministic)
}
func (dst *TunnelMaxInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TunnelMaxInfo.Merge(dst, src)
}
func (m *TunnelMaxInfo) XXX_Size() int {
	return xxx_messageInfo_TunnelMaxInfo.Size(m)
}
func (m *TunnelMaxInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TunnelMaxInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TunnelMaxInfo proto.InternalMessageInfo

func (m *TunnelMaxInfo) GetCurrentMaximumTunnels() uint32 {
	if m != nil {
		return m.CurrentMaximumTunnels
	}
	return 0
}

func (m *TunnelMaxInfo) GetCurrentMaximumDestinations() uint32 {
	if m != nil {
		return m.CurrentMaximumDestinations
	}
	return 0
}

func (m *TunnelMaxInfo) GetCurrentMaximumP2MpTunnels() uint32 {
	if m != nil {
		return m.CurrentMaximumP2MpTunnels
	}
	return 0
}

func (m *TunnelMaxInfo) GetCurrentMaximumP2MpDestnationPerTunnel() uint32 {
	if m != nil {
		return m.CurrentMaximumP2MpDestnationPerTunnel
	}
	return 0
}

func (m *TunnelMaxInfo) GetAbsoluteMaximum() uint32 {
	if m != nil {
		return m.AbsoluteMaximum
	}
	return 0
}

func (m *TunnelMaxInfo) GetCurrentMaximumAutobackups() uint32 {
	if m != nil {
		return m.CurrentMaximumAutobackups
	}
	return 0
}

func (m *TunnelMaxInfo) GetCurrentMaximumAutoMesh() uint32 {
	if m != nil {
		return m.CurrentMaximumAutoMesh
	}
	return 0
}

func (m *TunnelMaxInfo) GetCurrentTunnelCount() uint32 {
	if m != nil {
		return m.CurrentTunnelCount
	}
	return 0
}

func (m *TunnelMaxInfo) GetCurrentDestinationCount() uint32 {
	if m != nil {
		return m.CurrentDestinationCount
	}
	return 0
}

func (m *TunnelMaxInfo) GetCurrentP2MpTunnelCount() uint32 {
	if m != nil {
		return m.CurrentP2MpTunnelCount
	}
	return 0
}

func (m *TunnelMaxInfo) GetCurrentP2MpDestnationPerTunnelCount() uint32 {
	if m != nil {
		return m.CurrentP2MpDestnationPerTunnelCount
	}
	return 0
}

func (m *TunnelMaxInfo) GetIsAutobackupRangeConfigured() bool {
	if m != nil {
		return m.IsAutobackupRangeConfigured
	}
	return false
}

func (m *TunnelMaxInfo) GetCurrentAutobackups() uint32 {
	if m != nil {
		return m.CurrentAutobackups
	}
	return 0
}

func (m *TunnelMaxInfo) GetIsAutoMeshRangeConfigured() bool {
	if m != nil {
		return m.IsAutoMeshRangeConfigured
	}
	return false
}

func (m *TunnelMaxInfo) GetCurrentAutoMesh() uint32 {
	if m != nil {
		return m.CurrentAutoMesh
	}
	return 0
}

func (m *TunnelMaxInfo) GetCurrentMaximumGmplsUniTunnels() uint32 {
	if m != nil {
		return m.CurrentMaximumGmplsUniTunnels
	}
	return 0
}

func (m *TunnelMaxInfo) GetCurrentGmplsUni() uint32 {
	if m != nil {
		return m.CurrentGmplsUni
	}
	return 0
}

func init() {
	proto.RegisterType((*TunnelMaxInfo_KEYS)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.maximum_tunnels.tunnel_max_info_KEYS")
	proto.RegisterType((*TunnelMaxInfo)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.maximum_tunnels.tunnel_max_info")
}

func init() {
	proto.RegisterFile("tunnel_max_info.proto", fileDescriptor_tunnel_max_info_a174f7c527a35307)
}

var fileDescriptor_tunnel_max_info_a174f7c527a35307 = []byte{
	// 485 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x94, 0xdb, 0x6b, 0x13, 0x41,
	0x14, 0xc6, 0xe9, 0x8b, 0x94, 0x03, 0x52, 0x1d, 0xdb, 0x3a, 0xb1, 0x46, 0x6a, 0x45, 0x68, 0x15,
	0xa2, 0xa4, 0x5a, 0x4d, 0xd5, 0x9a, 0x9a, 0x8a, 0x82, 0x04, 0x4a, 0xbc, 0x80, 0xbe, 0x0c, 0x9b,
	0xcd, 0x34, 0x1d, 0xcc, 0xce, 0x2c, 0x73, 0x81, 0xf8, 0x37, 0xf9, 0x4f, 0x96, 0x9d, 0xcb, 0x66,
	0x76, 0xb2, 0x8f, 0xc9, 0x39, 0xdf, 0xef, 0x3b, 0x3b, 0xdf, 0x99, 0x81, 0x1d, 0x6d, 0x38, 0xa7,
	0x0b, 0x52, 0x64, 0x4b, 0xc2, 0xf8, 0x95, 0xe8, 0x95, 0x52, 0x68, 0x81, 0x06, 0x39, 0x53, 0xb9,
	0x20, 0x4c, 0x28, 0xb2, 0x94, 0xa4, 0x28, 0x17, 0x8a, 0x68, 0x4a, 0x44, 0x49, 0x65, 0x2f, 0xfc,
	0x50, 0x3a, 0xe3, 0xb3, 0xe9, 0xbf, 0x5e, 0x91, 0x2d, 0x59, 0x61, 0x0a, 0xe2, 0x40, 0xea, 0x60,
	0x17, 0xb6, 0x13, 0x26, 0xf9, 0xf6, 0xf9, 0xf7, 0xf7, 0x83, 0xff, 0x9b, 0xb0, 0x95, 0x14, 0xd0,
	0x09, 0xdc, 0xcf, 0x8d, 0x94, 0x94, 0x6b, 0x92, 0x60, 0x70, 0x7f, 0x7f, 0xe3, 0xf0, 0xf6, 0x64,
	0xc7, 0x97, 0xc7, 0xae, 0xfa, 0xc3, 0x15, 0xd1, 0x10, 0x1e, 0xa6, 0xba, 0x19, 0x55, 0x9a, 0xf1,
	0x4c, 0x33, 0xc1, 0x15, 0x3e, 0xb6, 0xe2, 0x07, 0x4d, 0xf1, 0x45, 0xd4, 0x81, 0x86, 0xd0, 0x4d,
	0x09, 0x65, 0x9f, 0x14, 0x65, 0xed, 0xff, 0xca, 0x22, 0x3a, 0x4d, 0xc4, 0x65, 0x7f, 0x5c, 0x86,
	0x19, 0xfe, 0xc0, 0xf3, 0x76, 0x42, 0x35, 0x89, 0xb3, 0x21, 0x25, 0x95, 0x1e, 0x88, 0x5f, 0x5b,
	0xde, 0xd3, 0x75, 0xde, 0x45, 0xdd, 0x7e, 0x49, 0xa5, 0x83, 0xa3, 0x23, 0xb8, 0x93, 0x4d, 0x95,
	0x58, 0x18, 0x4d, 0x03, 0x1c, 0x9f, 0x58, 0xc0, 0x56, 0xf8, 0xdf, 0x13, 0xd0, 0x19, 0xec, 0xa5,
	0x63, 0x64, 0x46, 0x8b, 0x69, 0x96, 0xff, 0x35, 0xa5, 0xc2, 0x6f, 0xda, 0x3e, 0xe3, 0x7c, 0xd5,
	0x80, 0x06, 0xd0, 0x69, 0xd3, 0x93, 0x82, 0xaa, 0x6b, 0xfc, 0xd6, 0xaa, 0x77, 0xd7, 0xd5, 0x63,
	0xaa, 0xae, 0xd1, 0x4b, 0xd8, 0x0e, 0x52, 0x1f, 0x6c, 0x2e, 0x0c, 0xd7, 0x78, 0x60, 0x55, 0xc8,
	0xd7, 0xdc, 0x27, 0x8d, 0xaa, 0x0a, 0x3a, 0x5d, 0x99, 0x45, 0x79, 0x79, 0xd9, 0xa9, 0x95, 0x85,
	0x85, 0x88, 0xd2, 0x0a, 0xda, 0x90, 0x67, 0x23, 0x29, 0x2f, 0x7e, 0xd7, 0x98, 0x74, 0x95, 0x93,
	0xd3, 0xfe, 0x82, 0xa3, 0xa6, 0xb6, 0x35, 0x23, 0x8f, 0x7a, 0x6f, 0x51, 0x4f, 0x22, 0x54, 0x4b,
	0x44, 0x8e, 0x3b, 0x82, 0x47, 0x4c, 0x45, 0xe7, 0x4d, 0x64, 0xc6, 0xe7, 0x94, 0xe4, 0x82, 0x5f,
	0xb1, 0xb9, 0x91, 0x74, 0x86, 0x3f, 0xec, 0x6f, 0x1c, 0x6e, 0x4e, 0xf6, 0x98, 0x5a, 0x9d, 0xf9,
	0xa4, 0xea, 0x19, 0xd5, 0x2d, 0xe8, 0x05, 0xdc, 0x0b, 0xc3, 0xc5, 0xc9, 0x9d, 0x35, 0x4e, 0x31,
	0x8e, 0x6c, 0x08, 0x5d, 0xef, 0x6a, 0x53, 0x5a, 0x37, 0xfd, 0x68, 0x4d, 0x3b, 0xce, 0xb4, 0x8a,
	0x2a, 0xb5, 0x7c, 0x06, 0x77, 0x63, 0x4b, 0x17, 0xf6, 0xd0, 0x2d, 0x58, 0x64, 0x68, 0x53, 0xfe,
	0x0a, 0x8f, 0xd3, 0x05, 0x99, 0xdb, 0x37, 0xc0, 0x70, 0x56, 0xdf, 0x96, 0x73, 0xab, 0xed, 0x36,
	0x17, 0xe5, 0x4b, 0xd5, 0xf6, 0x93, 0xb3, 0x70, 0x63, 0x22, 0xd7, 0x9a, 0x80, 0x3f, 0x35, 0x5c,
	0x83, 0x64, 0x7a, 0xcb, 0xbe, 0x43, 0xc7, 0x37, 0x01, 0x00, 0x00, 0xff, 0xff, 0x63, 0x39, 0x02,
	0x53, 0xa0, 0x04, 0x00, 0x00,
}
