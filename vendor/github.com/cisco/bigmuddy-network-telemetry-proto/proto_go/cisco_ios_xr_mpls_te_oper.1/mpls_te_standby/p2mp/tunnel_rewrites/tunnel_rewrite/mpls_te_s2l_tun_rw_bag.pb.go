// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mpls_te_s2l_tun_rw_bag.proto

package cisco_ios_xr_mpls_te_oper_mpls_te_standby_p2mp_tunnel_rewrites_tunnel_rewrite

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// LMRIB S2L Tunnel rewrite
type MplsTeS2LTunRwBag_KEYS struct {
	TunnelId             uint32   `protobuf:"varint,1,opt,name=tunnel_id,json=tunnelId" json:"tunnel_id,omitempty"`
	LspId                uint32   `protobuf:"varint,2,opt,name=lsp_id,json=lspId" json:"lsp_id,omitempty"`
	CType                string   `protobuf:"bytes,3,opt,name=c_type,json=cType" json:"c_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeS2LTunRwBag_KEYS) Reset()         { *m = MplsTeS2LTunRwBag_KEYS{} }
func (m *MplsTeS2LTunRwBag_KEYS) String() string { return proto.CompactTextString(m) }
func (*MplsTeS2LTunRwBag_KEYS) ProtoMessage()    {}
func (*MplsTeS2LTunRwBag_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_s2l_tun_rw_bag_97c6be4b51eb98fd, []int{0}
}
func (m *MplsTeS2LTunRwBag_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeS2LTunRwBag_KEYS.Unmarshal(m, b)
}
func (m *MplsTeS2LTunRwBag_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeS2LTunRwBag_KEYS.Marshal(b, m, deterministic)
}
func (dst *MplsTeS2LTunRwBag_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeS2LTunRwBag_KEYS.Merge(dst, src)
}
func (m *MplsTeS2LTunRwBag_KEYS) XXX_Size() int {
	return xxx_messageInfo_MplsTeS2LTunRwBag_KEYS.Size(m)
}
func (m *MplsTeS2LTunRwBag_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeS2LTunRwBag_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeS2LTunRwBag_KEYS proto.InternalMessageInfo

func (m *MplsTeS2LTunRwBag_KEYS) GetTunnelId() uint32 {
	if m != nil {
		return m.TunnelId
	}
	return 0
}

func (m *MplsTeS2LTunRwBag_KEYS) GetLspId() uint32 {
	if m != nil {
		return m.LspId
	}
	return 0
}

func (m *MplsTeS2LTunRwBag_KEYS) GetCType() string {
	if m != nil {
		return m.CType
	}
	return ""
}

type MplsTeS2LTunRwBag struct {
	// Tunnel interface name
	TunnelInterface string `protobuf:"bytes,50,opt,name=tunnel_interface,json=tunnelInterface" json:"tunnel_interface,omitempty"`
	// Tunnel signaled-name
	TunnelSignalName string `protobuf:"bytes,51,opt,name=tunnel_signal_name,json=tunnelSignalName" json:"tunnel_signal_name,omitempty"`
	// Successful rewrite details
	SuccessfulRewrite *TeS2LTunRwFieldsBag `protobuf:"bytes,52,opt,name=successful_rewrite,json=successfulRewrite" json:"successful_rewrite,omitempty"`
	// Failed rewrite details
	FailedRewrite *TeS2LTunRwFieldsBag `protobuf:"bytes,53,opt,name=failed_rewrite,json=failedRewrite" json:"failed_rewrite,omitempty"`
	// Pending rewrite details
	PendingRewrite *TeS2LTunRwFieldsBag `protobuf:"bytes,54,opt,name=pending_rewrite,json=pendingRewrite" json:"pending_rewrite,omitempty"`
	// TRUE if the s2l path is Segment-Routing
	IsSegmentRouting     bool     `protobuf:"varint,55,opt,name=is_segment_routing,json=isSegmentRouting" json:"is_segment_routing,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeS2LTunRwBag) Reset()         { *m = MplsTeS2LTunRwBag{} }
func (m *MplsTeS2LTunRwBag) String() string { return proto.CompactTextString(m) }
func (*MplsTeS2LTunRwBag) ProtoMessage()    {}
func (*MplsTeS2LTunRwBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_s2l_tun_rw_bag_97c6be4b51eb98fd, []int{1}
}
func (m *MplsTeS2LTunRwBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeS2LTunRwBag.Unmarshal(m, b)
}
func (m *MplsTeS2LTunRwBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeS2LTunRwBag.Marshal(b, m, deterministic)
}
func (dst *MplsTeS2LTunRwBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeS2LTunRwBag.Merge(dst, src)
}
func (m *MplsTeS2LTunRwBag) XXX_Size() int {
	return xxx_messageInfo_MplsTeS2LTunRwBag.Size(m)
}
func (m *MplsTeS2LTunRwBag) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeS2LTunRwBag.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeS2LTunRwBag proto.InternalMessageInfo

func (m *MplsTeS2LTunRwBag) GetTunnelInterface() string {
	if m != nil {
		return m.TunnelInterface
	}
	return ""
}

func (m *MplsTeS2LTunRwBag) GetTunnelSignalName() string {
	if m != nil {
		return m.TunnelSignalName
	}
	return ""
}

func (m *MplsTeS2LTunRwBag) GetSuccessfulRewrite() *TeS2LTunRwFieldsBag {
	if m != nil {
		return m.SuccessfulRewrite
	}
	return nil
}

func (m *MplsTeS2LTunRwBag) GetFailedRewrite() *TeS2LTunRwFieldsBag {
	if m != nil {
		return m.FailedRewrite
	}
	return nil
}

func (m *MplsTeS2LTunRwBag) GetPendingRewrite() *TeS2LTunRwFieldsBag {
	if m != nil {
		return m.PendingRewrite
	}
	return nil
}

func (m *MplsTeS2LTunRwBag) GetIsSegmentRouting() bool {
	if m != nil {
		return m.IsSegmentRouting
	}
	return false
}

// Output rewrite tunnel information
type TeS2LOutputRwOutputInfoBag struct {
	// Physical interface associated with the entry
	PhysicaInterfaceName string `protobuf:"bytes,1,opt,name=physica_interface_name,json=physicaInterfaceName" json:"physica_interface_name,omitempty"`
	// Interface handle of the associated tunnel
	TunnelInterfaceName string `protobuf:"bytes,2,opt,name=tunnel_interface_name,json=tunnelInterfaceName" json:"tunnel_interface_name,omitempty"`
	// Interface name of the parent intf
	ParentInterfaceName string `protobuf:"bytes,3,opt,name=parent_interface_name,json=parentInterfaceName" json:"parent_interface_name,omitempty"`
	// Next hop address associated with the entry
	NextHopAddress string `protobuf:"bytes,4,opt,name=next_hop_address,json=nextHopAddress" json:"next_hop_address,omitempty"`
	// Output label associated with the entry
	OutLabel uint32 `protobuf:"varint,5,opt,name=out_label,json=outLabel" json:"out_label,omitempty"`
	// Segment-Routing labels stack
	SrLabelStack         []uint32 `protobuf:"varint,6,rep,packed,name=sr_label_stack,json=srLabelStack" json:"sr_label_stack,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeS2LOutputRwOutputInfoBag) Reset()         { *m = TeS2LOutputRwOutputInfoBag{} }
func (m *TeS2LOutputRwOutputInfoBag) String() string { return proto.CompactTextString(m) }
func (*TeS2LOutputRwOutputInfoBag) ProtoMessage()    {}
func (*TeS2LOutputRwOutputInfoBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_s2l_tun_rw_bag_97c6be4b51eb98fd, []int{2}
}
func (m *TeS2LOutputRwOutputInfoBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeS2LOutputRwOutputInfoBag.Unmarshal(m, b)
}
func (m *TeS2LOutputRwOutputInfoBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeS2LOutputRwOutputInfoBag.Marshal(b, m, deterministic)
}
func (dst *TeS2LOutputRwOutputInfoBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeS2LOutputRwOutputInfoBag.Merge(dst, src)
}
func (m *TeS2LOutputRwOutputInfoBag) XXX_Size() int {
	return xxx_messageInfo_TeS2LOutputRwOutputInfoBag.Size(m)
}
func (m *TeS2LOutputRwOutputInfoBag) XXX_DiscardUnknown() {
	xxx_messageInfo_TeS2LOutputRwOutputInfoBag.DiscardUnknown(m)
}

var xxx_messageInfo_TeS2LOutputRwOutputInfoBag proto.InternalMessageInfo

func (m *TeS2LOutputRwOutputInfoBag) GetPhysicaInterfaceName() string {
	if m != nil {
		return m.PhysicaInterfaceName
	}
	return ""
}

func (m *TeS2LOutputRwOutputInfoBag) GetTunnelInterfaceName() string {
	if m != nil {
		return m.TunnelInterfaceName
	}
	return ""
}

func (m *TeS2LOutputRwOutputInfoBag) GetParentInterfaceName() string {
	if m != nil {
		return m.ParentInterfaceName
	}
	return ""
}

func (m *TeS2LOutputRwOutputInfoBag) GetNextHopAddress() string {
	if m != nil {
		return m.NextHopAddress
	}
	return ""
}

func (m *TeS2LOutputRwOutputInfoBag) GetOutLabel() uint32 {
	if m != nil {
		return m.OutLabel
	}
	return 0
}

func (m *TeS2LOutputRwOutputInfoBag) GetSrLabelStack() []uint32 {
	if m != nil {
		return m.SrLabelStack
	}
	return nil
}

// LSD Tunnel rewrite fields
type TeS2LTunRwFieldsP2PBag struct {
	// Local label of the tunnel rewrite
	LocalLabel uint32 `protobuf:"varint,1,opt,name=local_label,json=localLabel" json:"local_label,omitempty"`
	// Tunnel ID for this rewrite data
	TunnelId uint32 `protobuf:"varint,2,opt,name=tunnel_id,json=tunnelId" json:"tunnel_id,omitempty"`
	// source address of the tunnel
	SourcePe string `protobuf:"bytes,3,opt,name=source_pe,json=sourcePe" json:"source_pe,omitempty"`
	// Destination
	DestinationAddress string `protobuf:"bytes,4,opt,name=destination_address,json=destinationAddress" json:"destination_address,omitempty"`
	// Extended Tunnel ID
	ExtendedTunnelId string `protobuf:"bytes,5,opt,name=extended_tunnel_id,json=extendedTunnelId" json:"extended_tunnel_id,omitempty"`
	// Properties of the primary S2L of tunnel rewrite
	PrimaryS2L *TeS2LOutputRwOutputInfoBag `protobuf:"bytes,6,opt,name=primary_s2_l,json=primaryS2L" json:"primary_s2_l,omitempty"`
	// Properties of the S2L's backup for tunnel rewrite
	BackupTunnelRewrite *TeS2LOutputRwOutputInfoBag `protobuf:"bytes,7,opt,name=backup_tunnel_rewrite,json=backupTunnelRewrite" json:"backup_tunnel_rewrite,omitempty"`
	// FRR is active on the backup tunnel
	BackupActive bool `protobuf:"varint,8,opt,name=backup_active,json=backupActive" json:"backup_active,omitempty"`
	// Input interface of the S2Ls
	OriginalInputInterface string `protobuf:"bytes,9,opt,name=original_input_interface,json=originalInputInterface" json:"original_input_interface,omitempty"`
	// Previous hop
	PreviousHopAddress string `protobuf:"bytes,10,opt,name=previous_hop_address,json=previousHopAddress" json:"previous_hop_address,omitempty"`
	// The output interface of the S2Ls
	OutputInterfaceName string `protobuf:"bytes,11,opt,name=output_interface_name,json=outputInterfaceName" json:"output_interface_name,omitempty"`
	// Backup tunnel name
	BackupTunnelName     string   `protobuf:"bytes,12,opt,name=backup_tunnel_name,json=backupTunnelName" json:"backup_tunnel_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeS2LTunRwFieldsP2PBag) Reset()         { *m = TeS2LTunRwFieldsP2PBag{} }
func (m *TeS2LTunRwFieldsP2PBag) String() string { return proto.CompactTextString(m) }
func (*TeS2LTunRwFieldsP2PBag) ProtoMessage()    {}
func (*TeS2LTunRwFieldsP2PBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_s2l_tun_rw_bag_97c6be4b51eb98fd, []int{3}
}
func (m *TeS2LTunRwFieldsP2PBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeS2LTunRwFieldsP2PBag.Unmarshal(m, b)
}
func (m *TeS2LTunRwFieldsP2PBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeS2LTunRwFieldsP2PBag.Marshal(b, m, deterministic)
}
func (dst *TeS2LTunRwFieldsP2PBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeS2LTunRwFieldsP2PBag.Merge(dst, src)
}
func (m *TeS2LTunRwFieldsP2PBag) XXX_Size() int {
	return xxx_messageInfo_TeS2LTunRwFieldsP2PBag.Size(m)
}
func (m *TeS2LTunRwFieldsP2PBag) XXX_DiscardUnknown() {
	xxx_messageInfo_TeS2LTunRwFieldsP2PBag.DiscardUnknown(m)
}

var xxx_messageInfo_TeS2LTunRwFieldsP2PBag proto.InternalMessageInfo

func (m *TeS2LTunRwFieldsP2PBag) GetLocalLabel() uint32 {
	if m != nil {
		return m.LocalLabel
	}
	return 0
}

func (m *TeS2LTunRwFieldsP2PBag) GetTunnelId() uint32 {
	if m != nil {
		return m.TunnelId
	}
	return 0
}

func (m *TeS2LTunRwFieldsP2PBag) GetSourcePe() string {
	if m != nil {
		return m.SourcePe
	}
	return ""
}

func (m *TeS2LTunRwFieldsP2PBag) GetDestinationAddress() string {
	if m != nil {
		return m.DestinationAddress
	}
	return ""
}

func (m *TeS2LTunRwFieldsP2PBag) GetExtendedTunnelId() string {
	if m != nil {
		return m.ExtendedTunnelId
	}
	return ""
}

func (m *TeS2LTunRwFieldsP2PBag) GetPrimaryS2L() *TeS2LOutputRwOutputInfoBag {
	if m != nil {
		return m.PrimaryS2L
	}
	return nil
}

func (m *TeS2LTunRwFieldsP2PBag) GetBackupTunnelRewrite() *TeS2LOutputRwOutputInfoBag {
	if m != nil {
		return m.BackupTunnelRewrite
	}
	return nil
}

func (m *TeS2LTunRwFieldsP2PBag) GetBackupActive() bool {
	if m != nil {
		return m.BackupActive
	}
	return false
}

func (m *TeS2LTunRwFieldsP2PBag) GetOriginalInputInterface() string {
	if m != nil {
		return m.OriginalInputInterface
	}
	return ""
}

func (m *TeS2LTunRwFieldsP2PBag) GetPreviousHopAddress() string {
	if m != nil {
		return m.PreviousHopAddress
	}
	return ""
}

func (m *TeS2LTunRwFieldsP2PBag) GetOutputInterfaceName() string {
	if m != nil {
		return m.OutputInterfaceName
	}
	return ""
}

func (m *TeS2LTunRwFieldsP2PBag) GetBackupTunnelName() string {
	if m != nil {
		return m.BackupTunnelName
	}
	return ""
}

// LMRIB Tunnel rewrite fields
type TeS2LTunRwFieldsP2MpBag struct {
	// Local Label
	LocalLabel           uint32   `protobuf:"varint,1,opt,name=local_label,json=localLabel" json:"local_label,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeS2LTunRwFieldsP2MpBag) Reset()         { *m = TeS2LTunRwFieldsP2MpBag{} }
func (m *TeS2LTunRwFieldsP2MpBag) String() string { return proto.CompactTextString(m) }
func (*TeS2LTunRwFieldsP2MpBag) ProtoMessage()    {}
func (*TeS2LTunRwFieldsP2MpBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_s2l_tun_rw_bag_97c6be4b51eb98fd, []int{4}
}
func (m *TeS2LTunRwFieldsP2MpBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeS2LTunRwFieldsP2MpBag.Unmarshal(m, b)
}
func (m *TeS2LTunRwFieldsP2MpBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeS2LTunRwFieldsP2MpBag.Marshal(b, m, deterministic)
}
func (dst *TeS2LTunRwFieldsP2MpBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeS2LTunRwFieldsP2MpBag.Merge(dst, src)
}
func (m *TeS2LTunRwFieldsP2MpBag) XXX_Size() int {
	return xxx_messageInfo_TeS2LTunRwFieldsP2MpBag.Size(m)
}
func (m *TeS2LTunRwFieldsP2MpBag) XXX_DiscardUnknown() {
	xxx_messageInfo_TeS2LTunRwFieldsP2MpBag.DiscardUnknown(m)
}

var xxx_messageInfo_TeS2LTunRwFieldsP2MpBag proto.InternalMessageInfo

func (m *TeS2LTunRwFieldsP2MpBag) GetLocalLabel() uint32 {
	if m != nil {
		return m.LocalLabel
	}
	return 0
}

// C-type-specific LSP FEC data
type TeS2LTunRwFieldCtypeBag struct {
	FecCType string `protobuf:"bytes,1,opt,name=fec_c_type,json=fecCType" json:"fec_c_type,omitempty"`
	// Tunnel rewrite data specific to P2P
	P2PTunnelRewrite *TeS2LTunRwFieldsP2PBag `protobuf:"bytes,2,opt,name=p2_p_tunnel_rewrite,json=p2PTunnelRewrite" json:"p2_p_tunnel_rewrite,omitempty"`
	// Tunnel rewrite data specific to P2MP
	P2MpTunnelRewrite    *TeS2LTunRwFieldsP2MpBag `protobuf:"bytes,3,opt,name=p2_mp_tunnel_rewrite,json=p2MpTunnelRewrite" json:"p2_mp_tunnel_rewrite,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *TeS2LTunRwFieldCtypeBag) Reset()         { *m = TeS2LTunRwFieldCtypeBag{} }
func (m *TeS2LTunRwFieldCtypeBag) String() string { return proto.CompactTextString(m) }
func (*TeS2LTunRwFieldCtypeBag) ProtoMessage()    {}
func (*TeS2LTunRwFieldCtypeBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_s2l_tun_rw_bag_97c6be4b51eb98fd, []int{5}
}
func (m *TeS2LTunRwFieldCtypeBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeS2LTunRwFieldCtypeBag.Unmarshal(m, b)
}
func (m *TeS2LTunRwFieldCtypeBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeS2LTunRwFieldCtypeBag.Marshal(b, m, deterministic)
}
func (dst *TeS2LTunRwFieldCtypeBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeS2LTunRwFieldCtypeBag.Merge(dst, src)
}
func (m *TeS2LTunRwFieldCtypeBag) XXX_Size() int {
	return xxx_messageInfo_TeS2LTunRwFieldCtypeBag.Size(m)
}
func (m *TeS2LTunRwFieldCtypeBag) XXX_DiscardUnknown() {
	xxx_messageInfo_TeS2LTunRwFieldCtypeBag.DiscardUnknown(m)
}

var xxx_messageInfo_TeS2LTunRwFieldCtypeBag proto.InternalMessageInfo

func (m *TeS2LTunRwFieldCtypeBag) GetFecCType() string {
	if m != nil {
		return m.FecCType
	}
	return ""
}

func (m *TeS2LTunRwFieldCtypeBag) GetP2PTunnelRewrite() *TeS2LTunRwFieldsP2PBag {
	if m != nil {
		return m.P2PTunnelRewrite
	}
	return nil
}

func (m *TeS2LTunRwFieldCtypeBag) GetP2MpTunnelRewrite() *TeS2LTunRwFieldsP2MpBag {
	if m != nil {
		return m.P2MpTunnelRewrite
	}
	return nil
}

// LMRIB S2L Tunnel rewrite fields
type TeS2LTunRwFieldsBag struct {
	// Time stamp of the entry
	Timestamp uint32 `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	// Union of p2p and p2mp tun rewrite data
	TunnelRewrite        *TeS2LTunRwFieldCtypeBag `protobuf:"bytes,2,opt,name=tunnel_rewrite,json=tunnelRewrite" json:"tunnel_rewrite,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *TeS2LTunRwFieldsBag) Reset()         { *m = TeS2LTunRwFieldsBag{} }
func (m *TeS2LTunRwFieldsBag) String() string { return proto.CompactTextString(m) }
func (*TeS2LTunRwFieldsBag) ProtoMessage()    {}
func (*TeS2LTunRwFieldsBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_s2l_tun_rw_bag_97c6be4b51eb98fd, []int{6}
}
func (m *TeS2LTunRwFieldsBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeS2LTunRwFieldsBag.Unmarshal(m, b)
}
func (m *TeS2LTunRwFieldsBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeS2LTunRwFieldsBag.Marshal(b, m, deterministic)
}
func (dst *TeS2LTunRwFieldsBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeS2LTunRwFieldsBag.Merge(dst, src)
}
func (m *TeS2LTunRwFieldsBag) XXX_Size() int {
	return xxx_messageInfo_TeS2LTunRwFieldsBag.Size(m)
}
func (m *TeS2LTunRwFieldsBag) XXX_DiscardUnknown() {
	xxx_messageInfo_TeS2LTunRwFieldsBag.DiscardUnknown(m)
}

var xxx_messageInfo_TeS2LTunRwFieldsBag proto.InternalMessageInfo

func (m *TeS2LTunRwFieldsBag) GetTimestamp() uint32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *TeS2LTunRwFieldsBag) GetTunnelRewrite() *TeS2LTunRwFieldCtypeBag {
	if m != nil {
		return m.TunnelRewrite
	}
	return nil
}

func init() {
	proto.RegisterType((*MplsTeS2LTunRwBag_KEYS)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.p2mp.tunnel_rewrites.tunnel_rewrite.mpls_te_s2l_tun_rw_bag_KEYS")
	proto.RegisterType((*MplsTeS2LTunRwBag)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.p2mp.tunnel_rewrites.tunnel_rewrite.mpls_te_s2l_tun_rw_bag")
	proto.RegisterType((*TeS2LOutputRwOutputInfoBag)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.p2mp.tunnel_rewrites.tunnel_rewrite.te_s2l_output_rw_output_info_bag")
	proto.RegisterType((*TeS2LTunRwFieldsP2PBag)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.p2mp.tunnel_rewrites.tunnel_rewrite.te_s2l_tun_rw_fields_p2p_bag")
	proto.RegisterType((*TeS2LTunRwFieldsP2MpBag)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.p2mp.tunnel_rewrites.tunnel_rewrite.te_s2l_tun_rw_fields_p2mp_bag")
	proto.RegisterType((*TeS2LTunRwFieldCtypeBag)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.p2mp.tunnel_rewrites.tunnel_rewrite.te_s2l_tun_rw_field_ctype_bag")
	proto.RegisterType((*TeS2LTunRwFieldsBag)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.p2mp.tunnel_rewrites.tunnel_rewrite.te_s2l_tun_rw_fields_bag")
}

func init() {
	proto.RegisterFile("mpls_te_s2l_tun_rw_bag.proto", fileDescriptor_mpls_te_s2l_tun_rw_bag_97c6be4b51eb98fd)
}

var fileDescriptor_mpls_te_s2l_tun_rw_bag_97c6be4b51eb98fd = []byte{
	// 844 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0x4d, 0x8f, 0x1b, 0x35,
	0x18, 0xd6, 0x64, 0xbb, 0x21, 0x79, 0x77, 0x93, 0xa6, 0xce, 0x66, 0x35, 0xd2, 0x06, 0x11, 0x05,
	0x0e, 0x41, 0x8a, 0x02, 0x9a, 0x96, 0x8f, 0x23, 0x15, 0x42, 0xa2, 0xa2, 0x45, 0xd5, 0xa4, 0x17,
	0x4e, 0x96, 0xe3, 0x71, 0xb2, 0xd6, 0xce, 0xd8, 0x96, 0xed, 0x69, 0x37, 0x3f, 0x80, 0x2b, 0x02,
	0x21, 0x71, 0x40, 0xe2, 0xc4, 0x99, 0xbf, 0xc2, 0x2f, 0xe0, 0x97, 0x70, 0x42, 0x63, 0xcf, 0x24,
	0x99, 0x6c, 0x56, 0xe2, 0x00, 0xe9, 0x2d, 0xf3, 0x7e, 0x3e, 0xaf, 0xfd, 0x3c, 0xaf, 0x03, 0xc3,
	0x4c, 0xa5, 0x06, 0x5b, 0x86, 0x4d, 0x94, 0x62, 0x9b, 0x0b, 0xac, 0xdf, 0xe0, 0x05, 0x59, 0xcd,
	0x94, 0x96, 0x56, 0xa2, 0x17, 0x94, 0x1b, 0x2a, 0x31, 0x97, 0x06, 0xdf, 0x6a, 0x5c, 0x85, 0x4a,
	0xc5, 0xf4, 0x6c, 0x93, 0x67, 0x89, 0x48, 0x16, 0xeb, 0x99, 0x8a, 0x32, 0x35, 0xb3, 0xb9, 0x10,
	0x2c, 0xc5, 0x9a, 0xbd, 0xd1, 0xdc, 0x32, 0xb3, 0xf7, 0x3d, 0xbe, 0x86, 0xab, 0xc3, 0xed, 0xf0,
	0x37, 0x5f, 0x7d, 0x37, 0x47, 0x57, 0xd0, 0x2e, 0x13, 0x78, 0x12, 0x06, 0xa3, 0x60, 0xd2, 0x89,
	0x5b, 0xde, 0xf0, 0x2c, 0x41, 0x03, 0x68, 0xa6, 0x46, 0x15, 0x9e, 0x86, 0xf3, 0x9c, 0xa6, 0x46,
	0x79, 0x33, 0xc5, 0x76, 0xad, 0x58, 0x78, 0x32, 0x0a, 0x26, 0xed, 0xf8, 0x94, 0xbe, 0x5a, 0x2b,
	0x36, 0xfe, 0xeb, 0x01, 0x5c, 0x1e, 0x6e, 0x85, 0x3e, 0x84, 0x5e, 0xd5, 0x45, 0x58, 0xa6, 0x97,
	0x84, 0xb2, 0x30, 0x72, 0xb9, 0x0f, 0xcb, 0x66, 0x95, 0x19, 0x4d, 0x01, 0x95, 0xa1, 0x86, 0xaf,
	0x04, 0x49, 0xb1, 0x20, 0x19, 0x0b, 0x1f, 0xbb, 0xe0, 0xb2, 0xc8, 0xdc, 0x39, 0xbe, 0x25, 0x19,
	0x43, 0xbf, 0x04, 0x80, 0x4c, 0x4e, 0x29, 0x33, 0x66, 0x99, 0x6f, 0x86, 0x0e, 0x9f, 0x8c, 0x82,
	0xc9, 0x59, 0xb4, 0x9a, 0xfd, 0xa7, 0x47, 0x39, 0xab, 0xcf, 0xb5, 0xe4, 0x2c, 0x4d, 0x4c, 0x31,
	0x5e, 0xfc, 0x68, 0x0b, 0x21, 0xf6, 0xb1, 0xe8, 0x87, 0x00, 0xba, 0x4b, 0xc2, 0x53, 0x96, 0x6c,
	0x40, 0x7d, 0x72, 0x5c, 0x50, 0x1d, 0xdf, 0xbe, 0x02, 0xf4, 0x63, 0x00, 0x0f, 0x15, 0x13, 0x09,
	0x17, 0xab, 0x0d, 0xa2, 0x4f, 0x8f, 0x8b, 0xa8, 0x5b, 0xf6, 0xaf, 0x20, 0x4d, 0x01, 0x71, 0x83,
	0x0d, 0x5b, 0x65, 0x4c, 0x58, 0xac, 0x65, 0x6e, 0xb9, 0x58, 0x85, 0x9f, 0x8d, 0x82, 0x49, 0x2b,
	0xee, 0x71, 0x33, 0xf7, 0x8e, 0xd8, 0xdb, 0xc7, 0x7f, 0x34, 0x60, 0x54, 0x96, 0x96, 0xb9, 0x55,
	0xb9, 0x2d, 0xaa, 0x97, 0xbf, 0xb8, 0x58, 0x4a, 0x47, 0xb4, 0x27, 0x70, 0xa9, 0xae, 0xd7, 0x86,
	0x53, 0xb2, 0x65, 0x9a, 0x67, 0x50, 0xe0, 0x18, 0x74, 0x51, 0x7a, 0x37, 0x7c, 0x73, 0x2c, 0x8a,
	0x60, 0xb0, 0x4f, 0x4f, 0x9f, 0xd4, 0x70, 0x49, 0xfd, 0x3d, 0x8e, 0x56, 0x39, 0x8a, 0xe8, 0x02,
	0xf8, 0x5e, 0x8e, 0xd7, 0x44, 0xdf, 0x3b, 0xeb, 0x39, 0x13, 0xe8, 0x09, 0x76, 0x6b, 0xf1, 0xb5,
	0x54, 0x98, 0x24, 0x89, 0x66, 0xc6, 0x84, 0x0f, 0x5c, 0x78, 0xb7, 0xb0, 0x7f, 0x2d, 0xd5, 0x53,
	0x6f, 0x2d, 0x64, 0x29, 0x73, 0x8b, 0x53, 0xb2, 0x60, 0x69, 0x78, 0xea, 0x65, 0x29, 0x73, 0xfb,
	0xbc, 0xf8, 0x46, 0x1f, 0x40, 0xd7, 0x68, 0xef, 0x2b, 0x2e, 0x86, 0xde, 0x84, 0xcd, 0xd1, 0xc9,
	0xa4, 0x13, 0x9f, 0x1b, 0xed, 0x02, 0xe6, 0x85, 0x6d, 0xfc, 0x7d, 0x13, 0x86, 0x07, 0xaf, 0x42,
	0x45, 0xca, 0x9d, 0xd5, 0x7b, 0x70, 0x96, 0x4a, 0x4a, 0xd2, 0xb2, 0x8b, 0x17, 0x3f, 0x38, 0x93,
	0xef, 0x53, 0xdb, 0x0d, 0x8d, 0xbd, 0xdd, 0x70, 0x05, 0x6d, 0x23, 0x73, 0x4d, 0x19, 0xde, 0xec,
	0x81, 0x96, 0x37, 0xbc, 0x64, 0xe8, 0x23, 0xe8, 0x27, 0xcc, 0x58, 0x2e, 0x88, 0xe5, 0x52, 0xec,
	0xcd, 0x8a, 0x76, 0x5c, 0xd5, 0xbc, 0x53, 0x40, 0xec, 0xd6, 0x32, 0x91, 0xb0, 0x04, 0x6f, 0x7b,
	0x9e, 0x7a, 0xd5, 0x57, 0x9e, 0x57, 0x55, 0xef, 0x9f, 0x02, 0x38, 0x57, 0x9a, 0x67, 0x44, 0xaf,
	0xb1, 0x89, 0x70, 0x1a, 0x36, 0x1d, 0x91, 0xe5, 0xff, 0x43, 0xe4, 0x7b, 0xd9, 0x16, 0x43, 0x09,
	0x62, 0x1e, 0x3d, 0x47, 0xbf, 0x07, 0x30, 0x58, 0x10, 0x7a, 0x93, 0x2b, 0x5c, 0x2f, 0x13, 0xbe,
	0xf3, 0x76, 0xc0, 0xf5, 0x3d, 0x1a, 0x7f, 0x68, 0x95, 0xe4, 0xde, 0x87, 0x4e, 0x09, 0x92, 0x50,
	0xcb, 0x5f, 0xb3, 0xb0, 0xe5, 0xd4, 0x76, 0xee, 0x8d, 0x4f, 0x9d, 0x0d, 0x7d, 0x0e, 0xa1, 0xd4,
	0x7c, 0xc5, 0x8b, 0xed, 0xcb, 0x85, 0x2f, 0x5a, 0x6d, 0xed, 0xb6, 0xbb, 0x92, 0xcb, 0xca, 0xff,
	0xac, 0x70, 0x6f, 0x97, 0xf7, 0xc7, 0x70, 0xa1, 0x34, 0x7b, 0xcd, 0x65, 0x6e, 0x6a, 0x24, 0x07,
	0x7f, 0xf1, 0x95, 0x6f, 0x87, 0xe8, 0x11, 0x0c, 0x36, 0xc0, 0x6b, 0x32, 0x3a, 0xf3, 0x32, 0xf2,
	0xce, 0xba, 0x8c, 0xa6, 0x80, 0xea, 0x27, 0xed, 0x12, 0xce, 0x3d, 0x59, 0x76, 0xa7, 0x2e, 0xa2,
	0xc7, 0x5f, 0xc0, 0xbb, 0xf7, 0xc8, 0x20, 0xfb, 0x77, 0x3a, 0x18, 0xff, 0xdd, 0x38, 0x58, 0x02,
	0xd3, 0xe2, 0x0d, 0x74, 0x25, 0x86, 0x00, 0x4b, 0x46, 0x71, 0xf9, 0x2a, 0xfa, 0x55, 0xd3, 0x5a,
	0x32, 0xfa, 0x65, 0xf1, 0x30, 0xa2, 0x5f, 0x03, 0xe8, 0xab, 0x08, 0xdf, 0x21, 0x46, 0xc3, 0x11,
	0xe3, 0xe6, 0x18, 0xeb, 0xb7, 0xd4, 0x7c, 0xdc, 0x53, 0xd1, 0xcb, 0x3a, 0x23, 0x7e, 0x0b, 0xe0,
	0x42, 0x45, 0x38, 0xbb, 0x83, 0xee, 0xc4, 0xa1, 0x4b, 0x8f, 0x83, 0xce, 0x5f, 0x45, 0xfc, 0x48,
	0x45, 0x2f, 0xea, 0x8c, 0x1d, 0xff, 0x19, 0x40, 0x78, 0xdf, 0x8b, 0x82, 0x86, 0xd0, 0xb6, 0x3c,
	0x63, 0xc6, 0x92, 0x4c, 0x95, 0x17, 0xb7, 0x35, 0xa0, 0x9f, 0x03, 0xe8, 0x1e, 0x3c, 0xf2, 0x23,
	0x0c, 0xb5, 0x25, 0x47, 0xdc, 0xb1, 0xbb, 0x03, 0x2d, 0x9a, 0xee, 0x6f, 0xde, 0xe3, 0x7f, 0x02,
	0x00, 0x00, 0xff, 0xff, 0xdd, 0xd6, 0xc4, 0x8c, 0x06, 0x0a, 0x00, 0x00,
}
