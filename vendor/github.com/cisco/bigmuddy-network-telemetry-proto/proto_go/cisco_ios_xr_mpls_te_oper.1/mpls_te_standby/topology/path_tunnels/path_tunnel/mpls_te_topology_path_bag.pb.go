// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mpls_te_topology_path_bag.proto

package cisco_ios_xr_mpls_te_oper_mpls_te_standby_topology_path_tunnels_path_tunnel

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// MPLS TE Topology Path Information
type MplsTeTopologyPathBag_KEYS struct {
	TunnelId             uint32   `protobuf:"varint,1,opt,name=tunnel_id,json=tunnelId" json:"tunnel_id,omitempty"`
	TunnelName           string   `protobuf:"bytes,2,opt,name=tunnel_name,json=tunnelName" json:"tunnel_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeTopologyPathBag_KEYS) Reset()         { *m = MplsTeTopologyPathBag_KEYS{} }
func (m *MplsTeTopologyPathBag_KEYS) String() string { return proto.CompactTextString(m) }
func (*MplsTeTopologyPathBag_KEYS) ProtoMessage()    {}
func (*MplsTeTopologyPathBag_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_topology_path_bag_df7b74b5f2c57bb8, []int{0}
}
func (m *MplsTeTopologyPathBag_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeTopologyPathBag_KEYS.Unmarshal(m, b)
}
func (m *MplsTeTopologyPathBag_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeTopologyPathBag_KEYS.Marshal(b, m, deterministic)
}
func (dst *MplsTeTopologyPathBag_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeTopologyPathBag_KEYS.Merge(dst, src)
}
func (m *MplsTeTopologyPathBag_KEYS) XXX_Size() int {
	return xxx_messageInfo_MplsTeTopologyPathBag_KEYS.Size(m)
}
func (m *MplsTeTopologyPathBag_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeTopologyPathBag_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeTopologyPathBag_KEYS proto.InternalMessageInfo

func (m *MplsTeTopologyPathBag_KEYS) GetTunnelId() uint32 {
	if m != nil {
		return m.TunnelId
	}
	return 0
}

func (m *MplsTeTopologyPathBag_KEYS) GetTunnelName() string {
	if m != nil {
		return m.TunnelName
	}
	return ""
}

type MplsTeTopologyPathBag struct {
	// The tunnel ID to which this path belong
	TunnelId uint32 `protobuf:"varint,50,opt,name=tunnel_id,json=tunnelId" json:"tunnel_id,omitempty"`
	// The path's destination
	DestinationAddress string `protobuf:"bytes,51,opt,name=destination_address,json=destinationAddress" json:"destination_address,omitempty"`
	// TRUE if path is partial
	IsPartialPath bool `protobuf:"varint,52,opt,name=is_partial_path,json=isPartialPath" json:"is_partial_path,omitempty"`
	// TRUE if path is full
	IsFullPath bool `protobuf:"varint,53,opt,name=is_full_path,json=isFullPath" json:"is_full_path,omitempty"`
	// TRUE if checking the topology is enabled
	IsTopologyChecked bool `protobuf:"varint,54,opt,name=is_topology_checked,json=isTopologyChecked" json:"is_topology_checked,omitempty"`
	// TRUE if checking the Segment-Routing DB is enabled
	IsSegmentRoutingDbChecked bool `protobuf:"varint,55,opt,name=is_segment_routing_db_checked,json=isSegmentRoutingDbChecked" json:"is_segment_routing_db_checked,omitempty"`
	// The path's requested bandwidth
	RequestedBandwidth uint64 `protobuf:"varint,56,opt,name=requested_bandwidth,json=requestedBandwidth" json:"requested_bandwidth,omitempty"`
	// The path's bandwidth type
	BandwidthType uint64 `protobuf:"varint,57,opt,name=bandwidth_type,json=bandwidthType" json:"bandwidth_type,omitempty"`
	// The path's minimum bandwidth
	MininumBandwidth uint64 `protobuf:"varint,58,opt,name=mininum_bandwidth,json=mininumBandwidth" json:"mininum_bandwidth,omitempty"`
	// The path's accumulated admin weight
	AccumulatedAdminWeight uint64 `protobuf:"varint,59,opt,name=accumulated_admin_weight,json=accumulatedAdminWeight" json:"accumulated_admin_weight,omitempty"`
	// The path's setup priority
	SetupPriority uint32 `protobuf:"varint,60,opt,name=setup_priority,json=setupPriority" json:"setup_priority,omitempty"`
	// The path's hold priority
	HoldPriority uint32 `protobuf:"varint,61,opt,name=hold_priority,json=holdPriority" json:"hold_priority,omitempty"`
	// Path hop count
	NodeHopCount uint32 `protobuf:"varint,62,opt,name=node_hop_count,json=nodeHopCount" json:"node_hop_count,omitempty"`
	// Affinity
	Affinity *MplsTeTunnelsAffinityInfo `protobuf:"bytes,63,opt,name=affinity" json:"affinity,omitempty"`
	// The Exclude SRLG IP Addr
	ExcludeSrlgAddress string `protobuf:"bytes,64,opt,name=exclude_srlg_address,json=excludeSrlgAddress" json:"exclude_srlg_address,omitempty"`
	// The path's excluded srlg groups
	SharedRiskLinkGroups []*MplsSrlgInfo `protobuf:"bytes,65,rep,name=shared_risk_link_groups,json=sharedRiskLinkGroups" json:"shared_risk_link_groups,omitempty"`
	// The path's array of hops
	HopList [][]byte `protobuf:"bytes,66,rep,name=hop_list,json=hopList,proto3" json:"hop_list,omitempty"`
	// The path's array of Segment-Routing segments
	SrSegmentList        []*TeS2LSrPathHop `protobuf:"bytes,67,rep,name=sr_segment_list,json=srSegmentList" json:"sr_segment_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *MplsTeTopologyPathBag) Reset()         { *m = MplsTeTopologyPathBag{} }
func (m *MplsTeTopologyPathBag) String() string { return proto.CompactTextString(m) }
func (*MplsTeTopologyPathBag) ProtoMessage()    {}
func (*MplsTeTopologyPathBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_topology_path_bag_df7b74b5f2c57bb8, []int{1}
}
func (m *MplsTeTopologyPathBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeTopologyPathBag.Unmarshal(m, b)
}
func (m *MplsTeTopologyPathBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeTopologyPathBag.Marshal(b, m, deterministic)
}
func (dst *MplsTeTopologyPathBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeTopologyPathBag.Merge(dst, src)
}
func (m *MplsTeTopologyPathBag) XXX_Size() int {
	return xxx_messageInfo_MplsTeTopologyPathBag.Size(m)
}
func (m *MplsTeTopologyPathBag) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeTopologyPathBag.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeTopologyPathBag proto.InternalMessageInfo

func (m *MplsTeTopologyPathBag) GetTunnelId() uint32 {
	if m != nil {
		return m.TunnelId
	}
	return 0
}

func (m *MplsTeTopologyPathBag) GetDestinationAddress() string {
	if m != nil {
		return m.DestinationAddress
	}
	return ""
}

func (m *MplsTeTopologyPathBag) GetIsPartialPath() bool {
	if m != nil {
		return m.IsPartialPath
	}
	return false
}

func (m *MplsTeTopologyPathBag) GetIsFullPath() bool {
	if m != nil {
		return m.IsFullPath
	}
	return false
}

func (m *MplsTeTopologyPathBag) GetIsTopologyChecked() bool {
	if m != nil {
		return m.IsTopologyChecked
	}
	return false
}

func (m *MplsTeTopologyPathBag) GetIsSegmentRoutingDbChecked() bool {
	if m != nil {
		return m.IsSegmentRoutingDbChecked
	}
	return false
}

func (m *MplsTeTopologyPathBag) GetRequestedBandwidth() uint64 {
	if m != nil {
		return m.RequestedBandwidth
	}
	return 0
}

func (m *MplsTeTopologyPathBag) GetBandwidthType() uint64 {
	if m != nil {
		return m.BandwidthType
	}
	return 0
}

func (m *MplsTeTopologyPathBag) GetMininumBandwidth() uint64 {
	if m != nil {
		return m.MininumBandwidth
	}
	return 0
}

func (m *MplsTeTopologyPathBag) GetAccumulatedAdminWeight() uint64 {
	if m != nil {
		return m.AccumulatedAdminWeight
	}
	return 0
}

func (m *MplsTeTopologyPathBag) GetSetupPriority() uint32 {
	if m != nil {
		return m.SetupPriority
	}
	return 0
}

func (m *MplsTeTopologyPathBag) GetHoldPriority() uint32 {
	if m != nil {
		return m.HoldPriority
	}
	return 0
}

func (m *MplsTeTopologyPathBag) GetNodeHopCount() uint32 {
	if m != nil {
		return m.NodeHopCount
	}
	return 0
}

func (m *MplsTeTopologyPathBag) GetAffinity() *MplsTeTunnelsAffinityInfo {
	if m != nil {
		return m.Affinity
	}
	return nil
}

func (m *MplsTeTopologyPathBag) GetExcludeSrlgAddress() string {
	if m != nil {
		return m.ExcludeSrlgAddress
	}
	return ""
}

func (m *MplsTeTopologyPathBag) GetSharedRiskLinkGroups() []*MplsSrlgInfo {
	if m != nil {
		return m.SharedRiskLinkGroups
	}
	return nil
}

func (m *MplsTeTopologyPathBag) GetHopList() [][]byte {
	if m != nil {
		return m.HopList
	}
	return nil
}

func (m *MplsTeTopologyPathBag) GetSrSegmentList() []*TeS2LSrPathHop {
	if m != nil {
		return m.SrSegmentList
	}
	return nil
}

// Affinity name constraints
type AffinityNameBag struct {
	// Constraint type
	ConstraintType uint32 `protobuf:"varint,1,opt,name=constraint_type,json=constraintType" json:"constraint_type,omitempty"`
	// Deprecated
	ConstraintValue uint32 `protobuf:"varint,2,opt,name=constraint_value,json=constraintValue" json:"constraint_value,omitempty"`
	// Deprecated
	ForwardRefValue uint32 `protobuf:"varint,3,opt,name=forward_ref_value,json=forwardRefValue" json:"forward_ref_value,omitempty"`
	// Constraint value
	ConstraintExtendedValue []uint32 `protobuf:"varint,4,rep,packed,name=constraint_extended_value,json=constraintExtendedValue" json:"constraint_extended_value,omitempty"`
	// Reference bits for undefined affinity names
	ExtendedForwardRefValue []uint32 `protobuf:"varint,5,rep,packed,name=extended_forward_ref_value,json=extendedForwardRefValue" json:"extended_forward_ref_value,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *AffinityNameBag) Reset()         { *m = AffinityNameBag{} }
func (m *AffinityNameBag) String() string { return proto.CompactTextString(m) }
func (*AffinityNameBag) ProtoMessage()    {}
func (*AffinityNameBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_topology_path_bag_df7b74b5f2c57bb8, []int{2}
}
func (m *AffinityNameBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AffinityNameBag.Unmarshal(m, b)
}
func (m *AffinityNameBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AffinityNameBag.Marshal(b, m, deterministic)
}
func (dst *AffinityNameBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AffinityNameBag.Merge(dst, src)
}
func (m *AffinityNameBag) XXX_Size() int {
	return xxx_messageInfo_AffinityNameBag.Size(m)
}
func (m *AffinityNameBag) XXX_DiscardUnknown() {
	xxx_messageInfo_AffinityNameBag.DiscardUnknown(m)
}

var xxx_messageInfo_AffinityNameBag proto.InternalMessageInfo

func (m *AffinityNameBag) GetConstraintType() uint32 {
	if m != nil {
		return m.ConstraintType
	}
	return 0
}

func (m *AffinityNameBag) GetConstraintValue() uint32 {
	if m != nil {
		return m.ConstraintValue
	}
	return 0
}

func (m *AffinityNameBag) GetForwardRefValue() uint32 {
	if m != nil {
		return m.ForwardRefValue
	}
	return 0
}

func (m *AffinityNameBag) GetConstraintExtendedValue() []uint32 {
	if m != nil {
		return m.ConstraintExtendedValue
	}
	return nil
}

func (m *AffinityNameBag) GetExtendedForwardRefValue() []uint32 {
	if m != nil {
		return m.ExtendedForwardRefValue
	}
	return nil
}

// MPLS TE tunnel Affinity information
type MplsTeTunnelsAffinityInfo struct {
	// The affinity bits (colors)
	AffinityBits uint32 `protobuf:"varint,1,opt,name=affinity_bits,json=affinityBits" json:"affinity_bits,omitempty"`
	// The affinity mask (colors)
	AffinityMask uint32 `protobuf:"varint,2,opt,name=affinity_mask,json=affinityMask" json:"affinity_mask,omitempty"`
	// Array of name based constratints currently applied to the tunnel
	NamedAffinities      []*AffinityNameBag `protobuf:"bytes,3,rep,name=named_affinities,json=namedAffinities" json:"named_affinities,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *MplsTeTunnelsAffinityInfo) Reset()         { *m = MplsTeTunnelsAffinityInfo{} }
func (m *MplsTeTunnelsAffinityInfo) String() string { return proto.CompactTextString(m) }
func (*MplsTeTunnelsAffinityInfo) ProtoMessage()    {}
func (*MplsTeTunnelsAffinityInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_topology_path_bag_df7b74b5f2c57bb8, []int{3}
}
func (m *MplsTeTunnelsAffinityInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeTunnelsAffinityInfo.Unmarshal(m, b)
}
func (m *MplsTeTunnelsAffinityInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeTunnelsAffinityInfo.Marshal(b, m, deterministic)
}
func (dst *MplsTeTunnelsAffinityInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeTunnelsAffinityInfo.Merge(dst, src)
}
func (m *MplsTeTunnelsAffinityInfo) XXX_Size() int {
	return xxx_messageInfo_MplsTeTunnelsAffinityInfo.Size(m)
}
func (m *MplsTeTunnelsAffinityInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeTunnelsAffinityInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeTunnelsAffinityInfo proto.InternalMessageInfo

func (m *MplsTeTunnelsAffinityInfo) GetAffinityBits() uint32 {
	if m != nil {
		return m.AffinityBits
	}
	return 0
}

func (m *MplsTeTunnelsAffinityInfo) GetAffinityMask() uint32 {
	if m != nil {
		return m.AffinityMask
	}
	return 0
}

func (m *MplsTeTunnelsAffinityInfo) GetNamedAffinities() []*AffinityNameBag {
	if m != nil {
		return m.NamedAffinities
	}
	return nil
}

// Information about the Shared Risk Link Group
type MplsSrlgInfo struct {
	// SRLG number
	SharedRiskGroup uint32 `protobuf:"varint,1,opt,name=shared_risk_group,json=sharedRiskGroup" json:"shared_risk_group,omitempty"`
	// SRLG name
	SrlgName             string   `protobuf:"bytes,2,opt,name=srlg_name,json=srlgName" json:"srlg_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsSrlgInfo) Reset()         { *m = MplsSrlgInfo{} }
func (m *MplsSrlgInfo) String() string { return proto.CompactTextString(m) }
func (*MplsSrlgInfo) ProtoMessage()    {}
func (*MplsSrlgInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_topology_path_bag_df7b74b5f2c57bb8, []int{4}
}
func (m *MplsSrlgInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsSrlgInfo.Unmarshal(m, b)
}
func (m *MplsSrlgInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsSrlgInfo.Marshal(b, m, deterministic)
}
func (dst *MplsSrlgInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsSrlgInfo.Merge(dst, src)
}
func (m *MplsSrlgInfo) XXX_Size() int {
	return xxx_messageInfo_MplsSrlgInfo.Size(m)
}
func (m *MplsSrlgInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsSrlgInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MplsSrlgInfo proto.InternalMessageInfo

func (m *MplsSrlgInfo) GetSharedRiskGroup() uint32 {
	if m != nil {
		return m.SharedRiskGroup
	}
	return 0
}

func (m *MplsSrlgInfo) GetSrlgName() string {
	if m != nil {
		return m.SrlgName
	}
	return ""
}

// TE Segment-Routing S2L path hop
type TeS2LSrPathHop struct {
	// Type of the SID
	SidType string `protobuf:"bytes,1,opt,name=sid_type,json=sidType" json:"sid_type,omitempty"`
	// Node has IP addresses specified
	HasIpAddresses bool `protobuf:"varint,2,opt,name=has_ip_addresses,json=hasIpAddresses" json:"has_ip_addresses,omitempty"`
	// Local IP address of adjacency or Node ID
	LocalAddr string `protobuf:"bytes,3,opt,name=local_addr,json=localAddr" json:"local_addr,omitempty"`
	// Remote IP address of adjacency
	RemoteAddr string `protobuf:"bytes,4,opt,name=remote_addr,json=remoteAddr" json:"remote_addr,omitempty"`
	// Hop has MPLS label specified
	HasMplsLabel bool `protobuf:"varint,5,opt,name=has_mpls_label,json=hasMplsLabel" json:"has_mpls_label,omitempty"`
	// The MPLS label value
	MplsLabelValue uint32 `protobuf:"varint,6,opt,name=mpls_label_value,json=mplsLabelValue" json:"mpls_label_value,omitempty"`
	// Hop has EL specified
	HasEntropyLabel      bool     `protobuf:"varint,7,opt,name=has_entropy_label,json=hasEntropyLabel" json:"has_entropy_label,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeS2LSrPathHop) Reset()         { *m = TeS2LSrPathHop{} }
func (m *TeS2LSrPathHop) String() string { return proto.CompactTextString(m) }
func (*TeS2LSrPathHop) ProtoMessage()    {}
func (*TeS2LSrPathHop) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_topology_path_bag_df7b74b5f2c57bb8, []int{5}
}
func (m *TeS2LSrPathHop) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeS2LSrPathHop.Unmarshal(m, b)
}
func (m *TeS2LSrPathHop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeS2LSrPathHop.Marshal(b, m, deterministic)
}
func (dst *TeS2LSrPathHop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeS2LSrPathHop.Merge(dst, src)
}
func (m *TeS2LSrPathHop) XXX_Size() int {
	return xxx_messageInfo_TeS2LSrPathHop.Size(m)
}
func (m *TeS2LSrPathHop) XXX_DiscardUnknown() {
	xxx_messageInfo_TeS2LSrPathHop.DiscardUnknown(m)
}

var xxx_messageInfo_TeS2LSrPathHop proto.InternalMessageInfo

func (m *TeS2LSrPathHop) GetSidType() string {
	if m != nil {
		return m.SidType
	}
	return ""
}

func (m *TeS2LSrPathHop) GetHasIpAddresses() bool {
	if m != nil {
		return m.HasIpAddresses
	}
	return false
}

func (m *TeS2LSrPathHop) GetLocalAddr() string {
	if m != nil {
		return m.LocalAddr
	}
	return ""
}

func (m *TeS2LSrPathHop) GetRemoteAddr() string {
	if m != nil {
		return m.RemoteAddr
	}
	return ""
}

func (m *TeS2LSrPathHop) GetHasMplsLabel() bool {
	if m != nil {
		return m.HasMplsLabel
	}
	return false
}

func (m *TeS2LSrPathHop) GetMplsLabelValue() uint32 {
	if m != nil {
		return m.MplsLabelValue
	}
	return 0
}

func (m *TeS2LSrPathHop) GetHasEntropyLabel() bool {
	if m != nil {
		return m.HasEntropyLabel
	}
	return false
}

func init() {
	proto.RegisterType((*MplsTeTopologyPathBag_KEYS)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.topology.path_tunnels.path_tunnel.mpls_te_topology_path_bag_KEYS")
	proto.RegisterType((*MplsTeTopologyPathBag)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.topology.path_tunnels.path_tunnel.mpls_te_topology_path_bag")
	proto.RegisterType((*AffinityNameBag)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.topology.path_tunnels.path_tunnel.affinity_name_bag")
	proto.RegisterType((*MplsTeTunnelsAffinityInfo)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.topology.path_tunnels.path_tunnel.mpls_te_tunnels_affinity_info")
	proto.RegisterType((*MplsSrlgInfo)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.topology.path_tunnels.path_tunnel.mpls_srlg_info")
	proto.RegisterType((*TeS2LSrPathHop)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.topology.path_tunnels.path_tunnel.te_s2l_sr_path_hop")
}

func init() {
	proto.RegisterFile("mpls_te_topology_path_bag.proto", fileDescriptor_mpls_te_topology_path_bag_df7b74b5f2c57bb8)
}

var fileDescriptor_mpls_te_topology_path_bag_df7b74b5f2c57bb8 = []byte{
	// 963 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x5d, 0x6f, 0x1b, 0x45,
	0x14, 0xd5, 0xc6, 0x69, 0x63, 0x4f, 0xfc, 0x91, 0x6c, 0x2a, 0xba, 0x01, 0x85, 0x5a, 0xa6, 0x80,
	0x01, 0xc9, 0x45, 0x29, 0x1f, 0xa5, 0xe5, 0xa3, 0x4e, 0x48, 0xa1, 0x6a, 0x8a, 0xa2, 0x4d, 0x05,
	0xaa, 0x90, 0x3a, 0x1a, 0xef, 0x8c, 0xbd, 0x83, 0x67, 0x67, 0x96, 0xb9, 0xb3, 0x24, 0xfe, 0x03,
	0x20, 0x24, 0x9e, 0x90, 0xf8, 0x55, 0xfc, 0x1e, 0xde, 0xd1, 0xcc, 0xec, 0xae, 0x1d, 0xa2, 0xf0,
	0x94, 0xc7, 0x9c, 0x73, 0xee, 0xb9, 0xd7, 0xb3, 0xe7, 0xce, 0x04, 0xdd, 0xc9, 0x72, 0x01, 0xd8,
	0x30, 0x6c, 0x54, 0xae, 0x84, 0x9a, 0x2d, 0x70, 0x4e, 0x4c, 0x8a, 0x27, 0x64, 0x36, 0xca, 0xb5,
	0x32, 0x2a, 0x7c, 0x96, 0x70, 0x48, 0x14, 0xe6, 0x0a, 0xf0, 0xb9, 0xc6, 0x95, 0x5a, 0xe5, 0x4c,
	0x8f, 0xaa, 0x3f, 0xc0, 0x10, 0x49, 0x27, 0x8b, 0x51, 0x65, 0x31, 0x72, 0x16, 0xa6, 0x90, 0x92,
	0x09, 0x58, 0xfd, 0x63, 0xf0, 0x0a, 0xbd, 0x79, 0x65, 0x3f, 0xfc, 0xec, 0xe8, 0xe5, 0x69, 0xf8,
	0x06, 0x6a, 0x79, 0x2d, 0xe6, 0x34, 0x0a, 0xfa, 0xc1, 0xb0, 0x13, 0x37, 0x3d, 0xf0, 0x94, 0x86,
	0x77, 0xd0, 0x66, 0x49, 0x4a, 0x92, 0xb1, 0x68, 0xad, 0x1f, 0x0c, 0x5b, 0x31, 0xf2, 0xd0, 0x77,
	0x24, 0x63, 0x83, 0xbf, 0x9b, 0x68, 0xf7, 0xca, 0x06, 0x17, 0xbd, 0xf7, 0xff, 0xe3, 0x7d, 0x0f,
	0xed, 0x50, 0x06, 0x86, 0x4b, 0x62, 0xb8, 0x92, 0x98, 0x50, 0xaa, 0x19, 0x40, 0x74, 0xdf, 0xf5,
	0x08, 0x57, 0xa8, 0xb1, 0x67, 0xc2, 0x77, 0x50, 0x8f, 0x03, 0xce, 0x89, 0x36, 0x9c, 0x08, 0xd7,
	0x24, 0xfa, 0xa8, 0x1f, 0x0c, 0x9b, 0x71, 0x87, 0xc3, 0x89, 0x47, 0x4f, 0x88, 0x49, 0xc3, 0x3e,
	0x6a, 0x73, 0xc0, 0xd3, 0x42, 0x94, 0xa2, 0x8f, 0x9d, 0x08, 0x71, 0x78, 0x52, 0x08, 0xaf, 0x18,
	0xa1, 0x1d, 0x0e, 0xcb, 0x79, 0x93, 0x94, 0x25, 0x73, 0x46, 0xa3, 0x4f, 0x9c, 0x70, 0x9b, 0xc3,
	0x8b, 0x92, 0x39, 0xf4, 0x44, 0xf8, 0x18, 0xed, 0x71, 0xc0, 0xc0, 0x66, 0x19, 0x93, 0x06, 0x6b,
	0x55, 0x18, 0x2e, 0x67, 0x98, 0x4e, 0xea, 0xca, 0x4f, 0x5d, 0xe5, 0x2e, 0x87, 0x53, 0xaf, 0x89,
	0xbd, 0xe4, 0xeb, 0x49, 0xe5, 0x70, 0x0f, 0xed, 0x68, 0xf6, 0x73, 0xc1, 0xc0, 0x30, 0x8a, 0x27,
	0x44, 0xd2, 0x33, 0x4e, 0x4d, 0x1a, 0x3d, 0xe8, 0x07, 0xc3, 0xf5, 0x38, 0xac, 0xa9, 0x83, 0x8a,
	0x09, 0xdf, 0x46, 0xdd, 0x5a, 0x86, 0xcd, 0x22, 0x67, 0xd1, 0x67, 0x4e, 0xdb, 0xa9, 0xd1, 0x17,
	0x8b, 0x9c, 0x85, 0x1f, 0xa0, 0xed, 0x8c, 0x4b, 0x2e, 0x8b, 0x6c, 0xc5, 0xf5, 0xa1, 0x53, 0x6e,
	0x95, 0xc4, 0xd2, 0xf3, 0x01, 0x8a, 0x48, 0x92, 0x14, 0x59, 0x21, 0x88, 0x1d, 0x83, 0xd0, 0x8c,
	0x4b, 0x7c, 0xc6, 0xf8, 0x2c, 0x35, 0xd1, 0x23, 0x57, 0xf3, 0xda, 0x0a, 0x3f, 0xb6, 0xf4, 0x0f,
	0x8e, 0xb5, 0xd3, 0x00, 0x33, 0x45, 0x8e, 0x73, 0xcd, 0x95, 0xe6, 0x66, 0x11, 0x7d, 0xee, 0xbe,
	0x66, 0xc7, 0xa1, 0x27, 0x25, 0x18, 0xbe, 0x85, 0x3a, 0xa9, 0x12, 0x74, 0xa9, 0xfa, 0xc2, 0xa9,
	0xda, 0x16, 0xac, 0x45, 0x77, 0x51, 0x57, 0x2a, 0xca, 0x70, 0xaa, 0x72, 0x9c, 0xa8, 0x42, 0x9a,
	0xe8, 0x4b, 0xaf, 0xb2, 0xe8, 0xb7, 0x2a, 0x3f, 0xb4, 0x58, 0xf8, 0x6b, 0x80, 0x9a, 0x64, 0x3a,
	0xe5, 0xd2, 0xda, 0x7c, 0xd5, 0x0f, 0x86, 0x9b, 0xfb, 0x3f, 0x8d, 0xae, 0x71, 0x33, 0xea, 0x8a,
	0x92, 0xc3, 0x55, 0x33, 0xcc, 0xe5, 0x54, 0xc5, 0x75, 0xef, 0xf0, 0x43, 0x74, 0x8b, 0x9d, 0x27,
	0xa2, 0xa0, 0x0c, 0x83, 0x16, 0xb3, 0x3a, 0xa7, 0x8f, 0x7d, 0x4e, 0x4b, 0xee, 0x54, 0x8b, 0x59,
	0x95, 0xd3, 0x3f, 0x03, 0x74, 0x1b, 0x52, 0xa2, 0x19, 0xc5, 0x9a, 0xc3, 0x1c, 0x0b, 0x2e, 0xe7,
	0x78, 0xa6, 0x55, 0x91, 0x43, 0x34, 0xee, 0x37, 0x86, 0x9b, 0xfb, 0x3f, 0x5e, 0xff, 0x2f, 0x71,
	0xb3, 0xb9, 0xd1, 0x6f, 0xf9, 0xde, 0x31, 0x87, 0xf9, 0x31, 0x97, 0xf3, 0x6f, 0x5c, 0xe3, 0x70,
	0x17, 0x35, 0xed, 0x81, 0x0b, 0x0e, 0x26, 0x3a, 0xe8, 0x37, 0x86, 0xed, 0x78, 0x23, 0x55, 0xf9,
	0x31, 0x07, 0x13, 0xfe, 0x16, 0xa0, 0x1e, 0xe8, 0x3a, 0xde, 0x4e, 0x72, 0xe8, 0xe6, 0xc4, 0xd7,
	0x3a, 0xa7, 0x15, 0xef, 0x0b, 0x0c, 0xda, 0x5f, 0x10, 0xa9, 0xca, 0xe3, 0x0e, 0xe8, 0x72, 0x63,
	0xec, 0x24, 0x83, 0x3f, 0xd6, 0xd0, 0x76, 0xfd, 0x1d, 0xec, 0x8d, 0xe3, 0x6e, 0x91, 0x77, 0x51,
	0x2f, 0x51, 0x12, 0x8c, 0x26, 0x5c, 0x1a, 0xbf, 0x0b, 0xfe, 0x9e, 0xea, 0x2e, 0x61, 0xb7, 0x0c,
	0xef, 0xa1, 0xad, 0x15, 0xe1, 0x2f, 0x44, 0x14, 0xfe, 0xca, 0xea, 0xc4, 0x2b, 0x06, 0xdf, 0x5b,
	0x38, 0x7c, 0x1f, 0x6d, 0x4f, 0x95, 0x3e, 0x23, 0x9a, 0x62, 0xcd, 0xa6, 0xa5, 0xb6, 0xe1, 0xb5,
	0x25, 0x11, 0xb3, 0xa9, 0xd7, 0x3e, 0x44, 0xbb, 0x2b, 0xb6, 0xec, 0xdc, 0x30, 0x49, 0x19, 0x2d,
	0x6b, 0xd6, 0xfb, 0x8d, 0x61, 0x27, 0xbe, 0xbd, 0x14, 0x1c, 0x95, 0xbc, 0xaf, 0x7d, 0x84, 0x5e,
	0xaf, 0x0b, 0x2e, 0x37, 0xbc, 0xe1, 0x8b, 0x2b, 0xc5, 0x93, 0x8b, 0x8d, 0x07, 0xff, 0x04, 0x68,
	0xef, 0x7f, 0x63, 0x6a, 0x17, 0xae, 0x06, 0x26, 0xdc, 0x40, 0x79, 0x30, 0xed, 0x0a, 0x3c, 0xe0,
	0x06, 0x2e, 0x88, 0x32, 0x02, 0xf3, 0xf2, 0x4c, 0x6a, 0xd1, 0x73, 0x02, 0xf3, 0xf0, 0xf7, 0x00,
	0x6d, 0xd9, 0x13, 0xa7, 0x55, 0x07, 0xce, 0x20, 0x6a, 0xb8, 0x14, 0xbc, 0xba, 0xd6, 0x14, 0x5c,
	0xfa, 0xbe, 0x71, 0xcf, 0xf5, 0x1d, 0xd7, 0x6d, 0x07, 0x2f, 0x51, 0xf7, 0x62, 0xa6, 0xed, 0xe7,
	0x5a, 0xdd, 0x28, 0xb7, 0x4c, 0xe5, 0x6f, 0xed, 0x2d, 0xe3, 0xee, 0xa2, 0x6e, 0x1f, 0x1d, 0x57,
	0xb8, 0xf2, 0x62, 0x35, 0x2d, 0xe0, 0xde, 0xab, 0xbf, 0xd6, 0x50, 0x78, 0x39, 0x87, 0x76, 0x3b,
	0x80, 0xd3, 0x65, 0xb6, 0x5a, 0xf1, 0x06, 0x70, 0xea, 0x42, 0x35, 0x44, 0x5b, 0x29, 0x01, 0xcc,
	0xf3, 0x6a, 0xf3, 0x19, 0x38, 0xd7, 0x66, 0xdc, 0x4d, 0x09, 0x3c, 0xcd, 0xc7, 0x15, 0x1a, 0xee,
	0x21, 0x24, 0x54, 0x42, 0x84, 0x13, 0xba, 0x30, 0xb5, 0xe2, 0x96, 0x43, 0xac, 0xc6, 0xbe, 0xa5,
	0x9a, 0x65, 0xca, 0x30, 0xcf, 0xaf, 0xfb, 0xb7, 0xd4, 0x43, 0x4e, 0x70, 0x17, 0x59, 0x47, 0x7f,
	0xbe, 0x82, 0x4c, 0x98, 0x88, 0x6e, 0xb8, 0x3e, 0xed, 0x94, 0xc0, 0xf3, 0x5c, 0xc0, 0xb1, 0xc5,
	0xec, 0x3c, 0x4b, 0x45, 0x99, 0xa3, 0x9b, 0x7e, 0x1d, 0xb2, 0x4a, 0x54, 0x67, 0xdc, 0xfa, 0x31,
	0x69, 0xb4, 0xca, 0x17, 0xa5, 0xe5, 0x86, 0xb3, 0xec, 0xa5, 0x04, 0x8e, 0x3c, 0xee, 0x0a, 0x26,
	0x37, 0xdd, 0xff, 0x1e, 0xf7, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x88, 0xa0, 0x6f, 0xc1, 0x9e,
	0x08, 0x00, 0x00,
}
