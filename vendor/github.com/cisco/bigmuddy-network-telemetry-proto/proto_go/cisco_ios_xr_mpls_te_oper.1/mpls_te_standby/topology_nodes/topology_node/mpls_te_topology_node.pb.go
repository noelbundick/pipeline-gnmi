// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mpls_te_topology_node.proto

package cisco_ios_xr_mpls_te_oper_mpls_te_standby_topology_nodes_topology_node

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// A node in the MPLS TE topology
type MplsTeTopologyNode_KEYS struct {
	Protocol             string   `protobuf:"bytes,1,opt,name=protocol" json:"protocol,omitempty"`
	IgpId                string   `protobuf:"bytes,2,opt,name=igp_id,json=igpId" json:"igp_id,omitempty"`
	Area                 uint32   `protobuf:"varint,3,opt,name=area" json:"area,omitempty"`
	TopologyNodeType     string   `protobuf:"bytes,4,opt,name=topology_node_type,json=topologyNodeType" json:"topology_node_type,omitempty"`
	IgpNodeId            string   `protobuf:"bytes,5,opt,name=igp_node_id,json=igpNodeId" json:"igp_node_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeTopologyNode_KEYS) Reset()         { *m = MplsTeTopologyNode_KEYS{} }
func (m *MplsTeTopologyNode_KEYS) String() string { return proto.CompactTextString(m) }
func (*MplsTeTopologyNode_KEYS) ProtoMessage()    {}
func (*MplsTeTopologyNode_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_topology_node_2d0528d30118c631, []int{0}
}
func (m *MplsTeTopologyNode_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeTopologyNode_KEYS.Unmarshal(m, b)
}
func (m *MplsTeTopologyNode_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeTopologyNode_KEYS.Marshal(b, m, deterministic)
}
func (dst *MplsTeTopologyNode_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeTopologyNode_KEYS.Merge(dst, src)
}
func (m *MplsTeTopologyNode_KEYS) XXX_Size() int {
	return xxx_messageInfo_MplsTeTopologyNode_KEYS.Size(m)
}
func (m *MplsTeTopologyNode_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeTopologyNode_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeTopologyNode_KEYS proto.InternalMessageInfo

func (m *MplsTeTopologyNode_KEYS) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *MplsTeTopologyNode_KEYS) GetIgpId() string {
	if m != nil {
		return m.IgpId
	}
	return ""
}

func (m *MplsTeTopologyNode_KEYS) GetArea() uint32 {
	if m != nil {
		return m.Area
	}
	return 0
}

func (m *MplsTeTopologyNode_KEYS) GetTopologyNodeType() string {
	if m != nil {
		return m.TopologyNodeType
	}
	return ""
}

func (m *MplsTeTopologyNode_KEYS) GetIgpNodeId() string {
	if m != nil {
		return m.IgpNodeId
	}
	return ""
}

type MplsTeTopologyNode struct {
	// The node's TE router-id. Not set for network nodes
	TopologyNodeTeRouterId string `protobuf:"bytes,50,opt,name=topology_node_te_router_id,json=topologyNodeTeRouterId" json:"topology_node_te_router_id,omitempty"`
	// Flag to indicate whether this node is overloaded
	TopologyNodeOverloaded bool `protobuf:"varint,51,opt,name=topology_node_overloaded,json=topologyNodeOverloaded" json:"topology_node_overloaded,omitempty"`
	// This node's link information
	TopologyNodeLinks []*MplsTeTopologyLink `protobuf:"bytes,52,rep,name=topology_node_links,json=topologyNodeLinks" json:"topology_node_links,omitempty"`
	// This node's SID and SRBG information
	TopologyNodeSidAndSrbg *TeSrNodeInfo `protobuf:"bytes,53,opt,name=topology_node_sid_and_srbg,json=topologyNodeSidAndSrbg" json:"topology_node_sid_and_srbg,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}      `json:"-"`
	XXX_unrecognized       []byte        `json:"-"`
	XXX_sizecache          int32         `json:"-"`
}

func (m *MplsTeTopologyNode) Reset()         { *m = MplsTeTopologyNode{} }
func (m *MplsTeTopologyNode) String() string { return proto.CompactTextString(m) }
func (*MplsTeTopologyNode) ProtoMessage()    {}
func (*MplsTeTopologyNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_topology_node_2d0528d30118c631, []int{1}
}
func (m *MplsTeTopologyNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeTopologyNode.Unmarshal(m, b)
}
func (m *MplsTeTopologyNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeTopologyNode.Marshal(b, m, deterministic)
}
func (dst *MplsTeTopologyNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeTopologyNode.Merge(dst, src)
}
func (m *MplsTeTopologyNode) XXX_Size() int {
	return xxx_messageInfo_MplsTeTopologyNode.Size(m)
}
func (m *MplsTeTopologyNode) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeTopologyNode.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeTopologyNode proto.InternalMessageInfo

func (m *MplsTeTopologyNode) GetTopologyNodeTeRouterId() string {
	if m != nil {
		return m.TopologyNodeTeRouterId
	}
	return ""
}

func (m *MplsTeTopologyNode) GetTopologyNodeOverloaded() bool {
	if m != nil {
		return m.TopologyNodeOverloaded
	}
	return false
}

func (m *MplsTeTopologyNode) GetTopologyNodeLinks() []*MplsTeTopologyLink {
	if m != nil {
		return m.TopologyNodeLinks
	}
	return nil
}

func (m *MplsTeTopologyNode) GetTopologyNodeSidAndSrbg() *TeSrNodeInfo {
	if m != nil {
		return m.TopologyNodeSidAndSrbg
	}
	return nil
}

// Information about the Shared Risk Link Group
type MplsSrlgInfo struct {
	// SRLG number
	SharedRiskGroup uint32 `protobuf:"varint,1,opt,name=shared_risk_group,json=sharedRiskGroup" json:"shared_risk_group,omitempty"`
	// SRLG name
	SrlgName             string   `protobuf:"bytes,2,opt,name=srlg_name,json=srlgName" json:"srlg_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsSrlgInfo) Reset()         { *m = MplsSrlgInfo{} }
func (m *MplsSrlgInfo) String() string { return proto.CompactTextString(m) }
func (*MplsSrlgInfo) ProtoMessage()    {}
func (*MplsSrlgInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_topology_node_2d0528d30118c631, []int{2}
}
func (m *MplsSrlgInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsSrlgInfo.Unmarshal(m, b)
}
func (m *MplsSrlgInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsSrlgInfo.Marshal(b, m, deterministic)
}
func (dst *MplsSrlgInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsSrlgInfo.Merge(dst, src)
}
func (m *MplsSrlgInfo) XXX_Size() int {
	return xxx_messageInfo_MplsSrlgInfo.Size(m)
}
func (m *MplsSrlgInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsSrlgInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MplsSrlgInfo proto.InternalMessageInfo

func (m *MplsSrlgInfo) GetSharedRiskGroup() uint32 {
	if m != nil {
		return m.SharedRiskGroup
	}
	return 0
}

func (m *MplsSrlgInfo) GetSrlgName() string {
	if m != nil {
		return m.SrlgName
	}
	return ""
}

// odu capability for flex  ODUs
type OduCapabilityFlex struct {
	// Max kbps Bandwidth of this level possible on this link
	MaxBandwidth uint32 `protobuf:"varint,1,opt,name=max_bandwidth,json=maxBandwidth" json:"max_bandwidth,omitempty"`
	// Unreserved kbps Bandwidth of this level possible on this link
	UnreservedBandwidth uint32 `protobuf:"varint,2,opt,name=unreserved_bandwidth,json=unreservedBandwidth" json:"unreserved_bandwidth,omitempty"`
	// Per LSP Max kbps Bandwidth of this level possible on this link
	MaxLspBandwidth      uint32   `protobuf:"varint,3,opt,name=max_lsp_bandwidth,json=maxLspBandwidth" json:"max_lsp_bandwidth,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OduCapabilityFlex) Reset()         { *m = OduCapabilityFlex{} }
func (m *OduCapabilityFlex) String() string { return proto.CompactTextString(m) }
func (*OduCapabilityFlex) ProtoMessage()    {}
func (*OduCapabilityFlex) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_topology_node_2d0528d30118c631, []int{3}
}
func (m *OduCapabilityFlex) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OduCapabilityFlex.Unmarshal(m, b)
}
func (m *OduCapabilityFlex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OduCapabilityFlex.Marshal(b, m, deterministic)
}
func (dst *OduCapabilityFlex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OduCapabilityFlex.Merge(dst, src)
}
func (m *OduCapabilityFlex) XXX_Size() int {
	return xxx_messageInfo_OduCapabilityFlex.Size(m)
}
func (m *OduCapabilityFlex) XXX_DiscardUnknown() {
	xxx_messageInfo_OduCapabilityFlex.DiscardUnknown(m)
}

var xxx_messageInfo_OduCapabilityFlex proto.InternalMessageInfo

func (m *OduCapabilityFlex) GetMaxBandwidth() uint32 {
	if m != nil {
		return m.MaxBandwidth
	}
	return 0
}

func (m *OduCapabilityFlex) GetUnreservedBandwidth() uint32 {
	if m != nil {
		return m.UnreservedBandwidth
	}
	return 0
}

func (m *OduCapabilityFlex) GetMaxLspBandwidth() uint32 {
	if m != nil {
		return m.MaxLspBandwidth
	}
	return 0
}

// odu capability for fixed ODUs
type OduCapabilityFixed struct {
	// Maximum Number of ODUs of this level possible on this link
	MaximumOdUs uint32 `protobuf:"varint,1,opt,name=maximum_od_us,json=maximumOdUs" json:"maximum_od_us,omitempty"`
	// Maximum Number of ODUs of this level possible on this link
	UnreservedOdUs       uint32   `protobuf:"varint,2,opt,name=unreserved_od_us,json=unreservedOdUs" json:"unreserved_od_us,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OduCapabilityFixed) Reset()         { *m = OduCapabilityFixed{} }
func (m *OduCapabilityFixed) String() string { return proto.CompactTextString(m) }
func (*OduCapabilityFixed) ProtoMessage()    {}
func (*OduCapabilityFixed) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_topology_node_2d0528d30118c631, []int{4}
}
func (m *OduCapabilityFixed) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OduCapabilityFixed.Unmarshal(m, b)
}
func (m *OduCapabilityFixed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OduCapabilityFixed.Marshal(b, m, deterministic)
}
func (dst *OduCapabilityFixed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OduCapabilityFixed.Merge(dst, src)
}
func (m *OduCapabilityFixed) XXX_Size() int {
	return xxx_messageInfo_OduCapabilityFixed.Size(m)
}
func (m *OduCapabilityFixed) XXX_DiscardUnknown() {
	xxx_messageInfo_OduCapabilityFixed.DiscardUnknown(m)
}

var xxx_messageInfo_OduCapabilityFixed proto.InternalMessageInfo

func (m *OduCapabilityFixed) GetMaximumOdUs() uint32 {
	if m != nil {
		return m.MaximumOdUs
	}
	return 0
}

func (m *OduCapabilityFixed) GetUnreservedOdUs() uint32 {
	if m != nil {
		return m.UnreservedOdUs
	}
	return 0
}

// ODU capability Union for bandwidth
type OduCapBw struct {
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// ODU capability for Fixed ODUs
	Fixed *OduCapabilityFixed `protobuf:"bytes,2,opt,name=fixed" json:"fixed,omitempty"`
	// ODU capability for Flex ODUs
	Flex                 *OduCapabilityFlex `protobuf:"bytes,3,opt,name=flex" json:"flex,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *OduCapBw) Reset()         { *m = OduCapBw{} }
func (m *OduCapBw) String() string { return proto.CompactTextString(m) }
func (*OduCapBw) ProtoMessage()    {}
func (*OduCapBw) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_topology_node_2d0528d30118c631, []int{5}
}
func (m *OduCapBw) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OduCapBw.Unmarshal(m, b)
}
func (m *OduCapBw) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OduCapBw.Marshal(b, m, deterministic)
}
func (dst *OduCapBw) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OduCapBw.Merge(dst, src)
}
func (m *OduCapBw) XXX_Size() int {
	return xxx_messageInfo_OduCapBw.Size(m)
}
func (m *OduCapBw) XXX_DiscardUnknown() {
	xxx_messageInfo_OduCapBw.DiscardUnknown(m)
}

var xxx_messageInfo_OduCapBw proto.InternalMessageInfo

func (m *OduCapBw) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *OduCapBw) GetFixed() *OduCapabilityFixed {
	if m != nil {
		return m.Fixed
	}
	return nil
}

func (m *OduCapBw) GetFlex() *OduCapabilityFlex {
	if m != nil {
		return m.Flex
	}
	return nil
}

// Odu capability at a level of multiplex tree for an ODU type
type OduCapability struct {
	// Signal Type
	SignalType string `protobuf:"bytes,1,opt,name=signal_type,json=signalType" json:"signal_type,omitempty"`
	// ODU Type at stage 1, Not Set for HO ODU
	Stage1 string `protobuf:"bytes,2,opt,name=stage1" json:"stage1,omitempty"`
	// ODU Type at stage 2, Not Set for single stage mulitplexing
	Stage2 string `protobuf:"bytes,3,opt,name=stage2" json:"stage2,omitempty"`
	// ODU Type at stage 3, Not set up to two levels of multiplexing
	Stage3 string `protobuf:"bytes,4,opt,name=stage3" json:"stage3,omitempty"`
	// ODU Type at stage 4, Not set up to three levels of multiplexing
	Stage4 string `protobuf:"bytes,5,opt,name=stage4" json:"stage4,omitempty"`
	// True if link is terminable for this ODU level
	Terminable bool `protobuf:"varint,6,opt,name=terminable" json:"terminable,omitempty"`
	// True if link is switchable for this ODU level
	Switchable bool `protobuf:"varint,7,opt,name=switchable" json:"switchable,omitempty"`
	// True if link supports 1.25G TSG for this ODU level
	Tsg1P25 bool `protobuf:"varint,8,opt,name=tsg1_p25,json=tsg1P25" json:"tsg1_p25,omitempty"`
	// True if link supports 2.5G TSG for this ODU level
	Tsg2P5 bool `protobuf:"varint,9,opt,name=tsg2_p5,json=tsg2P5" json:"tsg2_p5,omitempty"`
	// True if link VCAT capable for this ODU level
	VcatCapable bool `protobuf:"varint,10,opt,name=vcat_capable,json=vcatCapable" json:"vcat_capable,omitempty"`
	// True if link LCAS capable for this ODU level
	LcasCapable bool `protobuf:"varint,11,opt,name=lcas_capable,json=lcasCapable" json:"lcas_capable,omitempty"`
	// Bandwidth related info for this ODU level
	BandwidthInfo        *OduCapBw `protobuf:"bytes,12,opt,name=bandwidth_info,json=bandwidthInfo" json:"bandwidth_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *OduCapability) Reset()         { *m = OduCapability{} }
func (m *OduCapability) String() string { return proto.CompactTextString(m) }
func (*OduCapability) ProtoMessage()    {}
func (*OduCapability) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_topology_node_2d0528d30118c631, []int{6}
}
func (m *OduCapability) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OduCapability.Unmarshal(m, b)
}
func (m *OduCapability) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OduCapability.Marshal(b, m, deterministic)
}
func (dst *OduCapability) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OduCapability.Merge(dst, src)
}
func (m *OduCapability) XXX_Size() int {
	return xxx_messageInfo_OduCapability.Size(m)
}
func (m *OduCapability) XXX_DiscardUnknown() {
	xxx_messageInfo_OduCapability.DiscardUnknown(m)
}

var xxx_messageInfo_OduCapability proto.InternalMessageInfo

func (m *OduCapability) GetSignalType() string {
	if m != nil {
		return m.SignalType
	}
	return ""
}

func (m *OduCapability) GetStage1() string {
	if m != nil {
		return m.Stage1
	}
	return ""
}

func (m *OduCapability) GetStage2() string {
	if m != nil {
		return m.Stage2
	}
	return ""
}

func (m *OduCapability) GetStage3() string {
	if m != nil {
		return m.Stage3
	}
	return ""
}

func (m *OduCapability) GetStage4() string {
	if m != nil {
		return m.Stage4
	}
	return ""
}

func (m *OduCapability) GetTerminable() bool {
	if m != nil {
		return m.Terminable
	}
	return false
}

func (m *OduCapability) GetSwitchable() bool {
	if m != nil {
		return m.Switchable
	}
	return false
}

func (m *OduCapability) GetTsg1P25() bool {
	if m != nil {
		return m.Tsg1P25
	}
	return false
}

func (m *OduCapability) GetTsg2P5() bool {
	if m != nil {
		return m.Tsg2P5
	}
	return false
}

func (m *OduCapability) GetVcatCapable() bool {
	if m != nil {
		return m.VcatCapable
	}
	return false
}

func (m *OduCapability) GetLcasCapable() bool {
	if m != nil {
		return m.LcasCapable
	}
	return false
}

func (m *OduCapability) GetBandwidthInfo() *OduCapBw {
	if m != nil {
		return m.BandwidthInfo
	}
	return nil
}

// Link ODU Capabilities
type OduLinkCapabilities struct {
	// Max LSP Bandwidth per priority in kbit/s
	MaxLspBandwidth []uint32 `protobuf:"varint,1,rep,packed,name=max_lsp_bandwidth,json=maxLspBandwidth" json:"max_lsp_bandwidth,omitempty"`
	// ODU Capabilities of Link
	OduCapabilities      []*OduCapability `protobuf:"bytes,2,rep,name=odu_capabilities,json=oduCapabilities" json:"odu_capabilities,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *OduLinkCapabilities) Reset()         { *m = OduLinkCapabilities{} }
func (m *OduLinkCapabilities) String() string { return proto.CompactTextString(m) }
func (*OduLinkCapabilities) ProtoMessage()    {}
func (*OduLinkCapabilities) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_topology_node_2d0528d30118c631, []int{7}
}
func (m *OduLinkCapabilities) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OduLinkCapabilities.Unmarshal(m, b)
}
func (m *OduLinkCapabilities) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OduLinkCapabilities.Marshal(b, m, deterministic)
}
func (dst *OduLinkCapabilities) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OduLinkCapabilities.Merge(dst, src)
}
func (m *OduLinkCapabilities) XXX_Size() int {
	return xxx_messageInfo_OduLinkCapabilities.Size(m)
}
func (m *OduLinkCapabilities) XXX_DiscardUnknown() {
	xxx_messageInfo_OduLinkCapabilities.DiscardUnknown(m)
}

var xxx_messageInfo_OduLinkCapabilities proto.InternalMessageInfo

func (m *OduLinkCapabilities) GetMaxLspBandwidth() []uint32 {
	if m != nil {
		return m.MaxLspBandwidth
	}
	return nil
}

func (m *OduLinkCapabilities) GetOduCapabilities() []*OduCapability {
	if m != nil {
		return m.OduCapabilities
	}
	return nil
}

// A link's Segment-Routing Adjacency information
type TeSrAdjSid struct {
	// The adjacency SID assigned for the topology node
	AdjacencySid uint32 `protobuf:"varint,1,opt,name=adjacency_sid,json=adjacencySid" json:"adjacency_sid,omitempty"`
	// Link Type
	LinkType string `protobuf:"bytes,2,opt,name=link_type,json=linkType" json:"link_type,omitempty"`
	// Local Address
	LocalAddr string `protobuf:"bytes,3,opt,name=local_addr,json=localAddr" json:"local_addr,omitempty"`
	// Remote Address
	RemoteAddr string `protobuf:"bytes,4,opt,name=remote_addr,json=remoteAddr" json:"remote_addr,omitempty"`
	// The neighbor node's IGP ID
	NbrNodeIgpid string `protobuf:"bytes,5,opt,name=nbr_node_igpid,json=nbrNodeIgpid" json:"nbr_node_igpid,omitempty"`
	// The neigbor node's TE router-id
	NbrNodeTeRouterId string `protobuf:"bytes,6,opt,name=nbr_node_te_router_id,json=nbrNodeTeRouterId" json:"nbr_node_te_router_id,omitempty"`
	// IGP Flag F
	FlagF bool `protobuf:"varint,7,opt,name=flag_f,json=flagF" json:"flag_f,omitempty"`
	// IGP Flag B
	FlagB bool `protobuf:"varint,8,opt,name=flag_b,json=flagB" json:"flag_b,omitempty"`
	// IGP Flag V
	FlagV bool `protobuf:"varint,9,opt,name=flag_v,json=flagV" json:"flag_v,omitempty"`
	// IGP Flag L
	FlagL bool `protobuf:"varint,10,opt,name=flag_l,json=flagL" json:"flag_l,omitempty"`
	// IGP Flag S
	FlagS                bool     `protobuf:"varint,11,opt,name=flag_s,json=flagS" json:"flag_s,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeSrAdjSid) Reset()         { *m = TeSrAdjSid{} }
func (m *TeSrAdjSid) String() string { return proto.CompactTextString(m) }
func (*TeSrAdjSid) ProtoMessage()    {}
func (*TeSrAdjSid) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_topology_node_2d0528d30118c631, []int{8}
}
func (m *TeSrAdjSid) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeSrAdjSid.Unmarshal(m, b)
}
func (m *TeSrAdjSid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeSrAdjSid.Marshal(b, m, deterministic)
}
func (dst *TeSrAdjSid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeSrAdjSid.Merge(dst, src)
}
func (m *TeSrAdjSid) XXX_Size() int {
	return xxx_messageInfo_TeSrAdjSid.Size(m)
}
func (m *TeSrAdjSid) XXX_DiscardUnknown() {
	xxx_messageInfo_TeSrAdjSid.DiscardUnknown(m)
}

var xxx_messageInfo_TeSrAdjSid proto.InternalMessageInfo

func (m *TeSrAdjSid) GetAdjacencySid() uint32 {
	if m != nil {
		return m.AdjacencySid
	}
	return 0
}

func (m *TeSrAdjSid) GetLinkType() string {
	if m != nil {
		return m.LinkType
	}
	return ""
}

func (m *TeSrAdjSid) GetLocalAddr() string {
	if m != nil {
		return m.LocalAddr
	}
	return ""
}

func (m *TeSrAdjSid) GetRemoteAddr() string {
	if m != nil {
		return m.RemoteAddr
	}
	return ""
}

func (m *TeSrAdjSid) GetNbrNodeIgpid() string {
	if m != nil {
		return m.NbrNodeIgpid
	}
	return ""
}

func (m *TeSrAdjSid) GetNbrNodeTeRouterId() string {
	if m != nil {
		return m.NbrNodeTeRouterId
	}
	return ""
}

func (m *TeSrAdjSid) GetFlagF() bool {
	if m != nil {
		return m.FlagF
	}
	return false
}

func (m *TeSrAdjSid) GetFlagB() bool {
	if m != nil {
		return m.FlagB
	}
	return false
}

func (m *TeSrAdjSid) GetFlagV() bool {
	if m != nil {
		return m.FlagV
	}
	return false
}

func (m *TeSrAdjSid) GetFlagL() bool {
	if m != nil {
		return m.FlagL
	}
	return false
}

func (m *TeSrAdjSid) GetFlagS() bool {
	if m != nil {
		return m.FlagS
	}
	return false
}

// MPLS TE Node's Segment-Routing Information
type TeSrNodeInfo struct {
	// Segment-Routing Node-SID
	SegmentId uint32 `protobuf:"varint,1,opt,name=segment_id,json=segmentId" json:"segment_id,omitempty"`
	// Node-SID local absolute value
	SegmentIdLocalAbsoluteValue uint32 `protobuf:"varint,2,opt,name=segment_id_local_absolute_value,json=segmentIdLocalAbsoluteValue" json:"segment_id_local_absolute_value,omitempty"`
	// Segment-Routring global block start value
	SrgbStart uint32 `protobuf:"varint,3,opt,name=srgb_start,json=srgbStart" json:"srgb_start,omitempty"`
	// Segment-Routing global block size
	SrgbSize             uint32   `protobuf:"varint,4,opt,name=srgb_size,json=srgbSize" json:"srgb_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeSrNodeInfo) Reset()         { *m = TeSrNodeInfo{} }
func (m *TeSrNodeInfo) String() string { return proto.CompactTextString(m) }
func (*TeSrNodeInfo) ProtoMessage()    {}
func (*TeSrNodeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_topology_node_2d0528d30118c631, []int{9}
}
func (m *TeSrNodeInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeSrNodeInfo.Unmarshal(m, b)
}
func (m *TeSrNodeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeSrNodeInfo.Marshal(b, m, deterministic)
}
func (dst *TeSrNodeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeSrNodeInfo.Merge(dst, src)
}
func (m *TeSrNodeInfo) XXX_Size() int {
	return xxx_messageInfo_TeSrNodeInfo.Size(m)
}
func (m *TeSrNodeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TeSrNodeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TeSrNodeInfo proto.InternalMessageInfo

func (m *TeSrNodeInfo) GetSegmentId() uint32 {
	if m != nil {
		return m.SegmentId
	}
	return 0
}

func (m *TeSrNodeInfo) GetSegmentIdLocalAbsoluteValue() uint32 {
	if m != nil {
		return m.SegmentIdLocalAbsoluteValue
	}
	return 0
}

func (m *TeSrNodeInfo) GetSrgbStart() uint32 {
	if m != nil {
		return m.SrgbStart
	}
	return 0
}

func (m *TeSrNodeInfo) GetSrgbSize() uint32 {
	if m != nil {
		return m.SrgbSize
	}
	return 0
}

// Detailed pre-standard bandwidth information for a link
type MplsTeTopologyLinkBwPrestdDetail struct {
	// Link's allocated bandwidth at priority levels (priority 0 to priority 7)
	TopologyLinkPrestandardBandwidthAllocated []uint32 `protobuf:"varint,1,rep,packed,name=topology_link_prestandard_bandwidth_allocated,json=topologyLinkPrestandardBandwidthAllocated" json:"topology_link_prestandard_bandwidth_allocated,omitempty"`
	// Link's available global-pool bandwidth at priority levels (priority 0 to priority 7)
	TopologyLinkPrestandardBandwidthAvailableGlobal []uint32 `protobuf:"varint,2,rep,packed,name=topology_link_prestandard_bandwidth_available_global,json=topologyLinkPrestandardBandwidthAvailableGlobal" json:"topology_link_prestandard_bandwidth_available_global,omitempty"`
	// Link's available sub-pool bandwidth at priority levels (priority 0 to priority 7)
	TopologyLinkPrestandardBandwidthAvailableSubpool []uint32 `protobuf:"varint,3,rep,packed,name=topology_link_prestandard_bandwidth_available_subpool,json=topologyLinkPrestandardBandwidthAvailableSubpool" json:"topology_link_prestandard_bandwidth_available_subpool,omitempty"`
	XXX_NoUnkeyedLiteral                             struct{} `json:"-"`
	XXX_unrecognized                                 []byte   `json:"-"`
	XXX_sizecache                                    int32    `json:"-"`
}

func (m *MplsTeTopologyLinkBwPrestdDetail) Reset()         { *m = MplsTeTopologyLinkBwPrestdDetail{} }
func (m *MplsTeTopologyLinkBwPrestdDetail) String() string { return proto.CompactTextString(m) }
func (*MplsTeTopologyLinkBwPrestdDetail) ProtoMessage()    {}
func (*MplsTeTopologyLinkBwPrestdDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_topology_node_2d0528d30118c631, []int{10}
}
func (m *MplsTeTopologyLinkBwPrestdDetail) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeTopologyLinkBwPrestdDetail.Unmarshal(m, b)
}
func (m *MplsTeTopologyLinkBwPrestdDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeTopologyLinkBwPrestdDetail.Marshal(b, m, deterministic)
}
func (dst *MplsTeTopologyLinkBwPrestdDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeTopologyLinkBwPrestdDetail.Merge(dst, src)
}
func (m *MplsTeTopologyLinkBwPrestdDetail) XXX_Size() int {
	return xxx_messageInfo_MplsTeTopologyLinkBwPrestdDetail.Size(m)
}
func (m *MplsTeTopologyLinkBwPrestdDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeTopologyLinkBwPrestdDetail.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeTopologyLinkBwPrestdDetail proto.InternalMessageInfo

func (m *MplsTeTopologyLinkBwPrestdDetail) GetTopologyLinkPrestandardBandwidthAllocated() []uint32 {
	if m != nil {
		return m.TopologyLinkPrestandardBandwidthAllocated
	}
	return nil
}

func (m *MplsTeTopologyLinkBwPrestdDetail) GetTopologyLinkPrestandardBandwidthAvailableGlobal() []uint32 {
	if m != nil {
		return m.TopologyLinkPrestandardBandwidthAvailableGlobal
	}
	return nil
}

func (m *MplsTeTopologyLinkBwPrestdDetail) GetTopologyLinkPrestandardBandwidthAvailableSubpool() []uint32 {
	if m != nil {
		return m.TopologyLinkPrestandardBandwidthAvailableSubpool
	}
	return nil
}

// Pre-standard bandwidth information for a link belonging to a node in the MPLS TE topology
type MplsTeTopologyLinkBwPrestd struct {
	// The link's physical bandwidth
	TopologyLinkPrestandardBandwidthPhysical uint32 `protobuf:"varint,1,opt,name=topology_link_prestandard_bandwidth_physical,json=topologyLinkPrestandardBandwidthPhysical" json:"topology_link_prestandard_bandwidth_physical,omitempty"`
	// The link's reservable global bandwidth
	TopologyLinkPrestandardBandwidthReservationGlobal uint32 `protobuf:"varint,2,opt,name=topology_link_prestandard_bandwidth_reservation_global,json=topologyLinkPrestandardBandwidthReservationGlobal" json:"topology_link_prestandard_bandwidth_reservation_global,omitempty"`
	// The link's reservable subpool bandwidth
	TopologyLinkPrestandardBandwidthReservationSubpool uint32 `protobuf:"varint,3,opt,name=topology_link_prestandard_bandwidth_reservation_subpool,json=topologyLinkPrestandardBandwidthReservationSubpool" json:"topology_link_prestandard_bandwidth_reservation_subpool,omitempty"`
	// Detailed bandwidth information for this link
	TopologyLinkPrestandardBandwidthDetail *MplsTeTopologyLinkBwPrestdDetail `protobuf:"bytes,4,opt,name=topology_link_prestandard_bandwidth_detail,json=topologyLinkPrestandardBandwidthDetail" json:"topology_link_prestandard_bandwidth_detail,omitempty"`
	XXX_NoUnkeyedLiteral                   struct{}                          `json:"-"`
	XXX_unrecognized                       []byte                            `json:"-"`
	XXX_sizecache                          int32                             `json:"-"`
}

func (m *MplsTeTopologyLinkBwPrestd) Reset()         { *m = MplsTeTopologyLinkBwPrestd{} }
func (m *MplsTeTopologyLinkBwPrestd) String() string { return proto.CompactTextString(m) }
func (*MplsTeTopologyLinkBwPrestd) ProtoMessage()    {}
func (*MplsTeTopologyLinkBwPrestd) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_topology_node_2d0528d30118c631, []int{11}
}
func (m *MplsTeTopologyLinkBwPrestd) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeTopologyLinkBwPrestd.Unmarshal(m, b)
}
func (m *MplsTeTopologyLinkBwPrestd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeTopologyLinkBwPrestd.Marshal(b, m, deterministic)
}
func (dst *MplsTeTopologyLinkBwPrestd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeTopologyLinkBwPrestd.Merge(dst, src)
}
func (m *MplsTeTopologyLinkBwPrestd) XXX_Size() int {
	return xxx_messageInfo_MplsTeTopologyLinkBwPrestd.Size(m)
}
func (m *MplsTeTopologyLinkBwPrestd) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeTopologyLinkBwPrestd.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeTopologyLinkBwPrestd proto.InternalMessageInfo

func (m *MplsTeTopologyLinkBwPrestd) GetTopologyLinkPrestandardBandwidthPhysical() uint32 {
	if m != nil {
		return m.TopologyLinkPrestandardBandwidthPhysical
	}
	return 0
}

func (m *MplsTeTopologyLinkBwPrestd) GetTopologyLinkPrestandardBandwidthReservationGlobal() uint32 {
	if m != nil {
		return m.TopologyLinkPrestandardBandwidthReservationGlobal
	}
	return 0
}

func (m *MplsTeTopologyLinkBwPrestd) GetTopologyLinkPrestandardBandwidthReservationSubpool() uint32 {
	if m != nil {
		return m.TopologyLinkPrestandardBandwidthReservationSubpool
	}
	return 0
}

func (m *MplsTeTopologyLinkBwPrestd) GetTopologyLinkPrestandardBandwidthDetail() *MplsTeTopologyLinkBwPrestdDetail {
	if m != nil {
		return m.TopologyLinkPrestandardBandwidthDetail
	}
	return nil
}

// Detailed DSTE bandwidth information for a link
type MplsTeTopologyLinkBwStdDetail struct {
	// Link's allocated bandwidth per class
	TopoLinkStdBwAllocated []uint32 `protobuf:"varint,1,rep,packed,name=topo_link_std_bw_allocated,json=topoLinkStdBwAllocated" json:"topo_link_std_bw_allocated,omitempty"`
	// Link's available bandwidth per class
	TopoLinkStdBwAvailable []uint32 `protobuf:"varint,2,rep,packed,name=topo_link_std_bw_available,json=topoLinkStdBwAvailable" json:"topo_link_std_bw_available,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *MplsTeTopologyLinkBwStdDetail) Reset()         { *m = MplsTeTopologyLinkBwStdDetail{} }
func (m *MplsTeTopologyLinkBwStdDetail) String() string { return proto.CompactTextString(m) }
func (*MplsTeTopologyLinkBwStdDetail) ProtoMessage()    {}
func (*MplsTeTopologyLinkBwStdDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_topology_node_2d0528d30118c631, []int{12}
}
func (m *MplsTeTopologyLinkBwStdDetail) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeTopologyLinkBwStdDetail.Unmarshal(m, b)
}
func (m *MplsTeTopologyLinkBwStdDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeTopologyLinkBwStdDetail.Marshal(b, m, deterministic)
}
func (dst *MplsTeTopologyLinkBwStdDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeTopologyLinkBwStdDetail.Merge(dst, src)
}
func (m *MplsTeTopologyLinkBwStdDetail) XXX_Size() int {
	return xxx_messageInfo_MplsTeTopologyLinkBwStdDetail.Size(m)
}
func (m *MplsTeTopologyLinkBwStdDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeTopologyLinkBwStdDetail.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeTopologyLinkBwStdDetail proto.InternalMessageInfo

func (m *MplsTeTopologyLinkBwStdDetail) GetTopoLinkStdBwAllocated() []uint32 {
	if m != nil {
		return m.TopoLinkStdBwAllocated
	}
	return nil
}

func (m *MplsTeTopologyLinkBwStdDetail) GetTopoLinkStdBwAvailable() []uint32 {
	if m != nil {
		return m.TopoLinkStdBwAvailable
	}
	return nil
}

// IETF_standard bandwidth information for a link belonging to a node in the MPLS TE topology
type MplsTeTopologyLinkBwStd struct {
	// The link's physical bandwidth
	TopoLinkStdBwPhysical uint32 `protobuf:"varint,1,opt,name=topo_link_std_bw_physical,json=topoLinkStdBwPhysical" json:"topo_link_std_bw_physical,omitempty"`
	// The link's maximum reservable bandwidth
	TopoLinkStdBwResMax uint32 `protobuf:"varint,2,opt,name=topo_link_std_bw_res_max,json=topoLinkStdBwResMax" json:"topo_link_std_bw_res_max,omitempty"`
	// The link's reservable BC0 bandwidth
	TopoLinkStdBwResPool0 uint32 `protobuf:"varint,3,opt,name=topo_link_std_bw_res_pool0,json=topoLinkStdBwResPool0" json:"topo_link_std_bw_res_pool0,omitempty"`
	// The link's reservable BC1 bandwidth
	TopoLinkStdBwResPool1 uint32 `protobuf:"varint,4,opt,name=topo_link_std_bw_res_pool1,json=topoLinkStdBwResPool1" json:"topo_link_std_bw_res_pool1,omitempty"`
	// Detailed bandwidth information for this link
	TopoLinkStdBwDetail  *MplsTeTopologyLinkBwStdDetail `protobuf:"bytes,5,opt,name=topo_link_std_bw_detail,json=topoLinkStdBwDetail" json:"topo_link_std_bw_detail,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *MplsTeTopologyLinkBwStd) Reset()         { *m = MplsTeTopologyLinkBwStd{} }
func (m *MplsTeTopologyLinkBwStd) String() string { return proto.CompactTextString(m) }
func (*MplsTeTopologyLinkBwStd) ProtoMessage()    {}
func (*MplsTeTopologyLinkBwStd) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_topology_node_2d0528d30118c631, []int{13}
}
func (m *MplsTeTopologyLinkBwStd) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeTopologyLinkBwStd.Unmarshal(m, b)
}
func (m *MplsTeTopologyLinkBwStd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeTopologyLinkBwStd.Marshal(b, m, deterministic)
}
func (dst *MplsTeTopologyLinkBwStd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeTopologyLinkBwStd.Merge(dst, src)
}
func (m *MplsTeTopologyLinkBwStd) XXX_Size() int {
	return xxx_messageInfo_MplsTeTopologyLinkBwStd.Size(m)
}
func (m *MplsTeTopologyLinkBwStd) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeTopologyLinkBwStd.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeTopologyLinkBwStd proto.InternalMessageInfo

func (m *MplsTeTopologyLinkBwStd) GetTopoLinkStdBwPhysical() uint32 {
	if m != nil {
		return m.TopoLinkStdBwPhysical
	}
	return 0
}

func (m *MplsTeTopologyLinkBwStd) GetTopoLinkStdBwResMax() uint32 {
	if m != nil {
		return m.TopoLinkStdBwResMax
	}
	return 0
}

func (m *MplsTeTopologyLinkBwStd) GetTopoLinkStdBwResPool0() uint32 {
	if m != nil {
		return m.TopoLinkStdBwResPool0
	}
	return 0
}

func (m *MplsTeTopologyLinkBwStd) GetTopoLinkStdBwResPool1() uint32 {
	if m != nil {
		return m.TopoLinkStdBwResPool1
	}
	return 0
}

func (m *MplsTeTopologyLinkBwStd) GetTopoLinkStdBwDetail() *MplsTeTopologyLinkBwStdDetail {
	if m != nil {
		return m.TopoLinkStdBwDetail
	}
	return nil
}

// Bandwidth information for a link
type MplsTeTopologyLinkBw struct {
	BandwidthMigrationMode string `protobuf:"bytes,1,opt,name=bandwidth_migration_mode,json=bandwidthMigrationMode" json:"bandwidth_migration_mode,omitempty"`
	// Pre-standard bandwidth information for this link
	TopologyLinkBandwidthPrestandard *MplsTeTopologyLinkBwPrestd `protobuf:"bytes,2,opt,name=topology_link_bandwidth_prestandard,json=topologyLinkBandwidthPrestandard" json:"topology_link_bandwidth_prestandard,omitempty"`
	// IETF-standard bandwidth information for this link
	TopologyLinkBandwidthStandard *MplsTeTopologyLinkBwStd `protobuf:"bytes,3,opt,name=topology_link_bandwidth_standard,json=topologyLinkBandwidthStandard" json:"topology_link_bandwidth_standard,omitempty"`
	XXX_NoUnkeyedLiteral          struct{}                 `json:"-"`
	XXX_unrecognized              []byte                   `json:"-"`
	XXX_sizecache                 int32                    `json:"-"`
}

func (m *MplsTeTopologyLinkBw) Reset()         { *m = MplsTeTopologyLinkBw{} }
func (m *MplsTeTopologyLinkBw) String() string { return proto.CompactTextString(m) }
func (*MplsTeTopologyLinkBw) ProtoMessage()    {}
func (*MplsTeTopologyLinkBw) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_topology_node_2d0528d30118c631, []int{14}
}
func (m *MplsTeTopologyLinkBw) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeTopologyLinkBw.Unmarshal(m, b)
}
func (m *MplsTeTopologyLinkBw) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeTopologyLinkBw.Marshal(b, m, deterministic)
}
func (dst *MplsTeTopologyLinkBw) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeTopologyLinkBw.Merge(dst, src)
}
func (m *MplsTeTopologyLinkBw) XXX_Size() int {
	return xxx_messageInfo_MplsTeTopologyLinkBw.Size(m)
}
func (m *MplsTeTopologyLinkBw) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeTopologyLinkBw.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeTopologyLinkBw proto.InternalMessageInfo

func (m *MplsTeTopologyLinkBw) GetBandwidthMigrationMode() string {
	if m != nil {
		return m.BandwidthMigrationMode
	}
	return ""
}

func (m *MplsTeTopologyLinkBw) GetTopologyLinkBandwidthPrestandard() *MplsTeTopologyLinkBwPrestd {
	if m != nil {
		return m.TopologyLinkBandwidthPrestandard
	}
	return nil
}

func (m *MplsTeTopologyLinkBw) GetTopologyLinkBandwidthStandard() *MplsTeTopologyLinkBwStd {
	if m != nil {
		return m.TopologyLinkBandwidthStandard
	}
	return nil
}

// A link belonging to a node in the MPLS TE topology
type MplsTeTopologyLink struct {
	// Link type
	TopologyLinkType string `protobuf:"bytes,1,opt,name=topology_link_type,json=topologyLinkType" json:"topology_link_type,omitempty"`
	// Link's local interface address
	TopologyLinkInterfaceAddress string `protobuf:"bytes,2,opt,name=topology_link_interface_address,json=topologyLinkInterfaceAddress" json:"topology_link_interface_address,omitempty"`
	// Link's local interface ID
	TopologyLinkInterfaceId uint32 `protobuf:"varint,3,opt,name=topology_link_interface_id,json=topologyLinkInterfaceId" json:"topology_link_interface_id,omitempty"`
	// Link's neighbor interface address
	TopologyLinkNeighborAddress string `protobuf:"bytes,4,opt,name=topology_link_neighbor_address,json=topologyLinkNeighborAddress" json:"topology_link_neighbor_address,omitempty"`
	// Link's neighbor interface ID
	TopologyLinkNeighborId uint32 `protobuf:"varint,5,opt,name=topology_link_neighbor_id,json=topologyLinkNeighborId" json:"topology_link_neighbor_id,omitempty"`
	// System id of neighbor
	TopologyLinkNeighborSystemId string `protobuf:"bytes,6,opt,name=topology_link_neighbor_system_id,json=topologyLinkNeighborSystemId" json:"topology_link_neighbor_system_id,omitempty"`
	// Node id of neighbor
	TopologyLinkNeighborNodeId uint32 `protobuf:"varint,7,opt,name=topology_link_neighbor_node_id,json=topologyLinkNeighborNodeId" json:"topology_link_neighbor_node_id,omitempty"`
	// Neighbor's link version counter
	TopologyLinkNeighborGeneration uint32 `protobuf:"varint,8,opt,name=topology_link_neighbor_generation,json=topologyLinkNeighborGeneration" json:"topology_link_neighbor_generation,omitempty"`
	// Neighbor's link version counter
	TopologyLinkFragmentId uint32 `protobuf:"varint,9,opt,name=topology_link_fragment_id,json=topologyLinkFragmentId" json:"topology_link_fragment_id,omitempty"`
	// The link's TE metric
	TopologyLinkTeMetric uint32 `protobuf:"varint,10,opt,name=topology_link_te_metric,json=topologyLinkTeMetric" json:"topology_link_te_metric,omitempty"`
	// The link's IGP metric
	TopologyLinkIgpMetric uint32 `protobuf:"varint,11,opt,name=topology_link_igp_metric,json=topologyLinkIgpMetric" json:"topology_link_igp_metric,omitempty"`
	// Unidirectional Link Delay in micro-sec
	TopologyLinkUniDelay uint32 `protobuf:"varint,12,opt,name=topology_link_uni_delay,json=topologyLinkUniDelay" json:"topology_link_uni_delay,omitempty"`
	// Deprecated
	TopologyLinkAffinityBits uint32 `protobuf:"varint,13,opt,name=topology_link_affinity_bits,json=topologyLinkAffinityBits" json:"topology_link_affinity_bits,omitempty"`
	// The link's affinity bits (colors)
	TopologyLinkExtendedAffinityBits []uint32 `protobuf:"varint,14,rep,packed,name=topology_link_extended_affinity_bits,json=topologyLinkExtendedAffinityBits" json:"topology_link_extended_affinity_bits,omitempty"`
	// The link's switching capability
	TopologyLinkSwitchingCapability uint32 `protobuf:"varint,15,opt,name=topology_link_switching_capability,json=topologyLinkSwitchingCapability" json:"topology_link_switching_capability,omitempty"`
	// The link's encoding
	TopologyLinkEncoding uint32 `protobuf:"varint,16,opt,name=topology_link_encoding,json=topologyLinkEncoding" json:"topology_link_encoding,omitempty"`
	// The link's shared risk link groups
	SharedRiskLinkGroups []*MplsSrlgInfo `protobuf:"bytes,17,rep,name=shared_risk_link_groups,json=sharedRiskLinkGroups" json:"shared_risk_link_groups,omitempty"`
	// The link's topology bandwidth model
	TopologyLinkBandwidthModel string `protobuf:"bytes,18,opt,name=topology_link_bandwidth_model,json=topologyLinkBandwidthModel" json:"topology_link_bandwidth_model,omitempty"`
	// Bandwidth information for this link
	TopologyLinkBandwidth *MplsTeTopologyLinkBw `protobuf:"bytes,19,opt,name=topology_link_bandwidth,json=topologyLinkBandwidth" json:"topology_link_bandwidth,omitempty"`
	// ODU Link Capabilities
	OduLinkCapabilities *OduLinkCapabilities `protobuf:"bytes,20,opt,name=odu_link_capabilities,json=oduLinkCapabilities" json:"odu_link_capabilities,omitempty"`
	// Adjacency SIDs assigned for adjacency nodes
	AdjacencySiDs        []*TeSrAdjSid `protobuf:"bytes,21,rep,name=adjacency_si_ds,json=adjacencySiDs" json:"adjacency_si_ds,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *MplsTeTopologyLink) Reset()         { *m = MplsTeTopologyLink{} }
func (m *MplsTeTopologyLink) String() string { return proto.CompactTextString(m) }
func (*MplsTeTopologyLink) ProtoMessage()    {}
func (*MplsTeTopologyLink) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_topology_node_2d0528d30118c631, []int{15}
}
func (m *MplsTeTopologyLink) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeTopologyLink.Unmarshal(m, b)
}
func (m *MplsTeTopologyLink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeTopologyLink.Marshal(b, m, deterministic)
}
func (dst *MplsTeTopologyLink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeTopologyLink.Merge(dst, src)
}
func (m *MplsTeTopologyLink) XXX_Size() int {
	return xxx_messageInfo_MplsTeTopologyLink.Size(m)
}
func (m *MplsTeTopologyLink) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeTopologyLink.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeTopologyLink proto.InternalMessageInfo

func (m *MplsTeTopologyLink) GetTopologyLinkType() string {
	if m != nil {
		return m.TopologyLinkType
	}
	return ""
}

func (m *MplsTeTopologyLink) GetTopologyLinkInterfaceAddress() string {
	if m != nil {
		return m.TopologyLinkInterfaceAddress
	}
	return ""
}

func (m *MplsTeTopologyLink) GetTopologyLinkInterfaceId() uint32 {
	if m != nil {
		return m.TopologyLinkInterfaceId
	}
	return 0
}

func (m *MplsTeTopologyLink) GetTopologyLinkNeighborAddress() string {
	if m != nil {
		return m.TopologyLinkNeighborAddress
	}
	return ""
}

func (m *MplsTeTopologyLink) GetTopologyLinkNeighborId() uint32 {
	if m != nil {
		return m.TopologyLinkNeighborId
	}
	return 0
}

func (m *MplsTeTopologyLink) GetTopologyLinkNeighborSystemId() string {
	if m != nil {
		return m.TopologyLinkNeighborSystemId
	}
	return ""
}

func (m *MplsTeTopologyLink) GetTopologyLinkNeighborNodeId() uint32 {
	if m != nil {
		return m.TopologyLinkNeighborNodeId
	}
	return 0
}

func (m *MplsTeTopologyLink) GetTopologyLinkNeighborGeneration() uint32 {
	if m != nil {
		return m.TopologyLinkNeighborGeneration
	}
	return 0
}

func (m *MplsTeTopologyLink) GetTopologyLinkFragmentId() uint32 {
	if m != nil {
		return m.TopologyLinkFragmentId
	}
	return 0
}

func (m *MplsTeTopologyLink) GetTopologyLinkTeMetric() uint32 {
	if m != nil {
		return m.TopologyLinkTeMetric
	}
	return 0
}

func (m *MplsTeTopologyLink) GetTopologyLinkIgpMetric() uint32 {
	if m != nil {
		return m.TopologyLinkIgpMetric
	}
	return 0
}

func (m *MplsTeTopologyLink) GetTopologyLinkUniDelay() uint32 {
	if m != nil {
		return m.TopologyLinkUniDelay
	}
	return 0
}

func (m *MplsTeTopologyLink) GetTopologyLinkAffinityBits() uint32 {
	if m != nil {
		return m.TopologyLinkAffinityBits
	}
	return 0
}

func (m *MplsTeTopologyLink) GetTopologyLinkExtendedAffinityBits() []uint32 {
	if m != nil {
		return m.TopologyLinkExtendedAffinityBits
	}
	return nil
}

func (m *MplsTeTopologyLink) GetTopologyLinkSwitchingCapability() uint32 {
	if m != nil {
		return m.TopologyLinkSwitchingCapability
	}
	return 0
}

func (m *MplsTeTopologyLink) GetTopologyLinkEncoding() uint32 {
	if m != nil {
		return m.TopologyLinkEncoding
	}
	return 0
}

func (m *MplsTeTopologyLink) GetSharedRiskLinkGroups() []*MplsSrlgInfo {
	if m != nil {
		return m.SharedRiskLinkGroups
	}
	return nil
}

func (m *MplsTeTopologyLink) GetTopologyLinkBandwidthModel() string {
	if m != nil {
		return m.TopologyLinkBandwidthModel
	}
	return ""
}

func (m *MplsTeTopologyLink) GetTopologyLinkBandwidth() *MplsTeTopologyLinkBw {
	if m != nil {
		return m.TopologyLinkBandwidth
	}
	return nil
}

func (m *MplsTeTopologyLink) GetOduLinkCapabilities() *OduLinkCapabilities {
	if m != nil {
		return m.OduLinkCapabilities
	}
	return nil
}

func (m *MplsTeTopologyLink) GetAdjacencySiDs() []*TeSrAdjSid {
	if m != nil {
		return m.AdjacencySiDs
	}
	return nil
}

func init() {
	proto.RegisterType((*MplsTeTopologyNode_KEYS)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.topology_nodes.topology_node.mpls_te_topology_node_KEYS")
	proto.RegisterType((*MplsTeTopologyNode)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.topology_nodes.topology_node.mpls_te_topology_node")
	proto.RegisterType((*MplsSrlgInfo)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.topology_nodes.topology_node.mpls_srlg_info")
	proto.RegisterType((*OduCapabilityFlex)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.topology_nodes.topology_node.odu_capability_flex")
	proto.RegisterType((*OduCapabilityFixed)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.topology_nodes.topology_node.odu_capability_fixed")
	proto.RegisterType((*OduCapBw)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.topology_nodes.topology_node.odu_cap_bw")
	proto.RegisterType((*OduCapability)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.topology_nodes.topology_node.odu_capability")
	proto.RegisterType((*OduLinkCapabilities)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.topology_nodes.topology_node.odu_link_capabilities")
	proto.RegisterType((*TeSrAdjSid)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.topology_nodes.topology_node.te_sr_adj_sid")
	proto.RegisterType((*TeSrNodeInfo)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.topology_nodes.topology_node.te_sr_node_info")
	proto.RegisterType((*MplsTeTopologyLinkBwPrestdDetail)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.topology_nodes.topology_node.mpls_te_topology_link_bw_prestd_detail")
	proto.RegisterType((*MplsTeTopologyLinkBwPrestd)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.topology_nodes.topology_node.mpls_te_topology_link_bw_prestd")
	proto.RegisterType((*MplsTeTopologyLinkBwStdDetail)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.topology_nodes.topology_node.mpls_te_topology_link_bw_std_detail")
	proto.RegisterType((*MplsTeTopologyLinkBwStd)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.topology_nodes.topology_node.mpls_te_topology_link_bw_std")
	proto.RegisterType((*MplsTeTopologyLinkBw)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.topology_nodes.topology_node.mpls_te_topology_link_bw")
	proto.RegisterType((*MplsTeTopologyLink)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.topology_nodes.topology_node.mpls_te_topology_link")
}

func init() {
	proto.RegisterFile("mpls_te_topology_node.proto", fileDescriptor_mpls_te_topology_node_2d0528d30118c631)
}

var fileDescriptor_mpls_te_topology_node_2d0528d30118c631 = []byte{
	// 1892 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0x4b, 0x6f, 0x1c, 0xc7,
	0x11, 0xc6, 0x90, 0x22, 0x45, 0xd6, 0x6a, 0x49, 0xb1, 0x49, 0x8a, 0x63, 0x52, 0x12, 0xe9, 0x91,
	0x61, 0x30, 0x82, 0xc3, 0x88, 0x2b, 0x6d, 0x6c, 0x27, 0xc8, 0x81, 0xd4, 0x0b, 0x0b, 0x53, 0x32,
	0x31, 0x1b, 0x29, 0x30, 0x12, 0xa7, 0xdd, 0xb3, 0xdd, 0x3b, 0x6c, 0x73, 0x5e, 0x99, 0x9e, 0x25,
	0x77, 0x0d, 0xe4, 0x90, 0x43, 0x8e, 0x3e, 0x04, 0x41, 0x80, 0xe4, 0x90, 0x43, 0x8e, 0x39, 0xe4,
	0x90, 0x04, 0xf0, 0x2d, 0xd7, 0x04, 0xc8, 0x6f, 0xc8, 0x2f, 0xc8, 0xaf, 0x30, 0xba, 0xa7, 0xe7,
	0xb5, 0x3b, 0x34, 0x29, 0x80, 0xd4, 0x6d, 0xba, 0xaa, 0xbe, 0xaa, 0x9a, 0xee, 0xaf, 0xaa, 0x1f,
	0xb0, 0xe1, 0x47, 0x9e, 0xc0, 0x09, 0xc3, 0x49, 0x18, 0x85, 0x5e, 0xe8, 0x8e, 0x70, 0x10, 0x52,
	0xb6, 0x13, 0xc5, 0x61, 0x12, 0xa2, 0x67, 0x3d, 0x2e, 0x7a, 0x21, 0xe6, 0xa1, 0xc0, 0xc3, 0x18,
	0x67, 0x96, 0x61, 0xc4, 0xe2, 0x9d, 0x6c, 0x20, 0x12, 0x12, 0x50, 0x67, 0xb4, 0x53, 0x81, 0x8b,
	0xea, 0xd0, 0xfa, 0xbb, 0x01, 0xeb, 0xb5, 0x71, 0xf0, 0x27, 0x4f, 0x3f, 0xeb, 0xa2, 0x75, 0x98,
	0x53, 0xf1, 0x7a, 0xa1, 0x67, 0x1a, 0x5b, 0xc6, 0xf6, 0xbc, 0x9d, 0x8f, 0xd1, 0x2a, 0xcc, 0x72,
	0x37, 0xc2, 0x9c, 0x9a, 0x53, 0x4a, 0x33, 0xc3, 0xdd, 0xa8, 0x43, 0x11, 0x82, 0x6b, 0x24, 0x66,
	0xc4, 0x9c, 0xde, 0x32, 0xb6, 0x9b, 0xb6, 0xfa, 0x46, 0x1f, 0x00, 0xaa, 0x3a, 0x4f, 0x46, 0x11,
	0x33, 0xaf, 0x29, 0xd8, 0xcd, 0x4c, 0xf3, 0x32, 0xa4, 0xec, 0xa7, 0xa3, 0x88, 0xa1, 0xbb, 0xd0,
	0x90, 0x8e, 0x95, 0x21, 0xa7, 0xe6, 0x8c, 0x32, 0x9b, 0xe7, 0x6e, 0x24, 0x2d, 0x3a, 0xd4, 0xfa,
	0xe7, 0x34, 0xac, 0xd6, 0xe6, 0x8c, 0x7e, 0x04, 0xeb, 0x63, 0x71, 0x18, 0x8e, 0xc3, 0x41, 0xc2,
	0x62, 0xe9, 0xa8, 0xa5, 0x1c, 0xdd, 0xaa, 0xc4, 0x63, 0xb6, 0x52, 0x77, 0x28, 0xfa, 0x08, 0xcc,
	0x2a, 0x36, 0x3c, 0x61, 0xb1, 0x17, 0x12, 0xca, 0xa8, 0xf9, 0x70, 0xcb, 0xd8, 0x9e, 0xab, 0x22,
	0x3f, 0xcd, 0xb5, 0xe8, 0x6b, 0x03, 0x96, 0xab, 0x50, 0x8f, 0x07, 0xc7, 0xc2, 0x7c, 0xb4, 0x35,
	0xbd, 0xdd, 0x68, 0x7d, 0xbe, 0x73, 0x39, 0x4b, 0xb5, 0x33, 0xf1, 0xcb, 0x32, 0x8a, 0xbd, 0x54,
	0x4e, 0xea, 0x40, 0xc6, 0x45, 0xbf, 0x37, 0xc6, 0xa7, 0x41, 0x70, 0x8a, 0x49, 0x40, 0xb1, 0x88,
	0x1d, 0xd7, 0x6c, 0x6f, 0x19, 0xdb, 0x8d, 0xd6, 0xcf, 0x2e, 0x2b, 0x2d, 0x69, 0x17, 0xeb, 0xc5,
	0x0a, 0xfa, 0x61, 0x75, 0x96, 0xba, 0x9c, 0xee, 0x05, 0xb4, 0x1b, 0x3b, 0xae, 0xf5, 0x19, 0x2c,
	0x28, 0xbf, 0x22, 0xf6, 0x5c, 0x65, 0x89, 0xee, 0xc3, 0x92, 0x38, 0x22, 0x31, 0xa3, 0x38, 0xe6,
	0xe2, 0x18, 0xbb, 0x71, 0x38, 0x88, 0x14, 0xcb, 0x9a, 0xf6, 0x62, 0xaa, 0xb0, 0xb9, 0x38, 0x7e,
	0x2e, 0xc5, 0x68, 0x03, 0xe6, 0x15, 0x30, 0x20, 0x3e, 0xd3, 0x7c, 0x9b, 0x93, 0x82, 0x97, 0xc4,
	0x67, 0xd6, 0x9f, 0x0c, 0x58, 0x0e, 0xe9, 0x00, 0xf7, 0x48, 0x44, 0x1c, 0xee, 0xf1, 0x64, 0x84,
	0xfb, 0x1e, 0x1b, 0xa2, 0x7b, 0xd0, 0xf4, 0xc9, 0x10, 0x3b, 0x24, 0xa0, 0xa7, 0x9c, 0x26, 0x47,
	0xda, 0xf9, 0x0d, 0x9f, 0x0c, 0xf7, 0x33, 0x19, 0xda, 0x85, 0x95, 0x41, 0x10, 0x33, 0xc1, 0xe2,
	0x13, 0x46, 0x4b, 0xb6, 0x53, 0xca, 0x76, 0xb9, 0xd0, 0x15, 0x90, 0xfb, 0xb0, 0x24, 0xfd, 0x7a,
	0x22, 0x2a, 0xd9, 0xa7, 0x7c, 0x5f, 0xf4, 0xc9, 0xf0, 0x40, 0x44, 0xb9, 0xad, 0x45, 0x61, 0x65,
	0x3c, 0x35, 0x3e, 0x64, 0x14, 0x59, 0x2a, 0x37, 0xee, 0x0f, 0x7c, 0x1c, 0x52, 0x3c, 0x10, 0x3a,
	0xb7, 0x86, 0x16, 0x7e, 0x4a, 0x5f, 0x09, 0xb4, 0x0d, 0x37, 0x4b, 0xa9, 0xa5, 0x66, 0x69, 0x5a,
	0x0b, 0x85, 0x5c, 0x5a, 0x5a, 0xbf, 0x9d, 0x02, 0xd0, 0x61, 0xb0, 0x73, 0x2a, 0x6b, 0x50, 0x55,
	0x58, 0x5a, 0xb2, 0xea, 0x1b, 0xc5, 0x30, 0xa3, 0x22, 0x2b, 0x0f, 0x8d, 0xd6, 0x2f, 0x2e, 0x6b,
	0xfd, 0xeb, 0xfe, 0xce, 0x4e, 0x43, 0xa1, 0x10, 0xae, 0xc9, 0x85, 0x50, 0x73, 0xd3, 0x68, 0xfd,
	0xfc, 0xaa, 0x42, 0x7a, 0x6c, 0x68, 0xab, 0x40, 0xd6, 0xbf, 0xa7, 0x61, 0xa1, 0xaa, 0x45, 0x9b,
	0xd0, 0x10, 0xdc, 0x0d, 0x88, 0x87, 0x4b, 0x53, 0x02, 0xa9, 0x48, 0xb5, 0x9b, 0x5b, 0x30, 0x2b,
	0x12, 0xe2, 0xb2, 0x5d, 0xcd, 0x2b, 0x3d, 0xca, 0xe5, 0x2d, 0x95, 0x7e, 0x26, 0x6f, 0xe5, 0xf2,
	0x87, 0xba, 0x81, 0xe9, 0x51, 0x2e, 0x7f, 0xa4, 0x3b, 0x96, 0x1e, 0xa1, 0xbb, 0x00, 0x09, 0x8b,
	0x7d, 0x1e, 0x10, 0xc7, 0x63, 0xe6, 0xac, 0x6a, 0x25, 0x25, 0x89, 0xd4, 0x8b, 0x53, 0x9e, 0xf4,
	0x8e, 0x94, 0xfe, 0x7a, 0xaa, 0x2f, 0x24, 0xe8, 0x1d, 0x98, 0x4b, 0x84, 0xbb, 0x8b, 0xa3, 0x56,
	0xdb, 0x9c, 0x53, 0xda, 0xeb, 0x72, 0x7c, 0xd8, 0x6a, 0xa3, 0x35, 0x90, 0x9f, 0x2d, 0x1c, 0xb5,
	0xcd, 0x79, 0xa5, 0x99, 0x95, 0xc3, 0xc3, 0x36, 0x7a, 0x17, 0x6e, 0x9c, 0xf4, 0x48, 0x92, 0xce,
	0x83, 0xc7, 0x4c, 0x50, 0xda, 0x86, 0x94, 0x3d, 0x4e, 0x45, 0xd2, 0xc4, 0xeb, 0x11, 0x91, 0x9b,
	0x34, 0x52, 0x13, 0x29, 0xcb, 0x4c, 0x46, 0xb0, 0x90, 0xf3, 0x5b, 0x95, 0xac, 0x79, 0x43, 0x2d,
	0xa4, 0x7d, 0xc9, 0x0b, 0x89, 0x9d, 0x53, 0xbb, 0x99, 0x47, 0xea, 0x04, 0xfd, 0xd0, 0xfa, 0x8f,
	0x01, 0xab, 0x52, 0x2b, 0x7b, 0x5c, 0xb1, 0x9a, 0x9c, 0x89, 0xfa, 0xe2, 0x33, 0xb6, 0xa6, 0x6b,
	0x8a, 0x0f, 0xfd, 0xc6, 0x80, 0x9b, 0x15, 0x3a, 0x70, 0x26, 0x2b, 0x48, 0xb6, 0xe5, 0xd7, 0x57,
	0x43, 0x46, 0x7b, 0x31, 0xa4, 0x83, 0xc7, 0xa5, 0x70, 0xd6, 0xff, 0xa6, 0xa0, 0x99, 0xf6, 0x48,
	0x42, 0xbf, 0x94, 0x9d, 0x58, 0xb6, 0x25, 0x42, 0xbf, 0x24, 0x3d, 0x16, 0xf4, 0x46, 0x52, 0x90,
	0xb5, 0xa5, 0x5c, 0xd8, 0xe5, 0x54, 0x36, 0x3c, 0xf5, 0xef, 0x8a, 0xb4, 0xba, 0xe1, 0x49, 0x81,
	0xa2, 0xec, 0x1d, 0x00, 0x2f, 0xec, 0x11, 0x0f, 0x13, 0x4a, 0x63, 0x4d, 0xcf, 0x79, 0x25, 0xd9,
	0xa3, 0x34, 0x96, 0x94, 0x8f, 0x99, 0x1f, 0x26, 0x2c, 0xd5, 0xa7, 0x34, 0x85, 0x54, 0xa4, 0x0c,
	0xde, 0x83, 0x85, 0xc0, 0xc9, 0x9a, 0xb6, 0x1b, 0xe5, 0x9b, 0xec, 0x8d, 0xc0, 0x89, 0xd5, 0x26,
	0x2b, 0x65, 0xe8, 0x01, 0xac, 0xe6, 0x56, 0x95, 0x8d, 0x74, 0x56, 0x19, 0x2f, 0x69, 0xe3, 0xd2,
	0x1e, 0xba, 0x0a, 0xb3, 0x7d, 0x8f, 0xb8, 0xb8, 0xaf, 0x69, 0x3c, 0x23, 0x47, 0xcf, 0x72, 0xb1,
	0xa3, 0xf9, 0xab, 0xc4, 0xfb, 0xb9, 0xf8, 0x44, 0x93, 0x57, 0x89, 0x5f, 0xe7, 0x62, 0x4f, 0xb3,
	0x56, 0x89, 0x0f, 0x72, 0xb1, 0xd0, 0x4c, 0x55, 0xe2, 0xae, 0xf5, 0x0f, 0x03, 0x16, 0xc7, 0xb6,
	0x20, 0x39, 0x3d, 0x82, 0xb9, 0x3e, 0x0b, 0x12, 0x9c, 0xcf, 0xee, 0xbc, 0x96, 0x74, 0x28, 0x7a,
	0x02, 0x9b, 0x85, 0x1a, 0xeb, 0x89, 0x74, 0x44, 0xe8, 0x0d, 0x12, 0x86, 0x4f, 0x88, 0x37, 0x60,
	0xba, 0xcb, 0x6e, 0xe4, 0x98, 0x03, 0x35, 0xb7, 0xda, 0xe6, 0xb5, 0x34, 0x51, 0x41, 0x62, 0xd7,
	0x91, 0x24, 0x89, 0x13, 0xdd, 0xfd, 0xe7, 0xa5, 0xa4, 0x2b, 0x05, 0xe9, 0x86, 0x25, 0xd5, 0xfc,
	0xab, 0xf4, 0xa4, 0xd3, 0x94, 0x1b, 0x96, 0xeb, 0x74, 0xf9, 0x57, 0xcc, 0xfa, 0xff, 0x14, 0xbc,
	0x5f, 0xbb, 0x9d, 0x63, 0xe7, 0x14, 0x47, 0x31, 0x13, 0x09, 0xc5, 0x94, 0x25, 0x84, 0x7b, 0xe8,
	0x0b, 0xf8, 0x7e, 0xd5, 0x42, 0xa9, 0x49, 0x40, 0x49, 0x5c, 0xda, 0xad, 0x30, 0xf1, 0xe4, 0x7f,
	0x24, 0x8c, 0xea, 0x52, 0xf8, 0x5e, 0x06, 0x92, 0x47, 0x82, 0xc3, 0x02, 0x92, 0xd7, 0xc6, 0x5e,
	0x06, 0x40, 0x3e, 0x3c, 0xba, 0x50, 0x84, 0x13, 0xc2, 0x3d, 0xd9, 0x16, 0xb0, 0xeb, 0x85, 0x0e,
	0xf1, 0x54, 0x1d, 0x35, 0xed, 0x1f, 0x9c, 0x1b, 0x28, 0xc3, 0x3d, 0x57, 0x30, 0x14, 0x42, 0xfb,
	0xcd, 0xc2, 0x89, 0x81, 0x13, 0x85, 0xa1, 0x67, 0x4e, 0xab, 0x78, 0x0f, 0x2e, 0x1c, 0xaf, 0x9b,
	0xe2, 0xac, 0x6f, 0xae, 0xc1, 0xe6, 0x39, 0x93, 0x8d, 0x7e, 0x09, 0x1f, 0x5c, 0x24, 0xa9, 0xe8,
	0x68, 0x24, 0x78, 0x8f, 0x78, 0x9a, 0x53, 0xdb, 0xe7, 0xe5, 0x72, 0xa8, 0xed, 0xd1, 0xaf, 0xe0,
	0x87, 0x17, 0xf1, 0x9f, 0xee, 0xe9, 0x24, 0xe1, 0x61, 0x50, 0xcc, 0xb2, 0x8c, 0xb4, 0x7b, 0x5e,
	0x24, 0xbb, 0x40, 0xea, 0x79, 0x16, 0xf0, 0xe1, 0x9b, 0x86, 0x2c, 0x66, 0x5a, 0xc6, 0x6c, 0xbd,
	0x41, 0x4c, 0x3d, 0xd7, 0xe8, 0xbf, 0x06, 0xdc, 0xbf, 0x48, 0xd4, 0x94, 0xdc, 0xaa, 0x2e, 0x1a,
	0xad, 0xe0, 0x4a, 0x4f, 0xc8, 0x13, 0x25, 0x65, 0xbf, 0x7f, 0xde, 0x8f, 0x3d, 0x51, 0x76, 0xd6,
	0x9f, 0x0d, 0xb8, 0x77, 0xa6, 0xcb, 0x52, 0x89, 0xea, 0x5b, 0x47, 0xaa, 0x92, 0x72, 0xe7, 0x74,
	0xa2, 0x1e, 0xd5, 0xa9, 0x58, 0xc6, 0xeb, 0x26, 0x74, 0xff, 0xb4, 0x28, 0xbe, 0x5a, 0x6c, 0xc6,
	0x60, 0x5d, 0x62, 0x63, 0xd8, 0x4c, 0x6b, 0xfd, 0x75, 0x1a, 0x6e, 0x7f, 0x57, 0x7e, 0xe8, 0x23,
	0x78, 0x67, 0xc2, 0xf9, 0x18, 0x85, 0x57, 0x2b, 0xbe, 0x73, 0xbe, 0xb6, 0xd3, 0xcb, 0x50, 0x05,
	0x19, 0x33, 0x81, 0x7d, 0x32, 0xcc, 0x0e, 0xc6, 0x15, 0xa0, 0xcd, 0xc4, 0x0b, 0x32, 0x44, 0x1f,
	0xd7, 0xfc, 0x8d, 0x84, 0x49, 0x6e, 0x3c, 0xd0, 0xb4, 0x5a, 0x1d, 0x07, 0x1e, 0x4a, 0xe5, 0x77,
	0x42, 0x77, 0x75, 0x03, 0xad, 0x85, 0xee, 0xa2, 0xbf, 0x18, 0xb0, 0x36, 0x81, 0xd5, 0x0c, 0x9b,
	0x51, 0x0c, 0x3b, 0xbe, 0x72, 0x86, 0x95, 0xe8, 0x55, 0x9d, 0x19, 0xcd, 0xa5, 0x7f, 0x4d, 0x83,
	0x79, 0x16, 0x58, 0x5e, 0x3d, 0x8b, 0xd2, 0xf0, 0xb9, 0x1b, 0xa7, 0xe5, 0xe8, 0x87, 0x34, 0x3b,
	0xaf, 0xde, 0xca, 0xf5, 0x2f, 0x32, 0xf5, 0x0b, 0x79, 0xe1, 0xfd, 0xc6, 0x80, 0x7b, 0x63, 0xee,
	0x8a, 0x66, 0x55, 0x30, 0x5b, 0x9f, 0xf9, 0xdd, 0xb7, 0x54, 0x68, 0xf6, 0x56, 0xb9, 0xc2, 0x8a,
	0x6e, 0x58, 0x24, 0x84, 0xfe, 0x66, 0xc0, 0xd6, 0x59, 0x89, 0xe7, 0x59, 0xa7, 0xd7, 0x06, 0xfa,
	0x36, 0x16, 0xcf, 0xbe, 0x53, 0x9b, 0x72, 0x57, 0xa7, 0x62, 0xfd, 0xa1, 0x59, 0xf3, 0xe6, 0x20,
	0xf1, 0x95, 0xb7, 0x8d, 0xe2, 0xc4, 0x66, 0x54, 0xdf, 0x36, 0x0e, 0xb2, 0x93, 0xdb, 0x53, 0xd8,
	0xac, 0x5a, 0xf3, 0x20, 0x61, 0x71, 0x9f, 0xf4, 0xd2, 0xb3, 0x1a, 0x13, 0x42, 0x1f, 0xf6, 0x6e,
	0x97, 0xa1, 0x9d, 0xcc, 0x68, 0x2f, 0xb5, 0x41, 0x3f, 0x2e, 0xdd, 0xf0, 0xc7, 0xdc, 0x70, 0xaa,
	0x0b, 0x6d, 0xad, 0xd6, 0x43, 0x87, 0xa2, 0xc7, 0x70, 0xb7, 0x0a, 0x0e, 0x18, 0x77, 0x8f, 0x9c,
	0x30, 0xce, 0x53, 0x48, 0x4f, 0x8c, 0x1b, 0x65, 0x07, 0x2f, 0xb5, 0x4d, 0x96, 0xc1, 0xc7, 0x69,
	0x6f, 0xa9, 0x71, 0xa2, 0x4f, 0x93, 0xcd, 0xe2, 0x25, 0xa0, 0x8c, 0xef, 0x50, 0xf4, 0x6c, 0x7c,
	0xe9, 0x73, 0xa8, 0x18, 0x89, 0x84, 0xf9, 0xc5, 0x11, 0xf3, 0x76, 0x9d, 0x87, 0xae, 0x32, 0xea,
	0x50, 0xb4, 0x7f, 0xe6, 0x7f, 0x64, 0x4f, 0x47, 0xd7, 0x55, 0x1e, 0xeb, 0x75, 0x5e, 0xd2, 0xb7,
	0x24, 0xd4, 0x81, 0x77, 0xcf, 0xf0, 0xe1, 0xb2, 0x80, 0xa5, 0x95, 0xa6, 0x4e, 0xad, 0x4d, 0xfb,
	0x6e, 0x9d, 0x9b, 0xe7, 0xb9, 0xd5, 0xe4, 0x8c, 0xf4, 0x63, 0x92, 0x1f, 0x42, 0xe7, 0x27, 0x67,
	0xe4, 0x99, 0x56, 0x77, 0x28, 0x6a, 0xc3, 0xda, 0x18, 0x87, 0x18, 0xf6, 0x59, 0x12, 0xf3, 0x9e,
	0x3a, 0x03, 0x37, 0xed, 0x95, 0x0a, 0x91, 0xd8, 0x0b, 0xa5, 0x43, 0x1f, 0x96, 0x9e, 0xac, 0x52,
	0x16, 0xb8, 0x51, 0x86, 0x6b, 0x14, 0x1d, 0x33, 0xe7, 0x80, 0x1b, 0x69, 0xe0, 0x44, 0xbc, 0x41,
	0xc0, 0x31, 0x65, 0x1e, 0x19, 0xa9, 0x1b, 0xde, 0x58, 0xbc, 0x57, 0x01, 0x7f, 0x22, 0x75, 0xe8,
	0x27, 0xb0, 0x51, 0x85, 0x91, 0x7e, 0x9f, 0x07, 0xf2, 0x0a, 0xee, 0xf0, 0x44, 0x98, 0x4d, 0x05,
	0x35, 0xcb, 0xd0, 0x3d, 0x6d, 0xb0, 0xcf, 0x13, 0x81, 0x5e, 0xc2, 0x7b, 0x55, 0x38, 0x1b, 0x26,
	0x2c, 0xa0, 0x8c, 0x8e, 0xf9, 0x59, 0x50, 0xbb, 0x5e, 0xa5, 0x87, 0x3c, 0xd5, 0x96, 0x15, 0x7f,
	0x9f, 0x80, 0x55, 0xf5, 0x97, 0x5e, 0x9a, 0x79, 0xe0, 0x96, 0x2e, 0x64, 0xe6, 0xa2, 0xca, 0x6a,
	0xb3, 0xec, 0xad, 0x9b, 0xd9, 0x3d, 0x2e, 0x9e, 0x09, 0x1e, 0xc1, 0xad, 0xb1, 0xe4, 0x82, 0x5e,
	0x48, 0x79, 0xe0, 0x9a, 0x37, 0x27, 0x67, 0xe4, 0xa9, 0xd6, 0xa1, 0xaf, 0x0d, 0x58, 0x2b, 0xbf,
	0x61, 0x29, 0xa4, 0x7a, 0xc8, 0x12, 0xe6, 0xd2, 0xe5, 0xde, 0x33, 0xab, 0x8f, 0x67, 0xf6, 0x4a,
	0xf1, 0x42, 0x26, 0x33, 0x52, 0xaf, 0x64, 0x02, 0xed, 0xc1, 0x9d, 0xb3, 0xba, 0xaa, 0xdc, 0x4d,
	0x3c, 0x13, 0xa9, 0xba, 0x5a, 0xaf, 0x6d, 0x76, 0x72, 0x47, 0xf1, 0xd0, 0x1f, 0x8d, 0x71, 0x72,
	0x14, 0xd7, 0xec, 0x65, 0xd5, 0x90, 0xbf, 0xb8, 0xea, 0x86, 0x5c, 0xa5, 0x6d, 0x71, 0x9d, 0xff,
	0xdd, 0x59, 0x8f, 0x02, 0xe6, 0x8a, 0x4a, 0xec, 0xf3, 0xcb, 0xbc, 0xd3, 0x4f, 0x04, 0xb1, 0x97,
	0x43, 0x3a, 0x90, 0x09, 0x95, 0xaf, 0xf7, 0xe8, 0xd7, 0xb0, 0x58, 0xbe, 0xcc, 0x63, 0x2a, 0xcc,
	0x55, 0xb5, 0xf0, 0xaf, 0x2e, 0xf7, 0x81, 0x55, 0x3f, 0x1e, 0xd8, 0xcd, 0xd2, 0x2b, 0xc1, 0x13,
	0xe1, 0xcc, 0xaa, 0xe7, 0xf8, 0x87, 0xdf, 0x06, 0x00, 0x00, 0xff, 0xff, 0x0a, 0x63, 0x9e, 0x01,
	0x2d, 0x18, 0x00, 0x00,
}
