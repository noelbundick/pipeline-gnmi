// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mpls_te_flex_lsp.proto

package cisco_ios_xr_mpls_te_oper_mpls_te_standby_tunnels_tunnel_flex_lsps_tunnel_flex_lsp

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// MPLS TE Flex LSP Information
type MplsTeFlexLsp_KEYS struct {
	CType                string   `protobuf:"bytes,1,opt,name=c_type,json=cType" json:"c_type,omitempty"`
	TunnelId             uint32   `protobuf:"varint,2,opt,name=tunnel_id,json=tunnelId" json:"tunnel_id,omitempty"`
	TunnelName           string   `protobuf:"bytes,3,opt,name=tunnel_name,json=tunnelName" json:"tunnel_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeFlexLsp_KEYS) Reset()         { *m = MplsTeFlexLsp_KEYS{} }
func (m *MplsTeFlexLsp_KEYS) String() string { return proto.CompactTextString(m) }
func (*MplsTeFlexLsp_KEYS) ProtoMessage()    {}
func (*MplsTeFlexLsp_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_flex_lsp_908def27caba9389, []int{0}
}
func (m *MplsTeFlexLsp_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeFlexLsp_KEYS.Unmarshal(m, b)
}
func (m *MplsTeFlexLsp_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeFlexLsp_KEYS.Marshal(b, m, deterministic)
}
func (dst *MplsTeFlexLsp_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeFlexLsp_KEYS.Merge(dst, src)
}
func (m *MplsTeFlexLsp_KEYS) XXX_Size() int {
	return xxx_messageInfo_MplsTeFlexLsp_KEYS.Size(m)
}
func (m *MplsTeFlexLsp_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeFlexLsp_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeFlexLsp_KEYS proto.InternalMessageInfo

func (m *MplsTeFlexLsp_KEYS) GetCType() string {
	if m != nil {
		return m.CType
	}
	return ""
}

func (m *MplsTeFlexLsp_KEYS) GetTunnelId() uint32 {
	if m != nil {
		return m.TunnelId
	}
	return 0
}

func (m *MplsTeFlexLsp_KEYS) GetTunnelName() string {
	if m != nil {
		return m.TunnelName
	}
	return ""
}

type MplsTeFlexLsp struct {
	// Tunnel UP
	IsTunnelUp bool `protobuf:"varint,50,opt,name=is_tunnel_up,json=isTunnelUp" json:"is_tunnel_up,omitempty"`
	// Tunnel ID
	TunId uint32 `protobuf:"varint,51,opt,name=tun_id,json=tunId" json:"tun_id,omitempty"`
	// Source
	SourceAddress string `protobuf:"bytes,52,opt,name=source_address,json=sourceAddress" json:"source_address,omitempty"`
	// Destination
	DestinationAddress string `protobuf:"bytes,53,opt,name=destination_address,json=destinationAddress" json:"destination_address,omitempty"`
	// Extended Tunnel ID
	ExtendedTunnelId string `protobuf:"bytes,54,opt,name=extended_tunnel_id,json=extendedTunnelId" json:"extended_tunnel_id,omitempty"`
	//  Working LSP info
	WorkingLsp *MplsTeFlexLspLsp `protobuf:"bytes,55,opt,name=working_lsp,json=workingLsp" json:"working_lsp,omitempty"`
	//  Protect LSP info
	ProtectLsp           *MplsTeFlexLspLsp `protobuf:"bytes,56,opt,name=protect_lsp,json=protectLsp" json:"protect_lsp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *MplsTeFlexLsp) Reset()         { *m = MplsTeFlexLsp{} }
func (m *MplsTeFlexLsp) String() string { return proto.CompactTextString(m) }
func (*MplsTeFlexLsp) ProtoMessage()    {}
func (*MplsTeFlexLsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_flex_lsp_908def27caba9389, []int{1}
}
func (m *MplsTeFlexLsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeFlexLsp.Unmarshal(m, b)
}
func (m *MplsTeFlexLsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeFlexLsp.Marshal(b, m, deterministic)
}
func (dst *MplsTeFlexLsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeFlexLsp.Merge(dst, src)
}
func (m *MplsTeFlexLsp) XXX_Size() int {
	return xxx_messageInfo_MplsTeFlexLsp.Size(m)
}
func (m *MplsTeFlexLsp) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeFlexLsp.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeFlexLsp proto.InternalMessageInfo

func (m *MplsTeFlexLsp) GetIsTunnelUp() bool {
	if m != nil {
		return m.IsTunnelUp
	}
	return false
}

func (m *MplsTeFlexLsp) GetTunId() uint32 {
	if m != nil {
		return m.TunId
	}
	return 0
}

func (m *MplsTeFlexLsp) GetSourceAddress() string {
	if m != nil {
		return m.SourceAddress
	}
	return ""
}

func (m *MplsTeFlexLsp) GetDestinationAddress() string {
	if m != nil {
		return m.DestinationAddress
	}
	return ""
}

func (m *MplsTeFlexLsp) GetExtendedTunnelId() string {
	if m != nil {
		return m.ExtendedTunnelId
	}
	return ""
}

func (m *MplsTeFlexLsp) GetWorkingLsp() *MplsTeFlexLspLsp {
	if m != nil {
		return m.WorkingLsp
	}
	return nil
}

func (m *MplsTeFlexLsp) GetProtectLsp() *MplsTeFlexLspLsp {
	if m != nil {
		return m.ProtectLsp
	}
	return nil
}

// RSVP ERO IPV4 subobject
type RsvpMgmtEroIpv4Subobj struct {
	// ERO Entry Is Strict
	IsStrictRoute bool `protobuf:"varint,1,opt,name=is_strict_route,json=isStrictRoute" json:"is_strict_route,omitempty"`
	// The ERO IPV4 Address
	EroAddress string `protobuf:"bytes,2,opt,name=ero_address,json=eroAddress" json:"ero_address,omitempty"`
	// ERO Prefix Length
	PrefixLength         uint32   `protobuf:"varint,3,opt,name=prefix_length,json=prefixLength" json:"prefix_length,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RsvpMgmtEroIpv4Subobj) Reset()         { *m = RsvpMgmtEroIpv4Subobj{} }
func (m *RsvpMgmtEroIpv4Subobj) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtEroIpv4Subobj) ProtoMessage()    {}
func (*RsvpMgmtEroIpv4Subobj) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_flex_lsp_908def27caba9389, []int{2}
}
func (m *RsvpMgmtEroIpv4Subobj) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtEroIpv4Subobj.Unmarshal(m, b)
}
func (m *RsvpMgmtEroIpv4Subobj) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtEroIpv4Subobj.Marshal(b, m, deterministic)
}
func (dst *RsvpMgmtEroIpv4Subobj) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtEroIpv4Subobj.Merge(dst, src)
}
func (m *RsvpMgmtEroIpv4Subobj) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtEroIpv4Subobj.Size(m)
}
func (m *RsvpMgmtEroIpv4Subobj) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtEroIpv4Subobj.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtEroIpv4Subobj proto.InternalMessageInfo

func (m *RsvpMgmtEroIpv4Subobj) GetIsStrictRoute() bool {
	if m != nil {
		return m.IsStrictRoute
	}
	return false
}

func (m *RsvpMgmtEroIpv4Subobj) GetEroAddress() string {
	if m != nil {
		return m.EroAddress
	}
	return ""
}

func (m *RsvpMgmtEroIpv4Subobj) GetPrefixLength() uint32 {
	if m != nil {
		return m.PrefixLength
	}
	return 0
}

// RSVP ERO UNNUM subobject
type RsvpMgmtEroUnnumSubobj struct {
	// ERO Entry Is Strict
	IsStrictRoute bool `protobuf:"varint,1,opt,name=is_strict_route,json=isStrictRoute" json:"is_strict_route,omitempty"`
	// The Interface ID in ERO
	EroInterfaceId uint32 `protobuf:"varint,2,opt,name=ero_interface_id,json=eroInterfaceId" json:"ero_interface_id,omitempty"`
	// The Router ID in ERO
	EroRouterId string `protobuf:"bytes,3,opt,name=ero_router_id,json=eroRouterId" json:"ero_router_id,omitempty"`
	// Status of ERO
	Status               string   `protobuf:"bytes,4,opt,name=status" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RsvpMgmtEroUnnumSubobj) Reset()         { *m = RsvpMgmtEroUnnumSubobj{} }
func (m *RsvpMgmtEroUnnumSubobj) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtEroUnnumSubobj) ProtoMessage()    {}
func (*RsvpMgmtEroUnnumSubobj) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_flex_lsp_908def27caba9389, []int{3}
}
func (m *RsvpMgmtEroUnnumSubobj) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtEroUnnumSubobj.Unmarshal(m, b)
}
func (m *RsvpMgmtEroUnnumSubobj) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtEroUnnumSubobj.Marshal(b, m, deterministic)
}
func (dst *RsvpMgmtEroUnnumSubobj) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtEroUnnumSubobj.Merge(dst, src)
}
func (m *RsvpMgmtEroUnnumSubobj) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtEroUnnumSubobj.Size(m)
}
func (m *RsvpMgmtEroUnnumSubobj) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtEroUnnumSubobj.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtEroUnnumSubobj proto.InternalMessageInfo

func (m *RsvpMgmtEroUnnumSubobj) GetIsStrictRoute() bool {
	if m != nil {
		return m.IsStrictRoute
	}
	return false
}

func (m *RsvpMgmtEroUnnumSubobj) GetEroInterfaceId() uint32 {
	if m != nil {
		return m.EroInterfaceId
	}
	return 0
}

func (m *RsvpMgmtEroUnnumSubobj) GetEroRouterId() string {
	if m != nil {
		return m.EroRouterId
	}
	return ""
}

func (m *RsvpMgmtEroUnnumSubobj) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

// Union of the different RSVP ERO types
type RsvpMgmtEroSubobj struct {
	EroType string `protobuf:"bytes,1,opt,name=ero_type,json=eroType" json:"ero_type,omitempty"`
	// IPV4 ERO Sub Object
	Ipv4EroSubObject *RsvpMgmtEroIpv4Subobj `protobuf:"bytes,2,opt,name=ipv4_ero_sub_object,json=ipv4EroSubObject" json:"ipv4_ero_sub_object,omitempty"`
	// Unnumbered ERO Sub Object
	UnnumberedEroSubObject *RsvpMgmtEroUnnumSubobj `protobuf:"bytes,3,opt,name=unnumbered_ero_sub_object,json=unnumberedEroSubObject" json:"unnumbered_ero_sub_object,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}                `json:"-"`
	XXX_unrecognized       []byte                  `json:"-"`
	XXX_sizecache          int32                   `json:"-"`
}

func (m *RsvpMgmtEroSubobj) Reset()         { *m = RsvpMgmtEroSubobj{} }
func (m *RsvpMgmtEroSubobj) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtEroSubobj) ProtoMessage()    {}
func (*RsvpMgmtEroSubobj) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_flex_lsp_908def27caba9389, []int{4}
}
func (m *RsvpMgmtEroSubobj) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtEroSubobj.Unmarshal(m, b)
}
func (m *RsvpMgmtEroSubobj) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtEroSubobj.Marshal(b, m, deterministic)
}
func (dst *RsvpMgmtEroSubobj) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtEroSubobj.Merge(dst, src)
}
func (m *RsvpMgmtEroSubobj) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtEroSubobj.Size(m)
}
func (m *RsvpMgmtEroSubobj) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtEroSubobj.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtEroSubobj proto.InternalMessageInfo

func (m *RsvpMgmtEroSubobj) GetEroType() string {
	if m != nil {
		return m.EroType
	}
	return ""
}

func (m *RsvpMgmtEroSubobj) GetIpv4EroSubObject() *RsvpMgmtEroIpv4Subobj {
	if m != nil {
		return m.Ipv4EroSubObject
	}
	return nil
}

func (m *RsvpMgmtEroSubobj) GetUnnumberedEroSubObject() *RsvpMgmtEroUnnumSubobj {
	if m != nil {
		return m.UnnumberedEroSubObject
	}
	return nil
}

// A sub-LSP FEC
type TeS2LFecT struct {
	// sub-LSP subgroup ID
	S2LFecSubgroupId uint32 `protobuf:"varint,1,opt,name=s2_l_fec_subgroup_id,json=s2LFecSubgroupId" json:"s2_l_fec_subgroup_id,omitempty"`
	// LSP ID
	S2LFecLspId uint32 `protobuf:"varint,2,opt,name=s2_l_fec_lsp_id,json=s2LFecLspId" json:"s2_l_fec_lsp_id,omitempty"`
	// Tunnel ID
	S2LFecTunnelId uint32 `protobuf:"varint,3,opt,name=s2_l_fec_tunnel_id,json=s2LFecTunnelId" json:"s2_l_fec_tunnel_id,omitempty"`
	// Extended tunnel ID
	S2LFecExtendedTunnelId string `protobuf:"bytes,4,opt,name=s2_l_fec_extended_tunnel_id,json=s2LFecExtendedTunnelId" json:"s2_l_fec_extended_tunnel_id,omitempty"`
	// LSP source address
	S2LFecSource string `protobuf:"bytes,5,opt,name=s2_l_fec_source,json=s2LFecSource" json:"s2_l_fec_source,omitempty"`
	// sub-LSP destination address
	S2LFecDest string `protobuf:"bytes,6,opt,name=s2_l_fec_dest,json=s2LFecDest" json:"s2_l_fec_dest,omitempty"`
	// P2MP ID
	S2LFecP2MpId uint32 `protobuf:"varint,7,opt,name=s2_l_fec_p2_mp_id,json=s2LFecP2MpId" json:"s2_l_fec_p2_mp_id,omitempty"`
	// Subgroup Originator
	S2LFecSubgroupOriginator string `protobuf:"bytes,8,opt,name=s2_l_fec_subgroup_originator,json=s2LFecSubgroupOriginator" json:"s2_l_fec_subgroup_originator,omitempty"`
	// Session identifier (ctype)
	S2LFecCType string `protobuf:"bytes,9,opt,name=s2_l_fec_c_type,json=s2LFecCType" json:"s2_l_fec_c_type,omitempty"`
	// VRF; currently only for GMPLS tunnels
	S2LFecVrf            string   `protobuf:"bytes,10,opt,name=s2_l_fec_vrf,json=s2LFecVrf" json:"s2_l_fec_vrf,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeS2LFecT) Reset()         { *m = TeS2LFecT{} }
func (m *TeS2LFecT) String() string { return proto.CompactTextString(m) }
func (*TeS2LFecT) ProtoMessage()    {}
func (*TeS2LFecT) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_flex_lsp_908def27caba9389, []int{5}
}
func (m *TeS2LFecT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeS2LFecT.Unmarshal(m, b)
}
func (m *TeS2LFecT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeS2LFecT.Marshal(b, m, deterministic)
}
func (dst *TeS2LFecT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeS2LFecT.Merge(dst, src)
}
func (m *TeS2LFecT) XXX_Size() int {
	return xxx_messageInfo_TeS2LFecT.Size(m)
}
func (m *TeS2LFecT) XXX_DiscardUnknown() {
	xxx_messageInfo_TeS2LFecT.DiscardUnknown(m)
}

var xxx_messageInfo_TeS2LFecT proto.InternalMessageInfo

func (m *TeS2LFecT) GetS2LFecSubgroupId() uint32 {
	if m != nil {
		return m.S2LFecSubgroupId
	}
	return 0
}

func (m *TeS2LFecT) GetS2LFecLspId() uint32 {
	if m != nil {
		return m.S2LFecLspId
	}
	return 0
}

func (m *TeS2LFecT) GetS2LFecTunnelId() uint32 {
	if m != nil {
		return m.S2LFecTunnelId
	}
	return 0
}

func (m *TeS2LFecT) GetS2LFecExtendedTunnelId() string {
	if m != nil {
		return m.S2LFecExtendedTunnelId
	}
	return ""
}

func (m *TeS2LFecT) GetS2LFecSource() string {
	if m != nil {
		return m.S2LFecSource
	}
	return ""
}

func (m *TeS2LFecT) GetS2LFecDest() string {
	if m != nil {
		return m.S2LFecDest
	}
	return ""
}

func (m *TeS2LFecT) GetS2LFecP2MpId() uint32 {
	if m != nil {
		return m.S2LFecP2MpId
	}
	return 0
}

func (m *TeS2LFecT) GetS2LFecSubgroupOriginator() string {
	if m != nil {
		return m.S2LFecSubgroupOriginator
	}
	return ""
}

func (m *TeS2LFecT) GetS2LFecCType() string {
	if m != nil {
		return m.S2LFecCType
	}
	return ""
}

func (m *TeS2LFecT) GetS2LFecVrf() string {
	if m != nil {
		return m.S2LFecVrf
	}
	return ""
}

// C-type-specific LSP FEC data
type TeLspFecCtypeDataT struct {
	FecCType string `protobuf:"bytes,1,opt,name=fec_c_type,json=fecCType" json:"fec_c_type,omitempty"`
	// P2P LSP destination
	P2PLspDestination string `protobuf:"bytes,2,opt,name=p2_p_lsp_destination,json=p2PLspDestination" json:"p2_p_lsp_destination,omitempty"`
	// P2MP ID
	FecDestinationP2MpId uint32   `protobuf:"varint,3,opt,name=fec_destination_p2_mp_id,json=fecDestinationP2MpId" json:"fec_destination_p2_mp_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeLspFecCtypeDataT) Reset()         { *m = TeLspFecCtypeDataT{} }
func (m *TeLspFecCtypeDataT) String() string { return proto.CompactTextString(m) }
func (*TeLspFecCtypeDataT) ProtoMessage()    {}
func (*TeLspFecCtypeDataT) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_flex_lsp_908def27caba9389, []int{6}
}
func (m *TeLspFecCtypeDataT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeLspFecCtypeDataT.Unmarshal(m, b)
}
func (m *TeLspFecCtypeDataT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeLspFecCtypeDataT.Marshal(b, m, deterministic)
}
func (dst *TeLspFecCtypeDataT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeLspFecCtypeDataT.Merge(dst, src)
}
func (m *TeLspFecCtypeDataT) XXX_Size() int {
	return xxx_messageInfo_TeLspFecCtypeDataT.Size(m)
}
func (m *TeLspFecCtypeDataT) XXX_DiscardUnknown() {
	xxx_messageInfo_TeLspFecCtypeDataT.DiscardUnknown(m)
}

var xxx_messageInfo_TeLspFecCtypeDataT proto.InternalMessageInfo

func (m *TeLspFecCtypeDataT) GetFecCType() string {
	if m != nil {
		return m.FecCType
	}
	return ""
}

func (m *TeLspFecCtypeDataT) GetP2PLspDestination() string {
	if m != nil {
		return m.P2PLspDestination
	}
	return ""
}

func (m *TeLspFecCtypeDataT) GetFecDestinationP2MpId() uint32 {
	if m != nil {
		return m.FecDestinationP2MpId
	}
	return 0
}

// A LSP FEC
type TeLspFecT struct {
	// LSP ID
	FecLspId uint32 `protobuf:"varint,1,opt,name=fec_lsp_id,json=fecLspId" json:"fec_lsp_id,omitempty"`
	// Tunnel ID
	FecTunnelId uint32 `protobuf:"varint,2,opt,name=fec_tunnel_id,json=fecTunnelId" json:"fec_tunnel_id,omitempty"`
	// Extended tunnel ID
	FecExtendedTunnelId string `protobuf:"bytes,3,opt,name=fec_extended_tunnel_id,json=fecExtendedTunnelId" json:"fec_extended_tunnel_id,omitempty"`
	// Tunnel source address
	FecSource string `protobuf:"bytes,4,opt,name=fec_source,json=fecSource" json:"fec_source,omitempty"`
	// Destination or P2MP ID
	FecDestinationInfo *TeLspFecCtypeDataT `protobuf:"bytes,5,opt,name=fec_destination_info,json=fecDestinationInfo" json:"fec_destination_info,omitempty"`
	// VRF; currently only for GMPLS tunnels
	FecVrf               string   `protobuf:"bytes,6,opt,name=fec_vrf,json=fecVrf" json:"fec_vrf,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeLspFecT) Reset()         { *m = TeLspFecT{} }
func (m *TeLspFecT) String() string { return proto.CompactTextString(m) }
func (*TeLspFecT) ProtoMessage()    {}
func (*TeLspFecT) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_flex_lsp_908def27caba9389, []int{7}
}
func (m *TeLspFecT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeLspFecT.Unmarshal(m, b)
}
func (m *TeLspFecT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeLspFecT.Marshal(b, m, deterministic)
}
func (dst *TeLspFecT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeLspFecT.Merge(dst, src)
}
func (m *TeLspFecT) XXX_Size() int {
	return xxx_messageInfo_TeLspFecT.Size(m)
}
func (m *TeLspFecT) XXX_DiscardUnknown() {
	xxx_messageInfo_TeLspFecT.DiscardUnknown(m)
}

var xxx_messageInfo_TeLspFecT proto.InternalMessageInfo

func (m *TeLspFecT) GetFecLspId() uint32 {
	if m != nil {
		return m.FecLspId
	}
	return 0
}

func (m *TeLspFecT) GetFecTunnelId() uint32 {
	if m != nil {
		return m.FecTunnelId
	}
	return 0
}

func (m *TeLspFecT) GetFecExtendedTunnelId() string {
	if m != nil {
		return m.FecExtendedTunnelId
	}
	return ""
}

func (m *TeLspFecT) GetFecSource() string {
	if m != nil {
		return m.FecSource
	}
	return ""
}

func (m *TeLspFecT) GetFecDestinationInfo() *TeLspFecCtypeDataT {
	if m != nil {
		return m.FecDestinationInfo
	}
	return nil
}

func (m *TeLspFecT) GetFecVrf() string {
	if m != nil {
		return m.FecVrf
	}
	return ""
}

// TE Association Object
type MplsTeS2LAssociationObject struct {
	// S2L Association Type (draft-ietf-ccamp-mpls-tp-rsvpte-ext-associated-lsp)
	S2LAssociationType uint32 `protobuf:"varint,1,opt,name=s2_l_association_type,json=s2LAssociationType" json:"s2_l_association_type,omitempty"`
	// S2L Association Tie Role
	S2LAssociationTieRole string `protobuf:"bytes,2,opt,name=s2_l_association_tie_role,json=s2LAssociationTieRole" json:"s2_l_association_tie_role,omitempty"`
	// S2L Association ID
	S2LAssociationId uint32 `protobuf:"varint,3,opt,name=s2_l_association_id,json=s2LAssociationId" json:"s2_l_association_id,omitempty"`
	// S2L Association Source
	S2LAssociationSource string `protobuf:"bytes,4,opt,name=s2_l_association_source,json=s2LAssociationSource" json:"s2_l_association_source,omitempty"`
	// S2L Global Source
	S2LGlobalSource uint32 `protobuf:"varint,5,opt,name=s2_l_global_source,json=s2LGlobalSource" json:"s2_l_global_source,omitempty"`
	// S2L Extended ID Array
	S2LExtendedId        []uint32 `protobuf:"varint,6,rep,packed,name=s2_l_extended_id,json=s2LExtendedId" json:"s2_l_extended_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeS2LAssociationObject) Reset()         { *m = MplsTeS2LAssociationObject{} }
func (m *MplsTeS2LAssociationObject) String() string { return proto.CompactTextString(m) }
func (*MplsTeS2LAssociationObject) ProtoMessage()    {}
func (*MplsTeS2LAssociationObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_flex_lsp_908def27caba9389, []int{8}
}
func (m *MplsTeS2LAssociationObject) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeS2LAssociationObject.Unmarshal(m, b)
}
func (m *MplsTeS2LAssociationObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeS2LAssociationObject.Marshal(b, m, deterministic)
}
func (dst *MplsTeS2LAssociationObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeS2LAssociationObject.Merge(dst, src)
}
func (m *MplsTeS2LAssociationObject) XXX_Size() int {
	return xxx_messageInfo_MplsTeS2LAssociationObject.Size(m)
}
func (m *MplsTeS2LAssociationObject) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeS2LAssociationObject.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeS2LAssociationObject proto.InternalMessageInfo

func (m *MplsTeS2LAssociationObject) GetS2LAssociationType() uint32 {
	if m != nil {
		return m.S2LAssociationType
	}
	return 0
}

func (m *MplsTeS2LAssociationObject) GetS2LAssociationTieRole() string {
	if m != nil {
		return m.S2LAssociationTieRole
	}
	return ""
}

func (m *MplsTeS2LAssociationObject) GetS2LAssociationId() uint32 {
	if m != nil {
		return m.S2LAssociationId
	}
	return 0
}

func (m *MplsTeS2LAssociationObject) GetS2LAssociationSource() string {
	if m != nil {
		return m.S2LAssociationSource
	}
	return ""
}

func (m *MplsTeS2LAssociationObject) GetS2LGlobalSource() uint32 {
	if m != nil {
		return m.S2LGlobalSource
	}
	return 0
}

func (m *MplsTeS2LAssociationObject) GetS2LExtendedId() []uint32 {
	if m != nil {
		return m.S2LExtendedId
	}
	return nil
}

// TE Protection Object
type MplsTeS2LProtectionObject struct {
	//  S2L Protection Secondary Bit
	S2LSecondary bool `protobuf:"varint,1,opt,name=s2_l_secondary,json=s2LSecondary" json:"s2_l_secondary,omitempty"`
	//  S2L Protection Protecting Bit
	S2LProtecting bool `protobuf:"varint,2,opt,name=s2_l_protecting,json=s2LProtecting" json:"s2_l_protecting,omitempty"`
	//  S2L Protection Notification Bit
	S2LNotification bool `protobuf:"varint,3,opt,name=s2_l_notification,json=s2LNotification" json:"s2_l_notification,omitempty"`
	//  S2L Protection Operational Bit
	S2LOperational bool `protobuf:"varint,4,opt,name=s2_l_operational,json=s2LOperational" json:"s2_l_operational,omitempty"`
	// Indicates Enhanced Protection Scheme
	Enhanced bool `protobuf:"varint,5,opt,name=enhanced" json:"enhanced,omitempty"`
	// Dedicated 1+1 Protection
	Ded1Plus1 bool `protobuf:"varint,6,opt,name=ded1_plus1,json=ded1Plus1" json:"ded1_plus1,omitempty"`
	// Dedicated 1:1 Protection
	Ded1To1 bool `protobuf:"varint,7,opt,name=ded1_to1,json=ded1To1" json:"ded1_to1,omitempty"`
	// Shared Link Layer Protection
	Shared bool `protobuf:"varint,8,opt,name=shared" json:"shared,omitempty"`
	// LSP should not use any Link Layer Protection
	LinkUnprotected bool `protobuf:"varint,9,opt,name=link_unprotected,json=linkUnprotected" json:"link_unprotected,omitempty"`
	// LSP should use Links that are protecting other (primary) traffic
	ExtraTraffic bool `protobuf:"varint,10,opt,name=extra_traffic,json=extraTraffic" json:"extra_traffic,omitempty"`
	// Any
	Any bool `protobuf:"varint,11,opt,name=any" json:"any,omitempty"`
	// Full Rerouting
	Rerouting bool `protobuf:"varint,12,opt,name=rerouting" json:"rerouting,omitempty"`
	// Rerouting Without Extra-Traffic
	ReroutingNoEt bool `protobuf:"varint,13,opt,name=rerouting_no_et,json=reroutingNoEt" json:"rerouting_no_et,omitempty"`
	// 1:N Protection with Extra-Traffic
	OneToNProtectionEt bool `protobuf:"varint,14,opt,name=one_to_n_protection_et,json=oneToNProtectionEt" json:"one_to_n_protection_et,omitempty"`
	// 1+1 Unidirectional Protection
	OnePlusOneUni bool `protobuf:"varint,15,opt,name=one_plus_one_uni,json=onePlusOneUni" json:"one_plus_one_uni,omitempty"`
	// 1+1 Bidirectional Protection
	OnePlusOneBi bool `protobuf:"varint,16,opt,name=one_plus_one_bi,json=onePlusOneBi" json:"one_plus_one_bi,omitempty"`
	// LSP Flags Unprotected
	LspUnprotected       bool     `protobuf:"varint,17,opt,name=lsp_unprotected,json=lspUnprotected" json:"lsp_unprotected,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeS2LProtectionObject) Reset()         { *m = MplsTeS2LProtectionObject{} }
func (m *MplsTeS2LProtectionObject) String() string { return proto.CompactTextString(m) }
func (*MplsTeS2LProtectionObject) ProtoMessage()    {}
func (*MplsTeS2LProtectionObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_flex_lsp_908def27caba9389, []int{9}
}
func (m *MplsTeS2LProtectionObject) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeS2LProtectionObject.Unmarshal(m, b)
}
func (m *MplsTeS2LProtectionObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeS2LProtectionObject.Marshal(b, m, deterministic)
}
func (dst *MplsTeS2LProtectionObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeS2LProtectionObject.Merge(dst, src)
}
func (m *MplsTeS2LProtectionObject) XXX_Size() int {
	return xxx_messageInfo_MplsTeS2LProtectionObject.Size(m)
}
func (m *MplsTeS2LProtectionObject) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeS2LProtectionObject.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeS2LProtectionObject proto.InternalMessageInfo

func (m *MplsTeS2LProtectionObject) GetS2LSecondary() bool {
	if m != nil {
		return m.S2LSecondary
	}
	return false
}

func (m *MplsTeS2LProtectionObject) GetS2LProtecting() bool {
	if m != nil {
		return m.S2LProtecting
	}
	return false
}

func (m *MplsTeS2LProtectionObject) GetS2LNotification() bool {
	if m != nil {
		return m.S2LNotification
	}
	return false
}

func (m *MplsTeS2LProtectionObject) GetS2LOperational() bool {
	if m != nil {
		return m.S2LOperational
	}
	return false
}

func (m *MplsTeS2LProtectionObject) GetEnhanced() bool {
	if m != nil {
		return m.Enhanced
	}
	return false
}

func (m *MplsTeS2LProtectionObject) GetDed1Plus1() bool {
	if m != nil {
		return m.Ded1Plus1
	}
	return false
}

func (m *MplsTeS2LProtectionObject) GetDed1To1() bool {
	if m != nil {
		return m.Ded1To1
	}
	return false
}

func (m *MplsTeS2LProtectionObject) GetShared() bool {
	if m != nil {
		return m.Shared
	}
	return false
}

func (m *MplsTeS2LProtectionObject) GetLinkUnprotected() bool {
	if m != nil {
		return m.LinkUnprotected
	}
	return false
}

func (m *MplsTeS2LProtectionObject) GetExtraTraffic() bool {
	if m != nil {
		return m.ExtraTraffic
	}
	return false
}

func (m *MplsTeS2LProtectionObject) GetAny() bool {
	if m != nil {
		return m.Any
	}
	return false
}

func (m *MplsTeS2LProtectionObject) GetRerouting() bool {
	if m != nil {
		return m.Rerouting
	}
	return false
}

func (m *MplsTeS2LProtectionObject) GetReroutingNoEt() bool {
	if m != nil {
		return m.ReroutingNoEt
	}
	return false
}

func (m *MplsTeS2LProtectionObject) GetOneToNProtectionEt() bool {
	if m != nil {
		return m.OneToNProtectionEt
	}
	return false
}

func (m *MplsTeS2LProtectionObject) GetOnePlusOneUni() bool {
	if m != nil {
		return m.OnePlusOneUni
	}
	return false
}

func (m *MplsTeS2LProtectionObject) GetOnePlusOneBi() bool {
	if m != nil {
		return m.OnePlusOneBi
	}
	return false
}

func (m *MplsTeS2LProtectionObject) GetLspUnprotected() bool {
	if m != nil {
		return m.LspUnprotected
	}
	return false
}

// Information about flex LSP lockout info for the link
type FlexLockoutT struct {
	// True if s2l is locked out
	IsLockout bool `protobuf:"varint,1,opt,name=is_lockout,json=isLockout" json:"is_lockout,omitempty"`
	// Flex LSP Lockout Origination Source
	Origination string `protobuf:"bytes,2,opt,name=origination" json:"origination,omitempty"`
	// The timestamp when the lockout is set
	LockoutTimestamp     uint32   `protobuf:"varint,3,opt,name=lockout_timestamp,json=lockoutTimestamp" json:"lockout_timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FlexLockoutT) Reset()         { *m = FlexLockoutT{} }
func (m *FlexLockoutT) String() string { return proto.CompactTextString(m) }
func (*FlexLockoutT) ProtoMessage()    {}
func (*FlexLockoutT) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_flex_lsp_908def27caba9389, []int{10}
}
func (m *FlexLockoutT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlexLockoutT.Unmarshal(m, b)
}
func (m *FlexLockoutT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlexLockoutT.Marshal(b, m, deterministic)
}
func (dst *FlexLockoutT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlexLockoutT.Merge(dst, src)
}
func (m *FlexLockoutT) XXX_Size() int {
	return xxx_messageInfo_FlexLockoutT.Size(m)
}
func (m *FlexLockoutT) XXX_DiscardUnknown() {
	xxx_messageInfo_FlexLockoutT.DiscardUnknown(m)
}

var xxx_messageInfo_FlexLockoutT proto.InternalMessageInfo

func (m *FlexLockoutT) GetIsLockout() bool {
	if m != nil {
		return m.IsLockout
	}
	return false
}

func (m *FlexLockoutT) GetOrigination() string {
	if m != nil {
		return m.Origination
	}
	return ""
}

func (m *FlexLockoutT) GetLockoutTimestamp() uint32 {
	if m != nil {
		return m.LockoutTimestamp
	}
	return 0
}

// TE Per-S2L FlexLSP Information
type MplsTeS2LFlexInfo struct {
	// FlexLSP Entry Exists
	EntryExists bool `protobuf:"varint,1,opt,name=entry_exists,json=entryExists" json:"entry_exists,omitempty"`
	// In Label
	InLabel uint32 `protobuf:"varint,2,opt,name=in_label,json=inLabel" json:"in_label,omitempty"`
	// GAL BFD Session Created
	BfdCreated bool `protobuf:"varint,3,opt,name=bfd_created,json=bfdCreated" json:"bfd_created,omitempty"`
	// GAL BFD Session Up
	BfdUp bool `protobuf:"varint,4,opt,name=bfd_up,json=bfdUp" json:"bfd_up,omitempty"`
	// OAM Entry Created
	OamCreated bool `protobuf:"varint,5,opt,name=oam_created,json=oamCreated" json:"oam_created,omitempty"`
	// FEC for the FlexLSP Entry
	FlexFec *TeS2LFecT `protobuf:"bytes,6,opt,name=flex_fec,json=flexFec" json:"flex_fec,omitempty"`
	// BFD Next Hop
	BfdNextHop string `protobuf:"bytes,7,opt,name=bfd_next_hop,json=bfdNextHop" json:"bfd_next_hop,omitempty"`
	// BFD Tunnel Interface Handle
	BfdTunIfh string `protobuf:"bytes,8,opt,name=bfd_tun_ifh,json=bfdTunIfh" json:"bfd_tun_ifh,omitempty"`
	// BFD Out Interface Handle
	BfdOutIfh string `protobuf:"bytes,9,opt,name=bfd_out_ifh,json=bfdOutIfh" json:"bfd_out_ifh,omitempty"`
	// BFD Internal Label
	BfdIntLabel uint32 `protobuf:"varint,10,opt,name=bfd_int_label,json=bfdIntLabel" json:"bfd_int_label,omitempty"`
	// BFD Egress Label
	BfdEgressLabel uint32 `protobuf:"varint,11,opt,name=bfd_egress_label,json=bfdEgressLabel" json:"bfd_egress_label,omitempty"`
	// Fault LDI Lockout
	FaultLdiLockout bool `protobuf:"varint,12,opt,name=fault_ldi_lockout,json=faultLdiLockout" json:"fault_ldi_lockout,omitempty"`
	// Fault LDI
	FaultLdi bool `protobuf:"varint,13,opt,name=fault_ldi,json=faultLdi" json:"fault_ldi,omitempty"`
	// Fault LKR
	FaultLkr bool `protobuf:"varint,14,opt,name=fault_lkr,json=faultLkr" json:"fault_lkr,omitempty"`
	// Fault AIS
	FaultAis bool `protobuf:"varint,15,opt,name=fault_ais,json=faultAis" json:"fault_ais,omitempty"`
	// Fault Time
	FaultTime uint32 `protobuf:"varint,16,opt,name=fault_time,json=faultTime" json:"fault_time,omitempty"`
	// Flex LSP Lockout Info
	Lockout              *FlexLockoutT `protobuf:"bytes,17,opt,name=lockout" json:"lockout,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *MplsTeS2LFlexInfo) Reset()         { *m = MplsTeS2LFlexInfo{} }
func (m *MplsTeS2LFlexInfo) String() string { return proto.CompactTextString(m) }
func (*MplsTeS2LFlexInfo) ProtoMessage()    {}
func (*MplsTeS2LFlexInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_flex_lsp_908def27caba9389, []int{11}
}
func (m *MplsTeS2LFlexInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeS2LFlexInfo.Unmarshal(m, b)
}
func (m *MplsTeS2LFlexInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeS2LFlexInfo.Marshal(b, m, deterministic)
}
func (dst *MplsTeS2LFlexInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeS2LFlexInfo.Merge(dst, src)
}
func (m *MplsTeS2LFlexInfo) XXX_Size() int {
	return xxx_messageInfo_MplsTeS2LFlexInfo.Size(m)
}
func (m *MplsTeS2LFlexInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeS2LFlexInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeS2LFlexInfo proto.InternalMessageInfo

func (m *MplsTeS2LFlexInfo) GetEntryExists() bool {
	if m != nil {
		return m.EntryExists
	}
	return false
}

func (m *MplsTeS2LFlexInfo) GetInLabel() uint32 {
	if m != nil {
		return m.InLabel
	}
	return 0
}

func (m *MplsTeS2LFlexInfo) GetBfdCreated() bool {
	if m != nil {
		return m.BfdCreated
	}
	return false
}

func (m *MplsTeS2LFlexInfo) GetBfdUp() bool {
	if m != nil {
		return m.BfdUp
	}
	return false
}

func (m *MplsTeS2LFlexInfo) GetOamCreated() bool {
	if m != nil {
		return m.OamCreated
	}
	return false
}

func (m *MplsTeS2LFlexInfo) GetFlexFec() *TeS2LFecT {
	if m != nil {
		return m.FlexFec
	}
	return nil
}

func (m *MplsTeS2LFlexInfo) GetBfdNextHop() string {
	if m != nil {
		return m.BfdNextHop
	}
	return ""
}

func (m *MplsTeS2LFlexInfo) GetBfdTunIfh() string {
	if m != nil {
		return m.BfdTunIfh
	}
	return ""
}

func (m *MplsTeS2LFlexInfo) GetBfdOutIfh() string {
	if m != nil {
		return m.BfdOutIfh
	}
	return ""
}

func (m *MplsTeS2LFlexInfo) GetBfdIntLabel() uint32 {
	if m != nil {
		return m.BfdIntLabel
	}
	return 0
}

func (m *MplsTeS2LFlexInfo) GetBfdEgressLabel() uint32 {
	if m != nil {
		return m.BfdEgressLabel
	}
	return 0
}

func (m *MplsTeS2LFlexInfo) GetFaultLdiLockout() bool {
	if m != nil {
		return m.FaultLdiLockout
	}
	return false
}

func (m *MplsTeS2LFlexInfo) GetFaultLdi() bool {
	if m != nil {
		return m.FaultLdi
	}
	return false
}

func (m *MplsTeS2LFlexInfo) GetFaultLkr() bool {
	if m != nil {
		return m.FaultLkr
	}
	return false
}

func (m *MplsTeS2LFlexInfo) GetFaultAis() bool {
	if m != nil {
		return m.FaultAis
	}
	return false
}

func (m *MplsTeS2LFlexInfo) GetFaultTime() uint32 {
	if m != nil {
		return m.FaultTime
	}
	return 0
}

func (m *MplsTeS2LFlexInfo) GetLockout() *FlexLockoutT {
	if m != nil {
		return m.Lockout
	}
	return nil
}

// MPLS TE Flex LSP Reverse LSP information
type MplsTeFlexLspRevLsp struct {
	// Reverse Associated Bidir LSP Present
	ReverseLspPresent bool `protobuf:"varint,1,opt,name=reverse_lsp_present,json=reverseLspPresent" json:"reverse_lsp_present,omitempty"`
	// Reverse Associated Bidir LSP Connected
	ReverseLspConnected bool `protobuf:"varint,2,opt,name=reverse_lsp_connected,json=reverseLspConnected" json:"reverse_lsp_connected,omitempty"`
	// Reverse Associated Bidir LSP FEC
	ReverseLspFec *TeLspFecT `protobuf:"bytes,3,opt,name=reverse_lsp_fec,json=reverseLspFec" json:"reverse_lsp_fec,omitempty"`
	// Association Object
	Association *MplsTeS2LAssociationObject `protobuf:"bytes,4,opt,name=association" json:"association,omitempty"`
	// Protection Object
	Protection           *MplsTeS2LProtectionObject `protobuf:"bytes,5,opt,name=protection" json:"protection,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *MplsTeFlexLspRevLsp) Reset()         { *m = MplsTeFlexLspRevLsp{} }
func (m *MplsTeFlexLspRevLsp) String() string { return proto.CompactTextString(m) }
func (*MplsTeFlexLspRevLsp) ProtoMessage()    {}
func (*MplsTeFlexLspRevLsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_flex_lsp_908def27caba9389, []int{12}
}
func (m *MplsTeFlexLspRevLsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeFlexLspRevLsp.Unmarshal(m, b)
}
func (m *MplsTeFlexLspRevLsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeFlexLspRevLsp.Marshal(b, m, deterministic)
}
func (dst *MplsTeFlexLspRevLsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeFlexLspRevLsp.Merge(dst, src)
}
func (m *MplsTeFlexLspRevLsp) XXX_Size() int {
	return xxx_messageInfo_MplsTeFlexLspRevLsp.Size(m)
}
func (m *MplsTeFlexLspRevLsp) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeFlexLspRevLsp.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeFlexLspRevLsp proto.InternalMessageInfo

func (m *MplsTeFlexLspRevLsp) GetReverseLspPresent() bool {
	if m != nil {
		return m.ReverseLspPresent
	}
	return false
}

func (m *MplsTeFlexLspRevLsp) GetReverseLspConnected() bool {
	if m != nil {
		return m.ReverseLspConnected
	}
	return false
}

func (m *MplsTeFlexLspRevLsp) GetReverseLspFec() *TeLspFecT {
	if m != nil {
		return m.ReverseLspFec
	}
	return nil
}

func (m *MplsTeFlexLspRevLsp) GetAssociation() *MplsTeS2LAssociationObject {
	if m != nil {
		return m.Association
	}
	return nil
}

func (m *MplsTeFlexLspRevLsp) GetProtection() *MplsTeS2LProtectionObject {
	if m != nil {
		return m.Protection
	}
	return nil
}

// MPLS TE FLEX LSP Information
type MplsTeFlexLspLsp struct {
	// Operational
	IsOperational bool `protobuf:"varint,1,opt,name=is_operational,json=isOperational" json:"is_operational,omitempty"`
	// LSP Uptime
	LspUptime uint32 `protobuf:"varint,2,opt,name=lsp_uptime,json=lspUptime" json:"lsp_uptime,omitempty"`
	// LSP ID
	PathProtectionLspId uint32 `protobuf:"varint,3,opt,name=path_protection_lsp_id,json=pathProtectionLspId" json:"path_protection_lsp_id,omitempty"`
	// LSP mode
	LspMode string `protobuf:"bytes,4,opt,name=lsp_mode,json=lspMode" json:"lsp_mode,omitempty"`
	// Local label
	LspLocalLabel uint32 `protobuf:"varint,5,opt,name=lsp_local_label,json=lspLocalLabel" json:"lsp_local_label,omitempty"`
	// Output interface of LSP
	LspOutputInterface string `protobuf:"bytes,6,opt,name=lsp_output_interface,json=lspOutputInterface" json:"lsp_output_interface,omitempty"`
	// Output label of the LSP
	LspOutputLabel uint32 `protobuf:"varint,7,opt,name=lsp_output_label,json=lspOutputLabel" json:"lsp_output_label,omitempty"`
	// Path used by LSP
	LspHop []*RsvpMgmtEroSubobj `protobuf:"bytes,8,rep,name=lsp_hop,json=lspHop" json:"lsp_hop,omitempty"`
	// LSP State
	LspState string `protobuf:"bytes,9,opt,name=lsp_state,json=lspState" json:"lsp_state,omitempty"`
	// Flex Info
	FlexInfo *MplsTeS2LFlexInfo `protobuf:"bytes,10,opt,name=flex_info,json=flexInfo" json:"flex_info,omitempty"`
	// Association Object
	Association *MplsTeS2LAssociationObject `protobuf:"bytes,11,opt,name=association" json:"association,omitempty"`
	// Protection Object
	Protection *MplsTeS2LProtectionObject `protobuf:"bytes,12,opt,name=protection" json:"protection,omitempty"`
	// Reverse LSP information
	ReverseLsp           *MplsTeFlexLspRevLsp `protobuf:"bytes,13,opt,name=reverse_lsp,json=reverseLsp" json:"reverse_lsp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *MplsTeFlexLspLsp) Reset()         { *m = MplsTeFlexLspLsp{} }
func (m *MplsTeFlexLspLsp) String() string { return proto.CompactTextString(m) }
func (*MplsTeFlexLspLsp) ProtoMessage()    {}
func (*MplsTeFlexLspLsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_flex_lsp_908def27caba9389, []int{13}
}
func (m *MplsTeFlexLspLsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeFlexLspLsp.Unmarshal(m, b)
}
func (m *MplsTeFlexLspLsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeFlexLspLsp.Marshal(b, m, deterministic)
}
func (dst *MplsTeFlexLspLsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeFlexLspLsp.Merge(dst, src)
}
func (m *MplsTeFlexLspLsp) XXX_Size() int {
	return xxx_messageInfo_MplsTeFlexLspLsp.Size(m)
}
func (m *MplsTeFlexLspLsp) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeFlexLspLsp.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeFlexLspLsp proto.InternalMessageInfo

func (m *MplsTeFlexLspLsp) GetIsOperational() bool {
	if m != nil {
		return m.IsOperational
	}
	return false
}

func (m *MplsTeFlexLspLsp) GetLspUptime() uint32 {
	if m != nil {
		return m.LspUptime
	}
	return 0
}

func (m *MplsTeFlexLspLsp) GetPathProtectionLspId() uint32 {
	if m != nil {
		return m.PathProtectionLspId
	}
	return 0
}

func (m *MplsTeFlexLspLsp) GetLspMode() string {
	if m != nil {
		return m.LspMode
	}
	return ""
}

func (m *MplsTeFlexLspLsp) GetLspLocalLabel() uint32 {
	if m != nil {
		return m.LspLocalLabel
	}
	return 0
}

func (m *MplsTeFlexLspLsp) GetLspOutputInterface() string {
	if m != nil {
		return m.LspOutputInterface
	}
	return ""
}

func (m *MplsTeFlexLspLsp) GetLspOutputLabel() uint32 {
	if m != nil {
		return m.LspOutputLabel
	}
	return 0
}

func (m *MplsTeFlexLspLsp) GetLspHop() []*RsvpMgmtEroSubobj {
	if m != nil {
		return m.LspHop
	}
	return nil
}

func (m *MplsTeFlexLspLsp) GetLspState() string {
	if m != nil {
		return m.LspState
	}
	return ""
}

func (m *MplsTeFlexLspLsp) GetFlexInfo() *MplsTeS2LFlexInfo {
	if m != nil {
		return m.FlexInfo
	}
	return nil
}

func (m *MplsTeFlexLspLsp) GetAssociation() *MplsTeS2LAssociationObject {
	if m != nil {
		return m.Association
	}
	return nil
}

func (m *MplsTeFlexLspLsp) GetProtection() *MplsTeS2LProtectionObject {
	if m != nil {
		return m.Protection
	}
	return nil
}

func (m *MplsTeFlexLspLsp) GetReverseLsp() *MplsTeFlexLspRevLsp {
	if m != nil {
		return m.ReverseLsp
	}
	return nil
}

func init() {
	proto.RegisterType((*MplsTeFlexLsp_KEYS)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.tunnels.tunnel_flex_lsps.tunnel_flex_lsp.mpls_te_flex_lsp_KEYS")
	proto.RegisterType((*MplsTeFlexLsp)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.tunnels.tunnel_flex_lsps.tunnel_flex_lsp.mpls_te_flex_lsp")
	proto.RegisterType((*RsvpMgmtEroIpv4Subobj)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.tunnels.tunnel_flex_lsps.tunnel_flex_lsp.rsvp_mgmt_ero_ipv4_subobj")
	proto.RegisterType((*RsvpMgmtEroUnnumSubobj)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.tunnels.tunnel_flex_lsps.tunnel_flex_lsp.rsvp_mgmt_ero_unnum_subobj")
	proto.RegisterType((*RsvpMgmtEroSubobj)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.tunnels.tunnel_flex_lsps.tunnel_flex_lsp.rsvp_mgmt_ero_subobj")
	proto.RegisterType((*TeS2LFecT)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.tunnels.tunnel_flex_lsps.tunnel_flex_lsp.te_s2l_fec_t")
	proto.RegisterType((*TeLspFecCtypeDataT)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.tunnels.tunnel_flex_lsps.tunnel_flex_lsp.te_lsp_fec_ctype_data_t")
	proto.RegisterType((*TeLspFecT)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.tunnels.tunnel_flex_lsps.tunnel_flex_lsp.te_lsp_fec_t")
	proto.RegisterType((*MplsTeS2LAssociationObject)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.tunnels.tunnel_flex_lsps.tunnel_flex_lsp.mpls_te_s2l_association_object")
	proto.RegisterType((*MplsTeS2LProtectionObject)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.tunnels.tunnel_flex_lsps.tunnel_flex_lsp.mpls_te_s2l_protection_object")
	proto.RegisterType((*FlexLockoutT)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.tunnels.tunnel_flex_lsps.tunnel_flex_lsp.flex_lockout_t")
	proto.RegisterType((*MplsTeS2LFlexInfo)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.tunnels.tunnel_flex_lsps.tunnel_flex_lsp.mpls_te_s2l_flex_info")
	proto.RegisterType((*MplsTeFlexLspRevLsp)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.tunnels.tunnel_flex_lsps.tunnel_flex_lsp.mpls_te_flex_lsp_rev_lsp")
	proto.RegisterType((*MplsTeFlexLspLsp)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.tunnels.tunnel_flex_lsps.tunnel_flex_lsp.mpls_te_flex_lsp_lsp")
}

func init() {
	proto.RegisterFile("mpls_te_flex_lsp.proto", fileDescriptor_mpls_te_flex_lsp_908def27caba9389)
}

var fileDescriptor_mpls_te_flex_lsp_908def27caba9389 = []byte{
	// 2009 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0x51, 0x6f, 0x24, 0x47,
	0x11, 0xd6, 0x9e, 0x63, 0x7b, 0xb7, 0xd6, 0x6b, 0xaf, 0xdb, 0x3e, 0x67, 0x2f, 0x77, 0x97, 0x38,
	0x4b, 0x8e, 0x33, 0x17, 0x70, 0xb8, 0xb9, 0x24, 0x44, 0x42, 0x42, 0x3a, 0x2e, 0x0e, 0xac, 0xd8,
	0x9c, 0xad, 0xb1, 0x0f, 0x89, 0xa7, 0x66, 0x76, 0xa6, 0xc7, 0xee, 0x78, 0xb6, 0x7b, 0x98, 0xee,
	0x39, 0x6c, 0x81, 0x90, 0x78, 0x89, 0xc8, 0x03, 0x0f, 0x48, 0xf0, 0x06, 0x12, 0xaf, 0xf0, 0xcc,
	0x7f, 0x40, 0xfc, 0x08, 0x7e, 0x00, 0xbf, 0x01, 0x1e, 0x50, 0x55, 0xf7, 0xcc, 0xce, 0xda, 0xbe,
	0x07, 0x24, 0x36, 0xca, 0xd3, 0x6e, 0x57, 0x7d, 0xd5, 0x5d, 0x5d, 0xfd, 0x55, 0x55, 0xf7, 0xc0,
	0xce, 0x34, 0xcf, 0x0c, 0xb7, 0x82, 0xa7, 0x99, 0xb8, 0xe0, 0x99, 0xc9, 0xf7, 0xf3, 0x42, 0x5b,
	0xcd, 0xc2, 0x58, 0x9a, 0x58, 0x73, 0xa9, 0x0d, 0xbf, 0x28, 0x78, 0x05, 0xd2, 0xb9, 0x28, 0xf6,
	0xab, 0x81, 0xb1, 0x91, 0x4a, 0x26, 0x97, 0xfb, 0xb6, 0x54, 0x4a, 0x64, 0xc6, 0xff, 0xd6, 0x13,
	0x5d, 0x13, 0x0c, 0x33, 0xb8, 0x7d, 0x75, 0x35, 0xfe, 0xa3, 0x83, 0x9f, 0x1c, 0xb3, 0xdb, 0xb0,
	0x12, 0x73, 0x7b, 0x99, 0x8b, 0x41, 0x6b, 0xb7, 0xb5, 0xd7, 0x09, 0x97, 0xe3, 0x93, 0xcb, 0x5c,
	0xb0, 0xbb, 0xd0, 0xf1, 0x53, 0xc8, 0x64, 0x70, 0x6b, 0xb7, 0xb5, 0xd7, 0x0b, 0xdb, 0x4e, 0x30,
	0x4a, 0xd8, 0x5b, 0xd0, 0xf5, 0x4a, 0x15, 0x4d, 0xc5, 0x60, 0x89, 0x0c, 0xc1, 0x89, 0x9e, 0x47,
	0x53, 0x31, 0xfc, 0xd7, 0x12, 0xf4, 0xaf, 0x2e, 0xc7, 0x76, 0x61, 0x4d, 0x1a, 0xee, 0x0d, 0xcb,
	0x7c, 0x10, 0xec, 0xb6, 0xf6, 0xda, 0x21, 0x48, 0x73, 0x42, 0xa2, 0x17, 0x39, 0xfa, 0x62, 0x4b,
	0x85, 0x2b, 0x3e, 0xa1, 0x15, 0x97, 0x6d, 0xa9, 0x46, 0x09, 0x7b, 0x00, 0xeb, 0x46, 0x97, 0x45,
	0x2c, 0x78, 0x94, 0x24, 0x85, 0x30, 0x66, 0xf0, 0x3e, 0xad, 0xd8, 0x73, 0xd2, 0xa7, 0x4e, 0xc8,
	0xde, 0x83, 0xad, 0x44, 0x18, 0x2b, 0x55, 0x64, 0xa5, 0x56, 0x35, 0xf6, 0x03, 0xc2, 0xb2, 0x86,
	0xaa, 0x32, 0xf8, 0x26, 0x30, 0x71, 0x61, 0x85, 0x4a, 0x44, 0xc2, 0x67, 0x9b, 0xfd, 0x90, 0xf0,
	0xfd, 0x4a, 0x73, 0x52, 0x6d, 0xfa, 0x8b, 0x16, 0x74, 0x7f, 0xae, 0x8b, 0x73, 0xa9, 0x4e, 0x71,
	0x3b, 0x83, 0xef, 0xec, 0xb6, 0xf6, 0xba, 0xc1, 0xd9, 0xfe, 0xff, 0xff, 0xb0, 0xf6, 0xaf, 0x9d,
	0x54, 0x66, 0xf2, 0x10, 0xfc, 0xe2, 0x63, 0x93, 0x93, 0x2f, 0xc8, 0x15, 0x11, 0x5b, 0xf2, 0xe5,
	0xa3, 0x2f, 0xdb, 0x17, 0xbf, 0xf8, 0xd8, 0xe4, 0xc3, 0x2f, 0x5a, 0x70, 0xa7, 0x30, 0x2f, 0x73,
	0x3e, 0x3d, 0x9d, 0x5a, 0x2e, 0x0a, 0xcd, 0x65, 0xfe, 0xf2, 0x7d, 0x6e, 0xca, 0x89, 0x9e, 0x7c,
	0xc6, 0xbe, 0x0e, 0x1b, 0xd2, 0x70, 0x63, 0x0b, 0x19, 0x5b, 0x5e, 0xe8, 0xd2, 0x3a, 0x9e, 0xb5,
	0xc3, 0x9e, 0x34, 0xc7, 0x24, 0x0d, 0x51, 0x88, 0x94, 0x42, 0xd3, 0xea, 0xd0, 0x6e, 0x39, 0x4a,
	0x89, 0x42, 0x57, 0x87, 0xf5, 0x35, 0xe8, 0xe5, 0x85, 0x48, 0xe5, 0x05, 0xcf, 0x84, 0x3a, 0xb5,
	0x67, 0xc4, 0xba, 0x5e, 0xb8, 0xe6, 0x84, 0x63, 0x92, 0x0d, 0xff, 0xda, 0x82, 0x37, 0xe6, 0x7d,
	0x29, 0x95, 0x2a, 0xa7, 0xff, 0xab, 0x33, 0x7b, 0xd0, 0xa7, 0x7d, 0x28, 0x2b, 0x8a, 0x34, 0x8a,
	0xc5, 0x2c, 0x07, 0xd6, 0x45, 0xa1, 0x47, 0x95, 0x78, 0x94, 0xb0, 0x21, 0xf4, 0x10, 0x49, 0x73,
	0x15, 0x08, 0x73, 0xb9, 0x80, 0x7b, 0xa1, 0xa9, 0x8a, 0x51, 0xc2, 0x76, 0x60, 0xc5, 0xd8, 0xc8,
	0x96, 0x66, 0xf0, 0x1a, 0x29, 0xfd, 0x68, 0xf8, 0x9f, 0x5b, 0xb0, 0x3d, 0xef, 0xac, 0x77, 0xf3,
	0x0e, 0xb4, 0x71, 0xd4, 0x48, 0xca, 0x55, 0x51, 0x68, 0x4a, 0xcb, 0x3f, 0xb6, 0x60, 0x8b, 0xc2,
	0xeb, 0xe1, 0x5c, 0x4f, 0x3e, 0x13, 0xb1, 0x25, 0xef, 0xba, 0xc1, 0x74, 0x11, 0x04, 0x78, 0xe5,
	0xd9, 0x86, 0x7d, 0x1c, 0x1c, 0x14, 0xfa, 0xb8, 0x9c, 0x1c, 0x92, 0x1b, 0xec, 0x2f, 0x2d, 0xb8,
	0x43, 0x11, 0x9f, 0x88, 0x42, 0x24, 0x57, 0x9d, 0x5c, 0x22, 0x27, 0xd5, 0xe2, 0x9d, 0x6c, 0x1e,
	0x7a, 0xb8, 0x33, 0x73, 0xa8, 0xe9, 0xeb, 0xf0, 0xef, 0x4b, 0xb0, 0x86, 0x4b, 0x05, 0x19, 0x4f,
	0x45, 0xcc, 0x2d, 0xdb, 0x87, 0x6d, 0x13, 0x70, 0x37, 0x32, 0xe5, 0xe4, 0xb4, 0xd0, 0x65, 0x8e,
	0x47, 0xda, 0xa2, 0x93, 0xef, 0x9b, 0x60, 0xfc, 0x89, 0x88, 0x8f, 0xbd, 0x62, 0x94, 0xb0, 0x77,
	0x60, 0xa3, 0xc6, 0x63, 0x62, 0xd4, 0x24, 0xe9, 0x3a, 0xe8, 0xd8, 0x20, 0xea, 0x11, 0xb0, 0x1a,
	0x35, 0x2b, 0x32, 0x8e, 0xbc, 0xeb, 0x0e, 0x58, 0x97, 0x98, 0xef, 0xc2, 0xdd, 0x1a, 0x7b, 0x43,
	0x65, 0x72, 0xf4, 0xd9, 0x71, 0x46, 0x07, 0x57, 0xeb, 0xd3, 0x83, 0x86, 0x3b, 0xae, 0x30, 0x0e,
	0x96, 0xc9, 0x60, 0xcd, 0x7b, 0x4e, 0x32, 0xf6, 0x36, 0xf4, 0x6a, 0x18, 0xd6, 0xc4, 0xc1, 0x8a,
	0x4b, 0x35, 0x07, 0xfa, 0x58, 0x18, 0xcb, 0x1e, 0xc2, 0x66, 0x0d, 0xc9, 0x03, 0x3e, 0xa5, 0xad,
	0xad, 0xba, 0x74, 0x73, 0xb0, 0xa3, 0xe0, 0x53, 0xdc, 0xdb, 0xf7, 0xe0, 0xde, 0xf5, 0x88, 0xe9,
	0x42, 0x9e, 0x62, 0xa1, 0xd5, 0xc5, 0xa0, 0x4d, 0x53, 0x0f, 0xe6, 0x23, 0x77, 0x58, 0xeb, 0xe7,
	0x22, 0xe8, 0x9b, 0x50, 0xc7, 0xe5, 0x8f, 0x33, 0x79, 0x46, 0x9c, 0x7f, 0x0b, 0xd6, 0x6a, 0xd4,
	0xcb, 0x22, 0x1d, 0x00, 0x41, 0x3a, 0x0e, 0xf2, 0xe3, 0x22, 0x1d, 0xfe, 0xb9, 0x05, 0xaf, 0x5b,
	0x41, 0x67, 0x40, 0x33, 0xe1, 0x44, 0x3c, 0x89, 0x6c, 0xc4, 0x2d, 0xbb, 0x07, 0xd0, 0x98, 0xdd,
	0x65, 0x53, 0x3b, 0xad, 0xa6, 0x7e, 0x0f, 0xb6, 0xf3, 0x80, 0x53, 0x4d, 0xe3, 0x8d, 0x06, 0xe1,
	0xcb, 0xcf, 0x66, 0x1e, 0x1c, 0x8d, 0x4d, 0xfe, 0xf1, 0x4c, 0xc1, 0x3e, 0x84, 0x41, 0x15, 0xb8,
	0xaa, 0xcf, 0xd4, 0x11, 0x72, 0x67, 0xba, 0x9d, 0xba, 0x28, 0x7a, 0xb5, 0x8b, 0xd4, 0xf0, 0x9f,
	0xb7, 0x88, 0x6c, 0x95, 0x8b, 0xb5, 0x5f, 0x9e, 0x37, 0x8e, 0x62, 0xe8, 0x97, 0x23, 0xcd, 0x10,
	0x7a, 0xf3, 0x7c, 0xf1, 0xc4, 0x4a, 0x1b, 0x64, 0x79, 0x02, 0x3b, 0xaf, 0xe0, 0x89, 0xab, 0x41,
	0x5b, 0xe9, 0x0d, 0x24, 0xb9, 0xef, 0x96, 0xf5, 0xfc, 0x70, 0x84, 0xea, 0xa4, 0x35, 0x39, 0xfe,
	0xd4, 0x82, 0xed, 0xab, 0xfb, 0x93, 0x2a, 0xd5, 0xc4, 0xa4, 0x6e, 0x70, 0xbe, 0x88, 0xd4, 0x7d,
	0xc5, 0xc9, 0x85, 0x6c, 0x3e, 0x90, 0x23, 0x95, 0x6a, 0xf6, 0x3a, 0xac, 0x56, 0x2c, 0x70, 0xb4,
	0x5d, 0x49, 0x1d, 0x05, 0xfe, 0x71, 0x0b, 0xde, 0xac, 0x3d, 0x08, 0x32, 0x1e, 0x19, 0xa3, 0x63,
	0xe9, 0x36, 0xe0, 0xaa, 0x0f, 0x7b, 0x0c, 0xb7, 0x89, 0x46, 0x4d, 0x55, 0x4d, 0x8a, 0x5e, 0xc8,
	0x4c, 0x30, 0x7e, 0x3a, 0x53, 0x11, 0x3d, 0x3e, 0x82, 0x3b, 0xd7, 0x4d, 0xa4, 0xe0, 0x85, 0xce,
	0x84, 0xe7, 0xc8, 0xed, 0x2b, 0x66, 0x52, 0x84, 0x3a, 0x13, 0xec, 0x5b, 0xb0, 0x75, 0xcd, 0xb2,
	0xa6, 0x48, 0x7f, 0xde, 0x66, 0x94, 0xb0, 0x0f, 0xe0, 0xf5, 0x6b, 0xf0, 0xb9, 0x33, 0xda, 0x9e,
	0x37, 0xf1, 0xc7, 0xf5, 0xae, 0xaf, 0x2d, 0xa7, 0x99, 0x9e, 0x44, 0x59, 0x33, 0xeb, 0x7b, 0xe1,
	0x86, 0x09, 0xc6, 0x3f, 0x20, 0xb9, 0x07, 0x3f, 0x84, 0x3e, 0x81, 0x6b, 0xc2, 0xc8, 0x64, 0xb0,
	0xb2, 0xbb, 0xb4, 0xd7, 0x0b, 0x7b, 0x26, 0x18, 0x57, 0x4c, 0x19, 0x25, 0xc3, 0xcf, 0x97, 0xe1,
	0x7e, 0x33, 0x96, 0xbe, 0xd7, 0x37, 0x42, 0xf9, 0x0e, 0xac, 0xd3, 0x54, 0x46, 0xc4, 0x5a, 0x25,
	0x51, 0x71, 0xe9, 0xdb, 0x28, 0x56, 0x87, 0xe3, 0x4a, 0x86, 0xdd, 0x96, 0x50, 0x95, 0xbd, 0x3a,
	0xa5, 0x98, 0xb5, 0x69, 0xbd, 0xa3, 0x5a, 0xc8, 0x1e, 0xf9, 0x72, 0xa3, 0xb4, 0x95, 0xa9, 0x8c,
	0x5d, 0x06, 0x2e, 0x11, 0x12, 0x37, 0xf1, 0xbc, 0x21, 0xc6, 0xce, 0x4c, 0x58, 0xa4, 0x1c, 0x49,
	0xa2, 0x8c, 0x22, 0xd4, 0xa6, 0x5a, 0x7a, 0x38, 0x93, 0xb2, 0x37, 0xa0, 0x2d, 0xd4, 0x59, 0xa4,
	0x62, 0x91, 0x50, 0x44, 0xda, 0x61, 0x3d, 0xc6, 0x2c, 0x48, 0x44, 0xf2, 0x98, 0xe7, 0x59, 0x69,
	0x1e, 0x13, 0x93, 0xda, 0x61, 0x07, 0x25, 0x47, 0x28, 0xc0, 0xfe, 0x4b, 0x6a, 0xab, 0x1f, 0x53,
	0xd9, 0x6b, 0x87, 0xab, 0x38, 0x3e, 0xd1, 0x8f, 0xa9, 0x97, 0x9f, 0x45, 0x85, 0x48, 0xa8, 0xb6,
	0xb5, 0x43, 0x3f, 0x62, 0xdf, 0x80, 0x7e, 0x26, 0xd5, 0x39, 0x2f, 0x95, 0xdf, 0xad, 0x48, 0xa8,
	0x94, 0xb5, 0xc3, 0x0d, 0x94, 0xbf, 0x98, 0x89, 0xf1, 0x22, 0x23, 0x2e, 0x6c, 0x11, 0x71, 0x5b,
	0x44, 0x69, 0x2a, 0x63, 0xaa, 0x67, 0xed, 0x70, 0x8d, 0x84, 0x27, 0x4e, 0xc6, 0xfa, 0xb0, 0x14,
	0xa9, 0xcb, 0x41, 0x97, 0x54, 0xf8, 0x97, 0xdd, 0x83, 0x4e, 0x21, 0xf0, 0x9e, 0x81, 0x71, 0x5c,
	0x73, 0x2e, 0xd7, 0x02, 0x8c, 0x75, 0x3d, 0xe0, 0x4a, 0x73, 0x61, 0x07, 0x3d, 0x17, 0xeb, 0x5a,
	0xfc, 0x5c, 0x1f, 0x58, 0x16, 0xc0, 0x8e, 0x56, 0x82, 0x5b, 0xcd, 0x55, 0xf3, 0x5c, 0x85, 0x1d,
	0xac, 0x13, 0x9c, 0x69, 0x25, 0x4e, 0xf4, 0xf3, 0xa3, 0x5a, 0x75, 0x80, 0xed, 0xa0, 0x8f, 0x36,
	0x18, 0x2c, 0x8e, 0x7f, 0x4a, 0x25, 0x07, 0x1b, 0x6e, 0x72, 0xad, 0x04, 0x86, 0xec, 0x50, 0x89,
	0x17, 0x4a, 0x62, 0x07, 0x9a, 0x03, 0x4e, 0xe4, 0xa0, 0xef, 0xf6, 0x36, 0xc3, 0x7d, 0x5f, 0xb2,
	0x87, 0xb0, 0x81, 0x09, 0xdf, 0x0c, 0xd5, 0xa6, 0x3b, 0xc2, 0xcc, 0xe4, 0x8d, 0x48, 0x0d, 0x7f,
	0x05, 0xeb, 0xae, 0x4a, 0xe8, 0xf8, 0x5c, 0x97, 0x96, 0x5b, 0x3c, 0x38, 0x69, 0xaa, 0xb1, 0x27,
	0x5d, 0x47, 0x9a, 0xb1, 0x13, 0xb0, 0x5d, 0xe8, 0x56, 0xdd, 0x67, 0x56, 0xc5, 0x9b, 0x22, 0xf6,
	0x2e, 0x6c, 0xd6, 0xb3, 0xc9, 0xa9, 0x30, 0x36, 0x9a, 0xe6, 0x55, 0x56, 0x7a, 0xc5, 0x49, 0x25,
	0x1f, 0xfe, 0x7b, 0x79, 0xf6, 0x68, 0xa2, 0x6b, 0x02, 0x3a, 0x83, 0xe5, 0x90, 0xbd, 0x0d, 0x6b,
	0x42, 0xd9, 0xe2, 0x92, 0x8b, 0x0b, 0x69, 0xac, 0xf1, 0x9e, 0x74, 0x49, 0x76, 0x40, 0x22, 0x24,
	0x91, 0x54, 0x3c, 0x8b, 0x26, 0x22, 0xf3, 0xd5, 0x7b, 0x55, 0xaa, 0x31, 0x0e, 0xf1, 0xae, 0x3b,
	0x49, 0x13, 0x1e, 0x17, 0x22, 0xc2, 0xcd, 0x3b, 0xaa, 0xc3, 0x24, 0x4d, 0x9e, 0x39, 0x09, 0xbe,
	0x83, 0x10, 0x50, 0xe6, 0x9e, 0xdb, 0xcb, 0x93, 0x34, 0x79, 0x91, 0xa3, 0x9d, 0x8e, 0xa6, 0xb5,
	0x9d, 0x63, 0x35, 0xe8, 0x68, 0x5a, 0xd9, 0xfd, 0x02, 0xda, 0xe4, 0x63, 0x2a, 0x62, 0x62, 0x75,
	0x37, 0xf8, 0xe9, 0x82, 0x2a, 0x76, 0x7d, 0x6b, 0x0a, 0x57, 0x51, 0xfc, 0x89, 0x88, 0xf1, 0x79,
	0x87, 0x4e, 0x2b, 0x71, 0x61, 0xf9, 0x99, 0xce, 0x29, 0x73, 0x3a, 0xb4, 0xad, 0xe7, 0xe2, 0xc2,
	0xfe, 0x50, 0xe7, 0xec, 0x4d, 0xb7, 0x6f, 0x7a, 0xe2, 0xa5, 0x67, 0xfe, 0x76, 0xd0, 0x99, 0xa4,
	0xd8, 0x9e, 0x46, 0xe9, 0x59, 0xa5, 0xc7, 0xc3, 0x41, 0x7d, 0xa7, 0xd6, 0x1f, 0x96, 0x16, 0xf5,
	0x43, 0xe8, 0xa1, 0x5e, 0x2a, 0xeb, 0xe3, 0x0a, 0xae, 0x2b, 0x4e, 0xd2, 0x64, 0xa4, 0xac, 0x8b,
	0xed, 0x1e, 0xf4, 0x11, 0x23, 0x4e, 0xf1, 0xd1, 0xe0, 0x61, 0x5d, 0x77, 0xd9, 0x9a, 0xa4, 0xc9,
	0x01, 0x89, 0x1d, 0xf2, 0x11, 0x6c, 0xa6, 0x51, 0x99, 0x59, 0x9e, 0x25, 0xb2, 0xa6, 0x94, 0x4b,
	0xac, 0x0d, 0x52, 0x8c, 0x13, 0x59, 0x11, 0xeb, 0x2e, 0x74, 0x6a, 0xac, 0x4f, 0xac, 0x76, 0x85,
	0x69, 0x28, 0xcf, 0x0b, 0x9f, 0x46, 0x5e, 0x79, 0x5e, 0xcc, 0x94, 0x91, 0x34, 0x3e, 0x6b, 0x9c,
	0xf2, 0xa9, 0x34, 0xd4, 0x8d, 0x49, 0x89, 0x5c, 0xa4, 0x5c, 0xe9, 0x85, 0x0e, 0x8e, 0x24, 0x64,
	0xbf, 0x84, 0xd5, 0xca, 0xaf, 0x4d, 0x3a, 0xcd, 0xc9, 0x22, 0x4e, 0x73, 0x3e, 0xc5, 0xc2, 0x6a,
	0xc9, 0xe1, 0xdf, 0x5e, 0x83, 0xc1, 0xb5, 0xc7, 0x5f, 0x21, 0x5e, 0xd2, 0x5b, 0x7e, 0x1f, 0xb6,
	0x0a, 0xf1, 0x52, 0x14, 0xc6, 0x35, 0xef, 0xbc, 0x10, 0x46, 0xa8, 0x2a, 0x23, 0x37, 0xbd, 0x6a,
	0x6c, 0xf2, 0x23, 0xa7, 0x60, 0x01, 0xdc, 0x6e, 0xe2, 0x63, 0xad, 0x94, 0xcb, 0x7c, 0xd7, 0x11,
	0xb6, 0x66, 0x16, 0xcf, 0x2a, 0x15, 0xfb, 0x4d, 0x0b, 0x8b, 0xda, 0xcc, 0x08, 0x59, 0xbd, 0xb4,
	0x50, 0x56, 0xd7, 0xd7, 0x33, 0x2c, 0x9b, 0x95, 0x43, 0xc8, 0xed, 0xdf, 0xb7, 0xa0, 0xdb, 0xe8,
	0xcd, 0x94, 0x96, 0xdd, 0xa0, 0x58, 0xe4, 0x7b, 0xfb, 0xe6, 0x5b, 0x4c, 0xd8, 0x74, 0x83, 0xfd,
	0xae, 0x05, 0x30, 0xab, 0xe2, 0xfe, 0x92, 0xf6, 0xb3, 0x45, 0x7b, 0x75, 0xed, 0x3e, 0x10, 0x36,
	0x9c, 0x18, 0xfe, 0xa1, 0x0d, 0xdb, 0x37, 0x7d, 0x33, 0x60, 0x0f, 0x60, 0x5d, 0x9a, 0xb9, 0xc6,
	0x5d, 0xbf, 0xbd, 0x9b, 0x7d, 0xfb, 0x3e, 0x00, 0x75, 0x87, 0x9c, 0x72, 0xc2, 0x55, 0xce, 0x0e,
	0x36, 0x06, 0x12, 0xe0, 0xad, 0x37, 0x8f, 0xec, 0x59, 0xd3, 0x09, 0x7f, 0x87, 0x76, 0x55, 0x7c,
	0x0b, 0xb5, 0xb3, 0xf6, 0xe5, 0xae, 0xd3, 0x77, 0xa0, 0x8d, 0xa0, 0xa9, 0x4e, 0xaa, 0xfb, 0xd4,
	0x6a, 0x66, 0xf2, 0x4f, 0x75, 0x22, 0xb0, 0x71, 0x92, 0x83, 0x3a, 0x8e, 0x32, 0x5f, 0x2e, 0xdc,
	0xfd, 0xa9, 0x97, 0x99, 0x7c, 0x8c, 0x52, 0x57, 0x2d, 0xbe, 0x0d, 0xdb, 0x88, 0xd3, 0xa5, 0xcd,
	0xb1, 0x3c, 0x55, 0x9f, 0x00, 0xfc, 0x35, 0x94, 0x65, 0x26, 0x3f, 0x24, 0x55, 0xfd, 0x71, 0x00,
	0x2b, 0x51, 0xc3, 0xc2, 0x4d, 0xed, 0x1e, 0x51, 0xeb, 0x35, 0xda, 0xcd, 0xfd, 0xeb, 0x16, 0xa0,
	0x3f, 0x54, 0x35, 0xdb, 0xbb, 0x4b, 0x8b, 0xfa, 0x92, 0x73, 0xd3, 0xb7, 0x86, 0x70, 0x25, 0x33,
	0x39, 0xd6, 0xe6, 0xbb, 0x80, 0x41, 0xc6, 0x49, 0x6d, 0xf5, 0x08, 0xc3, 0x98, 0x1d, 0xe3, 0x98,
	0x7d, 0xde, 0x82, 0x4e, 0xdd, 0xfc, 0xa8, 0xea, 0x76, 0x03, 0xb9, 0x68, 0x9a, 0xd5, 0x0b, 0x86,
	0xd4, 0xd4, 0xe8, 0xfe, 0x7f, 0x35, 0x0f, 0xbb, 0x5f, 0xc9, 0x3c, 0x5c, 0xfb, 0x0a, 0xe4, 0x21,
	0xfb, 0x6d, 0x0b, 0xba, 0x8d, 0xea, 0x49, 0x5d, 0xab, 0x1b, 0x64, 0x5f, 0xca, 0x27, 0x42, 0xdf,
	0x25, 0x42, 0x98, 0x55, 0xd1, 0xc9, 0x0a, 0x7d, 0xdb, 0x7e, 0xf2, 0xdf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x78, 0xc9, 0xbc, 0x2b, 0xf5, 0x16, 0x00, 0x00,
}
