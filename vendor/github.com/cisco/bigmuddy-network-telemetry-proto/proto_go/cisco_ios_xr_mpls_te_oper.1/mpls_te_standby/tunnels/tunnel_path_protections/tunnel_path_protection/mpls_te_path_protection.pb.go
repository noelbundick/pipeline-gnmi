// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mpls_te_path_protection.proto

package cisco_ios_xr_mpls_te_oper_mpls_te_standby_tunnels_tunnel_path_protections_tunnel_path_protection

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// MPLS TE Path Protected Information
type MplsTePathProtection_KEYS struct {
	CType                string   `protobuf:"bytes,1,opt,name=c_type,json=cType" json:"c_type,omitempty"`
	TunnelId             uint32   `protobuf:"varint,2,opt,name=tunnel_id,json=tunnelId" json:"tunnel_id,omitempty"`
	TunnelName           string   `protobuf:"bytes,3,opt,name=tunnel_name,json=tunnelName" json:"tunnel_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTePathProtection_KEYS) Reset()         { *m = MplsTePathProtection_KEYS{} }
func (m *MplsTePathProtection_KEYS) String() string { return proto.CompactTextString(m) }
func (*MplsTePathProtection_KEYS) ProtoMessage()    {}
func (*MplsTePathProtection_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_path_protection_c042026f2ec61952, []int{0}
}
func (m *MplsTePathProtection_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTePathProtection_KEYS.Unmarshal(m, b)
}
func (m *MplsTePathProtection_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTePathProtection_KEYS.Marshal(b, m, deterministic)
}
func (dst *MplsTePathProtection_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTePathProtection_KEYS.Merge(dst, src)
}
func (m *MplsTePathProtection_KEYS) XXX_Size() int {
	return xxx_messageInfo_MplsTePathProtection_KEYS.Size(m)
}
func (m *MplsTePathProtection_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTePathProtection_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTePathProtection_KEYS proto.InternalMessageInfo

func (m *MplsTePathProtection_KEYS) GetCType() string {
	if m != nil {
		return m.CType
	}
	return ""
}

func (m *MplsTePathProtection_KEYS) GetTunnelId() uint32 {
	if m != nil {
		return m.TunnelId
	}
	return 0
}

func (m *MplsTePathProtection_KEYS) GetTunnelName() string {
	if m != nil {
		return m.TunnelName
	}
	return ""
}

type MplsTePathProtection struct {
	// Tunnel UP
	IsTunnelUp bool `protobuf:"varint,50,opt,name=is_tunnel_up,json=isTunnelUp" json:"is_tunnel_up,omitempty"`
	// Source
	SourceAddress string `protobuf:"bytes,51,opt,name=source_address,json=sourceAddress" json:"source_address,omitempty"`
	// Destination
	DestinationAddress string `protobuf:"bytes,52,opt,name=destination_address,json=destinationAddress" json:"destination_address,omitempty"`
	// Extended Tunnel ID
	ExtendedTunnelId string `protobuf:"bytes,53,opt,name=extended_tunnel_id,json=extendedTunnelId" json:"extended_tunnel_id,omitempty"`
	// Path Protect Info
	PathProtection *MplsTePpInfo `protobuf:"bytes,54,opt,name=path_protection,json=pathProtection" json:"path_protection,omitempty"`
	//  Current LSP info
	CurrentLsp *MplsTePathProtectionLsp `protobuf:"bytes,55,opt,name=current_lsp,json=currentLsp" json:"current_lsp,omitempty"`
	//  Standby LSP info
	StandbyLsp           *MplsTePathProtectionLsp `protobuf:"bytes,56,opt,name=standby_lsp,json=standbyLsp" json:"standby_lsp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *MplsTePathProtection) Reset()         { *m = MplsTePathProtection{} }
func (m *MplsTePathProtection) String() string { return proto.CompactTextString(m) }
func (*MplsTePathProtection) ProtoMessage()    {}
func (*MplsTePathProtection) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_path_protection_c042026f2ec61952, []int{1}
}
func (m *MplsTePathProtection) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTePathProtection.Unmarshal(m, b)
}
func (m *MplsTePathProtection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTePathProtection.Marshal(b, m, deterministic)
}
func (dst *MplsTePathProtection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTePathProtection.Merge(dst, src)
}
func (m *MplsTePathProtection) XXX_Size() int {
	return xxx_messageInfo_MplsTePathProtection.Size(m)
}
func (m *MplsTePathProtection) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTePathProtection.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTePathProtection proto.InternalMessageInfo

func (m *MplsTePathProtection) GetIsTunnelUp() bool {
	if m != nil {
		return m.IsTunnelUp
	}
	return false
}

func (m *MplsTePathProtection) GetSourceAddress() string {
	if m != nil {
		return m.SourceAddress
	}
	return ""
}

func (m *MplsTePathProtection) GetDestinationAddress() string {
	if m != nil {
		return m.DestinationAddress
	}
	return ""
}

func (m *MplsTePathProtection) GetExtendedTunnelId() string {
	if m != nil {
		return m.ExtendedTunnelId
	}
	return ""
}

func (m *MplsTePathProtection) GetPathProtection() *MplsTePpInfo {
	if m != nil {
		return m.PathProtection
	}
	return nil
}

func (m *MplsTePathProtection) GetCurrentLsp() *MplsTePathProtectionLsp {
	if m != nil {
		return m.CurrentLsp
	}
	return nil
}

func (m *MplsTePathProtection) GetStandbyLsp() *MplsTePathProtectionLsp {
	if m != nil {
		return m.StandbyLsp
	}
	return nil
}

// RSVP ERO IPV4 subobject
type RsvpMgmtEroIpv4Subobj struct {
	// ERO Entry Is Strict
	IsStrictRoute bool `protobuf:"varint,1,opt,name=is_strict_route,json=isStrictRoute" json:"is_strict_route,omitempty"`
	// The ERO IPV4 Address
	EroAddress string `protobuf:"bytes,2,opt,name=ero_address,json=eroAddress" json:"ero_address,omitempty"`
	// ERO Prefix Length
	PrefixLength         uint32   `protobuf:"varint,3,opt,name=prefix_length,json=prefixLength" json:"prefix_length,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RsvpMgmtEroIpv4Subobj) Reset()         { *m = RsvpMgmtEroIpv4Subobj{} }
func (m *RsvpMgmtEroIpv4Subobj) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtEroIpv4Subobj) ProtoMessage()    {}
func (*RsvpMgmtEroIpv4Subobj) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_path_protection_c042026f2ec61952, []int{2}
}
func (m *RsvpMgmtEroIpv4Subobj) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtEroIpv4Subobj.Unmarshal(m, b)
}
func (m *RsvpMgmtEroIpv4Subobj) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtEroIpv4Subobj.Marshal(b, m, deterministic)
}
func (dst *RsvpMgmtEroIpv4Subobj) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtEroIpv4Subobj.Merge(dst, src)
}
func (m *RsvpMgmtEroIpv4Subobj) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtEroIpv4Subobj.Size(m)
}
func (m *RsvpMgmtEroIpv4Subobj) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtEroIpv4Subobj.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtEroIpv4Subobj proto.InternalMessageInfo

func (m *RsvpMgmtEroIpv4Subobj) GetIsStrictRoute() bool {
	if m != nil {
		return m.IsStrictRoute
	}
	return false
}

func (m *RsvpMgmtEroIpv4Subobj) GetEroAddress() string {
	if m != nil {
		return m.EroAddress
	}
	return ""
}

func (m *RsvpMgmtEroIpv4Subobj) GetPrefixLength() uint32 {
	if m != nil {
		return m.PrefixLength
	}
	return 0
}

// RSVP ERO UNNUM subobject
type RsvpMgmtEroUnnumSubobj struct {
	// ERO Entry Is Strict
	IsStrictRoute bool `protobuf:"varint,1,opt,name=is_strict_route,json=isStrictRoute" json:"is_strict_route,omitempty"`
	// The Interface ID in ERO
	EroInterfaceId uint32 `protobuf:"varint,2,opt,name=ero_interface_id,json=eroInterfaceId" json:"ero_interface_id,omitempty"`
	// The Router ID in ERO
	EroRouterId string `protobuf:"bytes,3,opt,name=ero_router_id,json=eroRouterId" json:"ero_router_id,omitempty"`
	// Status of ERO
	Status               string   `protobuf:"bytes,4,opt,name=status" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RsvpMgmtEroUnnumSubobj) Reset()         { *m = RsvpMgmtEroUnnumSubobj{} }
func (m *RsvpMgmtEroUnnumSubobj) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtEroUnnumSubobj) ProtoMessage()    {}
func (*RsvpMgmtEroUnnumSubobj) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_path_protection_c042026f2ec61952, []int{3}
}
func (m *RsvpMgmtEroUnnumSubobj) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtEroUnnumSubobj.Unmarshal(m, b)
}
func (m *RsvpMgmtEroUnnumSubobj) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtEroUnnumSubobj.Marshal(b, m, deterministic)
}
func (dst *RsvpMgmtEroUnnumSubobj) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtEroUnnumSubobj.Merge(dst, src)
}
func (m *RsvpMgmtEroUnnumSubobj) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtEroUnnumSubobj.Size(m)
}
func (m *RsvpMgmtEroUnnumSubobj) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtEroUnnumSubobj.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtEroUnnumSubobj proto.InternalMessageInfo

func (m *RsvpMgmtEroUnnumSubobj) GetIsStrictRoute() bool {
	if m != nil {
		return m.IsStrictRoute
	}
	return false
}

func (m *RsvpMgmtEroUnnumSubobj) GetEroInterfaceId() uint32 {
	if m != nil {
		return m.EroInterfaceId
	}
	return 0
}

func (m *RsvpMgmtEroUnnumSubobj) GetEroRouterId() string {
	if m != nil {
		return m.EroRouterId
	}
	return ""
}

func (m *RsvpMgmtEroUnnumSubobj) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

// Union of the different RSVP ERO types
type RsvpMgmtEroSubobj struct {
	EroType string `protobuf:"bytes,1,opt,name=ero_type,json=eroType" json:"ero_type,omitempty"`
	// IPV4 ERO Sub Object
	Ipv4EroSubObject *RsvpMgmtEroIpv4Subobj `protobuf:"bytes,2,opt,name=ipv4_ero_sub_object,json=ipv4EroSubObject" json:"ipv4_ero_sub_object,omitempty"`
	// Unnumbered ERO Sub Object
	UnnumberedEroSubObject *RsvpMgmtEroUnnumSubobj `protobuf:"bytes,3,opt,name=unnumbered_ero_sub_object,json=unnumberedEroSubObject" json:"unnumbered_ero_sub_object,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}                `json:"-"`
	XXX_unrecognized       []byte                  `json:"-"`
	XXX_sizecache          int32                   `json:"-"`
}

func (m *RsvpMgmtEroSubobj) Reset()         { *m = RsvpMgmtEroSubobj{} }
func (m *RsvpMgmtEroSubobj) String() string { return proto.CompactTextString(m) }
func (*RsvpMgmtEroSubobj) ProtoMessage()    {}
func (*RsvpMgmtEroSubobj) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_path_protection_c042026f2ec61952, []int{4}
}
func (m *RsvpMgmtEroSubobj) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RsvpMgmtEroSubobj.Unmarshal(m, b)
}
func (m *RsvpMgmtEroSubobj) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RsvpMgmtEroSubobj.Marshal(b, m, deterministic)
}
func (dst *RsvpMgmtEroSubobj) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RsvpMgmtEroSubobj.Merge(dst, src)
}
func (m *RsvpMgmtEroSubobj) XXX_Size() int {
	return xxx_messageInfo_RsvpMgmtEroSubobj.Size(m)
}
func (m *RsvpMgmtEroSubobj) XXX_DiscardUnknown() {
	xxx_messageInfo_RsvpMgmtEroSubobj.DiscardUnknown(m)
}

var xxx_messageInfo_RsvpMgmtEroSubobj proto.InternalMessageInfo

func (m *RsvpMgmtEroSubobj) GetEroType() string {
	if m != nil {
		return m.EroType
	}
	return ""
}

func (m *RsvpMgmtEroSubobj) GetIpv4EroSubObject() *RsvpMgmtEroIpv4Subobj {
	if m != nil {
		return m.Ipv4EroSubObject
	}
	return nil
}

func (m *RsvpMgmtEroSubobj) GetUnnumberedEroSubObject() *RsvpMgmtEroUnnumSubobj {
	if m != nil {
		return m.UnnumberedEroSubObject
	}
	return nil
}

// Path protection log entry
type TePpSwLogEntryBag struct {
	// The index number of the path protection switch over event
	PathProtectionSwitchoverEventIndex uint32 `protobuf:"varint,1,opt,name=path_protection_switchover_event_index,json=pathProtectionSwitchoverEventIndex" json:"path_protection_switchover_event_index,omitempty"`
	// The ID of the tunnel that experienced switchover
	PathProtectionTunnelId uint32 `protobuf:"varint,2,opt,name=path_protection_tunnel_id,json=pathProtectionTunnelId" json:"path_protection_tunnel_id,omitempty"`
	// The LSP ID from which the traffic was switched over
	FromLspId uint32 `protobuf:"varint,3,opt,name=from_lsp_id,json=fromLspId" json:"from_lsp_id,omitempty"`
	// The LSP ID to which the traffic was switched over
	ToLspId uint32 `protobuf:"varint,4,opt,name=to_lsp_id,json=toLspId" json:"to_lsp_id,omitempty"`
	// The date when the error that caused the switchover was detected. This date is the number of seconds since Jan 1st 1970
	DateOfErrorDetection uint32 `protobuf:"varint,5,opt,name=date_of_error_detection,json=dateOfErrorDetection" json:"date_of_error_detection,omitempty"`
	// The milliseconds offset of the date when the error that caused  the switchover was detected.
	DateOfErrorDetectionMillisec uint32 `protobuf:"varint,6,opt,name=date_of_error_detection_millisec,json=dateOfErrorDetectionMillisec" json:"date_of_error_detection_millisec,omitempty"`
	// The time in milliseconds between the detection of the error and switching the traffic
	SwitchoverDurationMillisec uint32 `protobuf:"varint,7,opt,name=switchover_duration_millisec,json=switchoverDurationMillisec" json:"switchover_duration_millisec,omitempty"`
	// The reason that caused the path protection switchover
	PathProtectionSwitchoverReason string   `protobuf:"bytes,8,opt,name=path_protection_switchover_reason,json=pathProtectionSwitchoverReason" json:"path_protection_switchover_reason,omitempty"`
	XXX_NoUnkeyedLiteral           struct{} `json:"-"`
	XXX_unrecognized               []byte   `json:"-"`
	XXX_sizecache                  int32    `json:"-"`
}

func (m *TePpSwLogEntryBag) Reset()         { *m = TePpSwLogEntryBag{} }
func (m *TePpSwLogEntryBag) String() string { return proto.CompactTextString(m) }
func (*TePpSwLogEntryBag) ProtoMessage()    {}
func (*TePpSwLogEntryBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_path_protection_c042026f2ec61952, []int{5}
}
func (m *TePpSwLogEntryBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TePpSwLogEntryBag.Unmarshal(m, b)
}
func (m *TePpSwLogEntryBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TePpSwLogEntryBag.Marshal(b, m, deterministic)
}
func (dst *TePpSwLogEntryBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TePpSwLogEntryBag.Merge(dst, src)
}
func (m *TePpSwLogEntryBag) XXX_Size() int {
	return xxx_messageInfo_TePpSwLogEntryBag.Size(m)
}
func (m *TePpSwLogEntryBag) XXX_DiscardUnknown() {
	xxx_messageInfo_TePpSwLogEntryBag.DiscardUnknown(m)
}

var xxx_messageInfo_TePpSwLogEntryBag proto.InternalMessageInfo

func (m *TePpSwLogEntryBag) GetPathProtectionSwitchoverEventIndex() uint32 {
	if m != nil {
		return m.PathProtectionSwitchoverEventIndex
	}
	return 0
}

func (m *TePpSwLogEntryBag) GetPathProtectionTunnelId() uint32 {
	if m != nil {
		return m.PathProtectionTunnelId
	}
	return 0
}

func (m *TePpSwLogEntryBag) GetFromLspId() uint32 {
	if m != nil {
		return m.FromLspId
	}
	return 0
}

func (m *TePpSwLogEntryBag) GetToLspId() uint32 {
	if m != nil {
		return m.ToLspId
	}
	return 0
}

func (m *TePpSwLogEntryBag) GetDateOfErrorDetection() uint32 {
	if m != nil {
		return m.DateOfErrorDetection
	}
	return 0
}

func (m *TePpSwLogEntryBag) GetDateOfErrorDetectionMillisec() uint32 {
	if m != nil {
		return m.DateOfErrorDetectionMillisec
	}
	return 0
}

func (m *TePpSwLogEntryBag) GetSwitchoverDurationMillisec() uint32 {
	if m != nil {
		return m.SwitchoverDurationMillisec
	}
	return 0
}

func (m *TePpSwLogEntryBag) GetPathProtectionSwitchoverReason() string {
	if m != nil {
		return m.PathProtectionSwitchoverReason
	}
	return ""
}

// MPLS TE Path Protected Switchover Information
type MplsTePpInfo struct {
	// The date when the switchover was completed. This date is the number of seconds since Jan 1st 1970
	TimeOfSwitchoverSec uint32 `protobuf:"varint,1,opt,name=time_of_switchover_sec,json=timeOfSwitchoverSec" json:"time_of_switchover_sec,omitempty"`
	// Number of times switchover occurred
	SwitchoverTotal uint32 `protobuf:"varint,2,opt,name=switchover_total,json=switchoverTotal" json:"switchover_total,omitempty"`
	// Total times, Standby LSP ready for use
	SwitchoverReady uint32 `protobuf:"varint,3,opt,name=switchover_ready,json=switchoverReady" json:"switchover_ready,omitempty"`
	// Number of times the standby LSP was reoptimized
	StandbyReoptimizedNumber uint32 `protobuf:"varint,4,opt,name=standby_reoptimized_number,json=standbyReoptimizedNumber" json:"standby_reoptimized_number,omitempty"`
	// Reason for last switchover
	SwitchoverReason uint32 `protobuf:"varint,5,opt,name=switchover_reason,json=switchoverReason" json:"switchover_reason,omitempty"`
	// Standby path diversity type
	DiversityType string `protobuf:"bytes,6,opt,name=diversity_type,json=diversityType" json:"diversity_type,omitempty"`
	// Is Path Protection Configured
	IsPathProtectConfigured bool `protobuf:"varint,7,opt,name=is_path_protect_configured,json=isPathProtectConfigured" json:"is_path_protect_configured,omitempty"`
	// The path option ID (level/index) of the configured explicit protecting path
	PathProtectionProtectedById uint32 `protobuf:"varint,8,opt,name=path_protection_protected_by_id,json=pathProtectionProtectedById" json:"path_protection_protected_by_id,omitempty"`
	// Flag to indicate whether tunnel has a path-option which is valid for path-protection
	ValidPathProtectionPathOptionExists bool `protobuf:"varint,9,opt,name=valid_path_protection_path_option_exists,json=validPathProtectionPathOptionExists" json:"valid_path_protection_path_option_exists,omitempty"`
	// Is Switchover Underway
	IsPathProtectSwitchOverUnderway bool `protobuf:"varint,10,opt,name=is_path_protect_switch_over_underway,json=isPathProtectSwitchOverUnderway" json:"is_path_protect_switch_over_underway,omitempty"`
	// Path Protected Switchover Information
	Switchover *TePpSwLogEntryBag `protobuf:"bytes,11,opt,name=switchover" json:"switchover,omitempty"`
	// Remaining time until path protection reoptimization (seconds)
	ReoptimizationTimeRemaining uint32   `protobuf:"varint,12,opt,name=reoptimization_time_remaining,json=reoptimizationTimeRemaining" json:"reoptimization_time_remaining,omitempty"`
	XXX_NoUnkeyedLiteral        struct{} `json:"-"`
	XXX_unrecognized            []byte   `json:"-"`
	XXX_sizecache               int32    `json:"-"`
}

func (m *MplsTePpInfo) Reset()         { *m = MplsTePpInfo{} }
func (m *MplsTePpInfo) String() string { return proto.CompactTextString(m) }
func (*MplsTePpInfo) ProtoMessage()    {}
func (*MplsTePpInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_path_protection_c042026f2ec61952, []int{6}
}
func (m *MplsTePpInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTePpInfo.Unmarshal(m, b)
}
func (m *MplsTePpInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTePpInfo.Marshal(b, m, deterministic)
}
func (dst *MplsTePpInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTePpInfo.Merge(dst, src)
}
func (m *MplsTePpInfo) XXX_Size() int {
	return xxx_messageInfo_MplsTePpInfo.Size(m)
}
func (m *MplsTePpInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTePpInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTePpInfo proto.InternalMessageInfo

func (m *MplsTePpInfo) GetTimeOfSwitchoverSec() uint32 {
	if m != nil {
		return m.TimeOfSwitchoverSec
	}
	return 0
}

func (m *MplsTePpInfo) GetSwitchoverTotal() uint32 {
	if m != nil {
		return m.SwitchoverTotal
	}
	return 0
}

func (m *MplsTePpInfo) GetSwitchoverReady() uint32 {
	if m != nil {
		return m.SwitchoverReady
	}
	return 0
}

func (m *MplsTePpInfo) GetStandbyReoptimizedNumber() uint32 {
	if m != nil {
		return m.StandbyReoptimizedNumber
	}
	return 0
}

func (m *MplsTePpInfo) GetSwitchoverReason() uint32 {
	if m != nil {
		return m.SwitchoverReason
	}
	return 0
}

func (m *MplsTePpInfo) GetDiversityType() string {
	if m != nil {
		return m.DiversityType
	}
	return ""
}

func (m *MplsTePpInfo) GetIsPathProtectConfigured() bool {
	if m != nil {
		return m.IsPathProtectConfigured
	}
	return false
}

func (m *MplsTePpInfo) GetPathProtectionProtectedById() uint32 {
	if m != nil {
		return m.PathProtectionProtectedById
	}
	return 0
}

func (m *MplsTePpInfo) GetValidPathProtectionPathOptionExists() bool {
	if m != nil {
		return m.ValidPathProtectionPathOptionExists
	}
	return false
}

func (m *MplsTePpInfo) GetIsPathProtectSwitchOverUnderway() bool {
	if m != nil {
		return m.IsPathProtectSwitchOverUnderway
	}
	return false
}

func (m *MplsTePpInfo) GetSwitchover() *TePpSwLogEntryBag {
	if m != nil {
		return m.Switchover
	}
	return nil
}

func (m *MplsTePpInfo) GetReoptimizationTimeRemaining() uint32 {
	if m != nil {
		return m.ReoptimizationTimeRemaining
	}
	return 0
}

// Segment-routing outgoing fowarding info
type MplsTeS2LSrOutgoingFwdInfo struct {
	// Output interface of LSP
	LspOutputInterface string `protobuf:"bytes,1,opt,name=lsp_output_interface,json=lspOutputInterface" json:"lsp_output_interface,omitempty"`
	// Output label of the LSP
	LspOutputLabel       uint32   `protobuf:"varint,2,opt,name=lsp_output_label,json=lspOutputLabel" json:"lsp_output_label,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeS2LSrOutgoingFwdInfo) Reset()         { *m = MplsTeS2LSrOutgoingFwdInfo{} }
func (m *MplsTeS2LSrOutgoingFwdInfo) String() string { return proto.CompactTextString(m) }
func (*MplsTeS2LSrOutgoingFwdInfo) ProtoMessage()    {}
func (*MplsTeS2LSrOutgoingFwdInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_path_protection_c042026f2ec61952, []int{7}
}
func (m *MplsTeS2LSrOutgoingFwdInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeS2LSrOutgoingFwdInfo.Unmarshal(m, b)
}
func (m *MplsTeS2LSrOutgoingFwdInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeS2LSrOutgoingFwdInfo.Marshal(b, m, deterministic)
}
func (dst *MplsTeS2LSrOutgoingFwdInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeS2LSrOutgoingFwdInfo.Merge(dst, src)
}
func (m *MplsTeS2LSrOutgoingFwdInfo) XXX_Size() int {
	return xxx_messageInfo_MplsTeS2LSrOutgoingFwdInfo.Size(m)
}
func (m *MplsTeS2LSrOutgoingFwdInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeS2LSrOutgoingFwdInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeS2LSrOutgoingFwdInfo proto.InternalMessageInfo

func (m *MplsTeS2LSrOutgoingFwdInfo) GetLspOutputInterface() string {
	if m != nil {
		return m.LspOutputInterface
	}
	return ""
}

func (m *MplsTeS2LSrOutgoingFwdInfo) GetLspOutputLabel() uint32 {
	if m != nil {
		return m.LspOutputLabel
	}
	return 0
}

// MPLS TE Path Protected LSP Information
type MplsTePathProtectionLsp struct {
	// LSP Uptime
	LspUptime uint32 `protobuf:"varint,1,opt,name=lsp_uptime,json=lspUptime" json:"lsp_uptime,omitempty"`
	// LSP ID
	PathProtectionLspId uint32 `protobuf:"varint,2,opt,name=path_protection_lsp_id,json=pathProtectionLspId" json:"path_protection_lsp_id,omitempty"`
	// Local label
	LspLocalLabel uint32 `protobuf:"varint,3,opt,name=lsp_local_label,json=lspLocalLabel" json:"lsp_local_label,omitempty"`
	// Segment-routing iutgoing info of LSP
	SrlspOutgoingInfo []*MplsTeS2LSrOutgoingFwdInfo `protobuf:"bytes,4,rep,name=srlsp_outgoing_info,json=srlspOutgoingInfo" json:"srlsp_outgoing_info,omitempty"`
	// Output interface of LSP
	LspOutputInterface string `protobuf:"bytes,5,opt,name=lsp_output_interface,json=lspOutputInterface" json:"lsp_output_interface,omitempty"`
	// Output label of the LSP
	LspOutputLabel uint32 `protobuf:"varint,6,opt,name=lsp_output_label,json=lspOutputLabel" json:"lsp_output_label,omitempty"`
	// Path used by LSP
	LspHop []*RsvpMgmtEroSubobj `protobuf:"bytes,7,rep,name=lsp_hop,json=lspHop" json:"lsp_hop,omitempty"`
	// LSP State
	LspState             string   `protobuf:"bytes,8,opt,name=lsp_state,json=lspState" json:"lsp_state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTePathProtectionLsp) Reset()         { *m = MplsTePathProtectionLsp{} }
func (m *MplsTePathProtectionLsp) String() string { return proto.CompactTextString(m) }
func (*MplsTePathProtectionLsp) ProtoMessage()    {}
func (*MplsTePathProtectionLsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_path_protection_c042026f2ec61952, []int{8}
}
func (m *MplsTePathProtectionLsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTePathProtectionLsp.Unmarshal(m, b)
}
func (m *MplsTePathProtectionLsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTePathProtectionLsp.Marshal(b, m, deterministic)
}
func (dst *MplsTePathProtectionLsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTePathProtectionLsp.Merge(dst, src)
}
func (m *MplsTePathProtectionLsp) XXX_Size() int {
	return xxx_messageInfo_MplsTePathProtectionLsp.Size(m)
}
func (m *MplsTePathProtectionLsp) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTePathProtectionLsp.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTePathProtectionLsp proto.InternalMessageInfo

func (m *MplsTePathProtectionLsp) GetLspUptime() uint32 {
	if m != nil {
		return m.LspUptime
	}
	return 0
}

func (m *MplsTePathProtectionLsp) GetPathProtectionLspId() uint32 {
	if m != nil {
		return m.PathProtectionLspId
	}
	return 0
}

func (m *MplsTePathProtectionLsp) GetLspLocalLabel() uint32 {
	if m != nil {
		return m.LspLocalLabel
	}
	return 0
}

func (m *MplsTePathProtectionLsp) GetSrlspOutgoingInfo() []*MplsTeS2LSrOutgoingFwdInfo {
	if m != nil {
		return m.SrlspOutgoingInfo
	}
	return nil
}

func (m *MplsTePathProtectionLsp) GetLspOutputInterface() string {
	if m != nil {
		return m.LspOutputInterface
	}
	return ""
}

func (m *MplsTePathProtectionLsp) GetLspOutputLabel() uint32 {
	if m != nil {
		return m.LspOutputLabel
	}
	return 0
}

func (m *MplsTePathProtectionLsp) GetLspHop() []*RsvpMgmtEroSubobj {
	if m != nil {
		return m.LspHop
	}
	return nil
}

func (m *MplsTePathProtectionLsp) GetLspState() string {
	if m != nil {
		return m.LspState
	}
	return ""
}

func init() {
	proto.RegisterType((*MplsTePathProtection_KEYS)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.tunnels.tunnel_path_protections.tunnel_path_protection.mpls_te_path_protection_KEYS")
	proto.RegisterType((*MplsTePathProtection)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.tunnels.tunnel_path_protections.tunnel_path_protection.mpls_te_path_protection")
	proto.RegisterType((*RsvpMgmtEroIpv4Subobj)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.tunnels.tunnel_path_protections.tunnel_path_protection.rsvp_mgmt_ero_ipv4_subobj")
	proto.RegisterType((*RsvpMgmtEroUnnumSubobj)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.tunnels.tunnel_path_protections.tunnel_path_protection.rsvp_mgmt_ero_unnum_subobj")
	proto.RegisterType((*RsvpMgmtEroSubobj)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.tunnels.tunnel_path_protections.tunnel_path_protection.rsvp_mgmt_ero_subobj")
	proto.RegisterType((*TePpSwLogEntryBag)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.tunnels.tunnel_path_protections.tunnel_path_protection.te_pp_sw_log_entry_bag")
	proto.RegisterType((*MplsTePpInfo)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.tunnels.tunnel_path_protections.tunnel_path_protection.mpls_te_pp_info")
	proto.RegisterType((*MplsTeS2LSrOutgoingFwdInfo)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.tunnels.tunnel_path_protections.tunnel_path_protection.mpls_te_s2l_sr_outgoing_fwd_info")
	proto.RegisterType((*MplsTePathProtectionLsp)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.tunnels.tunnel_path_protections.tunnel_path_protection.mpls_te_path_protection_lsp")
}

func init() {
	proto.RegisterFile("mpls_te_path_protection.proto", fileDescriptor_mpls_te_path_protection_c042026f2ec61952)
}

var fileDescriptor_mpls_te_path_protection_c042026f2ec61952 = []byte{
	// 1269 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0x4d, 0x6f, 0x1b, 0x45,
	0x18, 0xd6, 0x36, 0x89, 0xe3, 0xbc, 0xae, 0x93, 0x74, 0x52, 0xd2, 0x4d, 0xfa, 0x65, 0x5c, 0xa8,
	0x8c, 0x40, 0x01, 0xa5, 0x2d, 0x1f, 0x82, 0x03, 0x94, 0x06, 0x61, 0x91, 0xd6, 0xd1, 0x26, 0x39,
	0x70, 0x1a, 0xd6, 0xbb, 0x63, 0x67, 0xaa, 0xf5, 0xce, 0x30, 0x33, 0xeb, 0xd8, 0x7c, 0x1d, 0xb8,
	0x71, 0xe2, 0x5a, 0x71, 0x40, 0x9c, 0x7b, 0x45, 0x82, 0xff, 0xc2, 0x9f, 0xe0, 0x2f, 0xa0, 0x79,
	0x77, 0xd6, 0x5f, 0x8d, 0x2b, 0xf5, 0x90, 0x88, 0x53, 0x32, 0xcf, 0xfb, 0xcc, 0xbb, 0xcf, 0xbc,
	0x5f, 0x33, 0x86, 0x9b, 0x3d, 0x99, 0x68, 0x6a, 0x18, 0x95, 0xa1, 0x39, 0xa1, 0x52, 0x09, 0xc3,
	0x22, 0xc3, 0x45, 0xba, 0x63, 0xff, 0x15, 0xe4, 0x9b, 0x88, 0xeb, 0x48, 0x50, 0x2e, 0x34, 0x1d,
	0x28, 0x5a, 0x70, 0x85, 0x64, 0x6a, 0xa7, 0x58, 0x68, 0x13, 0xa6, 0x71, 0x7b, 0xb8, 0x63, 0xb2,
	0x34, 0x65, 0x89, 0x76, 0x7f, 0x67, 0xfd, 0xcd, 0xc3, 0xeb, 0x1a, 0x6e, 0xcc, 0x91, 0x40, 0xbf,
	0xda, 0xfb, 0xfa, 0x90, 0xbc, 0x06, 0xa5, 0x88, 0x9a, 0xa1, 0x64, 0xbe, 0x57, 0xf3, 0x1a, 0x2b,
	0xc1, 0x52, 0x74, 0x34, 0x94, 0x8c, 0x5c, 0x87, 0x15, 0xe7, 0x90, 0xc7, 0xfe, 0xa5, 0x9a, 0xd7,
	0xa8, 0x06, 0xe5, 0x1c, 0x68, 0xc6, 0xe4, 0x36, 0x54, 0x9c, 0x31, 0x0d, 0x7b, 0xcc, 0x5f, 0xc0,
	0x8d, 0x90, 0x43, 0x4f, 0xc2, 0x1e, 0xab, 0xff, 0xb1, 0x04, 0xd7, 0xe6, 0x7c, 0x95, 0xd4, 0xe0,
	0x32, 0xd7, 0xd4, 0xed, 0xcf, 0xa4, 0xbf, 0x5b, 0xf3, 0x1a, 0xe5, 0x00, 0xb8, 0x3e, 0x42, 0xe8,
	0x58, 0x92, 0x37, 0x61, 0x55, 0x8b, 0x4c, 0x45, 0x8c, 0x86, 0x71, 0xac, 0x98, 0xd6, 0xfe, 0x3d,
	0xfc, 0x42, 0x35, 0x47, 0x3f, 0xcb, 0x41, 0xf2, 0x2e, 0x6c, 0xc4, 0x4c, 0x1b, 0x9e, 0x86, 0x78,
	0x9a, 0x82, 0x7b, 0x1f, 0xb9, 0x64, 0xc2, 0x54, 0x6c, 0x78, 0x07, 0x08, 0x1b, 0x18, 0x96, 0xc6,
	0x2c, 0xa6, 0xe3, 0xc3, 0x3d, 0x40, 0xfe, 0x7a, 0x61, 0x39, 0x2a, 0x0e, 0xf9, 0x9b, 0x07, 0x6b,
	0x33, 0xda, 0xfd, 0xf7, 0x6b, 0x5e, 0xa3, 0xb2, 0xfb, 0xed, 0xce, 0x79, 0x67, 0x6d, 0xe4, 0x46,
	0x4a, 0xca, 0xd3, 0x8e, 0x08, 0x56, 0x2d, 0xe1, 0x60, 0x1c, 0xc4, 0xdf, 0x3d, 0xa8, 0x44, 0x99,
	0x52, 0x2c, 0x35, 0x34, 0xd1, 0xd2, 0xff, 0x00, 0x85, 0xfd, 0x78, 0x81, 0xc2, 0x66, 0x6a, 0x29,
	0xd1, 0x32, 0x00, 0xa7, 0x68, 0x5f, 0x4b, 0x14, 0xe8, 0x3e, 0x85, 0x02, 0x3f, 0xfc, 0x5f, 0x08,
	0x74, 0xbe, 0xf7, 0xb5, 0xac, 0xff, 0xe2, 0xc1, 0x96, 0xd2, 0x7d, 0x49, 0x7b, 0xdd, 0x9e, 0xa1,
	0x4c, 0x09, 0xca, 0x65, 0xff, 0x3e, 0xd5, 0x59, 0x5b, 0xb4, 0x9f, 0x92, 0xbb, 0xb0, 0xc6, 0x35,
	0xd5, 0x46, 0xf1, 0xc8, 0x50, 0x25, 0x32, 0x93, 0xb7, 0x47, 0x39, 0xa8, 0x72, 0x7d, 0x88, 0x68,
	0x60, 0x41, 0xdb, 0x09, 0x76, 0x6b, 0x51, 0x7b, 0x97, 0xf2, 0x4e, 0x60, 0x4a, 0x14, 0x35, 0x77,
	0x07, 0xaa, 0x52, 0xb1, 0x0e, 0x1f, 0xd0, 0x84, 0xa5, 0x5d, 0x73, 0x82, 0xcd, 0x52, 0x0d, 0x2e,
	0xe7, 0xe0, 0x3e, 0x62, 0xf5, 0xe7, 0x1e, 0x6c, 0x4f, 0x6b, 0xc9, 0xd2, 0x34, 0xeb, 0xbd, 0xaa,
	0x98, 0x06, 0xac, 0xe3, 0x39, 0x52, 0xc3, 0x54, 0x27, 0x8c, 0xd8, 0xb8, 0x75, 0x57, 0x99, 0x12,
	0xcd, 0x02, 0x6e, 0xc6, 0xa4, 0x0e, 0x55, 0xcb, 0x44, 0x5f, 0xca, 0xd2, 0xf2, 0x16, 0xb6, 0x67,
	0x41, 0x57, 0xaa, 0x19, 0x93, 0x4d, 0x28, 0x69, 0x13, 0x9a, 0x4c, 0xfb, 0x8b, 0x68, 0x74, 0xab,
	0xfa, 0xb3, 0x05, 0xb8, 0x3a, 0x2d, 0xd6, 0xc9, 0xdc, 0x82, 0xb2, 0x5d, 0x4d, 0xcc, 0x92, 0x65,
	0xa6, 0x04, 0x4e, 0x93, 0xe7, 0x1e, 0x6c, 0x60, 0x78, 0x1d, 0x9d, 0x8a, 0xf6, 0x53, 0x16, 0x19,
	0x54, 0x57, 0xd9, 0xfd, 0xfe, 0xfc, 0xab, 0x62, 0x6e, 0xa6, 0x83, 0x75, 0xbb, 0xd8, 0x53, 0xe2,
	0x30, 0x6b, 0xb7, 0x50, 0x14, 0xf9, 0xdb, 0x83, 0x2d, 0x8c, 0x7f, 0x9b, 0x29, 0x16, 0xcf, 0x4a,
	0x5e, 0x40, 0xc9, 0x3f, 0x5c, 0xb4, 0xe4, 0xc9, 0x82, 0x08, 0x36, 0xc7, 0xf2, 0x26, 0x95, 0xd7,
	0xff, 0x5d, 0x80, 0xcd, 0x7c, 0x68, 0xe8, 0x53, 0x9a, 0x88, 0x2e, 0x65, 0xa9, 0x51, 0x43, 0xda,
	0x0e, 0xbb, 0x24, 0x80, 0xbb, 0xb3, 0x1d, 0xa1, 0x4f, 0xb9, 0x89, 0x4e, 0x44, 0x9f, 0x29, 0xca,
	0xfa, 0x76, 0x90, 0xf0, 0x34, 0x66, 0x03, 0x4c, 0x5d, 0x35, 0xa8, 0x4f, 0x0f, 0x9c, 0xc3, 0x11,
	0x77, 0xcf, 0x52, 0x9b, 0x96, 0x49, 0x3e, 0x82, 0xad, 0x59, 0x9f, 0xb3, 0x77, 0xc6, 0xe6, 0xb4,
	0x9b, 0xd1, 0x70, 0xbd, 0x05, 0x95, 0x8e, 0x12, 0x3d, 0xdb, 0x95, 0x45, 0xf9, 0x55, 0x83, 0x15,
	0x0b, 0xed, 0x6b, 0xd9, 0x8c, 0xc9, 0x36, 0xac, 0x18, 0x51, 0x58, 0x17, 0xd1, 0xba, 0x6c, 0x44,
	0x6e, 0x7b, 0x00, 0xd7, 0xe2, 0xd0, 0x06, 0xbb, 0x43, 0x99, 0x52, 0x42, 0xd1, 0x98, 0x15, 0xf3,
	0x79, 0x09, 0x99, 0x57, 0xad, 0xb9, 0xd5, 0xd9, 0xb3, 0xc6, 0x47, 0x85, 0x8d, 0x7c, 0x01, 0xb5,
	0x39, 0xdb, 0x68, 0x8f, 0x27, 0x09, 0xd7, 0x2c, 0xf2, 0x4b, 0xb8, 0xff, 0xc6, 0x59, 0xfb, 0x1f,
	0x3b, 0x0e, 0xf9, 0x14, 0x6e, 0x4c, 0x44, 0x2e, 0xce, 0x54, 0x38, 0xed, 0x63, 0x19, 0x7d, 0x6c,
	0x8f, 0x39, 0x8f, 0x1c, 0x65, 0xe4, 0xa1, 0x09, 0xaf, 0xbf, 0x24, 0x17, 0x8a, 0x85, 0x5a, 0xa4,
	0x7e, 0x19, 0x3b, 0xe8, 0xd6, 0xbc, 0x34, 0x04, 0xc8, 0xaa, 0xff, 0x55, 0x82, 0xb5, 0x99, 0xbb,
	0x82, 0xdc, 0x83, 0x4d, 0xc3, 0x7b, 0x78, 0xd0, 0x09, 0xb7, 0x56, 0x5a, 0x9e, 0xda, 0x0d, 0x6b,
	0x6d, 0x75, 0xc6, 0xbe, 0x0e, 0x59, 0x44, 0xde, 0x82, 0xf5, 0x09, 0xb2, 0x11, 0x26, 0x4c, 0x5c,
	0x0a, 0xd7, 0xc6, 0xf8, 0x91, 0x85, 0x67, 0xa8, 0x8a, 0x85, 0xf1, 0xd0, 0x25, 0x70, 0x82, 0x1a,
	0x58, 0x98, 0x7c, 0x02, 0xdb, 0xc5, 0x25, 0xa0, 0x98, 0x90, 0x86, 0xf7, 0xf8, 0x77, 0x2c, 0xa6,
	0x79, 0xf1, 0xba, 0xbc, 0xfa, 0x8e, 0x11, 0x8c, 0x09, 0x4f, 0xd0, 0x4e, 0xde, 0x86, 0x2b, 0x2f,
	0xc6, 0x25, 0x4f, 0xf1, 0xba, 0x9e, 0x89, 0x84, 0x7d, 0x34, 0xc4, 0xbc, 0xcf, 0x94, 0xe6, 0x66,
	0x98, 0xcf, 0xa0, 0x52, 0xfe, 0x68, 0x18, 0xa1, 0x38, 0x89, 0x3e, 0x86, 0x6d, 0xae, 0xa7, 0x7a,
	0x8d, 0x46, 0x22, 0xed, 0xf0, 0x6e, 0xa6, 0x58, 0x8c, 0xb9, 0x2b, 0x07, 0xd7, 0xb8, 0x3e, 0x18,
	0x87, 0xfd, 0xf3, 0x91, 0x99, 0x3c, 0x82, 0xdb, 0xb3, 0x89, 0x73, 0xff, 0xb2, 0x98, 0xb6, 0x87,
	0xb6, 0x56, 0xcb, 0x28, 0xef, 0xfa, 0x74, 0xda, 0x0e, 0x0a, 0xd2, 0xc3, 0x61, 0x33, 0x26, 0xc7,
	0xd0, 0xe8, 0x87, 0x09, 0x8f, 0x5f, 0xb8, 0xa2, 0x70, 0x6d, 0x83, 0x20, 0x52, 0xca, 0x06, 0x5c,
	0x1b, 0xed, 0xaf, 0xa0, 0xa0, 0x3b, 0xc8, 0x3f, 0x98, 0xf6, 0x19, 0x9a, 0x93, 0x16, 0x72, 0xf7,
	0x90, 0x4a, 0x1e, 0xc3, 0x1b, 0xb3, 0x27, 0xcb, 0x83, 0x44, 0x31, 0x7c, 0x59, 0x1a, 0x33, 0x75,
	0x1a, 0x0e, 0x7d, 0x40, 0x97, 0xb7, 0xa7, 0xce, 0x98, 0xd7, 0x42, 0xab, 0xcf, 0xd4, 0xb1, 0xa3,
	0x91, 0x67, 0x1e, 0xc0, 0x38, 0xc8, 0x7e, 0x05, 0xc7, 0xde, 0xe0, 0xfc, 0xc7, 0xde, 0xd9, 0xf3,
	0x2b, 0x98, 0xd0, 0x42, 0x1e, 0xc2, 0xcd, 0x51, 0x35, 0xe5, 0xcd, 0x87, 0xf5, 0xae, 0x58, 0x2f,
	0xe4, 0x29, 0x4f, 0xbb, 0xfe, 0xe5, 0x3c, 0x09, 0xd3, 0xa4, 0x23, 0xde, 0x63, 0x41, 0x41, 0xa9,
	0xff, 0x04, 0xb5, 0x91, 0xe0, 0xdd, 0x84, 0x6a, 0x45, 0x45, 0x66, 0xba, 0x82, 0xa7, 0x5d, 0xda,
	0x39, 0x8d, 0xf3, 0x46, 0x7a, 0x0f, 0xae, 0xda, 0x09, 0x24, 0x32, 0x23, 0x33, 0x33, 0xbe, 0x56,
	0xdd, 0xe5, 0x46, 0x12, 0x2d, 0x5b, 0x68, 0x1a, 0xdd, 0xac, 0xf6, 0x06, 0x9e, 0xd8, 0x91, 0x84,
	0x6d, 0x56, 0x74, 0xd1, 0xea, 0x88, 0xbd, 0x6f, 0xd1, 0xfa, 0x3f, 0x8b, 0x70, 0xfd, 0x25, 0x4f,
	0x15, 0x72, 0x13, 0xc0, 0x7a, 0xca, 0xec, 0x01, 0x98, 0x6b, 0xdc, 0x95, 0x44, 0xcb, 0x63, 0x04,
	0x6c, 0x8f, 0x9f, 0xb1, 0x6b, 0x3c, 0x77, 0x37, 0xa6, 0x0b, 0x30, 0x1f, 0x9c, 0x77, 0x61, 0xcd,
	0x92, 0x12, 0x11, 0x85, 0x89, 0x13, 0x97, 0xf7, 0x6d, 0x35, 0xd1, 0x72, 0xdf, 0xa2, 0xa8, 0x8d,
	0xfc, 0xe9, 0xc1, 0x86, 0x56, 0xee, 0x20, 0x79, 0x4c, 0x6c, 0x3c, 0xfc, 0xc5, 0xda, 0x42, 0xa3,
	0xb2, 0xfb, 0xb3, 0x77, 0x71, 0x8f, 0xb8, 0x79, 0xa9, 0x09, 0xae, 0xa0, 0xbe, 0x96, 0xc3, 0x9b,
	0x2f, 0xcb, 0xd6, 0xd2, 0x2b, 0x65, 0xab, 0x74, 0x56, 0xb6, 0xc8, 0xaf, 0x1e, 0x2c, 0x5b, 0xea,
	0x89, 0x90, 0xfe, 0x32, 0x46, 0xa1, 0x7f, 0xd1, 0x0f, 0x00, 0x77, 0xf5, 0x97, 0x12, 0x2d, 0xbf,
	0x14, 0xd2, 0xfe, 0x3e, 0xb3, 0x82, 0xec, 0x9b, 0x8c, 0xb9, 0xbb, 0xa2, 0x9c, 0x68, 0x79, 0x68,
	0xd7, 0xed, 0x12, 0xfe, 0xb8, 0xbc, 0xf7, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1b, 0x42, 0xe9,
	0xcc, 0x7d, 0x0e, 0x00, 0x00,
}
