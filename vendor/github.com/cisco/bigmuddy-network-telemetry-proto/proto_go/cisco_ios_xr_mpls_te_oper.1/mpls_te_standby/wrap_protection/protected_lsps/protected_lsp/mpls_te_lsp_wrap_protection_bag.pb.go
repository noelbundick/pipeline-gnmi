// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mpls_te_lsp_wrap_protection_bag.proto

package cisco_ios_xr_mpls_te_oper_mpls_te_standby_wrap_protection_protected_lsps_protected_lsp

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// MPLS TE LSP Wrap Protected LSP Information
type MplsTeLspWrapProtectionBag_KEYS struct {
	SourceAddress        string   `protobuf:"bytes,1,opt,name=source_address,json=sourceAddress" json:"source_address,omitempty"`
	DestinationAddress   string   `protobuf:"bytes,2,opt,name=destination_address,json=destinationAddress" json:"destination_address,omitempty"`
	TunnelId             uint32   `protobuf:"varint,3,opt,name=tunnel_id,json=tunnelId" json:"tunnel_id,omitempty"`
	ExtendedTunnelId     string   `protobuf:"bytes,4,opt,name=extended_tunnel_id,json=extendedTunnelId" json:"extended_tunnel_id,omitempty"`
	LspId                uint32   `protobuf:"varint,5,opt,name=lsp_id,json=lspId" json:"lsp_id,omitempty"`
	SubGroupId           uint32   `protobuf:"varint,6,opt,name=sub_group_id,json=subGroupId" json:"sub_group_id,omitempty"`
	SubGroupOriginator   string   `protobuf:"bytes,7,opt,name=sub_group_originator,json=subGroupOriginator" json:"sub_group_originator,omitempty"`
	P2MpId               uint32   `protobuf:"varint,8,opt,name=p2_mp_id,json=p2MpId" json:"p2_mp_id,omitempty"`
	SessionType          string   `protobuf:"bytes,9,opt,name=session_type,json=sessionType" json:"session_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeLspWrapProtectionBag_KEYS) Reset()         { *m = MplsTeLspWrapProtectionBag_KEYS{} }
func (m *MplsTeLspWrapProtectionBag_KEYS) String() string { return proto.CompactTextString(m) }
func (*MplsTeLspWrapProtectionBag_KEYS) ProtoMessage()    {}
func (*MplsTeLspWrapProtectionBag_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_lsp_wrap_protection_bag_6f3d15c1bfaa0443, []int{0}
}
func (m *MplsTeLspWrapProtectionBag_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeLspWrapProtectionBag_KEYS.Unmarshal(m, b)
}
func (m *MplsTeLspWrapProtectionBag_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeLspWrapProtectionBag_KEYS.Marshal(b, m, deterministic)
}
func (dst *MplsTeLspWrapProtectionBag_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeLspWrapProtectionBag_KEYS.Merge(dst, src)
}
func (m *MplsTeLspWrapProtectionBag_KEYS) XXX_Size() int {
	return xxx_messageInfo_MplsTeLspWrapProtectionBag_KEYS.Size(m)
}
func (m *MplsTeLspWrapProtectionBag_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeLspWrapProtectionBag_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeLspWrapProtectionBag_KEYS proto.InternalMessageInfo

func (m *MplsTeLspWrapProtectionBag_KEYS) GetSourceAddress() string {
	if m != nil {
		return m.SourceAddress
	}
	return ""
}

func (m *MplsTeLspWrapProtectionBag_KEYS) GetDestinationAddress() string {
	if m != nil {
		return m.DestinationAddress
	}
	return ""
}

func (m *MplsTeLspWrapProtectionBag_KEYS) GetTunnelId() uint32 {
	if m != nil {
		return m.TunnelId
	}
	return 0
}

func (m *MplsTeLspWrapProtectionBag_KEYS) GetExtendedTunnelId() string {
	if m != nil {
		return m.ExtendedTunnelId
	}
	return ""
}

func (m *MplsTeLspWrapProtectionBag_KEYS) GetLspId() uint32 {
	if m != nil {
		return m.LspId
	}
	return 0
}

func (m *MplsTeLspWrapProtectionBag_KEYS) GetSubGroupId() uint32 {
	if m != nil {
		return m.SubGroupId
	}
	return 0
}

func (m *MplsTeLspWrapProtectionBag_KEYS) GetSubGroupOriginator() string {
	if m != nil {
		return m.SubGroupOriginator
	}
	return ""
}

func (m *MplsTeLspWrapProtectionBag_KEYS) GetP2MpId() uint32 {
	if m != nil {
		return m.P2MpId
	}
	return 0
}

func (m *MplsTeLspWrapProtectionBag_KEYS) GetSessionType() string {
	if m != nil {
		return m.SessionType
	}
	return ""
}

type MplsTeLspWrapProtectionBag struct {
	// Source
	SourceAddress string `protobuf:"bytes,50,opt,name=source_address,json=sourceAddress" json:"source_address,omitempty"`
	// Destination
	DestinationAddress string `protobuf:"bytes,51,opt,name=destination_address,json=destinationAddress" json:"destination_address,omitempty"`
	// Tunnel ID
	TunnelId uint32 `protobuf:"varint,52,opt,name=tunnel_id,json=tunnelId" json:"tunnel_id,omitempty"`
	// Extended Tunnel ID
	ExtendedTunnelId string `protobuf:"bytes,53,opt,name=extended_tunnel_id,json=extendedTunnelId" json:"extended_tunnel_id,omitempty"`
	// Tunnel Name
	TunnelName string `protobuf:"bytes,54,opt,name=tunnel_name,json=tunnelName" json:"tunnel_name,omitempty"`
	// Tunnel instance
	TunnelInstance uint32 `protobuf:"varint,55,opt,name=tunnel_instance,json=tunnelInstance" json:"tunnel_instance,omitempty"`
	// LSP Wrap protection enabled
	LspWrapProtectionEnable bool `protobuf:"varint,56,opt,name=lsp_wrap_protection_enable,json=lspWrapProtectionEnable" json:"lsp_wrap_protection_enable,omitempty"`
	// LSP Wrap Merge Point Label
	LspWrapProtectionLabel uint32 `protobuf:"varint,57,opt,name=lsp_wrap_protection_label,json=lspWrapProtectionLabel" json:"lsp_wrap_protection_label,omitempty"`
	// Reverse Egress Interface
	ReverseEgressInterface string `protobuf:"bytes,58,opt,name=reverse_egress_interface,json=reverseEgressInterface" json:"reverse_egress_interface,omitempty"`
	// Reverse LSP label
	ReverseLspLabel uint32 `protobuf:"varint,59,opt,name=reverse_lsp_label,json=reverseLspLabel" json:"reverse_lsp_label,omitempty"`
	// LSP wrap protection state
	LspWrapProtectionState string `protobuf:"bytes,60,opt,name=lsp_wrap_protection_state,json=lspWrapProtectionState" json:"lsp_wrap_protection_state,omitempty"`
	// S2L Sub-Group Originator ID
	SubGroupOriginalId string `protobuf:"bytes,61,opt,name=sub_group_original_id,json=subGroupOriginalId" json:"sub_group_original_id,omitempty"`
	// S2L Sub-Group ID
	SubGroupId uint32 `protobuf:"varint,62,opt,name=sub_group_id,json=subGroupId" json:"sub_group_id,omitempty"`
	// S2L P2MP ID
	P2MpId               uint32   `protobuf:"varint,63,opt,name=p2_mp_id,json=p2MpId" json:"p2_mp_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeLspWrapProtectionBag) Reset()         { *m = MplsTeLspWrapProtectionBag{} }
func (m *MplsTeLspWrapProtectionBag) String() string { return proto.CompactTextString(m) }
func (*MplsTeLspWrapProtectionBag) ProtoMessage()    {}
func (*MplsTeLspWrapProtectionBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_lsp_wrap_protection_bag_6f3d15c1bfaa0443, []int{1}
}
func (m *MplsTeLspWrapProtectionBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeLspWrapProtectionBag.Unmarshal(m, b)
}
func (m *MplsTeLspWrapProtectionBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeLspWrapProtectionBag.Marshal(b, m, deterministic)
}
func (dst *MplsTeLspWrapProtectionBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeLspWrapProtectionBag.Merge(dst, src)
}
func (m *MplsTeLspWrapProtectionBag) XXX_Size() int {
	return xxx_messageInfo_MplsTeLspWrapProtectionBag.Size(m)
}
func (m *MplsTeLspWrapProtectionBag) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeLspWrapProtectionBag.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeLspWrapProtectionBag proto.InternalMessageInfo

func (m *MplsTeLspWrapProtectionBag) GetSourceAddress() string {
	if m != nil {
		return m.SourceAddress
	}
	return ""
}

func (m *MplsTeLspWrapProtectionBag) GetDestinationAddress() string {
	if m != nil {
		return m.DestinationAddress
	}
	return ""
}

func (m *MplsTeLspWrapProtectionBag) GetTunnelId() uint32 {
	if m != nil {
		return m.TunnelId
	}
	return 0
}

func (m *MplsTeLspWrapProtectionBag) GetExtendedTunnelId() string {
	if m != nil {
		return m.ExtendedTunnelId
	}
	return ""
}

func (m *MplsTeLspWrapProtectionBag) GetTunnelName() string {
	if m != nil {
		return m.TunnelName
	}
	return ""
}

func (m *MplsTeLspWrapProtectionBag) GetTunnelInstance() uint32 {
	if m != nil {
		return m.TunnelInstance
	}
	return 0
}

func (m *MplsTeLspWrapProtectionBag) GetLspWrapProtectionEnable() bool {
	if m != nil {
		return m.LspWrapProtectionEnable
	}
	return false
}

func (m *MplsTeLspWrapProtectionBag) GetLspWrapProtectionLabel() uint32 {
	if m != nil {
		return m.LspWrapProtectionLabel
	}
	return 0
}

func (m *MplsTeLspWrapProtectionBag) GetReverseEgressInterface() string {
	if m != nil {
		return m.ReverseEgressInterface
	}
	return ""
}

func (m *MplsTeLspWrapProtectionBag) GetReverseLspLabel() uint32 {
	if m != nil {
		return m.ReverseLspLabel
	}
	return 0
}

func (m *MplsTeLspWrapProtectionBag) GetLspWrapProtectionState() string {
	if m != nil {
		return m.LspWrapProtectionState
	}
	return ""
}

func (m *MplsTeLspWrapProtectionBag) GetSubGroupOriginalId() string {
	if m != nil {
		return m.SubGroupOriginalId
	}
	return ""
}

func (m *MplsTeLspWrapProtectionBag) GetSubGroupId() uint32 {
	if m != nil {
		return m.SubGroupId
	}
	return 0
}

func (m *MplsTeLspWrapProtectionBag) GetP2MpId() uint32 {
	if m != nil {
		return m.P2MpId
	}
	return 0
}

func init() {
	proto.RegisterType((*MplsTeLspWrapProtectionBag_KEYS)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.wrap_protection.protected_lsps.protected_lsp.mpls_te_lsp_wrap_protection_bag_KEYS")
	proto.RegisterType((*MplsTeLspWrapProtectionBag)(nil), "cisco_ios_xr_mpls_te_oper.mpls_te_standby.wrap_protection.protected_lsps.protected_lsp.mpls_te_lsp_wrap_protection_bag")
}

func init() {
	proto.RegisterFile("mpls_te_lsp_wrap_protection_bag.proto", fileDescriptor_mpls_te_lsp_wrap_protection_bag_6f3d15c1bfaa0443)
}

var fileDescriptor_mpls_te_lsp_wrap_protection_bag_6f3d15c1bfaa0443 = []byte{
	// 514 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xdb, 0x6e, 0x13, 0x31,
	0x10, 0x55, 0x0a, 0x09, 0xc9, 0xf4, 0x06, 0x86, 0x16, 0x03, 0x0f, 0x0d, 0x15, 0x15, 0x11, 0x42,
	0x01, 0x52, 0x2e, 0x2d, 0xe5, 0x22, 0x1e, 0x22, 0x14, 0x51, 0x2e, 0x4a, 0x2b, 0x10, 0x4f, 0x96,
	0x77, 0x3d, 0x44, 0x2b, 0x6d, 0x76, 0x2d, 0x8f, 0x03, 0xcd, 0x8f, 0xf0, 0x9f, 0xfc, 0x01, 0xb2,
	0x77, 0xdd, 0x06, 0xb2, 0x55, 0xdb, 0xb7, 0x78, 0xce, 0x99, 0x73, 0x66, 0x4e, 0x46, 0x0b, 0x5b,
	0x63, 0x9d, 0x92, 0xb0, 0x28, 0x52, 0xd2, 0xe2, 0x97, 0x91, 0x5a, 0x68, 0x93, 0x5b, 0x8c, 0x6d,
	0x92, 0x67, 0x22, 0x92, 0xa3, 0xae, 0x7b, 0xe6, 0xec, 0x6b, 0x9c, 0x50, 0x9c, 0x8b, 0x24, 0x27,
	0x71, 0x64, 0x44, 0xe8, 0xc9, 0x35, 0x9a, 0x6e, 0x78, 0x90, 0x95, 0x99, 0x8a, 0xa6, 0xdd, 0xff,
	0x44, 0xba, 0xe5, 0x4f, 0x54, 0xce, 0x82, 0xfe, 0x7d, 0x6e, 0xfe, 0x59, 0x80, 0x7b, 0x67, 0x4c,
	0x20, 0x3e, 0xf4, 0xbf, 0x1f, 0xb0, 0x2d, 0x58, 0xa1, 0x7c, 0x62, 0x62, 0x14, 0x52, 0x29, 0x83,
	0x44, 0xbc, 0xd6, 0xae, 0x75, 0x5a, 0xc3, 0xe5, 0xa2, 0xfa, 0xae, 0x28, 0xb2, 0x47, 0x70, 0x5d,
	0x21, 0xd9, 0x24, 0x93, 0xbe, 0x3d, 0x70, 0x17, 0x3c, 0x97, 0xcd, 0x40, 0xa1, 0xe1, 0x0e, 0xb4,
	0xec, 0x24, 0xcb, 0x30, 0x15, 0x89, 0xe2, 0x97, 0xda, 0xb5, 0xce, 0xf2, 0xb0, 0x59, 0x14, 0x06,
	0x8a, 0x3d, 0x04, 0x86, 0x47, 0x16, 0x33, 0x85, 0x4a, 0x9c, 0xb0, 0x2e, 0x7b, 0xb1, 0xab, 0x01,
	0x39, 0x0c, 0xec, 0x35, 0x68, 0xb8, 0x15, 0x12, 0xc5, 0xeb, 0x5e, 0xa7, 0x9e, 0x92, 0x1e, 0x28,
	0xd6, 0x86, 0x25, 0x9a, 0x44, 0x62, 0x64, 0xf2, 0x89, 0x07, 0x1b, 0x1e, 0x04, 0x9a, 0x44, 0xef,
	0x5d, 0x69, 0xa0, 0xd8, 0x63, 0xb8, 0x71, 0xc2, 0xc8, 0x4d, 0x32, 0x72, 0x33, 0xe6, 0x86, 0x5f,
	0x29, 0xa6, 0x0e, 0xcc, 0xcf, 0xc7, 0x08, 0xe3, 0xd0, 0xd4, 0x3d, 0x31, 0xf6, 0x7a, 0x4d, 0xaf,
	0xd7, 0xd0, 0xbd, 0x8f, 0x4e, 0xeb, 0x2e, 0x2c, 0x11, 0x12, 0xb9, 0xe5, 0xed, 0x54, 0x23, 0x6f,
	0x79, 0x8d, 0xc5, 0xb2, 0x76, 0x38, 0xd5, 0xb8, 0xf9, 0xbb, 0x0e, 0x1b, 0x67, 0x64, 0x5e, 0x11,
	0x77, 0xef, 0x02, 0x71, 0x6f, 0x9f, 0x2f, 0xee, 0xa7, 0xe7, 0x8a, 0xfb, 0xd9, 0x29, 0x71, 0x6f,
	0xc0, 0x62, 0x49, 0xca, 0xe4, 0x18, 0xf9, 0x73, 0x4f, 0x83, 0xa2, 0xf4, 0x49, 0x8e, 0x91, 0xdd,
	0x87, 0xd5, 0xa0, 0x92, 0xb9, 0xe3, 0x8c, 0x91, 0xbf, 0xf0, 0x8e, 0x2b, 0xa5, 0x63, 0x59, 0x65,
	0x7b, 0x70, 0xbb, 0x2a, 0x07, 0xcc, 0x64, 0x94, 0x22, 0xdf, 0x69, 0xd7, 0x3a, 0xcd, 0xe1, 0xcd,
	0x94, 0xf4, 0x37, 0x23, 0xf5, 0x97, 0x63, 0xbc, 0xef, 0x61, 0xb6, 0x0b, 0xb7, 0xaa, 0x9a, 0x53,
	0x19, 0x61, 0xca, 0x77, 0xbd, 0xdf, 0xfa, 0x5c, 0xef, 0xbe, 0x43, 0xd9, 0x0e, 0x70, 0x83, 0x3f,
	0xd1, 0x10, 0x0a, 0x1c, 0xb9, 0x78, 0x44, 0x92, 0x59, 0x34, 0x3f, 0x64, 0x8c, 0xfc, 0xa5, 0x5f,
	0x67, 0xbd, 0xc4, 0xfb, 0x1e, 0x1e, 0x04, 0x94, 0x3d, 0x80, 0x6b, 0xa1, 0xd3, 0x99, 0x17, 0x66,
	0x7b, 0xde, 0x6c, 0xb5, 0x04, 0xf6, 0x49, 0x17, 0x2e, 0xa7, 0x0c, 0x48, 0x56, 0x5a, 0xe4, 0xaf,
	0x0a, 0x9b, 0xb9, 0x01, 0x0f, 0x1c, 0xca, 0x9e, 0xc0, 0xda, 0xdc, 0x61, 0xfa, 0xff, 0xe4, 0x75,
	0xe5, 0x65, 0xa6, 0x15, 0xd7, 0xfe, 0x66, 0xee, 0xda, 0x67, 0x6f, 0xf7, 0xed, 0xec, 0xed, 0x46,
	0x0d, 0xff, 0xad, 0xd9, 0xfe, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x47, 0x71, 0x4e, 0x29, 0x94, 0x04,
	0x00, 0x00,
}
