// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mpls_te_tp_detail_tunnel_info.proto

package cisco_ios_xr_mpls_te_oper_mpls_tp_tp_tunnels_tp_detail_tunnels_tp_detail_tunnel

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Transport profile detail tunnel information
type MplsTeTpDetailTunnelInfo_KEYS struct {
	TpTunnelName         string   `protobuf:"bytes,1,opt,name=tp_tunnel_name,json=tpTunnelName" json:"tp_tunnel_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeTpDetailTunnelInfo_KEYS) Reset()         { *m = MplsTeTpDetailTunnelInfo_KEYS{} }
func (m *MplsTeTpDetailTunnelInfo_KEYS) String() string { return proto.CompactTextString(m) }
func (*MplsTeTpDetailTunnelInfo_KEYS) ProtoMessage()    {}
func (*MplsTeTpDetailTunnelInfo_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_tp_detail_tunnel_info_83b9a4c77ff0b832, []int{0}
}
func (m *MplsTeTpDetailTunnelInfo_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeTpDetailTunnelInfo_KEYS.Unmarshal(m, b)
}
func (m *MplsTeTpDetailTunnelInfo_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeTpDetailTunnelInfo_KEYS.Marshal(b, m, deterministic)
}
func (dst *MplsTeTpDetailTunnelInfo_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeTpDetailTunnelInfo_KEYS.Merge(dst, src)
}
func (m *MplsTeTpDetailTunnelInfo_KEYS) XXX_Size() int {
	return xxx_messageInfo_MplsTeTpDetailTunnelInfo_KEYS.Size(m)
}
func (m *MplsTeTpDetailTunnelInfo_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeTpDetailTunnelInfo_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeTpDetailTunnelInfo_KEYS proto.InternalMessageInfo

func (m *MplsTeTpDetailTunnelInfo_KEYS) GetTpTunnelName() string {
	if m != nil {
		return m.TpTunnelName
	}
	return ""
}

type MplsTeTpDetailTunnelInfo struct {
	// Brief tunnel information
	Tunnel *MplsTeTpTunnelInfo `protobuf:"bytes,50,opt,name=tunnel" json:"tunnel,omitempty"`
	// Working LSP information
	WorkingLsp *MplsTeTpDetailTunnelLspInfo `protobuf:"bytes,51,opt,name=working_lsp,json=workingLsp" json:"working_lsp,omitempty"`
	// Protect LSP information
	ProtectLsp *MplsTeTpDetailTunnelLspInfo `protobuf:"bytes,52,opt,name=protect_lsp,json=protectLsp" json:"protect_lsp,omitempty"`
	// Requested tunnel bandwidth in Kbps
	ReqBandwidth uint32 `protobuf:"varint,53,opt,name=req_bandwidth,json=reqBandwidth" json:"req_bandwidth,omitempty"`
	// OAM Interval
	OamInterval uint32 `protobuf:"varint,54,opt,name=oam_interval,json=oamInterval" json:"oam_interval,omitempty"`
	// BFD interval for active LSP
	BfdIntervalActive uint32 `protobuf:"varint,55,opt,name=bfd_interval_active,json=bfdIntervalActive" json:"bfd_interval_active,omitempty"`
	// Is BFD interval for active LSP in micro sec
	BfdIntervalActiveInMicroSec bool `protobuf:"varint,56,opt,name=bfd_interval_active_in_micro_sec,json=bfdIntervalActiveInMicroSec" json:"bfd_interval_active_in_micro_sec,omitempty"`
	// BFD multiplier for active LSP
	BfdMultiplierActive uint32 `protobuf:"varint,57,opt,name=bfd_multiplier_active,json=bfdMultiplierActive" json:"bfd_multiplier_active,omitempty"`
	// BFD interval for standby LSP
	BfdIntervalStandby uint32 `protobuf:"varint,58,opt,name=bfd_interval_standby,json=bfdIntervalStandby" json:"bfd_interval_standby,omitempty"`
	// Is BFD interval for standby LSP in micro sec
	BfdIntervalStandbyInMicroSec bool `protobuf:"varint,59,opt,name=bfd_interval_standby_in_micro_sec,json=bfdIntervalStandbyInMicroSec" json:"bfd_interval_standby_in_micro_sec,omitempty"`
	// BFD multiplier for standby LSP
	BfdMultiplierStandby uint32 `protobuf:"varint,60,opt,name=bfd_multiplier_standby,json=bfdMultiplierStandby" json:"bfd_multiplier_standby,omitempty"`
	// Time in seconds since tunnel went up
	TunnelUpTime uint32 `protobuf:"varint,61,opt,name=tunnel_up_time,json=tunnelUpTime" json:"tunnel_up_time,omitempty"`
	// OAM Protection Triggers
	OamProtectionTriggers *MplsTeTpOamProtTrigger `protobuf:"bytes,62,opt,name=oam_protection_triggers,json=oamProtectionTriggers" json:"oam_protection_triggers,omitempty"`
	// Switchover trigger
	SwitchoverTrig string `protobuf:"bytes,63,opt,name=switchover_trig,json=switchoverTrig" json:"switchover_trig,omitempty"`
	// The time at which last switchover was triggered
	SwitchOverTime       uint32   `protobuf:"varint,64,opt,name=switch_over_time,json=switchOverTime" json:"switch_over_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeTpDetailTunnelInfo) Reset()         { *m = MplsTeTpDetailTunnelInfo{} }
func (m *MplsTeTpDetailTunnelInfo) String() string { return proto.CompactTextString(m) }
func (*MplsTeTpDetailTunnelInfo) ProtoMessage()    {}
func (*MplsTeTpDetailTunnelInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_tp_detail_tunnel_info_83b9a4c77ff0b832, []int{1}
}
func (m *MplsTeTpDetailTunnelInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeTpDetailTunnelInfo.Unmarshal(m, b)
}
func (m *MplsTeTpDetailTunnelInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeTpDetailTunnelInfo.Marshal(b, m, deterministic)
}
func (dst *MplsTeTpDetailTunnelInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeTpDetailTunnelInfo.Merge(dst, src)
}
func (m *MplsTeTpDetailTunnelInfo) XXX_Size() int {
	return xxx_messageInfo_MplsTeTpDetailTunnelInfo.Size(m)
}
func (m *MplsTeTpDetailTunnelInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeTpDetailTunnelInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeTpDetailTunnelInfo proto.InternalMessageInfo

func (m *MplsTeTpDetailTunnelInfo) GetTunnel() *MplsTeTpTunnelInfo {
	if m != nil {
		return m.Tunnel
	}
	return nil
}

func (m *MplsTeTpDetailTunnelInfo) GetWorkingLsp() *MplsTeTpDetailTunnelLspInfo {
	if m != nil {
		return m.WorkingLsp
	}
	return nil
}

func (m *MplsTeTpDetailTunnelInfo) GetProtectLsp() *MplsTeTpDetailTunnelLspInfo {
	if m != nil {
		return m.ProtectLsp
	}
	return nil
}

func (m *MplsTeTpDetailTunnelInfo) GetReqBandwidth() uint32 {
	if m != nil {
		return m.ReqBandwidth
	}
	return 0
}

func (m *MplsTeTpDetailTunnelInfo) GetOamInterval() uint32 {
	if m != nil {
		return m.OamInterval
	}
	return 0
}

func (m *MplsTeTpDetailTunnelInfo) GetBfdIntervalActive() uint32 {
	if m != nil {
		return m.BfdIntervalActive
	}
	return 0
}

func (m *MplsTeTpDetailTunnelInfo) GetBfdIntervalActiveInMicroSec() bool {
	if m != nil {
		return m.BfdIntervalActiveInMicroSec
	}
	return false
}

func (m *MplsTeTpDetailTunnelInfo) GetBfdMultiplierActive() uint32 {
	if m != nil {
		return m.BfdMultiplierActive
	}
	return 0
}

func (m *MplsTeTpDetailTunnelInfo) GetBfdIntervalStandby() uint32 {
	if m != nil {
		return m.BfdIntervalStandby
	}
	return 0
}

func (m *MplsTeTpDetailTunnelInfo) GetBfdIntervalStandbyInMicroSec() bool {
	if m != nil {
		return m.BfdIntervalStandbyInMicroSec
	}
	return false
}

func (m *MplsTeTpDetailTunnelInfo) GetBfdMultiplierStandby() uint32 {
	if m != nil {
		return m.BfdMultiplierStandby
	}
	return 0
}

func (m *MplsTeTpDetailTunnelInfo) GetTunnelUpTime() uint32 {
	if m != nil {
		return m.TunnelUpTime
	}
	return 0
}

func (m *MplsTeTpDetailTunnelInfo) GetOamProtectionTriggers() *MplsTeTpOamProtTrigger {
	if m != nil {
		return m.OamProtectionTriggers
	}
	return nil
}

func (m *MplsTeTpDetailTunnelInfo) GetSwitchoverTrig() string {
	if m != nil {
		return m.SwitchoverTrig
	}
	return ""
}

func (m *MplsTeTpDetailTunnelInfo) GetSwitchOverTime() uint32 {
	if m != nil {
		return m.SwitchOverTime
	}
	return 0
}

// Transport profile LSP end-point information
type MplsTeTpTunnelLspInfo struct {
	// LSP identifier
	LspId uint32 `protobuf:"varint,1,opt,name=lsp_id,json=lspId" json:"lsp_id,omitempty"`
	// LSP state
	State string `protobuf:"bytes,2,opt,name=state" json:"state,omitempty"`
	// Lock out
	LockOut bool `protobuf:"varint,3,opt,name=lock_out,json=lockOut" json:"lock_out,omitempty"`
	// Received fault OAM state
	RxOamState string `protobuf:"bytes,4,opt,name=rx_oam_state,json=rxOamState" json:"rx_oam_state,omitempty"`
	// Transmitted fault OAM state
	TxOamState string `protobuf:"bytes,5,opt,name=tx_oam_state,json=txOamState" json:"tx_oam_state,omitempty"`
	// BFD state
	BfdState             string   `protobuf:"bytes,6,opt,name=bfd_state,json=bfdState" json:"bfd_state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeTpTunnelLspInfo) Reset()         { *m = MplsTeTpTunnelLspInfo{} }
func (m *MplsTeTpTunnelLspInfo) String() string { return proto.CompactTextString(m) }
func (*MplsTeTpTunnelLspInfo) ProtoMessage()    {}
func (*MplsTeTpTunnelLspInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_tp_detail_tunnel_info_83b9a4c77ff0b832, []int{2}
}
func (m *MplsTeTpTunnelLspInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeTpTunnelLspInfo.Unmarshal(m, b)
}
func (m *MplsTeTpTunnelLspInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeTpTunnelLspInfo.Marshal(b, m, deterministic)
}
func (dst *MplsTeTpTunnelLspInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeTpTunnelLspInfo.Merge(dst, src)
}
func (m *MplsTeTpTunnelLspInfo) XXX_Size() int {
	return xxx_messageInfo_MplsTeTpTunnelLspInfo.Size(m)
}
func (m *MplsTeTpTunnelLspInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeTpTunnelLspInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeTpTunnelLspInfo proto.InternalMessageInfo

func (m *MplsTeTpTunnelLspInfo) GetLspId() uint32 {
	if m != nil {
		return m.LspId
	}
	return 0
}

func (m *MplsTeTpTunnelLspInfo) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *MplsTeTpTunnelLspInfo) GetLockOut() bool {
	if m != nil {
		return m.LockOut
	}
	return false
}

func (m *MplsTeTpTunnelLspInfo) GetRxOamState() string {
	if m != nil {
		return m.RxOamState
	}
	return ""
}

func (m *MplsTeTpTunnelLspInfo) GetTxOamState() string {
	if m != nil {
		return m.TxOamState
	}
	return ""
}

func (m *MplsTeTpTunnelLspInfo) GetBfdState() string {
	if m != nil {
		return m.BfdState
	}
	return ""
}

// Transport profile LSP end-point detail information
type MplsTeTpDetailTunnelLspInfo struct {
	// Brief LSP information
	BriefInformation *MplsTeTpTunnelLspInfo `protobuf:"bytes,1,opt,name=brief_information,json=briefInformation" json:"brief_information,omitempty"`
	// OAM refresh interval
	OamRefreshInterval uint32 `protobuf:"varint,2,opt,name=oam_refresh_interval,json=oamRefreshInterval" json:"oam_refresh_interval,omitempty"`
	// Outgoing label
	TpOutLabel uint32 `protobuf:"varint,3,opt,name=tp_out_label,json=tpOutLabel" json:"tp_out_label,omitempty"`
	// Transport Profile Link Identifier
	LinkId uint32 `protobuf:"varint,4,opt,name=link_id,json=linkId" json:"link_id,omitempty"`
	// Outgoing interface name
	OutInterfaceName string `protobuf:"bytes,5,opt,name=out_interface_name,json=outInterfaceName" json:"out_interface_name,omitempty"`
	// Outgoing next hop in IPv4 address format
	OutNextHop string `protobuf:"bytes,6,opt,name=out_next_hop,json=outNextHop" json:"out_next_hop,omitempty"`
	// Incoming label
	InLabel uint32 `protobuf:"varint,7,opt,name=in_label,json=inLabel" json:"in_label,omitempty"`
	// Reserved Bandwidth in Kbps
	ReservedBandwidth    uint32   `protobuf:"varint,8,opt,name=reserved_bandwidth,json=reservedBandwidth" json:"reserved_bandwidth,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeTpDetailTunnelLspInfo) Reset()         { *m = MplsTeTpDetailTunnelLspInfo{} }
func (m *MplsTeTpDetailTunnelLspInfo) String() string { return proto.CompactTextString(m) }
func (*MplsTeTpDetailTunnelLspInfo) ProtoMessage()    {}
func (*MplsTeTpDetailTunnelLspInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_tp_detail_tunnel_info_83b9a4c77ff0b832, []int{3}
}
func (m *MplsTeTpDetailTunnelLspInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeTpDetailTunnelLspInfo.Unmarshal(m, b)
}
func (m *MplsTeTpDetailTunnelLspInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeTpDetailTunnelLspInfo.Marshal(b, m, deterministic)
}
func (dst *MplsTeTpDetailTunnelLspInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeTpDetailTunnelLspInfo.Merge(dst, src)
}
func (m *MplsTeTpDetailTunnelLspInfo) XXX_Size() int {
	return xxx_messageInfo_MplsTeTpDetailTunnelLspInfo.Size(m)
}
func (m *MplsTeTpDetailTunnelLspInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeTpDetailTunnelLspInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeTpDetailTunnelLspInfo proto.InternalMessageInfo

func (m *MplsTeTpDetailTunnelLspInfo) GetBriefInformation() *MplsTeTpTunnelLspInfo {
	if m != nil {
		return m.BriefInformation
	}
	return nil
}

func (m *MplsTeTpDetailTunnelLspInfo) GetOamRefreshInterval() uint32 {
	if m != nil {
		return m.OamRefreshInterval
	}
	return 0
}

func (m *MplsTeTpDetailTunnelLspInfo) GetTpOutLabel() uint32 {
	if m != nil {
		return m.TpOutLabel
	}
	return 0
}

func (m *MplsTeTpDetailTunnelLspInfo) GetLinkId() uint32 {
	if m != nil {
		return m.LinkId
	}
	return 0
}

func (m *MplsTeTpDetailTunnelLspInfo) GetOutInterfaceName() string {
	if m != nil {
		return m.OutInterfaceName
	}
	return ""
}

func (m *MplsTeTpDetailTunnelLspInfo) GetOutNextHop() string {
	if m != nil {
		return m.OutNextHop
	}
	return ""
}

func (m *MplsTeTpDetailTunnelLspInfo) GetInLabel() uint32 {
	if m != nil {
		return m.InLabel
	}
	return 0
}

func (m *MplsTeTpDetailTunnelLspInfo) GetReservedBandwidth() uint32 {
	if m != nil {
		return m.ReservedBandwidth
	}
	return 0
}

// Transport profile tunnel Information
type MplsTeTpTunnelInfo struct {
	// Transport profile tunnel name
	TunnelName string `protobuf:"bytes,1,opt,name=tunnel_name,json=tunnelName" json:"tunnel_name,omitempty"`
	// Source tunnel identifier
	SourceTunnelId uint32 `protobuf:"varint,2,opt,name=source_tunnel_id,json=sourceTunnelId" json:"source_tunnel_id,omitempty"`
	// Source node ID
	SourceNodeId string `protobuf:"bytes,3,opt,name=source_node_id,json=sourceNodeId" json:"source_node_id,omitempty"`
	// Source global ID
	SourceGlobalId uint32 `protobuf:"varint,4,opt,name=source_global_id,json=sourceGlobalId" json:"source_global_id,omitempty"`
	// Destination node ID
	DestinationNodeId string `protobuf:"bytes,5,opt,name=destination_node_id,json=destinationNodeId" json:"destination_node_id,omitempty"`
	// Destination global ID
	DestinationGlobalId uint32 `protobuf:"varint,6,opt,name=destination_global_id,json=destinationGlobalId" json:"destination_global_id,omitempty"`
	// Remote tunnel identifier
	RemoteTunnelId uint32 `protobuf:"varint,7,opt,name=remote_tunnel_id,json=remoteTunnelId" json:"remote_tunnel_id,omitempty"`
	// Tunnel admin status
	AdminStatus string `protobuf:"bytes,8,opt,name=admin_status,json=adminStatus" json:"admin_status,omitempty"`
	// Tunnel operational status
	OperationStatus string `protobuf:"bytes,9,opt,name=operation_status,json=operationStatus" json:"operation_status,omitempty"`
	// Working LSP information
	WorkingLsp *MplsTeTpTunnelLspInfo `protobuf:"bytes,10,opt,name=working_lsp,json=workingLsp" json:"working_lsp,omitempty"`
	// Protect LSP information
	ProtectLsp *MplsTeTpTunnelLspInfo `protobuf:"bytes,11,opt,name=protect_lsp,json=protectLsp" json:"protect_lsp,omitempty"`
	// Active LSP
	ActiveLsp            string   `protobuf:"bytes,12,opt,name=active_lsp,json=activeLsp" json:"active_lsp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeTpTunnelInfo) Reset()         { *m = MplsTeTpTunnelInfo{} }
func (m *MplsTeTpTunnelInfo) String() string { return proto.CompactTextString(m) }
func (*MplsTeTpTunnelInfo) ProtoMessage()    {}
func (*MplsTeTpTunnelInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_tp_detail_tunnel_info_83b9a4c77ff0b832, []int{4}
}
func (m *MplsTeTpTunnelInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeTpTunnelInfo.Unmarshal(m, b)
}
func (m *MplsTeTpTunnelInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeTpTunnelInfo.Marshal(b, m, deterministic)
}
func (dst *MplsTeTpTunnelInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeTpTunnelInfo.Merge(dst, src)
}
func (m *MplsTeTpTunnelInfo) XXX_Size() int {
	return xxx_messageInfo_MplsTeTpTunnelInfo.Size(m)
}
func (m *MplsTeTpTunnelInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeTpTunnelInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeTpTunnelInfo proto.InternalMessageInfo

func (m *MplsTeTpTunnelInfo) GetTunnelName() string {
	if m != nil {
		return m.TunnelName
	}
	return ""
}

func (m *MplsTeTpTunnelInfo) GetSourceTunnelId() uint32 {
	if m != nil {
		return m.SourceTunnelId
	}
	return 0
}

func (m *MplsTeTpTunnelInfo) GetSourceNodeId() string {
	if m != nil {
		return m.SourceNodeId
	}
	return ""
}

func (m *MplsTeTpTunnelInfo) GetSourceGlobalId() uint32 {
	if m != nil {
		return m.SourceGlobalId
	}
	return 0
}

func (m *MplsTeTpTunnelInfo) GetDestinationNodeId() string {
	if m != nil {
		return m.DestinationNodeId
	}
	return ""
}

func (m *MplsTeTpTunnelInfo) GetDestinationGlobalId() uint32 {
	if m != nil {
		return m.DestinationGlobalId
	}
	return 0
}

func (m *MplsTeTpTunnelInfo) GetRemoteTunnelId() uint32 {
	if m != nil {
		return m.RemoteTunnelId
	}
	return 0
}

func (m *MplsTeTpTunnelInfo) GetAdminStatus() string {
	if m != nil {
		return m.AdminStatus
	}
	return ""
}

func (m *MplsTeTpTunnelInfo) GetOperationStatus() string {
	if m != nil {
		return m.OperationStatus
	}
	return ""
}

func (m *MplsTeTpTunnelInfo) GetWorkingLsp() *MplsTeTpTunnelLspInfo {
	if m != nil {
		return m.WorkingLsp
	}
	return nil
}

func (m *MplsTeTpTunnelInfo) GetProtectLsp() *MplsTeTpTunnelLspInfo {
	if m != nil {
		return m.ProtectLsp
	}
	return nil
}

func (m *MplsTeTpTunnelInfo) GetActiveLsp() string {
	if m != nil {
		return m.ActiveLsp
	}
	return ""
}

// Transport profile tunnel OAM protection triggers
type MplsTeTpOamProtTrigger struct {
	// Trigger due to AIS
	Ais bool `protobuf:"varint,1,opt,name=ais" json:"ais,omitempty"`
	// Trigger due to LDI
	Ldi bool `protobuf:"varint,2,opt,name=ldi" json:"ldi,omitempty"`
	// Trigger due to LKR
	Lkr                  bool     `protobuf:"varint,3,opt,name=lkr" json:"lkr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeTpOamProtTrigger) Reset()         { *m = MplsTeTpOamProtTrigger{} }
func (m *MplsTeTpOamProtTrigger) String() string { return proto.CompactTextString(m) }
func (*MplsTeTpOamProtTrigger) ProtoMessage()    {}
func (*MplsTeTpOamProtTrigger) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_tp_detail_tunnel_info_83b9a4c77ff0b832, []int{5}
}
func (m *MplsTeTpOamProtTrigger) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeTpOamProtTrigger.Unmarshal(m, b)
}
func (m *MplsTeTpOamProtTrigger) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeTpOamProtTrigger.Marshal(b, m, deterministic)
}
func (dst *MplsTeTpOamProtTrigger) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeTpOamProtTrigger.Merge(dst, src)
}
func (m *MplsTeTpOamProtTrigger) XXX_Size() int {
	return xxx_messageInfo_MplsTeTpOamProtTrigger.Size(m)
}
func (m *MplsTeTpOamProtTrigger) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeTpOamProtTrigger.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeTpOamProtTrigger proto.InternalMessageInfo

func (m *MplsTeTpOamProtTrigger) GetAis() bool {
	if m != nil {
		return m.Ais
	}
	return false
}

func (m *MplsTeTpOamProtTrigger) GetLdi() bool {
	if m != nil {
		return m.Ldi
	}
	return false
}

func (m *MplsTeTpOamProtTrigger) GetLkr() bool {
	if m != nil {
		return m.Lkr
	}
	return false
}

func init() {
	proto.RegisterType((*MplsTeTpDetailTunnelInfo_KEYS)(nil), "cisco_ios_xr_mpls_te_oper.mpls_tp.tp_tunnels.tp_detail_tunnels.tp_detail_tunnel.mpls_te_tp_detail_tunnel_info_KEYS")
	proto.RegisterType((*MplsTeTpDetailTunnelInfo)(nil), "cisco_ios_xr_mpls_te_oper.mpls_tp.tp_tunnels.tp_detail_tunnels.tp_detail_tunnel.mpls_te_tp_detail_tunnel_info")
	proto.RegisterType((*MplsTeTpTunnelLspInfo)(nil), "cisco_ios_xr_mpls_te_oper.mpls_tp.tp_tunnels.tp_detail_tunnels.tp_detail_tunnel.mpls_te_tp_tunnel_lsp_info")
	proto.RegisterType((*MplsTeTpDetailTunnelLspInfo)(nil), "cisco_ios_xr_mpls_te_oper.mpls_tp.tp_tunnels.tp_detail_tunnels.tp_detail_tunnel.mpls_te_tp_detail_tunnel_lsp_info")
	proto.RegisterType((*MplsTeTpTunnelInfo)(nil), "cisco_ios_xr_mpls_te_oper.mpls_tp.tp_tunnels.tp_detail_tunnels.tp_detail_tunnel.mpls_te_tp_tunnel_info")
	proto.RegisterType((*MplsTeTpOamProtTrigger)(nil), "cisco_ios_xr_mpls_te_oper.mpls_tp.tp_tunnels.tp_detail_tunnels.tp_detail_tunnel.mpls_te_tp_oam_prot_trigger")
}

func init() {
	proto.RegisterFile("mpls_te_tp_detail_tunnel_info.proto", fileDescriptor_mpls_te_tp_detail_tunnel_info_83b9a4c77ff0b832)
}

var fileDescriptor_mpls_te_tp_detail_tunnel_info_83b9a4c77ff0b832 = []byte{
	// 1002 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0xdd, 0x6e, 0xdb, 0x36,
	0x14, 0x86, 0x9b, 0xc6, 0xb1, 0x8f, 0x9d, 0xd4, 0xe1, 0x92, 0x56, 0x5b, 0x56, 0xcc, 0x71, 0x07,
	0xcc, 0x03, 0x36, 0x63, 0x70, 0xbb, 0xff, 0xff, 0x01, 0x45, 0xe7, 0x2d, 0x8d, 0x07, 0x39, 0xbb,
	0xd8, 0x15, 0x21, 0x8b, 0xb4, 0x43, 0x58, 0x12, 0x55, 0x8a, 0x4a, 0xbc, 0xab, 0xbd, 0x40, 0x2f,
	0x06, 0xec, 0x66, 0x0f, 0xb0, 0x57, 0xe9, 0xdd, 0x1e, 0x6a, 0xe0, 0x21, 0x25, 0x2b, 0x71, 0x90,
	0xdd, 0xb4, 0xcd, 0x9d, 0xf8, 0x9d, 0xef, 0xf0, 0xfb, 0x78, 0x48, 0x1e, 0x0a, 0x1e, 0xc4, 0x69,
	0x94, 0x51, 0xcd, 0xa9, 0x4e, 0x29, 0xe3, 0x3a, 0x10, 0x11, 0xd5, 0x79, 0x92, 0xf0, 0x88, 0x8a,
	0x64, 0x26, 0x07, 0xa9, 0x92, 0x5a, 0x92, 0x71, 0x28, 0xb2, 0x50, 0x52, 0x21, 0x33, 0xba, 0x54,
	0xb4, 0xc8, 0x90, 0x29, 0x57, 0x03, 0x3b, 0x48, 0x07, 0x3a, 0x75, 0x79, 0xd9, 0xe0, 0xf2, 0x4c,
	0xeb, 0x48, 0xef, 0x27, 0xe8, 0x5d, 0xab, 0x4b, 0x7f, 0x7e, 0xfc, 0xdb, 0x84, 0xbc, 0x0b, 0x3b,
	0xe5, 0xb4, 0x34, 0x09, 0x62, 0xee, 0xd5, 0xba, 0xb5, 0x7e, 0xd3, 0x6f, 0xeb, 0xf4, 0x04, 0xc1,
	0xe3, 0x20, 0xe6, 0xbd, 0x3f, 0x9b, 0x70, 0xff, 0xda, 0xc9, 0xc8, 0x1f, 0x50, 0xb7, 0x43, 0x6f,
	0xd8, 0xad, 0xf5, 0x5b, 0xc3, 0xf9, 0xe0, 0x25, 0xaf, 0x67, 0x50, 0xd1, 0xaf, 0x08, 0xfb, 0x4e,
	0x96, 0xfc, 0x55, 0x83, 0xd6, 0xb9, 0x54, 0x0b, 0x91, 0xcc, 0x69, 0x94, 0xa5, 0xde, 0x43, 0xb4,
	0xa1, 0x5e, 0xa5, 0x8d, 0x8b, 0x65, 0x88, 0xb2, 0xd4, 0x3a, 0x02, 0x67, 0xe3, 0x28, 0x4b, 0xd1,
	0x95, 0xd9, 0x5f, 0x1e, 0x6a, 0x74, 0xf5, 0xe8, 0xe6, 0x5c, 0x39, 0x1b, 0xc6, 0xd5, 0x03, 0xd8,
	0x56, 0xfc, 0x19, 0x9d, 0x06, 0x09, 0x3b, 0x17, 0x4c, 0x9f, 0x7a, 0x1f, 0x77, 0x6b, 0xfd, 0x6d,
	0xbf, 0xad, 0xf8, 0xb3, 0x1f, 0x0a, 0x8c, 0x1c, 0x42, 0x5b, 0x06, 0x31, 0x15, 0x89, 0xe6, 0xea,
	0x2c, 0x88, 0xbc, 0x4f, 0x90, 0xd3, 0x92, 0x41, 0x3c, 0x72, 0x10, 0x19, 0xc0, 0x1b, 0xd3, 0x19,
	0x2b, 0x29, 0x34, 0x08, 0xb5, 0x38, 0xe3, 0xde, 0xa7, 0xc8, 0xdc, 0x9d, 0xce, 0x58, 0xc1, 0xfc,
	0x1e, 0x03, 0xe4, 0x31, 0x74, 0xaf, 0xe0, 0x53, 0x91, 0xd0, 0x58, 0x84, 0x4a, 0xd2, 0x8c, 0x87,
	0xde, 0x67, 0xdd, 0x5a, 0xbf, 0xe1, 0x1f, 0xac, 0x25, 0x8f, 0x92, 0xa7, 0x86, 0x33, 0xe1, 0x21,
	0x19, 0xc2, 0xbe, 0x99, 0x26, 0xce, 0x23, 0x2d, 0xd2, 0x48, 0x70, 0x55, 0x08, 0x7f, 0x8e, 0xc2,
	0xc6, 0xd3, 0xd3, 0x32, 0xe6, 0xa4, 0x3f, 0x82, 0xbd, 0x0b, 0xd2, 0x99, 0x0e, 0x12, 0x36, 0xfd,
	0xdd, 0xfb, 0x02, 0x53, 0x48, 0x45, 0x6e, 0x62, 0x23, 0xe4, 0x09, 0x1c, 0x5e, 0x95, 0x71, 0xd1,
	0xed, 0x97, 0xe8, 0xf6, 0xed, 0xf5, 0xf4, 0x8a, 0xdd, 0x47, 0x70, 0xf7, 0x92, 0xdd, 0x42, 0xfc,
	0x2b, 0x14, 0xdf, 0xbb, 0xe0, 0xb7, 0x90, 0x37, 0x17, 0xd3, 0x6e, 0x61, 0x9e, 0x52, 0x2d, 0x62,
	0xee, 0x7d, 0x6d, 0x37, 0xc9, 0xa2, 0xbf, 0xa6, 0x27, 0x22, 0xe6, 0xe4, 0x9f, 0x1a, 0xdc, 0x33,
	0xbb, 0xe4, 0x36, 0x57, 0xc8, 0x84, 0x6a, 0x25, 0xe6, 0x73, 0xae, 0x32, 0xef, 0x1b, 0x3c, 0x6b,
	0xd1, 0xab, 0x3c, 0x6b, 0x85, 0x74, 0x21, 0xea, 0xef, 0xcb, 0x20, 0xfe, 0xa5, 0xf4, 0x72, 0xe2,
	0xac, 0x90, 0xf7, 0xe0, 0x4e, 0x76, 0x2e, 0x74, 0x78, 0x2a, 0xcf, 0xb8, 0x42, 0xb2, 0xf7, 0x2d,
	0xb6, 0x99, 0x9d, 0x15, 0x6c, 0xc8, 0xa4, 0x0f, 0x1d, 0x8b, 0x50, 0xcb, 0x34, 0xeb, 0xfe, 0x0e,
	0xd7, 0xed, 0x98, 0x63, 0xc3, 0x14, 0x31, 0xef, 0xbd, 0xa8, 0xc1, 0x5b, 0xeb, 0x2d, 0xa1, 0x38,
	0xee, 0x64, 0x1f, 0xea, 0xf8, 0xcd, 0xb0, 0x9f, 0x6d, 0xfb, 0x9b, 0x51, 0x96, 0x8e, 0x18, 0xd9,
	0x83, 0xcd, 0x4c, 0x07, 0x9a, 0x7b, 0xb7, 0x50, 0xde, 0x0e, 0xc8, 0x9b, 0xd0, 0x88, 0x64, 0xb8,
	0xa0, 0x32, 0xd7, 0xde, 0x06, 0xee, 0xe8, 0x96, 0x19, 0x8f, 0x73, 0x4d, 0xba, 0xd0, 0x56, 0x4b,
	0x5c, 0xa7, 0xcd, 0xbb, 0x8d, 0x79, 0xa0, 0x96, 0xe3, 0x20, 0x9e, 0x60, 0x72, 0x17, 0xda, 0xba,
	0xca, 0xd8, 0xb4, 0x0c, 0xbd, 0x62, 0x1c, 0x40, 0xd3, 0x1c, 0x00, 0x1b, 0xae, 0x63, 0xb8, 0x31,
	0x9d, 0x31, 0x0c, 0xf6, 0x5e, 0x6c, 0xc0, 0xe1, 0xff, 0xde, 0x5e, 0xf2, 0x77, 0x0d, 0x76, 0xa7,
	0x4a, 0xf0, 0x19, 0x0e, 0x55, 0x1c, 0x98, 0xf2, 0xe2, 0xd2, 0x5a, 0xc3, 0xc5, 0x6b, 0x68, 0xb5,
	0x65, 0x1b, 0xe9, 0xa0, 0x8b, 0xd1, 0xca, 0x84, 0xb9, 0x59, 0x66, 0xf1, 0x8a, 0xcf, 0x14, 0xcf,
	0x4e, 0x57, 0xfd, 0xe2, 0x96, 0xbd, 0x59, 0x32, 0x88, 0x7d, 0x1b, 0x2a, 0xdb, 0x86, 0xa9, 0x58,
	0x6a, 0x8a, 0x4d, 0xa3, 0x60, 0xca, 0x23, 0x2c, 0xf9, 0xb6, 0x0f, 0x3a, 0x1d, 0xe7, 0xfa, 0xc8,
	0x20, 0xe4, 0x1e, 0x6c, 0x45, 0x22, 0x59, 0x98, 0xed, 0xbb, 0x8d, 0xc1, 0xba, 0x19, 0x8e, 0x18,
	0xf9, 0x00, 0x88, 0xc9, 0x43, 0x91, 0x59, 0x10, 0x72, 0xfb, 0x64, 0xd9, 0x92, 0x77, 0x64, 0xae,
	0x47, 0x45, 0xc0, 0x3c, 0x5b, 0x46, 0xc8, 0xb0, 0x13, 0xbe, 0xd4, 0xf4, 0x54, 0xa6, 0xae, 0xf6,
	0x20, 0x73, 0x7d, 0xcc, 0x97, 0xfa, 0x47, 0x99, 0x9a, 0x9d, 0x17, 0x89, 0xb3, 0xb1, 0x85, 0x4a,
	0x5b, 0x22, 0xb1, 0x1e, 0x3e, 0x04, 0xa2, 0x78, 0xc6, 0xd5, 0x19, 0x67, 0x95, 0x4e, 0xd9, 0xb0,
	0xbd, 0xad, 0x88, 0x94, 0xed, 0xb2, 0xf7, 0xef, 0x26, 0xdc, 0xbd, 0xfa, 0x89, 0x22, 0xef, 0x40,
	0x6b, 0xfd, 0x81, 0x05, 0x5d, 0x3e, 0xaf, 0x78, 0xea, 0x65, 0xae, 0x42, 0x5e, 0xa6, 0x31, 0x57,
	0xbe, 0x1d, 0x8b, 0xdb, 0xa7, 0x78, 0xc4, 0x4c, 0x57, 0x70, 0xcc, 0x44, 0x32, 0x6e, 0x78, 0x1b,
	0xf6, 0xb9, 0xb6, 0xe8, 0xb1, 0x64, 0x7c, 0xc4, 0x2a, 0xf3, 0xcd, 0x23, 0x39, 0x0d, 0xa2, 0x55,
	0x1d, 0x5d, 0xf6, 0x13, 0x84, 0x47, 0xcc, 0x74, 0x70, 0xc6, 0x33, 0x2d, 0x12, 0xdc, 0xcb, 0x72,
	0x52, 0x5b, 0xd0, 0xdd, 0x4a, 0xc8, 0xcd, 0x3c, 0x84, 0xfd, 0x2a, 0x7f, 0x35, 0x7d, 0xdd, 0xb6,
	0xde, 0x4a, 0xb0, 0xd4, 0xe8, 0x43, 0x47, 0xf1, 0x58, 0xea, 0xea, 0xea, 0x6c, 0xad, 0x77, 0x2c,
	0x5e, 0xae, 0xee, 0x10, 0xda, 0x01, 0x8b, 0x45, 0x82, 0x57, 0x25, 0xcf, 0xb0, 0xd8, 0x4d, 0xbf,
	0x85, 0xd8, 0x04, 0x21, 0xf2, 0x3e, 0x74, 0xcc, 0xc1, 0xb6, 0xf2, 0x8e, 0xd6, 0x44, 0xda, 0x9d,
	0x12, 0x77, 0xd4, 0xe7, 0x97, 0xfe, 0x08, 0xe0, 0xf5, 0xdf, 0x96, 0xea, 0xaf, 0xc0, 0xf3, 0x4b,
	0xbf, 0x02, 0xad, 0x1b, 0xb0, 0x53, 0xf9, 0x07, 0xb8, 0x0f, 0xe0, 0x9e, 0x5f, 0x63, 0xa6, 0x8d,
	0x25, 0x6c, 0x5a, 0xe4, 0x28, 0x4b, 0x7b, 0x13, 0x38, 0xb8, 0xa6, 0xcf, 0x93, 0x0e, 0x6c, 0x04,
	0x22, 0xc3, 0xa3, 0xdc, 0xf0, 0xcd, 0xa7, 0x41, 0x22, 0x26, 0xf0, 0xd8, 0x36, 0x7c, 0xf3, 0x89,
	0xc8, 0x42, 0xb9, 0x86, 0x6a, 0x3e, 0xa7, 0x75, 0xfc, 0xd5, 0x7d, 0xf8, 0x5f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x96, 0x6d, 0x38, 0xbb, 0x11, 0x0b, 0x00, 0x00,
}
