// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mpls_te_tp_tunnel_info.proto

package cisco_ios_xr_mpls_te_oper_mpls_tp_tp_tunnels_tp_tunnels_tp_tunnel

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Transport profile tunnel Information
type MplsTeTpTunnelInfo_KEYS struct {
	TpTunnelName         string   `protobuf:"bytes,1,opt,name=tp_tunnel_name,json=tpTunnelName" json:"tp_tunnel_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeTpTunnelInfo_KEYS) Reset()         { *m = MplsTeTpTunnelInfo_KEYS{} }
func (m *MplsTeTpTunnelInfo_KEYS) String() string { return proto.CompactTextString(m) }
func (*MplsTeTpTunnelInfo_KEYS) ProtoMessage()    {}
func (*MplsTeTpTunnelInfo_KEYS) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_tp_tunnel_info_6d74712cfce97417, []int{0}
}
func (m *MplsTeTpTunnelInfo_KEYS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeTpTunnelInfo_KEYS.Unmarshal(m, b)
}
func (m *MplsTeTpTunnelInfo_KEYS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeTpTunnelInfo_KEYS.Marshal(b, m, deterministic)
}
func (dst *MplsTeTpTunnelInfo_KEYS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeTpTunnelInfo_KEYS.Merge(dst, src)
}
func (m *MplsTeTpTunnelInfo_KEYS) XXX_Size() int {
	return xxx_messageInfo_MplsTeTpTunnelInfo_KEYS.Size(m)
}
func (m *MplsTeTpTunnelInfo_KEYS) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeTpTunnelInfo_KEYS.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeTpTunnelInfo_KEYS proto.InternalMessageInfo

func (m *MplsTeTpTunnelInfo_KEYS) GetTpTunnelName() string {
	if m != nil {
		return m.TpTunnelName
	}
	return ""
}

type MplsTeTpTunnelInfo struct {
	// Transport profile tunnel name
	TunnelName string `protobuf:"bytes,50,opt,name=tunnel_name,json=tunnelName" json:"tunnel_name,omitempty"`
	// Source tunnel identifier
	SourceTunnelId uint32 `protobuf:"varint,51,opt,name=source_tunnel_id,json=sourceTunnelId" json:"source_tunnel_id,omitempty"`
	// Source node ID
	SourceNodeId string `protobuf:"bytes,52,opt,name=source_node_id,json=sourceNodeId" json:"source_node_id,omitempty"`
	// Source global ID
	SourceGlobalId uint32 `protobuf:"varint,53,opt,name=source_global_id,json=sourceGlobalId" json:"source_global_id,omitempty"`
	// Destination node ID
	DestinationNodeId string `protobuf:"bytes,54,opt,name=destination_node_id,json=destinationNodeId" json:"destination_node_id,omitempty"`
	// Destination global ID
	DestinationGlobalId uint32 `protobuf:"varint,55,opt,name=destination_global_id,json=destinationGlobalId" json:"destination_global_id,omitempty"`
	// Remote tunnel identifier
	RemoteTunnelId uint32 `protobuf:"varint,56,opt,name=remote_tunnel_id,json=remoteTunnelId" json:"remote_tunnel_id,omitempty"`
	// Tunnel admin status
	AdminStatus string `protobuf:"bytes,57,opt,name=admin_status,json=adminStatus" json:"admin_status,omitempty"`
	// Tunnel operational status
	OperationStatus string `protobuf:"bytes,58,opt,name=operation_status,json=operationStatus" json:"operation_status,omitempty"`
	// Working LSP information
	WorkingLsp *MplsTeTpTunnelLspInfo `protobuf:"bytes,59,opt,name=working_lsp,json=workingLsp" json:"working_lsp,omitempty"`
	// Protect LSP information
	ProtectLsp *MplsTeTpTunnelLspInfo `protobuf:"bytes,60,opt,name=protect_lsp,json=protectLsp" json:"protect_lsp,omitempty"`
	// Active LSP
	ActiveLsp            string   `protobuf:"bytes,61,opt,name=active_lsp,json=activeLsp" json:"active_lsp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeTpTunnelInfo) Reset()         { *m = MplsTeTpTunnelInfo{} }
func (m *MplsTeTpTunnelInfo) String() string { return proto.CompactTextString(m) }
func (*MplsTeTpTunnelInfo) ProtoMessage()    {}
func (*MplsTeTpTunnelInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_tp_tunnel_info_6d74712cfce97417, []int{1}
}
func (m *MplsTeTpTunnelInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeTpTunnelInfo.Unmarshal(m, b)
}
func (m *MplsTeTpTunnelInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeTpTunnelInfo.Marshal(b, m, deterministic)
}
func (dst *MplsTeTpTunnelInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeTpTunnelInfo.Merge(dst, src)
}
func (m *MplsTeTpTunnelInfo) XXX_Size() int {
	return xxx_messageInfo_MplsTeTpTunnelInfo.Size(m)
}
func (m *MplsTeTpTunnelInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeTpTunnelInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeTpTunnelInfo proto.InternalMessageInfo

func (m *MplsTeTpTunnelInfo) GetTunnelName() string {
	if m != nil {
		return m.TunnelName
	}
	return ""
}

func (m *MplsTeTpTunnelInfo) GetSourceTunnelId() uint32 {
	if m != nil {
		return m.SourceTunnelId
	}
	return 0
}

func (m *MplsTeTpTunnelInfo) GetSourceNodeId() string {
	if m != nil {
		return m.SourceNodeId
	}
	return ""
}

func (m *MplsTeTpTunnelInfo) GetSourceGlobalId() uint32 {
	if m != nil {
		return m.SourceGlobalId
	}
	return 0
}

func (m *MplsTeTpTunnelInfo) GetDestinationNodeId() string {
	if m != nil {
		return m.DestinationNodeId
	}
	return ""
}

func (m *MplsTeTpTunnelInfo) GetDestinationGlobalId() uint32 {
	if m != nil {
		return m.DestinationGlobalId
	}
	return 0
}

func (m *MplsTeTpTunnelInfo) GetRemoteTunnelId() uint32 {
	if m != nil {
		return m.RemoteTunnelId
	}
	return 0
}

func (m *MplsTeTpTunnelInfo) GetAdminStatus() string {
	if m != nil {
		return m.AdminStatus
	}
	return ""
}

func (m *MplsTeTpTunnelInfo) GetOperationStatus() string {
	if m != nil {
		return m.OperationStatus
	}
	return ""
}

func (m *MplsTeTpTunnelInfo) GetWorkingLsp() *MplsTeTpTunnelLspInfo {
	if m != nil {
		return m.WorkingLsp
	}
	return nil
}

func (m *MplsTeTpTunnelInfo) GetProtectLsp() *MplsTeTpTunnelLspInfo {
	if m != nil {
		return m.ProtectLsp
	}
	return nil
}

func (m *MplsTeTpTunnelInfo) GetActiveLsp() string {
	if m != nil {
		return m.ActiveLsp
	}
	return ""
}

// Transport profile LSP end-point information
type MplsTeTpTunnelLspInfo struct {
	// LSP identifier
	LspId uint32 `protobuf:"varint,1,opt,name=lsp_id,json=lspId" json:"lsp_id,omitempty"`
	// LSP state
	State string `protobuf:"bytes,2,opt,name=state" json:"state,omitempty"`
	// Lock out
	LockOut bool `protobuf:"varint,3,opt,name=lock_out,json=lockOut" json:"lock_out,omitempty"`
	// Received fault OAM state
	RxOamState string `protobuf:"bytes,4,opt,name=rx_oam_state,json=rxOamState" json:"rx_oam_state,omitempty"`
	// Transmitted fault OAM state
	TxOamState string `protobuf:"bytes,5,opt,name=tx_oam_state,json=txOamState" json:"tx_oam_state,omitempty"`
	// BFD state
	BfdState             string   `protobuf:"bytes,6,opt,name=bfd_state,json=bfdState" json:"bfd_state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsTeTpTunnelLspInfo) Reset()         { *m = MplsTeTpTunnelLspInfo{} }
func (m *MplsTeTpTunnelLspInfo) String() string { return proto.CompactTextString(m) }
func (*MplsTeTpTunnelLspInfo) ProtoMessage()    {}
func (*MplsTeTpTunnelLspInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_mpls_te_tp_tunnel_info_6d74712cfce97417, []int{2}
}
func (m *MplsTeTpTunnelLspInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsTeTpTunnelLspInfo.Unmarshal(m, b)
}
func (m *MplsTeTpTunnelLspInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsTeTpTunnelLspInfo.Marshal(b, m, deterministic)
}
func (dst *MplsTeTpTunnelLspInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsTeTpTunnelLspInfo.Merge(dst, src)
}
func (m *MplsTeTpTunnelLspInfo) XXX_Size() int {
	return xxx_messageInfo_MplsTeTpTunnelLspInfo.Size(m)
}
func (m *MplsTeTpTunnelLspInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsTeTpTunnelLspInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MplsTeTpTunnelLspInfo proto.InternalMessageInfo

func (m *MplsTeTpTunnelLspInfo) GetLspId() uint32 {
	if m != nil {
		return m.LspId
	}
	return 0
}

func (m *MplsTeTpTunnelLspInfo) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *MplsTeTpTunnelLspInfo) GetLockOut() bool {
	if m != nil {
		return m.LockOut
	}
	return false
}

func (m *MplsTeTpTunnelLspInfo) GetRxOamState() string {
	if m != nil {
		return m.RxOamState
	}
	return ""
}

func (m *MplsTeTpTunnelLspInfo) GetTxOamState() string {
	if m != nil {
		return m.TxOamState
	}
	return ""
}

func (m *MplsTeTpTunnelLspInfo) GetBfdState() string {
	if m != nil {
		return m.BfdState
	}
	return ""
}

func init() {
	proto.RegisterType((*MplsTeTpTunnelInfo_KEYS)(nil), "cisco_ios_xr_mpls_te_oper.mpls_tp.tp_tunnels.tp_tunnels.tp_tunnel.mpls_te_tp_tunnel_info_KEYS")
	proto.RegisterType((*MplsTeTpTunnelInfo)(nil), "cisco_ios_xr_mpls_te_oper.mpls_tp.tp_tunnels.tp_tunnels.tp_tunnel.mpls_te_tp_tunnel_info")
	proto.RegisterType((*MplsTeTpTunnelLspInfo)(nil), "cisco_ios_xr_mpls_te_oper.mpls_tp.tp_tunnels.tp_tunnels.tp_tunnel.mpls_te_tp_tunnel_lsp_info")
}

func init() {
	proto.RegisterFile("mpls_te_tp_tunnel_info.proto", fileDescriptor_mpls_te_tp_tunnel_info_6d74712cfce97417)
}

var fileDescriptor_mpls_te_tp_tunnel_info_6d74712cfce97417 = []byte{
	// 473 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x54, 0xcd, 0x8e, 0xd3, 0x30,
	0x10, 0x56, 0x80, 0x96, 0x76, 0xda, 0x5d, 0x8a, 0x61, 0x51, 0x60, 0x41, 0x84, 0x8a, 0x43, 0xb8,
	0xe4, 0xd0, 0xe5, 0xff, 0xe7, 0x80, 0x10, 0x42, 0x15, 0xab, 0x5d, 0x29, 0xe5, 0xc2, 0x01, 0x59,
	0x4e, 0xec, 0xae, 0xa2, 0x26, 0xb6, 0x15, 0x3b, 0xd0, 0x13, 0x8f, 0xc4, 0x5b, 0xf0, 0x5e, 0x28,
	0xe3, 0x90, 0x5a, 0xa2, 0x9c, 0x90, 0xb8, 0xd9, 0xdf, 0x7c, 0x3f, 0x63, 0x7b, 0x12, 0xb8, 0x5b,
	0xe9, 0xd2, 0x50, 0x2b, 0xa8, 0xd5, 0xd4, 0x36, 0x52, 0x8a, 0x92, 0x16, 0x72, 0xad, 0x12, 0x5d,
	0x2b, 0xab, 0xc8, 0xdb, 0xbc, 0x30, 0xb9, 0xa2, 0x85, 0x32, 0x74, 0x5b, 0xd3, 0xdf, 0x54, 0xa5,
	0x45, 0x9d, 0xb8, 0x8d, 0x4e, 0x7a, 0x9d, 0xd9, 0xbb, 0x9c, 0xbf, 0x83, 0xe3, 0xfd, 0x11, 0xf4,
	0xe3, 0xfb, 0xcf, 0x2b, 0xf2, 0x10, 0x0e, 0x77, 0xb0, 0x64, 0x95, 0x08, 0x83, 0x28, 0x88, 0xc7,
	0xe9, 0xd4, 0xea, 0x4f, 0x08, 0x9e, 0xb1, 0x4a, 0xcc, 0x7f, 0x0c, 0xe0, 0xd6, 0x7e, 0x17, 0x72,
	0x1f, 0x26, 0xbe, 0x7a, 0x81, 0x6a, 0xb0, 0xbd, 0x96, 0xc4, 0x30, 0x33, 0xaa, 0xa9, 0x73, 0xd1,
	0xcb, 0x78, 0x78, 0x12, 0x05, 0xf1, 0x41, 0x7a, 0xe8, 0x70, 0x97, 0xb3, 0xe4, 0x6d, 0x2f, 0x1d,
	0x53, 0x2a, 0x2e, 0x5a, 0xde, 0x63, 0xd7, 0x8b, 0x43, 0xcf, 0x14, 0x17, 0x4b, 0xee, 0xf9, 0x5d,
	0x94, 0x2a, 0x63, 0xe8, 0xf7, 0xc4, 0xf7, 0xfb, 0x80, 0xf0, 0x92, 0x93, 0x04, 0x6e, 0x70, 0x61,
	0x6c, 0x21, 0x99, 0x2d, 0x94, 0xec, 0x4d, 0x9f, 0xa2, 0xe9, 0x75, 0xaf, 0xd4, 0x39, 0x2f, 0xe0,
	0xc8, 0xe7, 0xef, 0xec, 0x9f, 0xa1, 0xbd, 0x6f, 0xd6, 0x67, 0xc4, 0x30, 0xab, 0x45, 0xa5, 0xac,
	0x7f, 0xba, 0xe7, 0xae, 0x1b, 0x87, 0xf7, 0xa7, 0x7b, 0x00, 0x53, 0xc6, 0xab, 0x42, 0x52, 0x63,
	0x99, 0x6d, 0x4c, 0xf8, 0x02, 0xdb, 0x98, 0x20, 0xb6, 0x42, 0x88, 0x3c, 0x82, 0x59, 0xfb, 0xb6,
	0x2e, 0xbe, 0xa3, 0xbd, 0x44, 0xda, 0xb5, 0x1e, 0xef, 0xa8, 0xdf, 0x61, 0xf2, 0x4d, 0xd5, 0x9b,
	0x42, 0x5e, 0xd0, 0xd2, 0xe8, 0xf0, 0x55, 0x14, 0xc4, 0x93, 0xc5, 0x97, 0xe4, 0x9f, 0xe7, 0x25,
	0xf9, 0xf3, 0x99, 0x4b, 0xa3, 0xf1, 0xa9, 0x53, 0xe8, 0x12, 0x4f, 0x8d, 0x6e, 0xf3, 0xdb, 0x11,
	0x15, 0xb9, 0xc5, 0xfc, 0xd7, 0xff, 0x25, 0xbf, 0x4b, 0x6c, 0xf3, 0xef, 0x01, 0xb0, 0xdc, 0x16,
	0x5f, 0x05, 0xc6, 0xbf, 0xc1, 0x4b, 0x1a, 0x3b, 0xe4, 0xd4, 0xe8, 0xf9, 0xcf, 0x00, 0xee, 0xfc,
	0xdd, 0x89, 0x1c, 0xc1, 0x10, 0xd7, 0x1c, 0xa7, 0xfd, 0x20, 0x1d, 0x94, 0x46, 0x2f, 0x39, 0xb9,
	0x09, 0x83, 0xf6, 0xd6, 0x45, 0x78, 0x09, 0xfd, 0xdc, 0x86, 0xdc, 0x86, 0x51, 0xa9, 0xf2, 0x0d,
	0x55, 0x8d, 0x0d, 0x2f, 0x47, 0x41, 0x3c, 0x4a, 0xaf, 0xb6, 0xfb, 0xf3, 0xc6, 0x92, 0x08, 0xa6,
	0xf5, 0x96, 0x2a, 0x56, 0x51, 0xa7, 0xbb, 0xe2, 0xa6, 0xbf, 0xde, 0x9e, 0xb3, 0x6a, 0x85, 0xe2,
	0x08, 0xa6, 0xd6, 0x67, 0x0c, 0xba, 0xef, 0x63, 0xc7, 0x38, 0x86, 0x71, 0xb6, 0xe6, 0x5d, 0x79,
	0x88, 0xe5, 0x51, 0xb6, 0xe6, 0x58, 0xcc, 0x86, 0xf8, 0x1f, 0x38, 0xf9, 0x15, 0x00, 0x00, 0xff,
	0xff, 0x0a, 0x5b, 0x3f, 0xbd, 0x27, 0x04, 0x00, 0x00,
}
